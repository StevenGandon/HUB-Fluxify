
[4mGCC[24m(1)                                                   GNU                                                   [4mGCC[24m(1)

[1mNAME[0m
       gcc - GNU project C and C++ compiler

[1mSYNOPSIS[0m
       gcc [[1m-c[22m|[1m-S[22m|[1m-E[22m] [[1m-std=[4m[22mstandard[24m]
           [[1m-g[22m] [[1m-pg[22m] [[1m-O[4m[22mlevel[24m]
           [[1m-W[4m[22mwarn[24m...] [[1m-Wpedantic[22m]
           [[1m-I[4m[22mdir[24m...] [[1m-L[4m[22mdir[24m...]
           [[1m-D[4m[22mmacro[24m[=[4mdefn[24m]...] [[1m-U[4m[22mmacro[24m]
           [[1m-f[4m[22moption[24m...] [[1m-m[4m[22mmachine-option[24m...]
           [[1m-o [4m[22moutfile[24m] [@[4mfile[24m] [4minfile[24m...

       Only the most useful options are listed here; see below for the remainder.  [1mg++ [22maccepts mostly the same
       options as [1mgcc[22m.

[1mDESCRIPTION[0m
       When you invoke GCC, it normally does preprocessing, compilation, assembly and linking.  The "overall options"
       allow you to stop this process at an intermediate stage.  For example, the [1m-c [22moption says not to run the
       linker.  Then the output consists of object files output by the assembler.

       Other options are passed on to one or more stages of processing.  Some options control the preprocessor and
       others the compiler itself.  Yet other options control the assembler and linker; most of these are not
       documented here, since you rarely need to use any of them.

       Most of the command-line options that you can use with GCC are useful for C programs; when an option is only
       useful with another language (usually C++), the explanation says so explicitly.  If the description for a
       particular option does not mention a source language, you can use that option with all supported languages.

       The usual way to run GCC is to run the executable called [1mgcc[22m, or [4mmachine[24m[1m-gcc [22mwhen cross-compiling, or
       [4mmachine[24m[1m-gcc-[4m[22mversion[24m to run a specific version of GCC.  When you compile C++ programs, you should invoke GCC as
       [1mg++ [22minstead.

       The [1mgcc [22mprogram accepts options and file names as operands.  Many options have multi-letter names; therefore
       multiple single-letter options may [4mnot[24m be grouped: [1m-dv [22mis very different from [1m-d -v[22m.

       You can mix options and other arguments.  For the most part, the order you use doesn't matter.  Order does
       matter when you use several options of the same kind; for example, if you specify [1m-L [22mmore than once, the
       directories are searched in the order specified.  Also, the placement of the [1m-l [22moption is significant.

       Many options have long names starting with [1m-f [22mor with [1m-W[22m---for example, [1m-fmove-loop-invariants[22m, [1m-Wformat [22mand
       so on.  Most of these have both positive and negative forms; the negative form of [1m-ffoo [22mis [1m-fno-foo[22m.  This
       manual documents only one of these two forms, whichever one is not the default.

       Some options take one or more arguments typically separated either by a space or by the equals sign ([1m=[22m) from
       the option name.  Unless documented otherwise, an argument can be either numeric or a string.  Numeric
       arguments must typically be small unsigned decimal or hexadecimal integers.  Hexadecimal arguments must begin
       with the [1m0x [22mprefix.  Arguments to options that specify a size threshold of some sort may be arbitrarily large
       decimal or hexadecimal integers followed by a byte size suffix designating a multiple of bytes such as "kB"
       and "KiB" for kilobyte and kibibyte, respectively, "MB" and "MiB" for megabyte and mebibyte, "GB" and "GiB"
       for gigabyte and gigibyte, and so on.  Such arguments are designated by [4mbyte-size[24m in the following text.
       Refer to the NIST, IEC, and other relevant national and international standards for the full listing and
       explanation of the binary and decimal byte size prefixes.

[1mOPTIONS[0m
   [1mOption Summary[0m
       Here is a summary of all the options, grouped by type.  Explanations are in the following sections.

       [4mOverall[24m [4mOptions[0m
           [1m-c   -S   -E   -o [4m[22mfile[24m [1m-dumpbase [4m[22mdumpbase[24m  [1m-dumpbase-ext [4m[22mauxdropsuf[24m [1m-dumpdir [4m[22mdumppfx[24m  [1m-x [4m[22mlanguage[24m [1m-v  -###[0m
           [1m--help[22m[[1m=[4m[22mclass[24m[[1m,...[22m]]   [1m--target-help   --version  -pass-exit-codes   -pipe   -specs=[4m[22mfile[24m   [1m-wrapper  @[4m[22mfile[0m
           [1m-ffile-prefix-map=[4m[22mold[24m[1m=[4m[22mnew[24m   [1m-fcanon-prefix-map -fplugin=[4m[22mfile[24m  [1m-fplugin-arg-[4m[22mname[24m[1m=[4m[22marg[24m [1m-fdump-ada-spec[22m[[1m-slim[22m]
           [1m-fada-spec-parent=[4m[22munit[24m  [1m-fdump-go-spec=[4m[22mfile[0m

       [4mC[24m [4mLanguage[24m [4mOptions[0m
           [1m-ansi  -std=[4m[22mstandard[24m  [1m-aux-info [4m[22mfilename[24m  [1m-fno-asm  -fno-builtin   -fno-builtin-[4m[22mfunction[24m   [1m-fcond-mismatch[0m
           [1m-ffreestanding   -fgimple   -fgnu-tm   -fgnu89-inline   -fhosted -flax-vector-conversions  -fms-extensions[0m
           [1m-foffload=[4m[22marg[24m     [1m-foffload-options=[4m[22marg[24m    [1m-fopenacc     -fopenacc-dim=[4m[22mgeom[24m    [1m-fopenmp      -fopenmp-simd[0m
           [1m-fopenmp-target-simd-clone[22m[[1m=[4m[22mdevice-type[24m]      [1m-fpermitted-flt-eval-methods=[4m[22mstandard[24m     [1m-fplan9-extensions[0m
           [1m-fsigned-bitfields    -funsigned-bitfields   -fsigned-char     -funsigned-char    -fstrict-flex-arrays[=[4m[22mn[24m[1m][0m
           [1m-fsso-struct=[4m[22mendianness[0m

       [4mC++[24m [4mLanguage[24m [4mOptions[0m
           [1m-fabi-version=[4m[22mn[24m     [1m-fno-access-control   -faligned-new=[4m[22mn[24m    [1m-fargs-in-order=[4m[22mn[24m    [1m-fchar8_t    -fcheck-new[0m
           [1m-fconstexpr-depth=[4m[22mn[24m     [1m-fconstexpr-cache-depth=[4m[22mn[24m    [1m-fconstexpr-loop-limit=[4m[22mn[24m      [1m-fconstexpr-ops-limit=[4m[22mn[0m
           [1m-fno-elide-constructors        -fno-enforce-eh-specs       -fno-gnu-keywords       -fno-implicit-templates[0m
           [1m-fno-implicit-inline-templates -fno-implement-inlines  -fmodule-header[22m[[1m=[4m[22mkind[24m]  [1m-fmodule-only  -fmodules-ts[0m
           [1m-fmodule-implicit-inline     -fno-module-lazy     -fmodule-mapper=[4m[22mspecification[24m    [1m-fmodule-version-ignore[0m
           [1m-fms-extensions    -fnew-inheriting-ctors    -fnew-ttp-matching    -fno-nonansi-builtins     -fnothrow-opt[0m
           [1m-fno-operator-names       -fno-optional-diags       -fpermissive      -fno-pretty-templates      -fno-rtti[0m
           [1m-fsized-deallocation     -ftemplate-backtrace-limit=[4m[22mn[24m      [1m-ftemplate-depth=[4m[22mn[24m      [1m-fno-threadsafe-statics[0m
           [1m-fuse-cxa-atexit     -fno-weak      -nostdinc++     -fvisibility-inlines-hidden     -fvisibility-ms-compat[0m
           [1m-fext-numeric-literals      -flang-info-include-translate[22m[[1m=[4m[22mheader[24m]       [1m-flang-info-include-translate-not[0m
           [1m-flang-info-module-cmi[22m[[1m=[4m[22mmodule[24m]   [1m-stdlib=[4m[22mlibstdc++,libc++[24m   [1m-Wabi-tag    -Wcatch-value    -Wcatch-value=[4m[22mn[0m
           [1m-Wno-class-conversion  -Wclass-memaccess -Wcomma-subscript  -Wconditionally-supported -Wno-conversion-null[0m
           [1m-Wctad-maybe-unsupported      -Wctor-dtor-privacy        -Wdangling-reference       -Wno-delete-incomplete[0m
           [1m-Wdelete-non-virtual-dtor     -Wno-deprecated-array-compare    -Wdeprecated-copy    -Wdeprecated-copy-dtor[0m
           [1m-Wno-deprecated-enum-enum-conversion   -Wno-deprecated-enum-float-conversion   -Weffc++    -Wno-exceptions[0m
           [1m-Wextra-semi        -Wno-inaccessible-base      -Wno-inherited-variadic-ctor       -Wno-init-list-lifetime[0m
           [1m-Winvalid-constexpr       -Winvalid-imported-macros       -Wno-invalid-offsetof        -Wno-literal-suffix[0m
           [1m-Wmismatched-new-delete  -Wmismatched-tags  -Wmultiple-inheritance   -Wnamespaces   -Wnarrowing -Wnoexcept[0m
           [1m-Wnoexcept-type     -Wnon-virtual-dtor    -Wpessimizing-move     -Wno-placement-new      -Wplacement-new=[4m[22mn[0m
           [1m-Wrange-loop-construct  -Wredundant-move  -Wredundant-tags  -Wreorder   -Wregister  -Wstrict-null-sentinel[0m
           [1m-Wno-subobject-linkage   -Wtemplates   -Wno-non-template-friend    -Wold-style-cast   -Woverloaded-virtual[0m
           [1m-Wno-pmf-conversions     -Wself-move     -Wsign-promo     -Wsized-deallocation     -Wsuggest-final-methods[0m
           [1m-Wsuggest-final-types     -Wsuggest-override     -Wno-terminate      -Wuseless-cast      -Wno-vexing-parse[0m
           [1m-Wvirtual-inheritance -Wno-virtual-move-assign  -Wvolatile  -Wzero-as-null-pointer-constant[0m

       [4mObjective-C[24m [4mand[24m [4mObjective-C++[24m [4mLanguage[24m [4mOptions[0m
           [1m-fconstant-string-class=[4m[22mclass-name[24m  [1m-fgnu-runtime   -fnext-runtime -fno-nil-receivers -fobjc-abi-version=[4m[22mn[0m
           [1m-fobjc-call-cxx-cdtors -fobjc-direct-dispatch -fobjc-exceptions -fobjc-gc -fobjc-nilcheck -fobjc-std=objc1[0m
           [1m-fno-local-ivars -fivar-visibility=[22m[[1mpublic[22m|[1mprotected[22m|[1mprivate[22m|[1mpackage[22m]  [1m-freplace-objc-classes  -fzero-link[0m
           [1m-gen-decls  -Wassign-intercept   -Wno-property-assign-default  -Wno-protocol  -Wobjc-root-class -Wselector[0m
           [1m-Wstrict-selector-match -Wundeclared-selector[0m

       [4mDiagnostic[24m [4mMessage[24m [4mFormatting[24m [4mOptions[0m
           [1m-fmessage-length=[4m[22mn[24m        [1m-fdiagnostics-plain-output         -fdiagnostics-show-location=[22m[[1monce[22m|[1mevery-line[22m]
           [1m-fdiagnostics-color=[22m[[1mauto[22m|[1mnever[22m|[1malways[22m]                             [1m-fdiagnostics-urls=[22m[[1mauto[22m|[1mnever[22m|[1malways[22m]
           [1m-fdiagnostics-format=[22m[[1mtext[22m|[1msarif-stderr[22m|[1msarif-file[22m|[1mjson[22m|[1mjson-stderr[22m|[1mjson-file[22m]
           [1m-fno-diagnostics-show-option            -fno-diagnostics-show-caret           -fno-diagnostics-show-labels[0m
           [1m-fno-diagnostics-show-line-numbers           -fno-diagnostics-show-cwe          -fno-diagnostics-show-rule[0m
           [1m-fdiagnostics-minimum-margin-width=[4m[22mwidth[24m   [1m-fdiagnostics-parseable-fixits     -fdiagnostics-generate-patch[0m
           [1m-fdiagnostics-show-template-tree   -fno-elide-type -fdiagnostics-path-format=[22m[[1mnone[22m|[1mseparate-events[22m|[1minline-[0m
           [1mevents[22m]    [1m-fdiagnostics-show-path-depths    -fno-show-column     -fdiagnostics-column-unit=[22m[[1mdisplay[22m|[1mbyte[22m]
           [1m-fdiagnostics-column-origin=[4m[22morigin[24m [1m-fdiagnostics-escape-format=[22m[[1municode[22m|[1mbytes[22m]

       [4mWarning[24m [4mOptions[0m
           [1m-fsyntax-only    -fmax-errors=[4m[22mn[24m    [1m-Wpedantic  -pedantic-errors  -w   -Wextra   -Wall   -Wabi=[4m[22mn[24m  [1m-Waddress[0m
           [1m-Wno-address-of-packed-member    -Waggregate-return    -Walloc-size-larger-than=[4m[22mbyte-size[24m     [1m-Walloc-zero[0m
           [1m-Walloca      -Walloca-larger-than=[4m[22mbyte-size[24m     [1m-Wno-aggressive-loop-optimizations     -Warith-conversion[0m
           [1m-Warray-bounds       -Warray-bounds=[4m[22mn[24m       [1m-Warray-compare      -Wno-attributes       -Wattribute-alias=[4m[22mn[0m
           [1m-Wno-attribute-alias     -Wno-attribute-warning     -Wbidi-chars=[22m[[1mnone[22m|[1munpaired[22m|[1many[22m|[1mucn[22m]    [1m-Wbool-compare[0m
           [1m-Wbool-operation    -Wno-builtin-declaration-mismatch    -Wno-builtin-macro-redefined     -Wc90-c99-compat[0m
           [1m-Wc99-c11-compat    -Wc11-c2x-compat    -Wc++-compat    -Wc++11-compat    -Wc++14-compat    -Wc++17-compat[0m
           [1m-Wc++20-compat -Wno-c++11-extensions   -Wno-c++14-extensions  -Wno-c++17-extensions  -Wno-c++20-extensions[0m
           [1m-Wno-c++23-extensions     -Wcast-align      -Wcast-align=strict      -Wcast-function-type      -Wcast-qual[0m
           [1m-Wchar-subscripts -Wclobbered   -Wcomment  -Wno-complain-wrong-lang  -Wconversion   -Wno-coverage-mismatch[0m
           [1m-Wno-cpp    -Wdangling-else     -Wdangling-pointer    -Wdangling-pointer=[4m[22mn[24m   [1m-Wdate-time   -Wno-deprecated[0m
           [1m-Wno-deprecated-declarations  -Wno-designated-init -Wdisabled-optimization -Wno-discarded-array-qualifiers[0m
           [1m-Wno-discarded-qualifiers -Wno-div-by-zero   -Wdouble-promotion  -Wduplicated-branches   -Wduplicated-cond[0m
           [1m-Wempty-body   -Wno-endif-labels  -Wenum-compare  -Wenum-conversion -Wenum-int-mismatch -Werror  -Werror=*[0m
           [1m-Wexpansion-to-defined    -Wfatal-errors   -Wfloat-conversion    -Wfloat-equal     -Wformat     -Wformat=2[0m
           [1m-Wno-format-contains-nul        -Wno-format-extra-args       -Wformat-nonliteral       -Wformat-overflow=[4m[22mn[0m
           [1m-Wformat-security     -Wformat-signedness      -Wformat-truncation=[4m[22mn[24m     [1m-Wformat-y2k      -Wframe-address[0m
           [1m-Wframe-larger-than=[4m[22mbyte-size[24m    [1m-Wno-free-nonheap-object   -Wno-if-not-aligned    -Wno-ignored-attributes[0m
           [1m-Wignored-qualifiers        -Wno-incompatible-pointer-types       -Wimplicit        -Wimplicit-fallthrough[0m
           [1m-Wimplicit-fallthrough=[4m[22mn[24m    [1m-Wno-implicit-function-declaration    -Wno-implicit-int   -Winfinite-recursion[0m
           [1m-Winit-self      -Winline      -Wno-int-conversion      -Wint-in-bool-context     -Wno-int-to-pointer-cast[0m
           [1m-Wno-invalid-memory-model      -Winvalid-pch      -Winvalid-utf8      -Wno-unicode      -Wjump-misses-init[0m
           [1m-Wlarger-than=[4m[22mbyte-size[24m   [1m-Wlogical-not-parentheses   -Wlogical-op   -Wlong-long    -Wno-lto-type-mismatch[0m
           [1m-Wmain    -Wmaybe-uninitialized   -Wmemset-elt-size    -Wmemset-transposed-args   -Wmisleading-indentation[0m
           [1m-Wmissing-attributes     -Wmissing-braces     -Wmissing-field-initializers      -Wmissing-format-attribute[0m
           [1m-Wmissing-include-dirs   -Wmissing-noreturn   -Wno-missing-profile -Wno-multichar  -Wmultistatement-macros[0m
           [1m-Wnonnull      -Wnonnull-compare     -Wnormalized=[22m[[1mnone[22m|[1mid[22m|[1mnfc[22m|[1mnfkc[22m]     [1m-Wnull-dereference       -Wno-odr[0m
           [1m-Wopenacc-parallelism  -Wopenmp-simd  -Wno-overflow  -Woverlength-strings  -Wno-override-init-side-effects[0m
           [1m-Wpacked       -Wno-packed-bitfield-compat        -Wpacked-not-aligned        -Wpadded       -Wparentheses[0m
           [1m-Wno-pedantic-ms-format   -Wpointer-arith    -Wno-pointer-compare   -Wno-pointer-to-int-cast  -Wno-pragmas[0m
           [1m-Wno-prio-ctor-dtor      -Wredundant-decls     -Wrestrict       -Wno-return-local-addr       -Wreturn-type[0m
           [1m-Wno-scalar-storage-order        -Wsequence-point      -Wshadow       -Wshadow=global       -Wshadow=local[0m
           [1m-Wshadow=compatible-local    -Wno-shadow-ivar     -Wno-shift-count-negative      -Wno-shift-count-overflow[0m
           [1m-Wshift-negative-value    -Wno-shift-overflow     -Wshift-overflow=[4m[22mn[24m   [1m-Wsign-compare    -Wsign-conversion[0m
           [1m-Wno-sizeof-array-argument     -Wsizeof-array-div     -Wsizeof-pointer-div      -Wsizeof-pointer-memaccess[0m
           [1m-Wstack-protector    -Wstack-usage=[4m[22mbyte-size[24m    [1m-Wstrict-aliasing  -Wstrict-aliasing=n   -Wstrict-overflow[0m
           [1m-Wstrict-overflow=[4m[22mn[24m         [1m-Wstring-compare         -Wno-stringop-overflow         -Wno-stringop-overread[0m
           [1m-Wno-stringop-truncation    -Wstrict-flex-arrays   -Wsuggest-attribute=[22m[[1mpure[22m|[1mconst[22m|[1mnoreturn[22m|[1mformat[22m|[1mmalloc[22m]
           [1m-Wswitch       -Wno-switch-bool       -Wswitch-default       -Wswitch-enum       -Wno-switch-outside-range[0m
           [1m-Wno-switch-unreachable   -Wsync-nand -Wsystem-headers  -Wtautological-compare  -Wtrampolines  -Wtrigraphs[0m
           [1m-Wtrivial-auto-var-init    -Wtsan    -Wtype-limits      -Wundef     -Wuninitialized      -Wunknown-pragmas[0m
           [1m-Wunsuffixed-float-constants       -Wunused      -Wunused-but-set-parameter      -Wunused-but-set-variable[0m
           [1m-Wunused-const-variable         -Wunused-const-variable=[4m[22mn[24m        [1m-Wunused-function          -Wunused-label[0m
           [1m-Wunused-local-typedefs     -Wunused-macros    -Wunused-parameter     -Wno-unused-result    -Wunused-value[0m
           [1m-Wunused-variable      -Wno-varargs       -Wvariadic-macros      -Wvector-operation-performance      -Wvla[0m
           [1m-Wvla-larger-than=[4m[22mbyte-size[24m        [1m-Wno-vla-larger-than      -Wvolatile-register-var       -Wwrite-strings[0m
           [1m-Wxor-used-as-pow -Wzero-length-bounds[0m

       [4mStatic[24m [4mAnalyzer[24m [4mOptions[0m
           [1m-fanalyzer       -fanalyzer-call-summaries        -fanalyzer-checker=[4m[22mname[24m        [1m-fno-analyzer-feasibility[0m
           [1m-fanalyzer-fine-grained                 -fno-analyzer-state-merge                -fno-analyzer-state-purge[0m
           [1m-fno-analyzer-suppress-followups            -fanalyzer-transitivity            -fno-analyzer-undo-inlining[0m
           [1m-fanalyzer-verbose-edges   -fanalyzer-verbose-state-changes   -fanalyzer-verbosity=[4m[22mlevel[24m   [1m-fdump-analyzer[0m
           [1m-fdump-analyzer-callgraph          -fdump-analyzer-exploded-graph           -fdump-analyzer-exploded-nodes[0m
           [1m-fdump-analyzer-exploded-nodes-2      -fdump-analyzer-exploded-nodes-3      -fdump-analyzer-exploded-paths[0m
           [1m-fdump-analyzer-feasibility   -fdump-analyzer-json   -fdump-analyzer-state-purge    -fdump-analyzer-stderr[0m
           [1m-fdump-analyzer-supergraph -fdump-analyzer-untracked -Wno-analyzer-double-fclose -Wno-analyzer-double-free[0m
           [1m-Wno-analyzer-exposure-through-output-file                      -Wno-analyzer-exposure-through-uninit-copy[0m
           [1m-Wno-analyzer-fd-access-mode-mismatch         -Wno-analyzer-fd-double-close          -Wno-analyzer-fd-leak[0m
           [1m-Wno-analyzer-fd-phase-mismatch       -Wno-analyzer-fd-type-mismatch      -Wno-analyzer-fd-use-after-close[0m
           [1m-Wno-analyzer-fd-use-without-check         -Wno-analyzer-file-leak          -Wno-analyzer-free-of-non-heap[0m
           [1m-Wno-analyzer-imprecise-fp-arithmetic   -Wno-analyzer-infinite-recursion   -Wno-analyzer-jump-through-null[0m
           [1m-Wno-analyzer-malloc-leak        -Wno-analyzer-mismatching-deallocation        -Wno-analyzer-null-argument[0m
           [1m-Wno-analyzer-null-dereference       -Wno-analyzer-out-of-bounds      -Wno-analyzer-possible-null-argument[0m
           [1m-Wno-analyzer-possible-null-dereference                                   -Wno-analyzer-putenv-of-auto-var[0m
           [1m-Wno-analyzer-shift-count-negative   -Wno-analyzer-shift-count-overflow  -Wno-analyzer-stale-setjmp-buffer[0m
           [1m-Wno-analyzer-tainted-allocation-size  -Wno-analyzer-tainted-assertion   -Wno-analyzer-tainted-array-index[0m
           [1m-Wno-analyzer-tainted-divisor            -Wno-analyzer-tainted-offset           -Wno-analyzer-tainted-size[0m
           [1m-Wanalyzer-too-complex    -Wno-analyzer-unsafe-call-within-signal-handler     -Wno-analyzer-use-after-free[0m
           [1m-Wno-analyzer-use-of-pointer-in-stale-stack-frame                 -Wno-analyzer-use-of-uninitialized-value[0m
           [1m-Wno-analyzer-va-arg-type-mismatch       -Wno-analyzer-va-list-exhausted        -Wno-analyzer-va-list-leak[0m
           [1m-Wno-analyzer-va-list-use-after-va-end -Wno-analyzer-write-to-const -Wno-analyzer-write-to-string-literal[0m

       [4mC[24m [4mand[24m [4mObjective-C-only[24m [4mWarning[24m [4mOptions[0m
           [1m-Wbad-function-cast        -Wmissing-declarations      -Wmissing-parameter-type       -Wmissing-prototypes[0m
           [1m-Wnested-externs  -Wold-style-declaration    -Wold-style-definition   -Wstrict-prototypes    -Wtraditional[0m
           [1m-Wtraditional-conversion -Wdeclaration-after-statement  -Wpointer-sign[0m

       [4mDebugging[24m [4mOptions[0m
           [1m-g    -g[4m[22mlevel[24m    [1m-gdwarf    -gdwarf-[4m[22mversion[24m   [1m-gbtf   -gctf    -gctf[4m[22mlevel[24m   [1m-ggdb    -grecord-gcc-switches[0m
           [1m-gno-record-gcc-switches   -gstrict-dwarf    -gno-strict-dwarf    -gas-loc-support     -gno-as-loc-support[0m
           [1m-gas-locview-support    -gno-as-locview-support   -gcolumn-info   -gno-column-info   -gdwarf32   -gdwarf64[0m
           [1m-gstatement-frontiers   -gno-statement-frontiers  -gvariable-location-views   -gno-variable-location-views[0m
           [1m-ginternal-reset-location-views   -gno-internal-reset-location-views  -ginline-points   -gno-inline-points[0m
           [1m-gvms   -gz[22m[[1m=[4m[22mtype[24m]   [1m-gsplit-dwarf    -gdescribe-dies     -gno-describe-dies    -fdebug-prefix-map=[4m[22mold[24m[1m=[4m[22mnew[0m
           [1m-fdebug-types-section            -fno-eliminate-unused-debug-types            -femit-struct-debug-baseonly[0m
           [1m-femit-struct-debug-reduced  -femit-struct-debug-detailed[22m[[1m=[4m[22mspec-list[24m]  [1m-fno-eliminate-unused-debug-symbols[0m
           [1m-femit-class-debug-always        -fno-merge-debug-strings         -fno-dwarf2-cfi-asm       -fvar-tracking[0m
           [1m-fvar-tracking-assignments[0m

       [4mOptimization[24m [4mOptions[0m
           [1m-faggressive-loop-optimizations    -falign-functions[=[4m[22mn[24m[1m[:[4m[22mm[24m[1m:[[4m[22mn2[24m[1m[:[4m[22mm2[24m[1m]]]]     -falign-jumps[=[4m[22mn[24m[1m[:[4m[22mm[24m[1m:[[4m[22mn2[24m[1m[:[4m[22mm2[24m[1m]]]][0m
           [1m-falign-labels[=[4m[22mn[24m[1m[:[4m[22mm[24m[1m:[[4m[22mn2[24m[1m[:[4m[22mm2[24m[1m]]]]            -falign-loops[=[4m[22mn[24m[1m[:[4m[22mm[24m[1m:[[4m[22mn2[24m[1m[:[4m[22mm2[24m[1m]]]]            -fno-allocation-dce[0m
           [1m-fallow-store-data-races   -fassociative-math    -fauto-profile    -fauto-profile[=[4m[22mpath[24m[1m]    -fauto-inc-dec[0m
           [1m-fbranch-probabilities   -fcaller-saves   -fcombine-stack-adjustments    -fconserve-stack   -fcompare-elim[0m
           [1m-fcprop-registers     -fcrossjumping     -fcse-follow-jumps      -fcse-skip-blocks      -fcx-fortran-rules[0m
           [1m-fcx-limited-range  -fdata-sections   -fdce  -fdelayed-branch -fdelete-null-pointer-checks  -fdevirtualize[0m
           [1m-fdevirtualize-speculatively     -fdevirtualize-at-ltrans      -fdse      -fearly-inlining       -fipa-sra[0m
           [1m-fexpensive-optimizations      -ffat-lto-objects     -ffast-math      -ffinite-math-only     -ffloat-store[0m
           [1m-fexcess-precision=[4m[22mstyle[24m  [1m-ffinite-loops  -fforward-propagate   -ffp-contract=[4m[22mstyle[24m    [1m-ffunction-sections[0m
           [1m-fgcse   -fgcse-after-reload  -fgcse-las  -fgcse-lm  -fgraphite-identity -fgcse-sm  -fhoist-adjacent-loads[0m
           [1m-fif-conversion -fif-conversion2  -findirect-inlining  -finline-functions   -finline-functions-called-once[0m
           [1m-finline-limit=[4m[22mn[24m  [1m-finline-small-functions  -fipa-modref  -fipa-cp  -fipa-cp-clone -fipa-bit-cp  -fipa-vrp[0m
           [1m-fipa-pta      -fipa-profile       -fipa-pure-const      -fipa-reference       -fipa-reference-addressable[0m
           [1m-fipa-stack-alignment    -fipa-icf   -fira-algorithm=[4m[22malgorithm[24m  [1m-flive-patching=[4m[22mlevel[24m  [1m-fira-region=[4m[22mregion[0m
           [1m-fira-hoist-pressure     -fira-loop-pressure      -fno-ira-share-save-slots     -fno-ira-share-spill-slots[0m
           [1m-fisolate-erroneous-paths-dereference              -fisolate-erroneous-paths-attribute            -fivopts[0m
           [1m-fkeep-inline-functions     -fkeep-static-functions    -fkeep-static-consts     -flimit-function-alignment[0m
           [1m-flive-range-shrinkage    -floop-block     -floop-interchange    -floop-strip-mine   -floop-unroll-and-jam[0m
           [1m-floop-nest-optimize     -floop-parallelize-all      -flra-remat       -flto       -flto-compression-level[0m
           [1m-flto-partition=[4m[22malg[24m            [1m-fmerge-all-constants           -fmerge-constants            -fmodulo-sched[0m
           [1m-fmodulo-sched-allow-regmoves    -fmove-loop-invariants      -fmove-loop-stores      -fno-branch-count-reg[0m
           [1m-fno-defer-pop   -fno-fp-int-builtin-inexact  -fno-function-cse -fno-guess-branch-probability  -fno-inline[0m
           [1m-fno-math-errno     -fno-peephole    -fno-peephole2     -fno-printf-return-value     -fno-sched-interblock[0m
           [1m-fno-sched-spec  -fno-signed-zeros -fno-toplevel-reorder  -fno-trapping-math  -fno-zero-initialized-in-bss[0m
           [1m-fomit-frame-pointer   -foptimize-sibling-calls  -fpartial-inlining   -fpeel-loops  -fpredictive-commoning[0m
           [1m-fprefetch-loop-arrays -fprofile-correction -fprofile-use   -fprofile-use=[4m[22mpath[24m  [1m-fprofile-partial-training[0m
           [1m-fprofile-values      -fprofile-reorder-functions     -freciprocal-math      -free      -frename-registers[0m
           [1m-freorder-blocks -freorder-blocks-algorithm=[4m[22malgorithm[24m [1m-freorder-blocks-and-partition   -freorder-functions[0m
           [1m-frerun-cse-after-loop   -freschedule-modulo-scheduled-loops  -frounding-math   -fsave-optimization-record[0m
           [1m-fsched2-use-superblocks       -fsched-pressure       -fsched-spec-load        -fsched-spec-load-dangerous[0m
           [1m-fsched-stalled-insns-dep[=[4m[22mn[24m[1m]               -fsched-stalled-insns[=[4m[22mn[24m[1m]              -fsched-group-heuristic[0m
           [1m-fsched-critical-path-heuristic            -fsched-spec-insn-heuristic              -fsched-rank-heuristic[0m
           [1m-fsched-last-insn-heuristic       -fsched-dep-count-heuristic      -fschedule-fusion      -fschedule-insns[0m
           [1m-fschedule-insns2         -fsection-anchors        -fselective-scheduling          -fselective-scheduling2[0m
           [1m-fsel-sched-pipelining     -fsel-sched-pipelining-outer-loops    -fsemantic-interposition    -fshrink-wrap[0m
           [1m-fshrink-wrap-separate     -fsignaling-nans      -fsingle-precision-constant       -fsplit-ivs-in-unroller[0m
           [1m-fsplit-loops  -fsplit-paths  -fsplit-wide-types   -fsplit-wide-types-early   -fssa-backprop  -fssa-phiopt[0m
           [1m-fstdarg-opt    -fstore-merging    -fstrict-aliasing   -fipa-strict-aliasing   -fthread-jumps     -ftracer[0m
           [1m-ftree-bit-ccp   -ftree-builtin-call-dce   -ftree-ccp   -ftree-ch  -ftree-coalesce-vars   -ftree-copy-prop[0m
           [1m-ftree-dce     -ftree-dominator-opts    -ftree-dse     -ftree-forwprop     -ftree-fre      -fcode-hoisting[0m
           [1m-ftree-loop-if-convert           -ftree-loop-im          -ftree-phiprop           -ftree-loop-distribution[0m
           [1m-ftree-loop-distribute-patterns     -ftree-loop-ivcanon      -ftree-loop-linear       -ftree-loop-optimize[0m
           [1m-ftree-loop-vectorize     -ftree-parallelize-loops=[4m[22mn[24m      [1m-ftree-pre     -ftree-partial-pre     -ftree-pta[0m
           [1m-ftree-reassoc    -ftree-scev-cprop    -ftree-sink    -ftree-slsr    -ftree-sra   -ftree-switch-conversion[0m
           [1m-ftree-tail-merge       -ftree-ter        -ftree-vectorize        -ftree-vrp       -ftrivial-auto-var-init[0m
           [1m-funconstrained-commons -funit-at-a-time   -funroll-all-loops  -funroll-loops  -funsafe-math-optimizations[0m
           [1m-funswitch-loops    -fipa-ra     -fvariable-expansion-in-unroller     -fvect-cost-model     -fvpt    -fweb[0m
           [1m-fwhole-program  -fwpa  -fuse-linker-plugin -fzero-call-used-regs --param [4m[22mname[24m[1m=[4m[22mvalue[24m  [1m-O   -O0   -O1   -O2[0m
           [1m-O3  -Os  -Ofast  -Og  -Oz[0m

       [4mProgram[24m [4mInstrumentation[24m [4mOptions[0m
           [1m-p     -pg     -fprofile-arcs     --coverage     -ftest-coverage   -fprofile-abs-path   -fprofile-dir=[4m[22mpath[0m
           [1m-fprofile-generate     -fprofile-generate=[4m[22mpath[24m     [1m-fprofile-info-section      -fprofile-info-section=[4m[22mname[0m
           [1m-fprofile-note=[4m[22mpath[24m    [1m-fprofile-prefix-path=[4m[22mpath[24m   [1m-fprofile-update=[4m[22mmethod[24m   [1m-fprofile-filter-files=[4m[22mregex[0m
           [1m-fprofile-exclude-files=[4m[22mregex[24m [1m-fprofile-reproducible=[22m[[1mmultithreaded[22m|[1mparallel-runs[22m|[1mserial[22m] [1m-fsanitize=[4m[22mstyle[0m
           [1m-fsanitize-recover         -fsanitize-recover=[4m[22mstyle[24m        [1m-fsanitize-trap           -fsanitize-trap=[4m[22mstyle[0m
           [1m-fasan-shadow-offset=[4m[22mnumber[24m        [1m-fsanitize-sections=[4m[22ms1[24m[1m,[4m[22ms2[24m[1m,...        -fsanitize-undefined-trap-on-error[0m
           [1m-fbounds-check              -fcf-protection=[22m[[1mfull[22m|[1mbranch[22m|[1mreturn[22m|[1mnone[22m|[1mcheck[22m]              [1m-fharden-compares[0m
           [1m-fharden-conditional-branches     -fstack-protector     -fstack-protector-all     -fstack-protector-strong[0m
           [1m-fstack-protector-explicit      -fstack-check     -fstack-limit-register=[4m[22mreg[24m      [1m-fstack-limit-symbol=[4m[22msym[0m
           [1m-fno-stack-limit      -fsplit-stack     -fvtable-verify=[22m[[1mstd[22m|[1mpreinit[22m|[1mnone[22m]    [1m-fvtv-counts     -fvtv-debug[0m
           [1m-finstrument-functions                                                         -finstrument-functions-once[0m
           [1m-finstrument-functions-exclude-function-list=[4m[22msym[24m[1m,[4m[22msym[24m[1m,...[0m
           [1m-finstrument-functions-exclude-file-list=[4m[22mfile[24m[1m,[4m[22mfile[24m[1m,...  -fprofile-prefix-map=[4m[22mold[24m[1m=[4m[22mnew[0m

       [4mPreprocessor[24m [4mOptions[0m
           [1m-A[4m[22mquestion[24m[1m=[4m[22manswer[24m  [1m-A-[4m[22mquestion[24m[[1m=[4m[22manswer[24m]  [1m-C   -CC   -D[4m[22mmacro[24m[[1m=[4m[22mdefn[24m]  [1m-dD   -dI   -dM   -dN  -dU -fdebug-cpp[0m
           [1m-fdirectives-only       -fdollars-in-identifiers      -fexec-charset=[4m[22mcharset[24m        [1m-fextended-identifiers[0m
           [1m-finput-charset=[4m[22mcharset[24m     [1m-flarge-source-files    -fmacro-prefix-map=[4m[22mold[24m[1m=[4m[22mnew[24m   [1m-fmax-include-depth=[4m[22mdepth[0m
           [1m-fno-canonical-system-headers     -fpch-deps      -fpch-preprocess     -fpreprocessed      -ftabstop=[4m[22mwidth[0m
           [1m-ftrack-macro-expansion  -fwide-exec-charset=[4m[22mcharset[24m  [1m-fworking-directory -H  -imacros [4m[22mfile[24m  [1m-include [4m[22mfile[0m
           [1m-M  -MD  -MF  -MG  -MM   -MMD   -MP   -MQ   -MT  -Mno-modules  -no-integrated-cpp   -P   -pthread   -remap[0m
           [1m-traditional  -traditional-cpp  -trigraphs -U[4m[22mmacro[24m  [1m-undef -Wp,[4m[22moption[24m  [1m-Xpreprocessor [4m[22moption[0m

       [4mAssembler[24m [4mOptions[0m
           [1m-Wa,[4m[22moption[24m  [1m-Xassembler [4m[22moption[0m

       [4mLinker[24m [4mOptions[0m
           [4mobject-file-name[24m    [1m-fuse-ld=[4m[22mlinker[24m    [1m-l[4m[22mlibrary[24m   [1m-nostartfiles    -nodefaultlibs    -nolibc    -nostdlib[0m
           [1m-nostdlib++ -e [4m[22mentry[24m  [1m--entry=[4m[22mentry[24m [1m-pie  -pthread  -r  -rdynamic -s  -static  -static-pie  -static-libgcc[0m
           [1m-static-libstdc++   -static-libasan    -static-libtsan     -static-liblsan     -static-libubsan    -shared[0m
           [1m-shared-libgcc  -symbolic -T [4m[22mscript[24m  [1m-Wl,[4m[22moption[24m  [1m-Xlinker [4m[22moption[24m [1m-u [4m[22msymbol[24m  [1m-z [4m[22mkeyword[0m

       [4mDirectory[24m [4mOptions[0m
           [1m-B[4m[22mprefix[24m   [1m-I[4m[22mdir[24m   [1m-I- -idirafter [4m[22mdir[24m [1m-imacros [4m[22mfile[24m  [1m-imultilib [4m[22mdir[24m [1m-iplugindir=[4m[22mdir[24m  [1m-iprefix [4m[22mfile[24m [1m-iquote[0m
           [4mdir[24m  [1m-isysroot [4m[22mdir[24m  [1m-isystem [4m[22mdir[24m [1m-iwithprefix [4m[22mdir[24m  [1m-iwithprefixbefore  [4m[22mdir[24m  [1m-L[4m[22mdir[24m   [1m-no-canonical-prefixes[0m
           [1m--no-sysroot-suffix -nostdinc  -nostdinc++  --sysroot=[4m[22mdir[0m

       [4mCode[24m [4mGeneration[24m [4mOptions[0m
           [1m-fcall-saved-[4m[22mreg[24m         [1m-fcall-used-[4m[22mreg[24m       [1m-ffixed-[4m[22mreg[24m        [1m-fexceptions       -fnon-call-exceptions[0m
           [1m-fdelete-dead-exceptions        -funwind-tables        -fasynchronous-unwind-tables        -fno-gnu-unique[0m
           [1m-finhibit-size-directive   -fcommon   -fno-ident -fpcc-struct-return  -fpic  -fPIC  -fpie  -fPIE  -fno-plt[0m
           [1m-fno-jump-tables -fno-bit-tests -frecord-gcc-switches  -freg-struct-return   -fshort-enums   -fshort-wchar[0m
           [1m-fverbose-asm    -fpack-struct[=[4m[22mn[24m[1m]   -fleading-underscore    -ftls-model=[4m[22mmodel[24m   [1m-fstack-reuse=[4m[22mreuse_level[0m
           [1m-ftrampolines          -ftrapv           -fwrapv          -fvisibility=[22m[[1mdefault[22m|[1minternal[22m|[1mhidden[22m|[1mprotected[22m]
           [1m-fstrict-volatile-bitfields  -fsync-libcalls[0m

       [4mDeveloper[24m [4mOptions[0m
           [1m-d[4m[22mletters[24m   [1m-dumpspecs   -dumpmachine   -dumpversion -dumpfullversion  -fcallgraph-info[22m[[1m=su,da[22m] [1m-fchecking[0m
           [1m-fchecking=[4m[22mn[24m [1m-fdbg-cnt-list  -fdbg-cnt=[4m[22mcounter-value-list[24m [1m-fdisable-ipa-[4m[22mpass_name[24m  [1m-fdisable-rtl-[4m[22mpass_name[0m
           [1m-fdisable-rtl-[4m[22mpass-name[24m[1m=[4m[22mrange-list[24m       [1m-fdisable-tree-[4m[22mpass_name[24m      [1m-fdisable-tree-[4m[22mpass-name[24m[1m=[4m[22mrange-list[0m
           [1m-fdump-debug      -fdump-earlydebug     -fdump-noaddr      -fdump-unnumbered       -fdump-unnumbered-links[0m
           [1m-fdump-final-insns[22m[[1m=[4m[22mfile[24m]    [1m-fdump-ipa-all     -fdump-ipa-cgraph     -fdump-ipa-inline    -fdump-lang-all[0m
           [1m-fdump-lang-[4m[22mswitch[24m    [1m-fdump-lang-[4m[22mswitch[24m[1m-[4m[22moptions[24m     [1m-fdump-lang-[4m[22mswitch[24m[1m-[4m[22moptions[24m[1m=[4m[22mfilename[24m     [1m-fdump-passes[0m
           [1m-fdump-rtl-[4m[22mpass[24m     [1m-fdump-rtl-[4m[22mpass[24m[1m=[4m[22mfilename[24m    [1m-fdump-statistics    -fdump-tree-all    -fdump-tree-[4m[22mswitch[0m
           [1m-fdump-tree-[4m[22mswitch[24m[1m-[4m[22moptions[24m           [1m-fdump-tree-[4m[22mswitch[24m[1m-[4m[22moptions[24m[1m=[4m[22mfilename[24m            [1m-fcompare-debug[22m[[1m=[4m[22mopts[24m]
           [1m-fcompare-debug-second   -fenable-[4m[22mkind[24m[1m-[4m[22mpass[24m   [1m-fenable-[4m[22mkind[24m[1m-[4m[22mpass[24m[1m=[4m[22mrange-list[24m  [1m-fira-verbose=[4m[22mn[24m  [1m-flto-report[0m
           [1m-flto-report-wpa  -fmem-report-wpa -fmem-report   -fpre-ipa-mem-report   -fpost-ipa-mem-report  -fopt-info[0m
           [1m-fopt-info-[4m[22moptions[24m[[1m=[4m[22mfile[24m]    [1m-fmultiflags     -fprofile-report   -frandom-seed=[4m[22mstring[24m    [1m-fsched-verbose=[4m[22mn[0m
           [1m-fsel-sched-verbose    -fsel-sched-dump-cfg    -fsel-sched-pipelining-verbose    -fstats     -fstack-usage[0m
           [1m-ftime-report   -ftime-report-details -fvar-tracking-assignments-toggle  -gtoggle -print-file-name=[4m[22mlibrary[0m
           [1m-print-libgcc-file-name      -print-multi-directory       -print-multi-lib       -print-multi-os-directory[0m
           [1m-print-prog-name=[4m[22mprogram[24m  [1m-print-search-dirs  -Q -print-sysroot  -print-sysroot-headers-suffix -save-temps[0m
           [1m-save-temps=cwd  -save-temps=obj  -time[22m[[1m=[4m[22mfile[24m]

       [4mMachine-Dependent[24m [4mOptions[0m
           [4mAArch64[24m    [4mOptions[24m    [1m-mabi=[4m[22mname[24m     [1m-mbig-endian    -mlittle-endian   -mgeneral-regs-only   -mcmodel=tiny[0m
           [1m-mcmodel=small      -mcmodel=large     -mstrict-align      -mno-strict-align     -momit-leaf-frame-pointer[0m
           [1m-mtls-dialect=desc         -mtls-dialect=traditional        -mtls-size=[4m[22msize[24m        [1m-mfix-cortex-a53-835769[0m
           [1m-mfix-cortex-a53-843419     -mlow-precision-recip-sqrt      -mlow-precision-sqrt       -mlow-precision-div[0m
           [1m-mpc-relative-literal-loads   -msign-return-address=[4m[22mscope[24m  [1m-mbranch-protection=[4m[22mnone[24m[1m|[4m[22mstandard[24m[1m|[4m[22mpac-ret[24m[1m[+[4m[22mleaf[0m
           [1m+[4m[22mb-key[24m[1m]|[4m[22mbti[24m [1m-mharden-sls=[4m[22mopts[24m [1m-march=[4m[22mname[24m  [1m-mcpu=[4m[22mname[24m  [1m-mtune=[4m[22mname[24m [1m-moverride=[4m[22mstring[24m   [1m-mverbose-cost-dump[0m
           [1m-mstack-protector-guard=[4m[22mguard[24m   [1m-mstack-protector-guard-reg=[4m[22msysreg[24m   [1m-mstack-protector-guard-offset=[4m[22moffset[0m
           [1m-mtrack-speculation -moutline-atomics[0m

           [4mAdapteva[24m [4mEpiphany[24m [4mOptions[24m [1m-mhalf-reg-file  -mprefer-short-insn-regs -mbranch-cost=[4m[22mnum[24m  [1m-mcmove  -mnops=[4m[22mnum[0m
           [1m-msoft-cmpsf -msplit-lohi  -mpost-inc   -mpost-modify   -mstack-offset=[4m[22mnum[24m  [1m-mround-nearest   -mlong-calls[0m
           [1m-mshort-calls    -msmall16   -mfp-mode=[4m[22mmode[24m    [1m-mvect-double    -max-vect-align=[4m[22mnum[24m  [1m-msplit-vecmove-early[0m
           [1m-m1reg-[4m[22mreg[0m

           [4mAMD[24m [4mGCN[24m [4mOptions[24m [1m-march=[4m[22mgpu[24m [1m-mtune=[4m[22mgpu[24m [1m-mstack-size=[4m[22mbytes[0m

           [4mARC[24m  [4mOptions[24m  [1m-mbarrel-shifter   -mjli-always   -mcpu=[4m[22mcpu[24m    [1m-mA6    -mARC600    -mA7    -mARC700   -mdpfp[0m
           [1m-mdpfp-compact   -mdpfp-fast   -mno-dpfp-lrsr -mea  -mno-mpy  -mmul32x16  -mmul64  -matomic -mnorm  -mspfp[0m
           [1m-mspfp-compact  -mspfp-fast  -msimd  -msoft-float  -mswap -mcrc  -mdsp-packa   -mdvbf   -mlock   -mmac-d16[0m
           [1m-mmac-24   -mrtsc   -mswape  -mtelephony   -mxy   -misize   -mannotate-align   -marclinux  -marclinux_prof[0m
           [1m-mlong-calls  -mmedium-calls   -msdata   -mirq-ctrl-saved  -mrgf-banked-regs   -mlpc-width=[4m[22mwidth[24m   [1m-G  [4m[22mnum[0m
           [1m-mvolatile-cache     -mtp-regno=[4m[22mregno[24m    [1m-malign-call    -mauto-modify-reg    -mbbit-peephole    -mno-brcc[0m
           [1m-mcase-vector-pcrel  -mcompact-casesi  -mno-cond-exec  -mearly-cbranchsi  -mexpand-adddi   -mindexed-loads[0m
           [1m-mlra   -mlra-priority-none  -mlra-priority-compact  -mlra-priority-noncompact   -mmillicode  -mmixed-code[0m
           [1m-mq-class    -mRcq    -mRcw    -msize-level=[4m[22mlevel[24m   [1m-mtune=[4m[22mcpu[24m     [1m-mmultcost=[4m[22mnum[24m     [1m-mcode-density-frame[0m
           [1m-munalign-prob-threshold=[4m[22mprobability[24m   [1m-mmpy-option=[4m[22mmulto[24m  [1m-mdiv-rem   -mcode-density   -mll64   -mfpu=[4m[22mfpu[0m
           [1m-mrf16  -mbranch-index[0m

           [4mARM[24m   [4mOptions[24m   [1m-mapcs-frame    -mno-apcs-frame   -mabi=[4m[22mname[24m   [1m-mapcs-stack-check    -mno-apcs-stack-check[0m
           [1m-mapcs-reentrant      -mno-apcs-reentrant     -mgeneral-regs-only     -msched-prolog     -mno-sched-prolog[0m
           [1m-mlittle-endian   -mbig-endian  -mbe8   -mbe32   -mfloat-abi=[4m[22mname[24m   [1m-mfp16-format=[4m[22mname[24m   [1m-mthumb-interwork[0m
           [1m-mno-thumb-interwork     -mcpu=[4m[22mname[24m      [1m-march=[4m[22mname[24m      [1m-mfpu=[4m[22mname[24m     [1m-mtune=[4m[22mname[24m     [1m-mprint-tune-info[0m
           [1m-mstructure-size-boundary=[4m[22mn[24m   [1m-mabort-on-noreturn    -mlong-calls     -mno-long-calls    -msingle-pic-base[0m
           [1m-mno-single-pic-base    -mpic-register=[4m[22mreg[24m   [1m-mnop-fun-dllimport   -mpoke-function-name   -mthumb    -marm[0m
           [1m-mflip-thumb  -mtpcs-frame   -mtpcs-leaf-frame  -mcaller-super-interworking    -mcallee-super-interworking[0m
           [1m-mtp=[4m[22mname[24m    [1m-mtls-dialect=[4m[22mdialect[24m  [1m-mword-relocations  -mfix-cortex-m3-ldrd  -mfix-cortex-a57-aes-1742098[0m
           [1m-mfix-cortex-a72-aes-1655431 -munaligned-access -mneon-for-64bits  -mslow-flash-data  -masm-syntax-unified[0m
           [1m-mrestrict-it        -mverbose-cost-dump        -mpure-code        -mcmse        -mfix-cmse-cve-2021-35465[0m
           [1m-mstack-protector-guard=[4m[22mguard[24m                [1m-mstack-protector-guard-offset=[4m[22moffset[24m                 [1m-mfdpic[0m
           [1m-mbranch-protection=[4m[22mnone[24m[1m|[4m[22mstandard[24m[1m|[4m[22mpac-ret[24m[1m[+[4m[22mleaf[24m[1m] [+[4m[22mbti[24m[1m]|[4m[22mbti[24m[1m[+[4m[22mpac-ret[24m[1m[+[4m[22mleaf[24m[1m]][0m

           [4mAVR[24m     [4mOptions[24m    [1m-mmcu=[4m[22mmcu[24m     [1m-mabsdata     -maccumulate-args    -mbranch-cost=[4m[22mcost[24m    [1m-mcall-prologues[0m
           [1m-mgas-isr-prologues    -mint8    -mdouble=[4m[22mbits[24m    [1m-mlong-double=[4m[22mbits[24m    [1m-mn_flash=[4m[22msize[24m     [1m-mno-interrupts[0m
           [1m-mmain-is-OS_task    -mrelax    -mrmw   -mstrict-X   -mtiny-stack  -mfract-convert-truncate  -mshort-calls[0m
           [1m-nodevicelib  -nodevicespecs -Waddr-space-convert  -Wmisspelled-isr[0m

           [4mBlackfin[24m [4mOptions[24m  [1m-mcpu=[4m[22mcpu[24m[[1m-[4m[22msirevision[24m]  [1m-msim   -momit-leaf-frame-pointer   -mno-omit-leaf-frame-pointer[0m
           [1m-mspecld-anomaly    -mno-specld-anomaly    -mcsync-anomaly    -mno-csync-anomaly   -mlow-64k   -mno-low64k[0m
           [1m-mstack-check-l1         -mid-shared-library         -mno-id-shared-library          -mshared-library-id=[4m[22mn[0m
           [1m-mleaf-id-shared-library      -mno-leaf-id-shared-library    -msep-data     -mno-sep-data     -mlong-calls[0m
           [1m-mno-long-calls -mfast-fp  -minline-plt  -mmulticore  -mcorea  -mcoreb  -msdram -micplb[0m

           [4mC6X[24m [4mOptions[24m [1m-mbig-endian  -mlittle-endian  -march=[4m[22mcpu[24m [1m-msim  -msdata=[4m[22msdata-type[0m

           [4mCRIS[24m  [4mOptions[24m  [1m-mcpu=[4m[22mcpu[24m   [1m-march=[4m[22mcpu[24m  [1m-mtune=[4m[22mcpu[24m  [1m-mmax-stack-frame=[4m[22mn[24m  [1m-metrax4    -metrax100    -mpdebug[0m
           [1m-mcc-init   -mno-side-effects  -mstack-align   -mdata-align   -mconst-align  -m32-bit   -m16-bit   -m8-bit[0m
           [1m-mno-prologue-epilogue -melf  -maout  -sim  -sim2 -mmul-bug-workaround  -mno-mul-bug-workaround[0m

           [4mC-SKY[24m [4mOptions[24m [1m-march=[4m[22march[24m  [1m-mcpu=[4m[22mcpu[24m [1m-mbig-endian  -EB  -mlittle-endian   -EL  -mhard-float   -msoft-float[0m
           [1m-mfpu=[4m[22mfpu[24m   [1m-mdouble-float   -mfdivdu  -mfloat-abi=[4m[22mname[24m  [1m-melrw  -mistack  -mmp  -mcp  -mcache  -msecurity[0m
           [1m-mtrust -mdsp  -medsp   -mvdsp  -mdiv   -msmart   -mhigh-registers   -manchor  -mpushpop   -mmultiple-stld[0m
           [1m-mconstpool  -mstack-size  -mccrt -mbranch-cost=[4m[22mn[24m  [1m-mcse-cc  -msched-prolog -msim[0m

           [4mDarwin[24m  [4mOptions[24m [1m-all_load  -allowable_client  -arch  -arch_errors_fatal -arch_only  -bind_at_load  -bundle[0m
           [1m-bundle_loader  -client_name   -compatibility_version    -current_version   -dead_strip   -dependency-file[0m
           [1m-dylib_file     -dylinker_install_name    -dynamic     -dynamiclib     -exported_symbols_list    -filelist[0m
           [1m-flat_namespace   -force_cpusubtype_ALL  -force_flat_namespace   -headerpad_max_install_names  -iframework[0m
           [1m-image_base      -init      -install_name     -keep_private_externs    -multi_module     -multiply_defined[0m
           [1m-multiply_defined_unused  -noall_load    -no_dead_strip_inits_and_terms   -nofixprebinding    -nomultidefs[0m
           [1m-noprebind    -noseglinkedit   -pagezero_size    -prebind   -prebind_all_twolevel_modules  -private_bundle[0m
           [1m-read_only_relocs  -sectalign  -sectobjectsymbols   -whyload   -seg1addr  -sectcreate   -sectobjectsymbols[0m
           [1m-sectorder -segaddr  -segs_read_only_addr  -segs_read_write_addr -seg_addr_table  -seg_addr_table_filename[0m
           [1m-seglinkedit  -segprot   -segs_read_only_addr  -segs_read_write_addr -single_module  -static  -sub_library[0m
           [1m-sub_umbrella       -twolevel_namespace        -umbrella        -undefined        -unexported_symbols_list[0m
           [1m-weak_reference_mismatches   -whatsloaded    -F   -gused   -gfull   -mmacosx-version-min=[4m[22mversion[24m  [1m-mkernel[0m
           [1m-mone-byte-bool[0m

           [4mDEC[24m   [4mAlpha[24m   [4mOptions[24m   [1m-mno-fp-regs    -msoft-float   -mieee    -mieee-with-inexact     -mieee-conformant[0m
           [1m-mfp-trap-mode=[4m[22mmode[24m    [1m-mfp-rounding-mode=[4m[22mmode[24m   [1m-mtrap-precision=[4m[22mmode[24m   [1m-mbuild-constants  -mcpu=[4m[22mcpu-type[0m
           [1m-mtune=[4m[22mcpu-type[24m [1m-mbwx  -mmax   -mfix   -mcix  -mfloat-vax   -mfloat-ieee  -mexplicit-relocs   -msmall-data[0m
           [1m-mlarge-data -msmall-text  -mlarge-text -mmemory-latency=[4m[22mtime[0m

           [4meBPF[24m  [4mOptions[24m  [1m-mbig-endian -mlittle-endian -mkernel=[4m[22mversion[24m [1m-mframe-limit=[4m[22mbytes[24m [1m-mxbpf -mco-re -mno-co-re[0m
           [1m-mjmpext -mjmp32 -malu32 -mcpu=[4m[22mversion[0m

           [4mFR30[24m [4mOptions[24m [1m-msmall-model  -mno-lsim[0m

           [4mFT32[24m [4mOptions[24m [1m-msim  -mlra  -mnodiv  -mft32b  -mcompress  -mnopm[0m

           [4mFRV[24m [4mOptions[24m [1m-mgpr-32  -mgpr-64   -mfpr-32   -mfpr-64  -mhard-float   -msoft-float  -malloc-cc   -mfixed-cc[0m
           [1m-mdword  -mno-dword -mdouble  -mno-double -mmedia  -mno-media  -mmuladd  -mno-muladd -mfdpic  -minline-plt[0m
           [1m-mgprel-ro    -multilib-library-pic   -mlinked-fp   -mlong-calls   -malign-labels  -mlibrary-pic   -macc-4[0m
           [1m-macc-8    -mpack     -mno-pack     -mno-eflags      -mcond-move      -mno-cond-move     -moptimize-membar[0m
           [1m-mno-optimize-membar   -mscc    -mno-scc    -mcond-exec   -mno-cond-exec  -mvliw-branch   -mno-vliw-branch[0m
           [1m-mmulti-cond-exec  -mno-multi-cond-exec  -mnested-cond-exec  -mno-nested-cond-exec   -mtomcat-stats  -mTLS[0m
           [1m-mtls -mcpu=[4m[22mcpu[0m

           [4mGNU/Linux[24m [4mOptions[24m [1m-mglibc  -muclibc  -mmusl  -mbionic  -mandroid -tno-android-cc  -tno-android-ld[0m

           [4mH8/300[24m [4mOptions[24m [1m-mrelax  -mh  -ms  -mn  -mexr  -mno-exr  -mint32  -malign-300[0m

           [4mHPPA[24m  [4mOptions[24m  [1m-march=[4m[22marchitecture-type[24m  [1m-matomic-libcalls  -mbig-switch -mcaller-copies  -mdisable-fpregs[0m
           [1m-mdisable-indexing -mordered  -mfast-indirect-calls   -mgas   -mgnu-ld    -mhp-ld  -mfixed-range=[4m[22mregister-[0m
           [4mrange[24m  [1m-mcoherent-ldcw -mjump-in-delay  -mlinker-opt  -mlong-calls -mlong-load-store  -mno-atomic-libcalls[0m
           [1m-mno-disable-fpregs   -mno-disable-indexing    -mno-fast-indirect-calls     -mno-gas    -mno-jump-in-delay[0m
           [1m-mno-long-load-store  -mno-portable-runtime   -mno-soft-float -mno-space-regs  -msoft-float  -mpa-risc-1-0[0m
           [1m-mpa-risc-1-1  -mpa-risc-2-0  -mportable-runtime  -mschedule=[4m[22mcpu-type[24m   [1m-mspace-regs   -msoft-mult   -msio[0m
           [1m-mwsio -munix=[4m[22munix-std[24m  [1m-nolibdld  -static  -threads[0m

           [4mIA-64[24m   [4mOptions[24m   [1m-mbig-endian    -mlittle-endian    -mgnu-as    -mgnu-ld    -mno-pic  -mvolatile-asm-stop[0m
           [1m-mregister-names       -msdata        -mno-sdata       -mconstant-gp        -mauto-pic        -mfused-madd[0m
           [1m-minline-float-divide-min-latency       -minline-float-divide-max-throughput      -mno-inline-float-divide[0m
           [1m-minline-int-divide-min-latency         -minline-int-divide-max-throughput          -mno-inline-int-divide[0m
           [1m-minline-sqrt-min-latency   -minline-sqrt-max-throughput  -mno-inline-sqrt -mdwarf2-asm  -mearly-stop-bits[0m
           [1m-mfixed-range=[4m[22mregister-range[24m  [1m-mtls-size=[4m[22mtls-size[24m [1m-mtune=[4m[22mcpu-type[24m   [1m-milp32   -mlp64  -msched-br-data-spec[0m
           [1m-msched-ar-data-spec       -msched-control-spec      -msched-br-in-data-spec       -msched-ar-in-data-spec[0m
           [1m-msched-in-control-spec  -msched-spec-ldc    -msched-spec-control-ldc   -msched-prefer-non-data-spec-insns[0m
           [1m-msched-prefer-non-control-spec-insns                                  -msched-stop-bits-after-every-cycle[0m
           [1m-msched-count-spec-in-critical-path   -msel-sched-dont-check-control-spec    -msched-fp-mem-deps-zero-cost[0m
           [1m-msched-max-memory-insns-hard-limit  -msched-max-memory-insns=[4m[22mmax-insns[0m

           [4mLM32[24m    [4mOptions[24m   [1m-mbarrel-shift-enabled    -mdivide-enabled    -mmultiply-enabled   -msign-extend-enabled[0m
           [1m-muser-enabled[0m

           [4mLoongArch[24m  [4mOptions[24m  [1m-march=[4m[22mcpu-type[24m   [1m-mtune=[4m[22mcpu-type[24m  [1m-mabi=[4m[22mbase-abi-type[24m   [1m-mfpu=[4m[22mfpu-type[24m   [1m-msoft-float[0m
           [1m-msingle-float     -mdouble-float    -mbranch-cost=[4m[22mn[24m     [1m-mcheck-zero-division    -mno-check-zero-division[0m
           [1m-mcond-move-int    -mno-cond-move-int   -mcond-move-float    -mno-cond-move-float   -memcpy    -mno-memcpy[0m
           [1m-mstrict-align   -mno-strict-align   -mmax-inline-memcpy-size=[4m[22mn[24m   [1m-mexplicit-relocs   -mno-explicit-relocs[0m
           [1m-mdirect-extern-access -mno-direct-extern-access -mcmodel=[4m[22mcode-model[0m

           [4mM32R/D[24m  [4mOptions[24m  [1m-m32r2   -m32rx   -m32r  -mdebug  -malign-loops    -mno-align-loops   -missue-rate=[4m[22mnumber[0m
           [1m-mbranch-cost=[4m[22mnumber[24m  [1m-mmodel=[4m[22mcode-size-model-type[24m  [1m-msdata=[4m[22msdata-type[24m  [1m-mno-flush-func  -mflush-func=[4m[22mname[0m
           [1m-mno-flush-trap  -mflush-trap=[4m[22mnumber[24m [1m-G [4m[22mnum[0m

           [4mM32C[24m [4mOptions[24m [1m-mcpu=[4m[22mcpu[24m  [1m-msim  -memregs=[4m[22mnumber[0m

           [4mM680x0[24m [4mOptions[24m [1m-march=[4m[22march[24m  [1m-mcpu=[4m[22mcpu[24m   [1m-mtune=[4m[22mtune[24m  [1m-m68000   -m68020   -m68020-40   -m68020-60   -m68030[0m
           [1m-m68040  -m68060   -mcpu32   -m5200   -m5206e   -m528x   -m5307  -m5407 -mcfv4e  -mbitfield  -mno-bitfield[0m
           [1m-mc68000  -mc68020 -mnobitfield   -mrtd   -mno-rtd   -mdiv   -mno-div   -mshort  -mno-short   -mhard-float[0m
           [1m-m68881      -msoft-float      -mpcrel     -malign-int     -mstrict-align     -msep-data     -mno-sep-data[0m
           [1m-mshared-library-id=n       -mid-shared-library       -mno-id-shared-library       -mxgot        -mno-xgot[0m
           [1m-mlong-jump-table-offsets[0m

           [4mMCore[24m   [4mOptions[24m   [1m-mhardlit    -mno-hardlit   -mdiv   -mno-div   -mrelax-immediates  -mno-relax-immediates[0m
           [1m-mwide-bitfields    -mno-wide-bitfields    -m4byte-functions     -mno-4byte-functions     -mcallgraph-data[0m
           [1m-mno-callgraph-data   -mslow-bytes  -mno-slow-bytes  -mno-lsim -mlittle-endian  -mbig-endian  -m210  -m340[0m
           [1m-mstack-increment[0m

           [4mMicroBlaze[24m  [4mOptions[24m  [1m-msoft-float   -mhard-float   -msmall-divides   -mcpu=[4m[22mcpu[24m   [1m-mmemcpy    -mxl-soft-mul[0m
           [1m-mxl-soft-div    -mxl-barrel-shift   -mxl-pattern-compare   -mxl-stack-check   -mxl-gp-opt   -mno-clearbss[0m
           [1m-mxl-multiply-high   -mxl-float-convert   -mxl-float-sqrt  -mbig-endian    -mlittle-endian    -mxl-reorder[0m
           [1m-mxl-mode-[4m[22mapp-model[24m [1m-mpic-data-is-text-relative[0m

           [4mMIPS[24m  [4mOptions[24m  [1m-EL   -EB   -march=[4m[22march[24m   [1m-mtune=[4m[22march[24m  [1m-mips1   -mips2   -mips3  -mips4  -mips32  -mips32r2[0m
           [1m-mips32r3  -mips32r5 -mips32r6  -mips64  -mips64r2  -mips64r3  -mips64r5  -mips64r6  -mips16   -mno-mips16[0m
           [1m-mflip-mips16  -minterlink-compressed  -mno-interlink-compressed -minterlink-mips16  -mno-interlink-mips16[0m
           [1m-mabi=[4m[22mabi[24m  [1m-mabicalls  -mno-abicalls -mshared  -mno-shared   -mplt   -mno-plt   -mxgot   -mno-xgot  -mgp32[0m
           [1m-mgp64   -mfp32   -mfpxx   -mfp64   -mhard-float   -msoft-float -mno-float  -msingle-float  -mdouble-float[0m
           [1m-modd-spreg   -mno-odd-spreg  -mabs=[4m[22mmode[24m   [1m-mnan=[4m[22mencoding[24m  [1m-mdsp   -mno-dsp   -mdspr2   -mno-dspr2   -mmcu[0m
           [1m-mmno-mcu  -meva  -mno-eva -mvirt  -mno-virt -mxpa  -mno-xpa -mcrc  -mno-crc -mginv  -mno-ginv -mmicromips[0m
           [1m-mno-micromips  -mmsa   -mno-msa  -mloongson-mmi   -mno-loongson-mmi   -mloongson-ext    -mno-loongson-ext[0m
           [1m-mloongson-ext2     -mno-loongson-ext2    -mfpu=[4m[22mfpu-type[24m   [1m-msmartmips    -mno-smartmips   -mpaired-single[0m
           [1m-mno-paired-single  -mdmx  -mno-mdmx -mips3d   -mno-mips3d   -mmt   -mno-mt   -mllsc   -mno-llsc  -mlong64[0m
           [1m-mlong32   -msym32   -mno-sym32  -G[4m[22mnum[24m   [1m-mlocal-sdata  -mno-local-sdata -mextern-sdata  -mno-extern-sdata[0m
           [1m-mgpopt        -mno-gopt        -membedded-data         -mno-embedded-data        -muninit-const-in-rodata[0m
           [1m-mno-uninit-const-in-rodata      -mcode-readable=[4m[22msetting[24m      [1m-msplit-addresses       -mno-split-addresses[0m
           [1m-mexplicit-relocs   -mno-explicit-relocs  -mcheck-zero-division   -mno-check-zero-division  -mdivide-traps[0m
           [1m-mdivide-breaks   -mload-store-pairs    -mno-load-store-pairs   -munaligned-access   -mno-unaligned-access[0m
           [1m-mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls -mmad  -mno-mad   -mimadd   -mno-imadd   -mfused-madd[0m
           [1m-mno-fused-madd   -nocpp  -mfix-24k  -mno-fix-24k -mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400[0m
           [1m-mfix-r5900  -mno-fix-r5900  -mfix-r10000   -mno-fix-r10000   -mfix-rm7000   -mno-fix-rm7000  -mfix-vr4120[0m
           [1m-mno-fix-vr4120  -mfix-vr4130  -mno-fix-vr4130  -mfix-sb1  -mno-fix-sb1 -mflush-func=[4m[22mfunc[24m  [1m-mno-flush-func[0m
           [1m-mbranch-cost=[4m[22mnum[24m    [1m-mbranch-likely    -mno-branch-likely    -mcompact-branches=[4m[22mpolicy[24m    [1m-mfp-exceptions[0m
           [1m-mno-fp-exceptions  -mvr4130-align   -mno-vr4130-align   -msynci   -mno-synci  -mlxc1-sxc1  -mno-lxc1-sxc1[0m
           [1m-mmadd4   -mno-madd4  -mrelax-pic-calls   -mno-relax-pic-calls    -mmcount-ra-address   -mframe-header-opt[0m
           [1m-mno-frame-header-opt[0m

           [4mMMIX[24m  [4mOptions[24m  [1m-mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon  -mabi=gnu -mabi=mmixware  -mzero-extend[0m
           [1m-mknuthdiv    -mtoplevel-symbols   -melf     -mbranch-predict     -mno-branch-predict     -mbase-addresses[0m
           [1m-mno-base-addresses  -msingle-exit  -mno-single-exit[0m

           [4mMN10300[24m   [4mOptions[24m   [1m-mmult-bug    -mno-mult-bug   -mno-am33    -mam33   -mam33-2   -mam34  -mtune=[4m[22mcpu-type[0m
           [1m-mreturn-pointer-on-d0 -mno-crt0  -mrelax  -mliw  -msetlb[0m

           [4mMoxie[24m [4mOptions[24m [1m-meb  -mel  -mmul.x  -mno-crt0[0m

           [4mMSP430[24m [4mOptions[24m [1m-msim  -masm-hex  -mmcu=   -mcpu=   -mlarge   -msmall   -mrelax  -mwarn-mcu  -mcode-region=[0m
           [1m-mdata-region=     -msilicon-errata=      -msilicon-errata-warn=    -mhwmult=     -minrt     -mtiny-printf[0m
           [1m-mmax-inline-shift=[0m

           [4mNDS32[24m [4mOptions[24m [1m-mbig-endian   -mlittle-endian  -mreduced-regs   -mfull-regs  -mcmov   -mno-cmov  -mext-perf[0m
           [1m-mno-ext-perf  -mext-perf2   -mno-ext-perf2  -mext-string   -mno-ext-string  -mv3push  -mno-v3push -m16bit[0m
           [1m-mno-16bit  -misr-vector-size=[4m[22mnum[24m  [1m-mcache-block-size=[4m[22mnum[24m  [1m-march=[4m[22march[24m   [1m-mcmodel=[4m[22mcode-model[24m   [1m-mctor-dtor[0m
           [1m-mrelax[0m

           [4mNios[24m  [4mII[24m  [4mOptions[24m  [1m-G [4m[22mnum[24m  [1m-mgpopt=[4m[22moption[24m  [1m-mgpopt  -mno-gpopt -mgprel-sec=[4m[22mregexp[24m  [1m-mr0rel-sec=[4m[22mregexp[24m [1m-mel[0m
           [1m-meb   -mno-bypass-cache    -mbypass-cache    -mno-cache-volatile     -mcache-volatile    -mno-fast-sw-div[0m
           [1m-mfast-sw-div  -mhw-mul   -mno-hw-mul   -mhw-mulx   -mno-hw-mulx   -mno-hw-div   -mhw-div  -mcustom-[4m[22minsn[24m[1m=[4m[22mN[0m
           [1m-mno-custom-[4m[22minsn[24m [1m-mcustom-fpu-cfg=[4m[22mname[24m [1m-mhal  -msmallc  -msys-crt0=[4m[22mname[24m  [1m-msys-lib=[4m[22mname[24m [1m-march=[4m[22march[24m  [1m-mbmx[0m
           [1m-mno-bmx  -mcdx  -mno-cdx[0m

           [4mNvidia[24m [4mPTX[24m [4mOptions[24m [1m-m64  -mmainkernel  -moptimize[0m

           [4mOpenRISC[24m [4mOptions[24m  [1m-mboard=[4m[22mname[24m   [1m-mnewlib   -mhard-mul   -mhard-div  -msoft-mul   -msoft-div  -msoft-float[0m
           [1m-mhard-float    -mdouble-float   -munordered-float  -mcmov   -mror   -mrori   -msext   -msfimm   -mshftimm[0m
           [1m-mcmodel=[4m[22mcode-model[0m

           [4mPDP-11[24m [4mOptions[24m [1m-mfpu  -msoft-float   -mac0   -mno-ac0   -m40   -m45   -m10  -mint32   -mno-int16   -mint16[0m
           [1m-mno-int32 -msplit  -munix-asm  -mdec-asm  -mgnu-asm  -mlra[0m

           [4mPowerPC[24m [4mOptions[24m See RS/6000 and PowerPC Options.

           [4mPRU[24m [4mOptions[24m [1m-mmcu=[4m[22mmcu[24m  [1m-minrt  -mno-relax  -mloop -mabi=[4m[22mvariant[0m

           [4mRISC-V[24m  [4mOptions[24m  [1m-mbranch-cost=[4m[22mN-instruction[24m  [1m-mplt   -mno-plt  -mabi=[4m[22mABI-string[24m  [1m-mfdiv   -mno-fdiv -mdiv[0m
           [1m-mno-div          -misa-spec=[4m[22mISA-spec-string[24m           [1m-march=[4m[22mISA-string[24m           [1m-mtune=[4m[22mprocessor-string[0m
           [1m-mpreferred-stack-boundary=[4m[22mnum[24m      [1m-msmall-data-limit=[4m[22mN-bytes[24m      [1m-msave-restore       -mno-save-restore[0m
           [1m-mshorten-memrefs  -mno-shorten-memrefs -mstrict-align  -mno-strict-align -mcmodel=medlow  -mcmodel=medany[0m
           [1m-mexplicit-relocs   -mno-explicit-relocs  -mrelax   -mno-relax   -mriscv-attribute    -mno-riscv-attribute[0m
           [1m-malign-data=[4m[22mtype[24m           [1m-mbig-endian            -mlittle-endian          -mstack-protector-guard=[4m[22mguard[0m
           [1m-mstack-protector-guard-reg=[4m[22mreg[24m    [1m-mstack-protector-guard-offset=[4m[22moffset[24m    [1m-mcsr-check     -mno-csr-check[0m
           [1m-minline-atomics  -mno-inline-atomics[0m

           [4mRL78[24m  [4mOptions[24m  [1m-msim   -mmul=none   -mmul=g13  -mmul=g14  -mallregs -mcpu=g10  -mcpu=g13  -mcpu=g14  -mg10[0m
           [1m-mg13  -mg14 -m64bit-doubles  -m32bit-doubles  -msave-mduc-in-interrupts[0m

           [4mRS/6000[24m [4mand[24m [4mPowerPC[24m  [4mOptions[24m  [1m-mcpu=[4m[22mcpu-type[24m  [1m-mtune=[4m[22mcpu-type[24m  [1m-mcmodel=[4m[22mcode-model[24m  [1m-mpowerpc64  -maltivec[0m
           [1m-mno-altivec -mpowerpc-gpopt  -mno-powerpc-gpopt -mpowerpc-gfxopt  -mno-powerpc-gfxopt -mmfcrf  -mno-mfcrf[0m
           [1m-mpopcntb   -mno-popcntb   -mpopcntd   -mno-popcntd  -mfprnd   -mno-fprnd  -mcmpb   -mno-cmpb   -mhard-dfp[0m
           [1m-mno-hard-dfp  -mfull-toc    -mminimal-toc   -mno-fp-in-toc   -mno-sum-in-toc  -m64    -m32    -mxl-compat[0m
           [1m-mno-xl-compat   -mpe -malign-power  -malign-natural -msoft-float  -mhard-float  -mmultiple  -mno-multiple[0m
           [1m-mupdate      -mno-update     -mavoid-indexed-addresses      -mno-avoid-indexed-addresses     -mfused-madd[0m
           [1m-mno-fused-madd     -mbit-align     -mno-bit-align    -mstrict-align    -mno-strict-align    -mrelocatable[0m
           [1m-mno-relocatable   -mrelocatable-lib   -mno-relocatable-lib  -mtoc   -mno-toc   -mlittle   -mlittle-endian[0m
           [1m-mbig   -mbig-endian  -mdynamic-no-pic   -mswdiv  -msingle-pic-base -mprioritize-restricted-insns=[4m[22mpriority[0m
           [1m-msched-costly-dep=[4m[22mdependence_type[24m [1m-minsert-sched-nops=[4m[22mscheme[24m [1m-mcall-aixdesc  -mcall-eabi   -mcall-freebsd[0m
           [1m-mcall-linux     -mcall-netbsd     -mcall-openbsd    -mcall-sysv    -mcall-sysv-eabi    -mcall-sysv-noeabi[0m
           [1m-mtraceback=[4m[22mtraceback_type[24m   [1m-maix-struct-return    -msvr4-struct-return   -mabi=[4m[22mabi-type[24m     [1m-msecure-plt[0m
           [1m-mbss-plt     -mlongcall      -mno-longcall      -mpltseq     -mno-pltseq    -mblock-move-inline-limit=[4m[22mnum[0m
           [1m-mblock-compare-inline-limit=[4m[22mnum[24m    [1m-mblock-compare-inline-loop-limit=[4m[22mnum[24m     [1m-mno-block-ops-unaligned-vsx[0m
           [1m-mstring-compare-inline-limit=[4m[22mnum[24m  [1m-misel   -mno-isel  -mvrsave   -mno-vrsave  -mmulhw  -mno-mulhw -mdlmzb[0m
           [1m-mno-dlmzb -mprototype  -mno-prototype -msim  -mmvme  -mads   -myellowknife   -memb   -msdata  -msdata=[4m[22mopt[0m
           [1m-mreadonly-in-sdata     -mvxworks     -G   [4m[22mnum[24m   [1m-mrecip    -mrecip=[4m[22mopt[24m    [1m-mno-recip    -mrecip-precision[0m
           [1m-mno-recip-precision     -mveclibabi=[4m[22mtype[24m       [1m-mfriz       -mno-friz      -mpointers-to-nested-functions[0m
           [1m-mno-pointers-to-nested-functions      -msave-toc-indirect      -mno-save-toc-indirect     -mpower8-fusion[0m
           [1m-mno-mpower8-fusion   -mpower8-vector    -mno-power8-vector   -mcrypto    -mno-crypto    -mhtm    -mno-htm[0m
           [1m-mquad-memory     -mno-quad-memory   -mquad-memory-atomic    -mno-quad-memory-atomic   -mcompat-align-parm[0m
           [1m-mno-compat-align-parm    -mfloat128     -mno-float128     -mfloat128-hardware      -mno-float128-hardware[0m
           [1m-mgnu-attribute     -mno-gnu-attribute    -mstack-protector-guard=[4m[22mguard[24m    [1m-mstack-protector-guard-reg=[4m[22mreg[0m
           [1m-mstack-protector-guard-offset=[4m[22moffset[24m  [1m-mprefixed  -mno-prefixed  -mpcrel   -mno-pcrel   -mmma   -mno-mmma[0m
           [1m-mrop-protect -mno-rop-protect -mprivileged -mno-privileged[0m

           [4mRX[24m  [4mOptions[24m  [1m-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu -mcpu= -mbig-endian-data  -mlittle-endian-data[0m
           [1m-msmall-data   -msim    -mno-sim   -mas100-syntax     -mno-as100-syntax    -mrelax    -mmax-constant-size=[0m
           [1m-mint-register=          -mpid         -mallow-string-insns          -mno-allow-string-insns         -mjsr[0m
           [1m-mno-warn-multiple-fast-interrupts -msave-acc-in-interrupts[0m

           [4mS/390[24m  [4mand[24m  [4mzSeries[24m  [4mOptions[24m  [1m-mtune=[4m[22mcpu-type[24m   [1m-march=[4m[22mcpu-type[24m  [1m-mhard-float   -msoft-float    -mhard-dfp[0m
           [1m-mno-hard-dfp    -mlong-double-64     -mlong-double-128    -mbackchain    -mno-backchain    -mpacked-stack[0m
           [1m-mno-packed-stack -msmall-exec  -mno-small-exec   -mmvcle   -mno-mvcle  -m64   -m31   -mdebug   -mno-debug[0m
           [1m-mesa   -mzarch  -mhtm  -mvx  -mzvector -mtpf-trace  -mno-tpf-trace  -mtpf-trace-skip  -mno-tpf-trace-skip[0m
           [1m-mfused-madd    -mno-fused-madd   -mwarn-framesize    -mwarn-dynamicstack    -mstack-size    -mstack-guard[0m
           [1m-mhotpatch=[4m[22mhalfwords[24m[1m,[4m[22mhalfwords[0m

           [4mSH[24m   [4mOptions[24m   [1m-m1   -m2   -m2e  -m2a-nofpu   -m2a-single-only   -m2a-single   -m2a  -m3   -m3e  -m4-nofpu[0m
           [1m-m4-single-only  -m4-single  -m4 -m4a-nofpu  -m4a-single-only  -m4a-single  -m4a  -m4al -mb  -ml  -mdalign[0m
           [1m-mrelax -mbigtable  -mfmovd  -mrenesas  -mno-renesas  -mnomacsave  -mieee   -mno-ieee   -mbitops   -misize[0m
           [1m-minline-ic_invalidate     -mpadstruct    -mprefergot     -musermode    -multcost=[4m[22mnumber[24m    [1m-mdiv=[4m[22mstrategy[0m
           [1m-mdivsi3_libfunc=[4m[22mname[24m  [1m-mfixed-range=[4m[22mregister-range[24m [1m-maccumulate-outgoing-args -matomic-model=[4m[22matomic-model[0m
           [1m-mbranch-cost=[4m[22mnum[24m  [1m-mzdcbranch  -mno-zdcbranch  -mcbranch-force-delay-slot  -mfused-madd   -mno-fused-madd[0m
           [1m-mfsca  -mno-fsca  -mfsrra  -mno-fsrra -mpretend-cmove  -mtas[0m

           [4mSolaris[24m [4m2[24m [4mOptions[24m [1m-mclear-hwcap  -mno-clear-hwcap  -mimpure-text  -mno-impure-text -pthreads[0m

           [4mSPARC[24m  [4mOptions[24m  [1m-mcpu=[4m[22mcpu-type[24m  [1m-mtune=[4m[22mcpu-type[24m  [1m-mcmodel=[4m[22mcode-model[24m  [1m-mmemory-model=[4m[22mmem-model[24m  [1m-m32  -m64[0m
           [1m-mapp-regs   -mno-app-regs  -mfaster-structs   -mno-faster-structs   -mflat   -mno-flat  -mfpu    -mno-fpu[0m
           [1m-mhard-float     -msoft-float    -mhard-quad-float     -msoft-quad-float   -mstack-bias    -mno-stack-bias[0m
           [1m-mstd-struct-return   -mno-std-struct-return   -munaligned-doubles    -mno-unaligned-doubles   -muser-mode[0m
           [1m-mno-user-mode  -mv8plus   -mno-v8plus   -mvis   -mno-vis  -mvis2   -mno-vis2   -mvis3   -mno-vis3  -mvis4[0m
           [1m-mno-vis4  -mvis4b  -mno-vis4b -mcbcond  -mno-cbcond   -mfmaf   -mno-fmaf   -mfsmuld   -mno-fsmuld  -mpopc[0m
           [1m-mno-popc  -msubxc  -mno-subxc -mfix-at697f  -mfix-ut699  -mfix-ut700  -mfix-gr712rc -mlra  -mno-lra[0m

           [4mSystem[24m [4mV[24m [4mOptions[24m [1m-Qy  -Qn  -YP,[4m[22mpaths[24m  [1m-Ym,[4m[22mdir[0m

           [4mV850[24m [4mOptions[24m [1m-mlong-calls  -mno-long-calls  -mep  -mno-ep -mprolog-function  -mno-prolog-function  -mspace[0m
           [1m-mtda=[4m[22mn[24m    [1m-msda=[4m[22mn[24m   [1m-mzda=[4m[22mn[24m  [1m-mapp-regs   -mno-app-regs  -mdisable-callt   -mno-disable-callt  -mv850e2v3[0m
           [1m-mv850e2   -mv850e1   -mv850es  -mv850e   -mv850   -mv850e3v5  -mloop  -mrelax  -mlong-jumps  -msoft-float[0m
           [1m-mhard-float -mgcc-abi -mrh850-abi -mbig-switch[0m

           [4mVAX[24m [4mOptions[24m [1m-mg  -mgnu  -munix  -mlra[0m

           [4mVisium[24m [4mOptions[24m [1m-mdebug  -msim  -mfpu  -mno-fpu  -mhard-float  -msoft-float -mcpu=[4m[22mcpu-type[24m  [1m-mtune=[4m[22mcpu-type[0m
           [1m-msv-mode  -muser-mode[0m

           [4mVMS[24m [4mOptions[24m [1m-mvms-return-codes  -mdebug-main=[4m[22mprefix[24m  [1m-mmalloc64 -mpointer-size=[4m[22msize[0m

           [4mVxWorks[24m [4mOptions[24m [1m-mrtp  -non-static  -Bstatic  -Bdynamic -Xbind-lazy  -Xbind-now[0m

           [4mx86[24m  [4mOptions[24m [1m-mtune=[4m[22mcpu-type[24m  [1m-march=[4m[22mcpu-type[24m [1m-mtune-ctrl=[4m[22mfeature-list[24m  [1m-mdump-tune-features  -mno-default[0m
           [1m-mfpmath=[4m[22munit[24m [1m-masm=[4m[22mdialect[24m  [1m-mno-fancy-math-387 -mno-fp-ret-in-387  -m80387   -mhard-float   -msoft-float[0m
           [1m-mno-wide-multiply   -mrtd   -malign-double  -mpreferred-stack-boundary=[4m[22mnum[24m  [1m-mincoming-stack-boundary=[4m[22mnum[0m
           [1m-mcld  -mcx16   -msahf   -mmovbe   -mcrc32  -mmwait  -mrecip   -mrecip=[4m[22mopt[24m  [1m-mvzeroupper   -mprefer-avx128[0m
           [1m-mprefer-vector-width=[4m[22mopt[24m [1m-mmove-max=[4m[22mbits[24m [1m-mstore-max=[4m[22mbits[24m [1m-mmmx  -msse  -msse2  -msse3  -mssse3  -msse4.1[0m
           [1m-msse4.2   -msse4   -mavx  -mavx2   -mavx512f   -mavx512pf   -mavx512er  -mavx512cd  -mavx512vl -mavx512bw[0m
           [1m-mavx512dq   -mavx512ifma   -mavx512vbmi   -msha   -maes  -mpclmul   -mfsgsbase   -mrdrnd   -mf16c   -mfma[0m
           [1m-mpconfig   -mwbnoinvd -mptwrite  -mprefetchwt1  -mclflushopt  -mclwb  -mxsavec  -mxsaves -msse4a  -m3dnow[0m
           [1m-m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop -madx  -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt[0m
           [1m-mrtm  -mhle  -mlwp -mmwaitx  -mclzero  -mpku  -mthreads  -mgfni  -mvaes  -mwaitpkg -mshstk -mmanual-endbr[0m
           [1m-mcet-switch  -mforce-indirect-call  -mavx512vbmi2  -mavx512bf16  -menqcmd  -mvpclmulqdq    -mavx512bitalg[0m
           [1m-mmovdiri   -mmovdir64b  -mavx512vpopcntdq -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid[0m
           [1m-mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk  -mamx-tile   -mamx-int8   -mamx-bf16  -muintr[0m
           [1m-mhreset  -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi[0m
           [1m-mraoint   -mamx-complex   -mcldemote    -mms-bitfields    -mno-align-stringops     -minline-all-stringops[0m
           [1m-minline-stringops-dynamically     -mstringop-strategy=[4m[22malg[24m    [1m-mkl   -mwidekl   -mmemcpy-strategy=[4m[22mstrategy[0m
           [1m-mmemset-strategy=[4m[22mstrategy[24m       [1m-mpush-args        -maccumulate-outgoing-args        -m128bit-long-double[0m
           [1m-m96bit-long-double   -mlong-double-64   -mlong-double-80   -mlong-double-128  -mregparm=[4m[22mnum[24m  [1m-msseregparm[0m
           [1m-mveclibabi=[4m[22mtype[24m     [1m-mvect8-ret-in-mem    -mpc32     -mpc64      -mpc80      -mdaz-ftz     -mstackrealign[0m
           [1m-momit-leaf-frame-pointer    -mno-red-zone    -mno-tls-direct-seg-refs   -mcmodel=[4m[22mcode-model[24m    [1m-mabi=[4m[22mname[0m
           [1m-maddress-mode=[4m[22mmode[24m [1m-m32  -m64   -mx32   -m16   -miamcu   -mlarge-data-threshold=[4m[22mnum[24m  [1m-msse2avx   -mfentry[0m
           [1m-mrecord-mcount       -mnop-mcount       -m8bit-idiv      -minstrument-return=[4m[22mtype[24m      [1m-mfentry-name=[4m[22mname[0m
           [1m-mfentry-section=[4m[22mname[24m  [1m-mavx256-split-unaligned-load    -mavx256-split-unaligned-store   -malign-data=[4m[22mtype[0m
           [1m-mstack-protector-guard=[4m[22mguard[24m     [1m-mstack-protector-guard-reg=[4m[22mreg[24m    [1m-mstack-protector-guard-offset=[4m[22moffset[0m
           [1m-mstack-protector-guard-symbol=[4m[22msymbol[24m  [1m-mgeneral-regs-only   -mcall-ms2sysv-xlogues   -mrelax-cmpxchg-loop[0m
           [1m-mindirect-branch=[4m[22mchoice[24m     [1m-mfunction-return=[4m[22mchoice[24m    [1m-mindirect-branch-register    -mharden-sls=[4m[22mchoice[0m
           [1m-mindirect-branch-cs-prefix -mneeded -mno-direct-extern-access -munroll-only-small-loops -mlam=[4m[22mchoice[0m

           [4mx86[24m [4mWindows[24m [4mOptions[24m  [1m-mconsole   -mcygwin   -mno-cygwin   -mdll  -mnop-fun-dllimport   -mthread  -municode[0m
           [1m-mwin32  -mwindows  -fno-set-stack-executable[0m

           [4mXstormy16[24m [4mOptions[24m [1m-msim[0m

           [4mXtensa[24m  [4mOptions[24m  [1m-mconst16  -mno-const16 -mfused-madd  -mno-fused-madd -mforce-no-pic -mserialize-volatile[0m
           [1m-mno-serialize-volatile      -mtext-section-literals       -mno-text-section-literals      -mauto-litpools[0m
           [1m-mno-auto-litpools    -mtarget-align    -mno-target-align   -mlongcalls    -mno-longcalls   -mabi=[4m[22mabi-type[0m
           [1m-mextra-l32r-costs=[4m[22mcycles[0m

           [4mzSeries[24m [4mOptions[24m See S/390 and zSeries Options.

   [1mOptions Controlling the Kind of Output[0m
       Compilation can involve up to four stages: preprocessing, compilation proper, assembly and linking, always  in
       that  order.   GCC is capable of preprocessing and compiling several files either into several assembler input
       files, or into one assembler input file; then each assembler input file produces an object file,  and  linking
       combines all the object files (those newly compiled, and those specified as input) into an executable file.

       For any given input file, the file name suffix determines what kind of compilation is done:

       [4mfile[24m[1m.c[0m
           C source code that must be preprocessed.

       [4mfile[24m[1m.i[0m
           C source code that should not be preprocessed.

       [4mfile[24m[1m.ii[0m
           C++ source code that should not be preprocessed.

       [4mfile[24m[1m.m[0m
           Objective-C  source code.  Note that you must link with the [4mlibobjc[24m library to make an Objective-C program
           work.

       [4mfile[24m[1m.mi[0m
           Objective-C source code that should not be preprocessed.

       [4mfile[24m[1m.mm[0m
       [4mfile[24m[1m.M[0m
           Objective-C++ source code.  Note that you must link with the [4mlibobjc[24m  library  to  make  an  Objective-C++
           program work.  Note that [1m.M [22mrefers to a literal capital M.

       [4mfile[24m[1m.mii[0m
           Objective-C++ source code that should not be preprocessed.

       [4mfile[24m[1m.h[0m
           C,  C++,  Objective-C or Objective-C++ header file to be turned into a precompiled header (default), or C,
           C++ header file to be turned into an Ada spec (via the [1m-fdump-ada-spec [22mswitch).

       [4mfile[24m[1m.cc[0m
       [4mfile[24m[1m.cp[0m
       [4mfile[24m[1m.cxx[0m
       [4mfile[24m[1m.cpp[0m
       [4mfile[24m[1m.CPP[0m
       [4mfile[24m[1m.c++[0m
       [4mfile[24m[1m.C[0m
           C++ source code that must be preprocessed.  Note that in [1m.cxx[22m, the last two letters must both be literally
           [1mx[22m.  Likewise, [1m.C [22mrefers to a literal capital C.

       [4mfile[24m[1m.mm[0m
       [4mfile[24m[1m.M[0m
           Objective-C++ source code that must be preprocessed.

       [4mfile[24m[1m.mii[0m
           Objective-C++ source code that should not be preprocessed.

       [4mfile[24m[1m.hh[0m
       [4mfile[24m[1m.H[0m
       [4mfile[24m[1m.hp[0m
       [4mfile[24m[1m.hxx[0m
       [4mfile[24m[1m.hpp[0m
       [4mfile[24m[1m.HPP[0m
       [4mfile[24m[1m.h++[0m
       [4mfile[24m[1m.tcc[0m
           C++ header file to be turned into a precompiled header or Ada spec.

       [4mfile[24m[1m.f[0m
       [4mfile[24m[1m.for[0m
       [4mfile[24m[1m.ftn[0m
           Fixed form Fortran source code that should not be preprocessed.

       [4mfile[24m[1m.F[0m
       [4mfile[24m[1m.FOR[0m
       [4mfile[24m[1m.fpp[0m
       [4mfile[24m[1m.FPP[0m
       [4mfile[24m[1m.FTN[0m
           Fixed form Fortran source code that must be preprocessed (with the traditional preprocessor).

       [4mfile[24m[1m.f90[0m
       [4mfile[24m[1m.f95[0m
       [4mfile[24m[1m.f03[0m
       [4mfile[24m[1m.f08[0m
           Free form Fortran source code that should not be preprocessed.

       [4mfile[24m[1m.F90[0m
       [4mfile[24m[1m.F95[0m
       [4mfile[24m[1m.F03[0m
       [4mfile[24m[1m.F08[0m
           Free form Fortran source code that must be preprocessed (with the traditional preprocessor).

       [4mfile[24m[1m.go[0m
           Go source code.

       [4mfile[24m[1m.d[0m
           D source code.

       [4mfile[24m[1m.di[0m
           D interface file.

       [4mfile[24m[1m.dd[0m
           D documentation code (Ddoc).

       [4mfile[24m[1m.ads[0m
           Ada source code file that contains a library unit declaration (a declaration of a package, subprogram,  or
           generic,  or  a  generic  instantiation),  or  a library unit renaming declaration (a package, generic, or
           subprogram renaming declaration).  Such files are also called [4mspecs[24m.

       [4mfile[24m[1m.adb[0m
           Ada source code file containing a library unit body (a subprogram or package body).  Such files  are  also
           called [4mbodies[24m.

       [4mfile[24m[1m.s[0m
           Assembler code.

       [4mfile[24m[1m.S[0m
       [4mfile[24m[1m.sx[0m
           Assembler code that must be preprocessed.

       [4mother[0m
           An  object  file to be fed straight into linking.  Any file name with no recognized suffix is treated this
           way.

       You can specify the input language explicitly with the [1m-x [22moption:

       [1m-x [4m[22mlanguage[0m
           Specify explicitly the [4mlanguage[24m for the following input files (rather than letting the compiler  choose  a
           default  based  on the file name suffix).  This option applies to all following input files until the next
           [1m-x [22moption.  Possible values for [4mlanguage[24m are:

                   c  c-header  cpp-output
                   c++  c++-header  c++-system-header c++-user-header c++-cpp-output
                   objective-c  objective-c-header  objective-c-cpp-output
                   objective-c++ objective-c++-header objective-c++-cpp-output
                   assembler  assembler-with-cpp
                   ada
                   d
                   f77  f77-cpp-input f95  f95-cpp-input
                   go

       [1m-x none[0m
           Turn off any specification of a language, so that subsequent files are handled  according  to  their  file
           name suffixes (as they are if [1m-x [22mhas not been used at all).

       If you only want some of the stages of compilation, you can use [1m-x [22m(or filename suffixes) to tell [1mgcc [22mwhere to
       start,  and  one  of  the options [1m-c[22m, [1m-S[22m, or [1m-E [22mto say where [1mgcc [22mis to stop.  Note that some combinations (for
       example, [1m-x cpp-output -E[22m) instruct [1mgcc [22mto do nothing at all.

       [1m-c  [22mCompile or assemble the source files, but do not link.   The  linking  stage  simply  is  not  done.   The
           ultimate output is in the form of an object file for each source file.

           By  default, the object file name for a source file is made by replacing the suffix [1m.c[22m, [1m.i[22m, [1m.s[22m, etc., with
           [1m.o[22m.

           Unrecognized input files, not requiring compilation or assembly, are ignored.

       [1m-S  [22mStop after the stage of compilation proper; do not assemble.  The output is in the form  of  an  assembler
           code file for each non-assembler input file specified.

           By  default,  the assembler file name for a source file is made by replacing the suffix [1m.c[22m, [1m.i[22m, etc., with
           [1m.s[22m.

           Input files that don't require compilation are ignored.

       [1m-E  [22mStop after the preprocessing stage; do not run the  compiler  proper.   The  output  is  in  the  form  of
           preprocessed source code, which is sent to the standard output.

           Input files that don't require preprocessing are ignored.

       [1m-o [4m[22mfile[0m
           Place the primary output in file [4mfile[24m.  This applies to whatever sort of output is being produced, whether
           it be an executable file, an object file, an assembler file or preprocessed C code.

           If  [1m-o  [22mis  not  specified,  the  default  is  to  put  an  executable  file in [4ma.out[24m, the object file for
           [4msource.suffix[24m in [4msource.o[24m, its assembler file in [4msource.s[24m, a precompiled header file in [4msource.suffix.gch[24m,
           and all preprocessed C source on standard output.

           Though [1m-o [22mnames only the primary output, it also affects the naming of auxiliary and  dump  outputs.   See
           the  examples  below.   Unless  overridden, both auxiliary outputs and dump outputs are placed in the same
           directory as the primary output.  In auxiliary outputs, the suffix of the input file is replaced with that
           of the auxiliary output file type; in dump outputs, the suffix of the dump file is appended to  the  input
           file  suffix.   In  compilation  commands, the base name of both auxiliary and dump outputs is that of the
           primary output; in compile and link commands, the primary output name, minus  the  executable  suffix,  is
           combined  with the input file name.  If both share the same base name, disregarding the suffix, the result
           of the combination is that base name, otherwise, they are concatenated, separated by a dash.

                   gcc -c foo.c ...

           will use [4mfoo.o[24m as the primary output, and place aux outputs and dumps next to it, e.g., aux  file  [4mfoo.dwo[0m
           for [1m-gsplit-dwarf[22m, and dump file [4mfoo.c.???r.final[24m for [1m-fdump-rtl-final[22m.

           If  a  non-linker  output  file  is explicitly specified, aux and dump files by default take the same base
           name:

                   gcc -c foo.c -o dir/foobar.o ...

           will name aux outputs [4mdir/foobar.*[24m and dump outputs [4mdir/foobar.c.*[24m.

           A linker output will instead prefix aux and dump outputs:

                   gcc foo.c bar.c -o dir/foobar ...

           will generally name aux outputs [4mdir/foobar-foo.*[24m and [4mdir/foobar-bar.*[24m, and dump outputs [4mdir/foobar-foo.c.*[0m
           and [4mdir/foobar-bar.c.*[24m.

           The one exception to the above is when the executable shares the base name with the single input:

                   gcc foo.c -o dir/foo ...

           in which case aux outputs are named [4mdir/foo.*[24m and dump outputs named [4mdir/foo.c.*[24m.

           The location and the names of auxiliary and dump  outputs  can  be  adjusted  by  the  options  [1m-dumpbase[22m,
           [1m-dumpbase-ext[22m, [1m-dumpdir[22m, [1m-save-temps=cwd[22m, and [1m-save-temps=obj[22m.

       [1m-dumpbase [4m[22mdumpbase[0m
           This  option  sets  the base name for auxiliary and dump output files.  It does not affect the name of the
           primary output file.  Intermediate outputs, when preserved, are not regarded as primary  outputs,  but  as
           auxiliary outputs:

                   gcc -save-temps -S foo.c

           saves the (no longer) temporary preprocessed file in [4mfoo.i[24m, and then compiles to the (implied) output file
           [4mfoo.s[24m, whereas:

                   gcc -save-temps -dumpbase save-foo -c foo.c

           preprocesses  to  in  [4msave-foo.i[24m, compiles to [4msave-foo.s[24m (now an intermediate, thus auxiliary output), and
           then assembles to the (implied) output file [4mfoo.o[24m.

           Absent this option, dump and aux files take their names from the input  file,  or  from  the  (non-linker)
           output  file, if one is explicitly specified: dump output files (e.g. those requested by [1m-fdump-* [22moptions)
           with the input name suffix, and aux  output  files  (those  requested  by  other  non-dump  options,  e.g.
           "-save-temps", "-gsplit-dwarf", "-fcallgraph-info") without it.

           Similar  suffix  differentiation  of  dump  and aux outputs can be attained for explicitly-given [1m-dumpbase[0m
           [1mbasename.suf [22mby also specifying [1m-dumpbase-ext .suf[22m.

           If [4mdumpbase[24m is explicitly specified with any directory component, any [4mdumppfx[24m specification (e.g. [1m-dumpdir[0m
           or [1m-save-temps=*[22m) is ignored, and instead of appending to it, [4mdumpbase[24m fully overrides it:

                   gcc foo.c -c -o dir/foo.o -dumpbase alt/foo \
                     -dumpdir pfx- -save-temps=cwd ...

           creates auxiliary and dump outputs named [4malt/foo.*[24m, disregarding [4mdir/[24m in [1m-o[22m,  the  [4m./[24m  prefix  implied  by
           [1m-save-temps=cwd[22m, and [4mpfx-[24m in [1m-dumpdir[22m.

           When  [1m-dumpbase  [22mis specified in a command that compiles multiple inputs, or that compiles and then links,
           it may be combined with [4mdumppfx[24m, as specified under [1m-dumpdir[22m.  Then, each input file is compiled using the
           combined [4mdumppfx[24m, and default values for [4mdumpbase[24m and [4mauxdropsuf[24m are computed for each input file:

                   gcc foo.c bar.c -c -dumpbase main ...

           creates [4mfoo.o[24m and [4mbar.o[24m as primary outputs, and avoids overwriting the auxiliary and dump outputs by using
           the [4mdumpbase[24m as a prefix, creating auxiliary and dump outputs named [4mmain-foo.*[24m  and [4mmain-bar.*[24m.

           An empty string specified as [4mdumpbase[24m avoids the influence  of  the  output  basename  in  the  naming  of
           auxiliary and dump outputs during compilation, computing default values :

                   gcc -c foo.c -o dir/foobar.o -dumpbase " ...

           will name aux outputs [4mdir/foo.*[24m and dump outputs [4mdir/foo.c.*[24m.  Note how their basenames are taken from the
           input name, but the directory still defaults to that of the output.

           The empty-string dumpbase does not prevent the use of the output basename for outputs during linking:

                   gcc foo.c bar.c -o dir/foobar -dumpbase " -flto ...

           The  compilation of the source files will name auxiliary outputs [4mdir/foo.*[24m and [4mdir/bar.*[24m, and dump outputs
           [4mdir/foo.c.*[24m and [4mdir/bar.c.*[24m.  LTO recompilation during linking will use  [4mdir/foobar.[24m  as  the  prefix  for
           dumps and auxiliary files.

       [1m-dumpbase-ext [4m[22mauxdropsuf[0m
           When forming the name of an auxiliary (but not a dump) output file, drop trailing [4mauxdropsuf[24m from [4mdumpbase[0m
           before  appending  any  suffixes.   If  not  specified,  this  option  defaults to the suffix of a default
           [4mdumpbase[24m, i.e., the suffix of the input file when [1m-dumpbase  [22mis  not  present  in  the  command  line,  or
           [4mdumpbase[24m is combined with [4mdumppfx[24m.

                   gcc foo.c -c -o dir/foo.o -dumpbase x-foo.c -dumpbase-ext .c ...

           creates  [4mdir/foo.o[24m as the main output, and generates auxiliary outputs in [4mdir/x-foo.*[24m, taking the location
           of the primary output, and dropping the [4m.c[24m suffix from the [4mdumpbase[24m.   Dump  outputs  retain  the  suffix:
           [4mdir/x-foo.c.*[24m.

           This  option  is  disregarded  if  it  does  not  match  the  suffix of a specified [4mdumpbase[24m, except as an
           alternative to the executable suffix when appending the linker output base name to [4mdumppfx[24m,  as  specified
           below:

                   gcc foo.c bar.c -o main.out -dumpbase-ext .out ...

           creates [4mmain.out[24m as the primary output, and avoids overwriting the auxiliary and dump outputs by using the
           executable  name  minus [4mauxdropsuf[24m as a prefix, creating auxiliary outputs named [4mmain-foo.*[24m and [4mmain-bar.*[0m
           and dump outputs named [4mmain-foo.c.*[24m and [4mmain-bar.c.*[24m.

       [1m-dumpdir [4m[22mdumppfx[0m
           When forming the name of an auxiliary or dump output file, use [4mdumppfx[24m as a prefix:

                   gcc -dumpdir pfx- -c foo.c ...

           creates [4mfoo.o[24m as the primary output, and auxiliary outputs named [4mpfx-foo.*[24m, combining  the  given  [4mdumppfx[0m
           with  the  default  [4mdumpbase[24m derived from the default primary output, derived in turn from the input name.
           Dump outputs also take the input name suffix: [4mpfx-foo.c.*[24m.

           If [4mdumppfx[24m is to be used as a directory name, it must end with a directory separator:

                   gcc -dumpdir dir/ -c foo.c -o obj/bar.o ...

           creates [4mobj/bar.o[24m as the primary output, and  auxiliary  outputs  named  [4mdir/bar.*[24m,  combining  the  given
           [4mdumppfx[24m  with the default [4mdumpbase[24m derived from the primary output name.  Dump outputs also take the input
           name suffix: [4mdir/bar.c.*[24m.

           It defaults to the location of the output file, unless the output file is a special file like "/dev/null".
           Options [1m-save-temps=cwd [22mand [1m-save-temps=obj [22moverride this default, just like an explicit [1m-dumpdir  [22moption.
           In case multiple such options are given, the last one prevails:

                   gcc -dumpdir pfx- -c foo.c -save-temps=obj ...

           outputs [4mfoo.o[24m, with auxiliary outputs named [4mfoo.*[24m because [1m-save-temps=* [22moverrides the [4mdumppfx[24m given by the
           earlier [1m-dumpdir [22moption.  It does not matter that [1m=obj [22mis the default for [1m-save-temps[22m, nor that the output
           directory is implicitly the current directory.  Dump outputs are named [4mfoo.c.*[24m.

           When  compiling from multiple input files, if [1m-dumpbase [22mis specified, [4mdumpbase[24m, minus a [4mauxdropsuf[24m suffix,
           and a dash are appended to (or override, if containing any directory components) an explicit or  defaulted
           [4mdumppfx[24m, so that each of the multiple compilations gets differently-named aux and dump outputs.

                   gcc foo.c bar.c -c -dumpdir dir/pfx- -dumpbase main ...

           outputs  auxiliary  dumps  to  [4mdir/pfx-main-foo.*[24m  and [4mdir/pfx-main-bar.*[24m, appending [4mdumpbase[24m- to [4mdumppfx[24m.
           Dump outputs retain the input file suffix: [4mdir/pfx-main-foo.c.*[24m  and  [4mdir/pfx-main-bar.c.*[24m,  respectively.
           Contrast with the single-input compilation:

                   gcc foo.c -c -dumpdir dir/pfx- -dumpbase main ...

           that,  applying  [1m-dumpbase  [22mto  a single source, does not compute and append a separate [4mdumpbase[24m per input
           file.  Its auxiliary and dump outputs go in [4mdir/pfx-main.*[24m.

           When compiling and then linking from multiple input files, a defaulted  or  explicitly  specified  [4mdumppfx[0m
           also  undergoes  the  [4mdumpbase[24m-  transformation  above (e.g. the compilation of [4mfoo.c[24m and [4mbar.c[24m above, but
           without [1m-c[22m).  If neither [1m-dumpdir [22mnor [1m-dumpbase [22mare given, the linker output base name, minus  [4mauxdropsuf[24m,
           if  specified, or the executable suffix otherwise, plus a dash is appended to the default [4mdumppfx[24m instead.
           Note, however, that unlike earlier cases of linking:

                   gcc foo.c bar.c -dumpdir dir/pfx- -o main ...

           does not append the output name [4mmain[24m to [4mdumppfx[24m, because [1m-dumpdir [22mis explicitly specified.   The  goal  is
           that  the  explicitly-specified  [4mdumppfx[24m  may  contain the specified output name as part of the prefix, if
           desired; only an explicitly-specified [1m-dumpbase [22mwould be combined  with  it,  in  order  to  avoid  simply
           discarding a meaningful option.

           When  compiling  and  then  linking  from  a  single  input file, the linker output base name will only be
           appended to the default [4mdumppfx[24m as above if it does not share the base name with  the  single  input  file
           name.   This  has been covered in single-input linking cases above, but not with an explicit [1m-dumpdir [22mthat
           inhibits the combination, even if overridden by [1m-save-temps=*[22m:

                   gcc foo.c -dumpdir alt/pfx- -o dir/main.exe -save-temps=cwd ...

           Auxiliary outputs are named [4mfoo.*[24m,  and  dump  outputs  [4mfoo.c.*[24m,  in  the  current  working  directory  as
           ultimately requested by [1m-save-temps=cwd[22m.

           Summing  it all up for an intuitive though slightly imprecise data flow: the primary output name is broken
           into a directory part and a basename part; [4mdumppfx[24m is set to the former, unless overridden by [1m-dumpdir  [22mor
           [1m-save-temps=*[22m,  and  [4mdumpbase[24m  is set to the latter, unless overriden by [1m-dumpbase[22m.  If there are multiple
           inputs or linking, this [4mdumpbase[24m may be combined with [4mdumppfx[24m and taken from each input  file.   Auxiliary
           output  names  for  each  input  are formed by combining [4mdumppfx[24m, [4mdumpbase[24m minus suffix, and the auxiliary
           output suffix; dump output names are only different in that the suffix from [4mdumpbase[24m is retained.

           When it comes to auxiliary and dump outputs created during LTO recompilation, a combination of [4mdumppfx[24m and
           [4mdumpbase[24m, as given or as derived from the linker output name but not from inputs, even in cases  in  which
           this  combination would not otherwise be used as such, is passed down with a trailing period replacing the
           compiler-added dash, if any, as a [1m-dumpdir [22moption to [1mlto-wrapper[22m; being involved in linking, this  program
           does not normally get any [1m-dumpbase [22mand [1m-dumpbase-ext[22m, and it ignores them.

           When  running  sub-compilers,  [1mlto-wrapper  [22mappends  LTO  stage  names to the received [4mdumppfx[24m, ensures it
           contains a directory component so that it overrides any [1m-dumpdir[22m, and passes that  as  [1m-dumpbase  [22mto  sub-
           compilers.

       [1m-v  [22mPrint  (on  standard error output) the commands executed to run the stages of compilation.  Also print the
           version number of the compiler driver program and of the preprocessor and the compiler proper.

       [1m-###[0m
           Like [1m-v [22mexcept the  commands  are  not  executed  and  arguments  are  quoted  unless  they  contain  only
           alphanumeric  characters  or  "./-_".   This  is  useful for shell scripts to capture the driver-generated
           command lines.

       [1m--help[0m
           Print (on the standard output) a description of the command-line options understood by  [1mgcc[22m.   If  the  [1m-v[0m
           option  is  also  specified then [1m--help [22mis also passed on to the various processes invoked by [1mgcc[22m, so that
           they can display the command-line options they accept.  If the [1m-Wextra  [22moption  has  also  been  specified
           (prior  to  the  [1m--help [22moption), then command-line options that have no documentation associated with them
           are also displayed.

       [1m--target-help[0m
           Print (on the standard output) a description of target-specific command-line options for each  tool.   For
           some targets extra target-specific information may also be printed.

       [1m--help={[4m[22mclass[24m|[[1m^[22m][4mqualifier[24m[1m}[22m[[1m,...[22m]
           Print  (on  the standard output) a description of the command-line options understood by the compiler that
           fit into all specified classes and qualifiers.  These are the supported classes:

           [1moptimizers[0m
               Display all of the optimization options supported by the compiler.

           [1mwarnings[0m
               Display all of the options controlling warning messages produced by the compiler.

           [1mtarget[0m
               Display target-specific options.  Unlike the [1m--target-help [22moption however, target-specific options  of
               the  linker and assembler are not displayed.  This is because those tools do not currently support the
               extended [1m--help= [22msyntax.

           [1mparams[0m
               Display the values recognized by the [1m--param [22moption.

           [4mlanguage[0m
               Display the options supported for [4mlanguage[24m, where [4mlanguage[24m  is  the  name  of  one  of  the  languages
               supported  in  this  version  of GCC.  If an option is supported by all languages, one needs to select
               [1mcommon [22mclass.

           [1mcommon[0m
               Display the options that are common to all languages.

           These are the supported qualifiers:

           [1mundocumented[0m
               Display only those options that are undocumented.

           [1mjoined[0m
               Display options taking an argument that appears after an equal sign in the same  continuous  piece  of
               text, such as: [1m--help=target[22m.

           [1mseparate[0m
               Display options taking an argument that appears as a separate word following the original option, such
               as: [1m-o output-file[22m.

           Thus for example to display all the undocumented target-specific switches supported by the compiler, use:

                   --help=target,undocumented

           The  sense  of a qualifier can be inverted by prefixing it with the [1m^ [22mcharacter, so for example to display
           all binary warning options (i.e., ones that are either on or off and that do not take  an  argument)  that
           have a description, use:

                   --help=warnings,^joined,^undocumented

           The argument to [1m--help= [22mshould not consist solely of inverted qualifiers.

           Combining  several  classes  is possible, although this usually restricts the output so much that there is
           nothing to display.  One case where it does work, however, is when one of  the  classes  is  [4mtarget[24m.   For
           example, to display all the target-specific optimization options, use:

                   --help=target,optimizers

           The  [1m--help= [22moption can be repeated on the command line.  Each successive use displays its requested class
           of options, skipping those that have already been displayed.  If [1m--help [22mis also specified anywhere on  the
           command line then this takes precedence over any [1m--help= [22moption.

           If  the  [1m-Q  [22moption  appears  on  the  command  line  before the [1m--help= [22moption, then the descriptive text
           displayed by [1m--help= [22mis changed.  Instead of describing the displayed options, an indication is  given  as
           to  whether  the  option is enabled, disabled or set to a specific value (assuming that the compiler knows
           this at the point where the [1m--help= [22moption is used).

           Here is a truncated example from the ARM port of [1mgcc[22m:

                     % gcc -Q -mabi=2 --help=target -c
                     The following options are target specific:
                     -mabi=                                2
                     -mabort-on-noreturn                   [disabled]
                     -mapcs                                [disabled]

           The output is sensitive to the effects of previous command-line options, so for example it is possible  to
           find out which optimizations are enabled at [1m-O2 [22mby using:

                   -Q -O2 --help=optimizers

           Alternatively you can discover which binary optimizations are enabled by [1m-O3 [22mby using:

                   gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
                   gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
                   diff /tmp/O2-opts /tmp/O3-opts | grep enabled

       [1m--version[0m
           Display the version number and copyrights of the invoked GCC.

       [1m-pass-exit-codes[0m
           Normally  the  [1mgcc  [22mprogram  exits  with  the code of 1 if any phase of the compiler returns a non-success
           return code.  If you specify [1m-pass-exit-codes[22m, the  [1mgcc  [22mprogram  instead  returns  with  the  numerically
           highest  error  produced  by  any phase returning an error indication.  The C, C++, and Fortran front ends
           return 4 if an internal compiler error is encountered.

       [1m-pipe[0m
           Use pipes rather than temporary files for communication between the various stages of  compilation.   This
           fails to work on some systems where the assembler is unable to read from a pipe; but the GNU assembler has
           no trouble.

       [1m-specs=[4m[22mfile[0m
           Process  [4mfile[24m after the compiler reads in the standard [4mspecs[24m file, in order to override the defaults which
           the [1mgcc [22mdriver program uses when determining what switches to pass to [1mcc1[22m, [1mcc1plus[22m,  [1mas[22m,  [1mld[22m,  etc.   More
           than  one  [1m-specs=[4m[22mfile[24m can be specified on the command line, and they are processed in order, from left to
           right.

       [1m-wrapper[0m
           Invoke all subcommands under a wrapper program.  The name of the wrapper program and  its  parameters  are
           passed as a comma separated list.

                   gcc -c t.c -wrapper gdb,--args

           This invokes all subprograms of [1mgcc [22munder [1mgdb --args[22m, thus the invocation of [1mcc1 [22mis [1mgdb --args cc1 ...[22m.

       [1m-ffile-prefix-map=[4m[22mold[24m[1m=[4m[22mnew[0m
           When  compiling  files  residing  in  directory  [4mold[24m,  record  any references to them in the result of the
           compilation as if the files resided in directory [4mnew[24m instead.  Specifying this  option  is  equivalent  to
           specifying  all  the individual [1m-f*-prefix-map [22moptions.  This can be used to make reproducible builds that
           are location independent.  Directories referenced by directives are not affected by  these  options.   See
           also [1m-fmacro-prefix-map[22m, [1m-fdebug-prefix-map[22m, [1m-fprofile-prefix-map [22mand [1m-fcanon-prefix-map[22m.

       [1m-fcanon-prefix-map[0m
           For  the  [1m-f*-prefix-map  [22moptions  normally  comparison  of  [4mold[24m prefix against the filename that would be
           normally referenced in the result of the compilation is done using textual comparison of the prefixes,  or
           ignoring  character case for case insensitive filesystems and considering slashes and backslashes as equal
           on DOS based filesystems.  The [1m-fcanon-prefix-map [22mcauses such comparisons  to  be  done  on  canonicalized
           paths of [4mold[24m and the referenced filename.

       [1m-fplugin=[4m[22mname[24m[1m.so[0m
           Load  the  plugin code in file [4mname[24m.so, assumed to be a shared object to be dlopen'd by the compiler.  The
           base name of the shared object file is used to identify the plugin for the purposes  of  argument  parsing
           (See  [1m-fplugin-arg-[4m[22mname[24m[1m-[4m[22mkey[24m[1m=[4m[22mvalue[24m  below).   Each plugin should define the callback functions specified in
           the Plugins API.

       [1m-fplugin-arg-[4m[22mname[24m[1m-[4m[22mkey[24m[1m=[4m[22mvalue[0m
           Define an argument called [4mkey[24m with a value of [4mvalue[24m for the plugin called [4mname[24m.

       [1m-fdump-ada-spec[22m[[1m-slim[22m]
           For C and C++ source and include files, generate corresponding Ada specs.

       [1m-fada-spec-parent=[4m[22munit[0m
           In conjunction with [1m-fdump-ada-spec[22m[[1m-slim[22m] above, generate Ada specs as child units of parent [4munit[24m.

       [1m-fdump-go-spec=[4m[22mfile[0m
           For input files in any language, generate corresponding  Go  declarations  in  [4mfile[24m.   This  generates  Go
           "const",  "type", "var", and "func" declarations which may be a useful way to start writing a Go interface
           to code written in some other language.

       [1m@[4m[22mfile[0m
           Read command-line options from [4mfile[24m.  The options read are inserted in place of the original @[4mfile[24m option.
           If [4mfile[24m does not exist, or cannot be read, then the option will be treated literally, and not removed.

           Options in [4mfile[24m are separated by whitespace.  A whitespace character may  be  included  in  an  option  by
           surrounding  the  entire  option in either single or double quotes.  Any character (including a backslash)
           may be included by prefixing the character to be included with a backslash.  The [4mfile[24m may  itself  contain
           additional @[4mfile[24m options; any such options will be processed recursively.

   [1mCompiling C++ Programs[0m
       C++  source  files  conventionally use one of the suffixes [1m.C[22m, [1m.cc[22m, [1m.cpp[22m, [1m.CPP[22m, [1m.c++[22m, [1m.cp[22m, or [1m.cxx[22m; C++ header
       files often use [1m.hh[22m, [1m.hpp[22m, [1m.H[22m, or (for shared template code) [1m.tcc[22m; and preprocessed C++ files use  the  suffix
       [1m.ii[22m.   GCC  recognizes  files with these names and compiles them as C++ programs even if you call the compiler
       the same way as for compiling C programs (usually with the name [1mgcc[22m).

       However, the use of [1mgcc [22mdoes not add the C++ library.  [1mg++ [22mis a  program  that  calls  GCC  and  automatically
       specifies  linking  against  the  C++ library.  It treats [1m.c[22m, [1m.h [22mand [1m.i [22mfiles as C++ source files instead of C
       source files unless [1m-x [22mis used.  This program is also useful when precompiling a  C  header  file  with  a  [1m.h[0m
       extension for use in C++ compilations.  On many systems, [1mg++ [22mis also installed with the name [1mc++[22m.

       When  you  compile  C++  programs,  you  may  specify  many  of the same command-line options that you use for
       compiling programs in any language; or command-line options meaningful for C and related languages; or options
       that are meaningful only for C++ programs.

   [1mOptions Controlling C Dialect[0m
       The following options control the dialect of C (or languages derived from C,  such  as  C++,  Objective-C  and
       Objective-C++) that the compiler accepts:

       [1m-ansi[0m
           In C mode, this is equivalent to [1m-std=c90[22m. In C++ mode, it is equivalent to [1m-std=c++98[22m.

           This  turns  off certain features of GCC that are incompatible with ISO C90 (when compiling C code), or of
           standard C++ (when compiling C++ code), such as the "asm" and "typeof"  keywords,  and  predefined  macros
           such  as "unix" and "vax" that identify the type of system you are using.  It also enables the undesirable
           and rarely used ISO trigraph feature.  For the C  compiler,  it  disables  recognition  of  C++  style  [1m//[0m
           comments as well as the "inline" keyword.

           The  alternate keywords "__asm__", "__extension__", "__inline__" and "__typeof__" continue to work despite
           [1m-ansi[22m.  You would not want to use them in an ISO C program, of course, but it is useful  to  put  them  in
           header  files that might be included in compilations done with [1m-ansi[22m.  Alternate predefined macros such as
           "__unix__" and "__vax__" are also available, with or without [1m-ansi[22m.

           The [1m-ansi [22moption does not cause non-ISO programs to be rejected gratuitously.   For  that,  [1m-Wpedantic  [22mis
           required in addition to [1m-ansi[22m.

           The  macro  "__STRICT_ANSI__"  is  predefined when the [1m-ansi [22moption is used.  Some header files may notice
           this macro and refrain from declaring certain functions or defining certain macros that the  ISO  standard
           doesn't  call  for;  this  is  to avoid interfering with any programs that might use these names for other
           things.

           Functions that are normally built in but do not have semantics defined by ISO  C  (such  as  "alloca"  and
           "ffs") are not built-in functions when [1m-ansi [22mis used.

       [1m-std=[0m
           Determine the language standard.   This option is currently only supported when compiling C or C++.

           The compiler can accept several base standards, such as [1mc90 [22mor [1mc++98[22m, and GNU dialects of those standards,
           such  as [1mgnu90 [22mor [1mgnu++98[22m.  When a base standard is specified, the compiler accepts all programs following
           that standard plus those using GNU extensions that do not contradict it.  For example, [1m-std=c90 [22mturns  off
           certain  features  of GCC that are incompatible with ISO C90, such as the "asm" and "typeof" keywords, but
           not other GNU extensions that do not have a meaning in ISO C90, such as omitting the middle term of a "?:"
           expression. On the other hand, when a GNU dialect of a standard is specified, all  features  supported  by
           the  compiler are enabled, even when those features change the meaning of the base standard.  As a result,
           some strict-conforming programs may be rejected.   The  particular  standard  is  used  by  [1m-Wpedantic  [22mto
           identify  which  features  are  GNU  extensions given that version of the standard. For example [1m-std=gnu90[0m
           [1m-Wpedantic [22mwarns about C++ style [1m// [22mcomments, while [1m-std=gnu99 -Wpedantic [22mdoes not.

           A value for this option must be provided; possible values are

           [1mc90[0m
           [1mc89[0m
           [1miso9899:1990[0m
               Support all ISO C90 programs (certain GNU extensions that conflict with ISO C90 are disabled). Same as
               [1m-ansi [22mfor C code.

           [1miso9899:199409[0m
               ISO C90 as modified in amendment 1.

           [1mc99[0m
           [1mc9x[0m
           [1miso9899:1999[0m
           [1miso9899:199x[0m
               ISO C99.  This standard is substantially completely supported, modulo bugs and  floating-point  issues
               (mainly   but   not  entirely  relating  to  optional  C99  features  from  Annexes  F  and  G).   See
               <[1mhttps://gcc.gnu.org/c99status.html[22m> for  more  information.   The  names  [1mc9x  [22mand  [1miso9899:199x  [22mare
               deprecated.

           [1mc11[0m
           [1mc1x[0m
           [1miso9899:2011[0m
               ISO  C11,  the  2011  revision  of  the  ISO  C  standard.   This standard is substantially completely
               supported, modulo bugs, floating-point issues (mainly  but  not  entirely  relating  to  optional  C11
               features  from  Annexes  F  and  G)  and  the  optional  Annexes  K (Bounds-checking interfaces) and L
               (Analyzability).  The name [1mc1x [22mis deprecated.

           [1mc17[0m
           [1mc18[0m
           [1miso9899:2017[0m
           [1miso9899:2018[0m
               ISO C17, the 2017 revision of the ISO C standard (published in 2018).  This standard is  same  as  C11
               except  for  corrections  of  defects (all of which are also applied with [1m-std=c11[22m) and a new value of
               "__STDC_VERSION__", and so is supported to the same extent as C11.

           [1mc2x [22mThe next version of the ISO C standard, still under development.  The  support  for  this  version  is
               experimental and incomplete.

           [1mgnu90[0m
           [1mgnu89[0m
               GNU dialect of ISO C90 (including some C99 features).

           [1mgnu99[0m
           [1mgnu9x[0m
               GNU dialect of ISO C99.  The name [1mgnu9x [22mis deprecated.

           [1mgnu11[0m
           [1mgnu1x[0m
               GNU dialect of ISO C11.  The name [1mgnu1x [22mis deprecated.

           [1mgnu17[0m
           [1mgnu18[0m
               GNU dialect of ISO C17.  This is the default for C code.

           [1mgnu2x[0m
               The next version of the ISO C standard, still under development, plus GNU extensions.  The support for
               this version is experimental and incomplete.

           [1mc++98[0m
           [1mc++03[0m
               The 1998 ISO C++ standard plus the 2003 technical corrigendum and some additional defect reports. Same
               as [1m-ansi [22mfor C++ code.

           [1mgnu++98[0m
           [1mgnu++03[0m
               GNU dialect of [1m-std=c++98[22m.

           [1mc++11[0m
           [1mc++0x[0m
               The 2011 ISO C++ standard plus amendments.  The name [1mc++0x [22mis deprecated.

           [1mgnu++11[0m
           [1mgnu++0x[0m
               GNU dialect of [1m-std=c++11[22m.  The name [1mgnu++0x [22mis deprecated.

           [1mc++14[0m
           [1mc++1y[0m
               The 2014 ISO C++ standard plus amendments.  The name [1mc++1y [22mis deprecated.

           [1mgnu++14[0m
           [1mgnu++1y[0m
               GNU dialect of [1m-std=c++14[22m.  The name [1mgnu++1y [22mis deprecated.

           [1mc++17[0m
           [1mc++1z[0m
               The 2017 ISO C++ standard plus amendments.  The name [1mc++1z [22mis deprecated.

           [1mgnu++17[0m
           [1mgnu++1z[0m
               GNU dialect of [1m-std=c++17[22m.  This is the default for C++ code.  The name [1mgnu++1z [22mis deprecated.

           [1mc++20[0m
           [1mc++2a[0m
               The  2020 ISO C++ standard plus amendments.  Support is experimental, and could change in incompatible
               ways in future releases.  The name [1mc++2a [22mis deprecated.

           [1mgnu++20[0m
           [1mgnu++2a[0m
               GNU dialect of [1m-std=c++20[22m.  Support is experimental, and could change in incompatible ways  in  future
               releases.  The name [1mgnu++2a [22mis deprecated.

           [1mc++2b[0m
           [1mc++23[0m
               The next revision of the ISO C++ standard, planned for 2023.  Support is highly experimental, and will
               almost certainly change in incompatible ways in future releases.

           [1mgnu++2b[0m
           [1mgnu++23[0m
               GNU  dialect  of  [1m-std=c++2b[22m.   Support  is  highly  experimental, and will almost certainly change in
               incompatible ways in future releases.

       [1m-aux-info [4m[22mfilename[0m
           Output to the given filename prototyped declarations for  all  functions  declared  and/or  defined  in  a
           translation  unit, including those in header files.  This option is silently ignored in any language other
           than C.

           Besides declarations, the file indicates, in comments, the origin of each  declaration  (source  file  and
           line),  whether  the  declaration  was  implicit,  prototyped  or unprototyped ([1mI[22m, [1mN [22mfor new or [1mO [22mfor old,
           respectively, in the first character after the line number and the colon), and  whether  it  came  from  a
           declaration  or  a definition ([1mC [22mor [1mF[22m, respectively, in the following character).  In the case of function
           definitions, a K&R-style list of arguments  followed  by  their  declarations  is  also  provided,  inside
           comments, after the declaration.

       [1m-fno-asm[0m
           Do  not  recognize  "asm",  "inline"  or  "typeof"  as  a  keyword,  so  that  code can use these words as
           identifiers.  You can use the keywords "__asm__", "__inline__" and  "__typeof__"  instead.   In  C,  [1m-ansi[0m
           implies [1m-fno-asm[22m.

           In  C++,  "inline"  is  a  standard  keyword  and is not affected by this switch.  You may want to use the
           [1m-fno-gnu-keywords [22mflag instead, which disables "typeof" but not "asm" and "inline".  In C99 mode ([1m-std=c99[0m
           or [1m-std=gnu99[22m), this switch only affects the "asm" and "typeof" keywords, since  "inline"  is  a  standard
           keyword  in  ISO  C99.   In C2X mode ([1m-std=c2x [22mor [1m-std=gnu2x[22m), this switch only affects the "asm" keyword,
           since "typeof" is a standard keyword in ISO C2X.

       [1m-fno-builtin[0m
       [1m-fno-builtin-[4m[22mfunction[0m
           Don't recognize built-in functions that do not begin with [1m__builtin_ [22mas prefix.

           GCC normally generates special code to handle certain built-in functions more efficiently;  for  instance,
           calls  to  "alloca"  may become single instructions which adjust the stack directly, and calls to "memcpy"
           may become inline copy loops.  The resulting code is often both smaller and faster, but since the function
           calls no longer appear as such, you cannot set a breakpoint  on  those  calls,  nor  can  you  change  the
           behavior of the functions by linking with a different library.  In addition, when a function is recognized
           as  a  built-in function, GCC may use information about that function to warn about problems with calls to
           that function, or to generate more efficient code, even if the resulting code still contains calls to that
           function.  For example, warnings are given with [1m-Wformat [22mfor bad calls to "printf" when "printf" is  built
           in and "strlen" is known not to modify global memory.

           With  the [1m-fno-builtin-[4m[22mfunction[24m option only the built-in function [4mfunction[24m is disabled.  [4mfunction[24m must not
           begin with [1m__builtin_[22m.  If a function is named that is not built-in in this version of GCC, this option is
           ignored.  There is no corresponding [1m-fbuiltin-[4m[22mfunction[24m option; if you wish to  enable  built-in  functions
           selectively when using [1m-fno-builtin [22mor [1m-ffreestanding[22m, you may define macros such as:

                   #define abs(n)          __builtin_abs ((n))
                   #define strcpy(d, s)    __builtin_strcpy ((d), (s))

       [1m-fcond-mismatch[0m
           Allow  conditional expressions with mismatched types in the second and third arguments.  The value of such
           an expression is void.  This option is not supported for C++.

       [1m-ffreestanding[0m
           Assert that compilation targets a freestanding environment.  This implies  [1m-fno-builtin[22m.   A  freestanding
           environment is one in which the standard library may not exist, and program startup may not necessarily be
           at "main".  The most obvious example is an OS kernel.  This is equivalent to [1m-fno-hosted[22m.

       [1m-fgimple[0m
           Enable  parsing  of  function  definitions  marked  with "__GIMPLE".  This is an experimental feature that
           allows unit testing of GIMPLE passes.

       [1m-fgnu-tm[0m
           When the option [1m-fgnu-tm [22mis specified, the compiler generates  code  for  the  Linux  variant  of  Intel's
           current  Transactional  Memory  ABI  specification  document  (Revision  1.1,  May  6  2009).   This is an
           experimental feature whose interface may change in future versions of GCC, as the  official  specification
           changes.  Please note that not all architectures are supported for this feature.

           For more information on GCC's support for transactional memory,

           Note   that   the   transactional   memory   feature   is   not   supported   with   non-call   exceptions
           ([1m-fnon-call-exceptions[22m).

       [1m-fgnu89-inline[0m
           The option [1m-fgnu89-inline [22mtells GCC to use the traditional GNU semantics for "inline"  functions  when  in
           C99 mode.

           Using  this  option  is  roughly  equivalent  to  adding the "gnu_inline" function attribute to all inline
           functions.

           The option [1m-fno-gnu89-inline [22mexplicitly tells GCC to use the C99 semantics for "inline"  when  in  C99  or
           gnu99  mode  (i.e.,  it  specifies  the  default  behavior).   This option is not supported in [1m-std=c90 [22mor
           [1m-std=gnu90 [22mmode.

           The preprocessor macros "__GNUC_GNU_INLINE__" and  "__GNUC_STDC_INLINE__"  may  be  used  to  check  which
           semantics are in effect for "inline" functions.

       [1m-fhosted[0m
           Assert  that  compilation  targets a hosted environment.  This implies [1m-fbuiltin[22m.  A hosted environment is
           one in which the entire standard library is available, and in which "main" has a  return  type  of  "int".
           Examples are nearly everything except a kernel.  This is equivalent to [1m-fno-freestanding[22m.

       [1m-flax-vector-conversions[0m
           Allow  implicit conversions between vectors with differing numbers of elements and/or incompatible element
           types.  This option should not be used for new code.

       [1m-fms-extensions[0m
           Accept some non-standard constructs used in Microsoft header files.

           In C++ code, this allows member names in structures to be similar to previous types declarations.

                   typedef int UOW;
                   struct ABC {
                     UOW UOW;
                   };

           Some cases of unnamed fields in structures and unions are only accepted with this option.

           Note that this option is off for all targets except for x86 targets using ms-abi.

       [1m-foffload=disable[0m
       [1m-foffload=default[0m
       [1m-foffload=[4m[22mtarget-list[0m
           Specify for which OpenMP and OpenACC offload targets code should  be  generated.   The  default  behavior,
           equivalent   to   [1m-foffload=default[22m,  is  to  generate  code  for  all  supported  offload  targets.   The
           [1m-foffload=disable [22mform generates code only for the host fallback,  while  [1m-foffload=[4m[22mtarget-list[24m  generates
           code only for the specified comma-separated list of offload targets.

           Offload targets are specified in GCC's internal target-triplet format. You can run the compiler with [1m-v [22mto
           show the list of configured offload targets under "OFFLOAD_TARGET_NAMES".

       [1m-foffload-options=[4m[22moptions[0m
       [1m-foffload-options=[4m[22mtarget-triplet-list[24m[1m=[4m[22moptions[0m
           With  [1m-foffload-options=[4m[22moptions[24m,  GCC  passes  the  specified  [4moptions[24m  to  the  compilers for all enabled
           offloading targets.  You can specify options that apply only to a specific target or targets by using  the
           [1m-foffload-options=[4m[22mtarget-list[24m[1m=[4m[22moptions[24m  form.  The [4mtarget-list[24m is a comma-separated list in the same format
           as for the [1m-foffload= [22moption.

           Typical command lines are

                   -foffload-options=-lgfortran -foffload-options=-lm
                   -foffload-options="-lgfortran -lm" -foffload-options=nvptx-none=-latomic
                   -foffload-options=amdgcn-amdhsa=-march=gfx906 -foffload-options=-lm

       [1m-fopenacc[0m
           Enable handling of OpenACC directives "#pragma acc" in C/C++ and "!$acc" in Fortran.   When  [1m-fopenacc  [22mis
           specified,  the  compiler  generates  accelerated  code  according  to the OpenACC Application Programming
           Interface v2.6 <[1mhttps://www.openacc.org[22m>.  This option implies [1m-pthread[22m, and thus  is  only  supported  on
           targets that have support for [1m-pthread[22m.

       [1m-fopenacc-dim=[4m[22mgeom[0m
           Specify  default compute dimensions for parallel offload regions that do not explicitly specify.  The [4mgeom[0m
           value is a triple of ':'-separated sizes, in order 'gang', 'worker' and, 'vector'.  A size can be omitted,
           to use a target-specific default value.

       [1m-fopenmp[0m
           Enable  handling  of  OpenMP  directives   "#pragma   omp"   in   C/C++,   "[[omp::directive(...)]]"   and
           "[[omp::sequence(...)]]"  in  C++  and  "!$omp"  in  Fortran.   When  [1m-fopenmp  [22mis specified, the compiler
           generates   parallel   code   according   to   the   OpenMP    Application    Program    Interface    v4.5
           <[1mhttps://www.openmp.org[22m>.   This  option implies [1m-pthread[22m, and thus is only supported on targets that have
           support for [1m-pthread[22m. [1m-fopenmp [22mimplies [1m-fopenmp-simd[22m.

       [1m-fopenmp-simd[0m
           Enable handling of OpenMP's "simd", "declare simd",  "declare  reduction",  "assume",  "ordered",  "scan",
           "loop"  directives  and  combined or composite directives with "simd" as constituent with "#pragma omp" in
           C/C++, "[[omp::directive(...)]]" and "[[omp::sequence(...)]]" in C++ and "!$omp" in Fortran.  Other OpenMP
           directives are ignored.

       [1m-fopenmp-target-simd-clone[0m
       [1m-fopenmp-target-simd-clone=[4m[22mdevice-type[0m
           In addition to generating SIMD clones for functions marked with the "declare  simd"  directive,  GCC  also
           generates  clones  for  functions  marked with the OpenMP "declare target" directive that are suitable for
           vectorization when this option is in effect.  The [4mdevice-type[24m may be one of "none", "host", "nohost",  and
           "any", which correspond to keywords for the "device_type" clause of the "declare target" directive; clones
           are  generated  for  the  intersection  of devices specified.  [1m-fopenmp-target-simd-clone [22mis equivalent to
           [1m-fopenmp-target-simd-clone=any      [22mand      [1m-fno-openmp-target-simd-clone      [22mis      equivalent      to
           [1m-fopenmp-target-simd-clone=none[22m.

           At  [1m-O2  [22mand  higher (but not [1m-Os [22mor [1m-Og[22m) this optimization defaults to [1m-fopenmp-target-simd-clone=nohost[22m;
           otherwise it is disabled by default.

       [1m-fpermitted-flt-eval-methods=[4m[22mstyle[0m
           ISO/IEC TS 18661-3 defines new permissible values for "FLT_EVAL_METHOD" that indicate that operations  and
           constants  with  a  semantic  type  that  is  an interchange or extended format should be evaluated to the
           precision and range of that type.  These new values are a superset of those permitted under C99/C11, which
           does not specify the meaning of other positive values of "FLT_EVAL_METHOD".  As such, code  conforming  to
           C11 may not have been written expecting the possibility of the new values.

           [1m-fpermitted-flt-eval-methods   [22mspecifies   whether   the   compiler   should  allow  only  the  values  of
           "FLT_EVAL_METHOD" specified in C99/C11, or the extended set of values specified in ISO/IEC TS 18661-3.

           [4mstyle[24m is either "c11" or "ts-18661-3" as appropriate.

           The default when in a standards compliant mode ([1m-std=c11 [22mor similar) is  [1m-fpermitted-flt-eval-methods=c11[22m.
           The default when in a GNU dialect ([1m-std=gnu11 [22mor similar) is [1m-fpermitted-flt-eval-methods=ts-18661-3[22m.

       [1m-fplan9-extensions[0m
           Accept some non-standard constructs used in Plan 9 code.

           This  enables  [1m-fms-extensions[22m,  permits passing pointers to structures with anonymous fields to functions
           that expect pointers to elements of the type of the field,  and  permits  referring  to  anonymous  fields
           declared using a typedef.    This is only supported for C, not C++.

       [1m-fsigned-bitfields[0m
       [1m-funsigned-bitfields[0m
       [1m-fno-signed-bitfields[0m
       [1m-fno-unsigned-bitfields[0m
           These  options control whether a bit-field is signed or unsigned, when the declaration does not use either
           "signed" or "unsigned".  By default, such a bit-field is signed, because this  is  consistent:  the  basic
           integer types such as "int" are signed types.

       [1m-fsigned-char[0m
           Let the type "char" be signed, like "signed char".

           Note  that  this  is  equivalent  to  [1m-fno-unsigned-char[22m,  which  is the negative form of [1m-funsigned-char[22m.
           Likewise, the option [1m-fno-signed-char [22mis equivalent to [1m-funsigned-char[22m.

       [1m-funsigned-char[0m
           Let the type "char" be unsigned, like "unsigned char".

           Each kind of machine has a default for what "char" should be.   It  is  either  like  "unsigned  char"  by
           default or like "signed char" by default.

           Ideally,  a  portable  program  should  always use "signed char" or "unsigned char" when it depends on the
           signedness of an object.  But many programs have been written to use plain "char"  and  expect  it  to  be
           signed,  or  expect  it to be unsigned, depending on the machines they were written for.  This option, and
           its inverse, let you make such a program work with the opposite default.

           The type "char" is always a distinct type from each of "signed char" or "unsigned char", even  though  its
           behavior is always just like one of those two.

       [1m-fstrict-flex-arrays[0m
           Control  when  to  treat  the  trailing array of a structure as a flexible array member for the purpose of
           accessing the elements of such an array.  The positive form is equivalent to [1m-fstrict-flex-arrays=3[22m, which
           is the strictest.  A trailing array is treated as a flexible array member only when it is  declared  as  a
           flexible   array   member   per   C99   standard   onwards.    The   negative   form   is   equivalent  to
           [1m-fstrict-flex-arrays=0[22m, which is the least strict.  All trailing  arrays  of  structures  are  treated  as
           flexible array members.

       [1m-fstrict-flex-arrays=[4m[22mlevel[0m
           Control  when  to  treat  the  trailing array of a structure as a flexible array member for the purpose of
           accessing the elements of such an array.  The value of [4mlevel[24m controls the level of strictness.

           The possible values of [4mlevel[24m are the same as for the "strict_flex_array" attribute.

           You can control this behavior for a specific trailing array field of a structure  by  using  the  variable
           attribute "strict_flex_array" attribute.

       [1m-fsso-struct=[4m[22mendianness[0m
           Set  the  default scalar storage order of structures and unions to the specified endianness.  The accepted
           values are [1mbig-endian[22m, [1mlittle-endian [22mand [1mnative [22mfor the native endianness of  the  target  (the  default).
           This option is not supported for C++.

           [1mWarning:  [22mthe  [1m-fsso-struct  [22mswitch  causes  GCC  to generate code that is not binary compatible with code
           generated without it if the specified endianness is not the native endianness of the target.

   [1mOptions Controlling C++ Dialect[0m
       This section describes the command-line options that are only meaningful for C++ programs.  You can  also  use
       most  of  the  GNU  compiler  options  regardless of what language your program is in.  For example, you might
       compile a file [4mfirstClass.C[24m like this:

               g++ -g -fstrict-enums -O -c firstClass.C

       In this example, only [1m-fstrict-enums [22mis an option meant only for C++ programs; you can use the  other  options
       with any language supported by GCC.

       Some options for compiling C programs, such as [1m-std[22m, are also relevant for C++ programs.

       Here is a list of options that are [4monly[24m for compiling C++ programs:

       [1m-fabi-version=[4m[22mn[0m
           Use version [4mn[24m of the C++ ABI.  The default is version 0.

           Version  0 refers to the version conforming most closely to the C++ ABI specification.  Therefore, the ABI
           obtained using version 0 will change in different versions of G++ as ABI bugs are fixed.

           Version 1 is the version of the C++ ABI that first appeared in G++ 3.2.

           Version 2 is the version of the C++ ABI that first appeared in G++ 3.4, and was the  default  through  G++
           4.9.

           Version 3 corrects an error in mangling a constant address as a template argument.

           Version 4, which first appeared in G++ 4.5, implements a standard mangling for vector types.

           Version  5, which first appeared in G++ 4.6, corrects the mangling of attribute const/volatile on function
           pointer types, decltype of a plain decl, and use of a function parameter in  the  declaration  of  another
           parameter.

           Version  6, which first appeared in G++ 4.7, corrects the promotion behavior of C++11 scoped enums and the
           mangling of template argument packs, const/static_cast, prefix ++ and --, and a class scope function  used
           as a template argument.

           Version  7,  which  first  appeared  in  G++ 4.8, that treats nullptr_t as a builtin type and corrects the
           mangling of lambdas in default argument scope.

           Version 8, which first appeared in G++ 4.9, corrects the substitution  behavior  of  function  types  with
           function-cv-qualifiers.

           Version 9, which first appeared in G++ 5.2, corrects the alignment of "nullptr_t".

           Version  10,  which first appeared in G++ 6.1, adds mangling of attributes that affect type identity, such
           as ia32 calling convention attributes (e.g. [1mstdcall[22m).

           Version 11, which first appeared in G++ 7, corrects the mangling of  sizeof...  expressions  and  operator
           names.  For multiple entities with the same name within a function, that are declared in different scopes,
           the mangling now changes starting with the twelfth occurrence.  It also implies [1m-fnew-inheriting-ctors[22m.

           Version  12,  which  first  appeared  in  G++ 8, corrects the calling conventions for empty classes on the
           x86_64 target and for classes with only deleted  copy/move  constructors.   It  accidentally  changes  the
           calling convention for classes with a deleted copy constructor and a trivial move constructor.

           Version 13, which first appeared in G++ 8.2, fixes the accidental change in version 12.

           Version 14, which first appeared in G++ 10, corrects the mangling of the nullptr expression.

           Version 15, which first appeared in G++ 10.3, corrects G++ 10 ABI tag regression.

           Version 16, which first appeared in G++ 11, changes the mangling of "__alignof__" to be distinct from that
           of "alignof", and dependent operator names.

           Version  17,  which  first appeared in G++ 12, fixes layout of classes that inherit from aggregate classes
           with default member initializers in C++14 and up.

           Version 18, which first appeard in G++ 13, fixes manglings of lambdas that have additional context.

           See also [1m-Wabi[22m.

       [1m-fabi-compat-version=[4m[22mn[0m
           On targets that support strong aliases, G++ works around mangling changes by creating an  alias  with  the
           correct  mangled  name when defining a symbol with an incorrect mangled name.  This switch specifies which
           ABI version to use for the alias.

           With [1m-fabi-version=0 [22m(the default), this defaults to 13 (GCC 8.2 compatibility).  If another  ABI  version
           is  explicitly  selected,  this  defaults  to 0.  For compatibility with GCC versions 3.2 through 4.9, use
           [1m-fabi-compat-version=2[22m.

           If this option is not provided but [1m-Wabi=[4m[22mn[24m is, that version is used for compatibility  aliases.   If  this
           option  is  provided  along with [1m-Wabi [22m(without the version), the version from this option is used for the
           warning.

       [1m-fno-access-control[0m
           Turn off all access checking.  This switch is mainly useful for working around bugs in the access  control
           code.

       [1m-faligned-new[0m
           Enable   support   for   C++17  "new"  of  types  that  require  more  alignment  than  "void*  ::operator
           new(std::size_t)" provides.  A numeric argument such as "-faligned-new=32" can be used to specify how much
           alignment (in bytes) is provided by that function, but few users will need  to  override  the  default  of
           alignof(std::max_align_t).

           This flag is enabled by default for [1m-std=c++17[22m.

       [1m-fchar8_t[0m
       [1m-fno-char8_t[0m
           Enable  support  for  "char8_t"  as  adopted  for  C++20.   This  includes the addition of a new "char8_t"
           fundamental type, changes to the types of UTF-8 string and character literals, new  signatures  for  user-
           defined  literals,  associated  standard  library updates, and new "__cpp_char8_t" and "__cpp_lib_char8_t"
           feature test macros.

           This option enables functions to be overloaded for ordinary and UTF-8 strings:

                   int f(const char *);    // #1
                   int f(const char8_t *); // #2
                   int v1 = f("text");     // Calls #1
                   int v2 = f(u8"text");   // Calls #2

           and introduces new signatures for user-defined literals:

                   int operator""_udl1(char8_t);
                   int v3 = u8'x'_udl1;
                   int operator""_udl2(const char8_t*, std::size_t);
                   int v4 = u8"text"_udl2;
                   template<typename T, T...> int operator""_udl3();
                   int v5 = u8"text"_udl3;

           The change to the types of UTF-8 string and character literals introduces incompatibilities with ISO C++11
           and later standards.  For example, the following code is well-formed under ISO C++11,  but  is  ill-formed
           when [1m-fchar8_t [22mis specified.

                   const char *cp = u8"xx";// error: invalid conversion from
                                           //        `const char8_t*' to `const char*'
                   int f(const char*);
                   auto v = f(u8"xx");     // error: invalid conversion from
                                           //        `const char8_t*' to `const char*'
                   std::string s{u8"xx"};  // error: no matching function for call to
                                           //        `std::basic_string<char>::basic_string()'
                   using namespace std::literals;
                   s = u8"xx"s;            // error: conversion from
                                           //        `basic_string<char8_t>' to non-scalar
                                           //        type `basic_string<char>' requested

       [1m-fcheck-new[0m
           Check  that  the  pointer  returned  by "operator new" is non-null before attempting to modify the storage
           allocated.  This check is normally unnecessary because the C++ standard specifies that "operator new" only
           returns 0 if it is declared throw(), in which case the  compiler  always  checks  the  return  value  even
           without  this  option.   In  all other cases, when "operator new" has a non-empty exception specification,
           memory exhaustion is signalled by throwing "std::bad_alloc".  See also [1mnew (nothrow)[22m.

       [1m-fconcepts[0m
       [1m-fconcepts-ts[0m
           Enable support for the C++ Concepts feature for constraining  template  arguments.   With  [1m-std=c++20  [22mand
           above, Concepts are part of the language standard, so [1m-fconcepts [22mdefaults to on.

           Some  constructs that were allowed by the earlier C++ Extensions for Concepts Technical Specification, ISO
           19217 (2015), but didn't make it into the standard, can additionally be enabled by [1m-fconcepts-ts[22m.

       [1m-fconstexpr-depth=[4m[22mn[0m
           Set the maximum nested evaluation depth for C++11 constexpr functions to [4mn[24m.  A limit is needed  to  detect
           endless recursion during constant expression evaluation.  The minimum specified by the standard is 512.

       [1m-fconstexpr-cache-depth=[4m[22mn[0m
           Set  the  maximum level of nested evaluation depth for C++11 constexpr functions that will be cached to [4mn[24m.
           This is a heuristic that trades off compilation  speed  (when  the  cache  avoids  repeated  calculations)
           against  memory  consumption  (when  the  cache  grows very large from highly recursive evaluations).  The
           default is 8.  Very few users are likely to want to adjust it, but  if  your  code  does  heavy  constexpr
           calculations you might want to experiment to find which value works best for you.

       [1m-fconstexpr-fp-except[0m
           Annex  F  of  the  C  standard specifies that IEC559 floating point exceptions encountered at compile time
           should not stop compilation.  C++ compilers have historically not followed this guidance, instead treating
           floating point division by zero as non-constant even though it has a well defined value.  This flag  tells
           the compiler to give Annex F priority over other rules saying that a particular operation is undefined.

                   constexpr float inf = 1./0.; // OK with -fconstexpr-fp-except

       [1m-fconstexpr-loop-limit=[4m[22mn[0m
           Set  the  maximum number of iterations for a loop in C++14 constexpr functions to [4mn[24m.  A limit is needed to
           detect infinite loops during constant expression evaluation.  The default is 262144 (1<<18).

       [1m-fconstexpr-ops-limit=[4m[22mn[0m
           Set the maximum number of operations during a single constexpr evaluation.  Even when number of iterations
           of a single loop is limited with the above limit, if there are several nested loops and each of  them  has
           many  iterations but still smaller than the above limit, or if in a body of some loop or even outside of a
           loop too many expressions need to be evaluated, the resulting constexpr evaluation might  take  too  long.
           The default is 33554432 (1<<25).

       [1m-fcontracts[0m
           Enable  experimental  support for the C++ Contracts feature, as briefly added to and then removed from the
           C++20 working paper (N4820).  The implementation also includes proposed enhancements  from  papers  P1290,
           P1332,  and  P1429.  This functionality is intended mostly for those interested in experimentation towards
           refining the feature to get it into shape for a future C++ standard.

           On violation of a checked contract, the violation handler is called.   Users  can  replace  the  violation
           handler by defining

                   void
                   handle_contract_violation (const std::experimental::contract_violation&);

           There  are different sets of additional flags that can be used together to specify which contracts will be
           checked and how, for N4820 contracts, P1332 contracts, or P1429  contracts;  these  sets  cannot  be  used
           together.

           [1m-fcontract-mode=[on|off][0m
               Control whether any contracts have any semantics at all.  Defaults to on.

           [1m-fcontract-assumption-mode=[on|off][0m
               [N4820] Control whether contracts with level [1maxiom [22mshould have the assume semantic.  Defaults to on.

           [1m-fcontract-build-level=[off|default|audit][0m
               [N4820] Specify which level of contracts to generate checks for.  Defaults to [1mdefault[22m.

           [1m-fcontract-continuation-mode=[on|off][0m
               [N4820]  Control  whether to allow the program to continue executing after a contract violation.  That
               is, do checked contracts have the [1mmaybe [22msemantic described  below  rather  than  the  [1mnever  [22msemantic.
               Defaults to off.

           [1m-fcontract-role=<name>:<default>,<audit>,<axiom>[0m
               [P1332] Specify the concrete semantics for each contract level of a particular contract role.

           [1m-fcontract-semantic=[default|audit|axiom]:<semantic>[0m
               [P1429] Specify the concrete semantic for a particular contract level.

           [1m-fcontract-strict-declarations=[on|off][0m
               Control  whether  to  reject  adding contracts to a function after its first declaration.  Defaults to
               off.

           The possible concrete semantics for that can be specified with [1m-fcontract-role [22mor [1m-fcontract-semantic [22mare:

           "ignore"
               This contract has no effect.

           "assume"
               This contract is treated like C++23 "[[assume]]".

           "check_never_continue"
           "never"
           "abort"
               This contract is checked.  If it fails, the violation handler is  called.   If  the  handler  returns,
               "std::terminate" is called.

           "check_maybe_continue"
           "maybe"
               This  contract  is  checked.   If  it fails, the violation handler is called.  If the handler returns,
               execution continues normally.

       [1m-fcoroutines[0m
           Enable support for the C++ coroutines extension (experimental).

       [1m-fno-elide-constructors[0m
           The C++ standard allows an implementation to omit creating a temporary that is  only  used  to  initialize
           another  object  of  the  same type.  Specifying this option disables that optimization, and forces G++ to
           call the copy constructor in all cases.  This option also causes G++  to  call  trivial  member  functions
           which otherwise would be expanded inline.

           In C++17, the compiler is required to omit these temporaries, but this option still affects trivial member
           functions.

       [1m-fno-enforce-eh-specs[0m
           Don't  generate code to check for violation of exception specifications at run time.  This option violates
           the C++ standard, but may be useful for reducing code  size  in  production  builds,  much  like  defining
           "NDEBUG".   This  does  not  give  user  code permission to throw exceptions in violation of the exception
           specifications; the compiler still optimizes based  on  the  specifications,  so  throwing  an  unexpected
           exception results in undefined behavior at run time.

       [1m-fextern-tls-init[0m
       [1m-fno-extern-tls-init[0m
           The  C++11  and  OpenMP  standards  allow  "thread_local"  and  "threadprivate"  variables to have dynamic
           (runtime) initialization.  To support this, any use of such a variable goes  through  a  wrapper  function
           that  performs  any necessary initialization.  When the use and definition of the variable are in the same
           translation unit, this overhead can be optimized away, but when the use is in a different translation unit
           there is significant overhead even if the variable doesn't actually need dynamic initialization.   If  the
           programmer  can  be  sure  that  no  use  of  the  variable  in a non-defining TU needs to trigger dynamic
           initialization (either because the variable is statically initialized, or a use of  the  variable  in  the
           defining  TU  will  be  executed  before  any  uses  in another TU), they can avoid this overhead with the
           [1m-fno-extern-tls-init [22moption.

           On targets that support symbol aliases, the default is [1m-fextern-tls-init[22m.  On targets that do not  support
           symbol aliases, the default is [1m-fno-extern-tls-init[22m.

       [1m-ffold-simple-inlines[0m
       [1m-fno-fold-simple-inlines[0m
           Permit   the   C++   frontend   to   fold  calls  to  "std::move",  "std::forward",  "std::addressof"  and
           "std::as_const".  In contrast to inlining, this means no debug information  will  be  generated  for  such
           calls.   Since  these  functions  are  rarely interesting to debug, this flag is enabled by default unless
           [1m-fno-inline [22mis active.

       [1m-fno-gnu-keywords[0m
           Do not recognize "typeof" as a keyword, so that code can use this word as an identifier.  You can use  the
           keyword  "__typeof__"  instead.  This option is implied by the strict ISO C++ dialects: [1m-ansi[22m, [1m-std=c++98[22m,
           [1m-std=c++11[22m, etc.

       [1m-fimplicit-constexpr[0m
           Make inline functions implicitly constexpr, if they satisfy the requirements  for  a  constexpr  function.
           This  option  can be used in C++14 mode or later.  This can result in initialization changing from dynamic
           to static and other optimizations.

       [1m-fno-implicit-templates[0m
           Never emit code for non-inline templates that are instantiated implicitly (i.e. by use);  only  emit  code
           for explicit instantiations.  If you use this option, you must take care to structure your code to include
           all the necessary explicit instantiations to avoid getting undefined symbols at link time.

       [1m-fno-implicit-inline-templates[0m
           Don't emit code for implicit instantiations of inline templates, either.  The default is to handle inlines
           differently so that compiles with and without optimization need the same set of explicit instantiations.

       [1m-fno-implement-inlines[0m
           To  save space, do not emit out-of-line copies of inline functions controlled by "#pragma implementation".
           This causes linker errors if these functions are not inlined everywhere they are called.

       [1m-fmodules-ts[0m
       [1m-fno-modules-ts[0m
           Enable support for C++20 modules.  The [1m-fno-modules-ts [22mis usually not needed,  as  that  is  the  default.
           Even  though  this  is  a C++20 feature, it is not currently implicitly enabled by selecting that standard
           version.

       [1m-fmodule-header[0m
       [1m-fmodule-header=user[0m
       [1m-fmodule-header=system[0m
           Compile a header file to create an importable header unit.

       [1m-fmodule-implicit-inline[0m
           Member functions defined in their class definitions are not implicitly inline for modular code.   This  is
           different  to  traditional  C++ behavior, for good reasons.  However, it may result in a difficulty during
           code porting.  This option makes such function definitions implicitly inline.  It does however generate an
           ABI incompatibility, so you must use it everywhere or nowhere.   (Such  definitions  outside  of  a  named
           module remain implicitly inline, regardless.)

       [1m-fno-module-lazy[0m
           Disable lazy module importing and module mapper creation.

       [1m-fmodule-mapper=[22m[[4mhostname[24m][1m:[4m[22mport[24m[[1m?[4m[22mident[24m]
       [1m-fmodule-mapper=|[4m[22mprogram[24m[[1m?[4m[22mident[24m] [4margs...[0m
       [1m-fmodule-mapper==[4m[22msocket[24m[[1m?[4m[22mident[24m]
       [1m-fmodule-mapper=<>[22m[[4minout[24m][[1m?[4m[22mident[24m]
       [1m-fmodule-mapper=<[4m[22min[24m[1m>[4m[22mout[24m[[1m?[4m[22mident[24m]
       [1m-fmodule-mapper=[4m[22mfile[24m[[1m?[4m[22mident[24m]
           An oracle to query for module name to filename mappings.  If unspecified the [1mCXX_MODULE_MAPPER [22menvironment
           variable is used, and if that is unset, an in-process default is provided.

       [1m-fmodule-only[0m
           Only emit the Compiled Module Interface, inhibiting any object file.

       [1m-fms-extensions[0m
           Disable  Wpedantic  warnings  about  constructs used in MFC, such as implicit int and getting a pointer to
           member function via non-standard syntax.

       [1m-fnew-inheriting-ctors[0m
           Enable the P0136 adjustment to the semantics of C++11 constructor inheritance.  This is part of C++17  but
           also  considered  to  be  a Defect Report against C++11 and C++14.  This flag is enabled by default unless
           [1m-fabi-version=10 [22mor lower is specified.

       [1m-fnew-ttp-matching[0m
           Enable the P0522 resolution to Core issue 150, template template parameters and  default  arguments:  this
           allows  a  template  with default template arguments as an argument for a template template parameter with
           fewer template parameters.  This flag is enabled by default for [1m-std=c++17[22m.

       [1m-fno-nonansi-builtins[0m
           Disable built-in declarations of functions that are not mandated by  ANSI/ISO  C.   These  include  "ffs",
           "alloca", "_exit", "index", "bzero", "conjf", and other related functions.

       [1m-fnothrow-opt[0m
           Treat  a  throw()  exception specification as if it were a "noexcept" specification to reduce or eliminate
           the text size overhead relative to a function with no exception specification.  If the function has  local
           variables  of  types with non-trivial destructors, the exception specification actually makes the function
           smaller because the EH cleanups for those variables can be optimized away.  The semantic effect is that an
           exception thrown out of a function with such an exception specification results in a call  to  "terminate"
           rather than "unexpected".

       [1m-fno-operator-names[0m
           Do  not  treat  the  operator  name  keywords  "and", "bitand", "bitor", "compl", "not", "or" and "xor" as
           synonyms as keywords.

       [1m-fno-optional-diags[0m
           Disable diagnostics that the standard says a compiler does not need to issue.  Currently,  the  only  such
           diagnostic issued by G++ is the one for a name having multiple meanings within a class.

       [1m-fpermissive[0m
           Downgrade  some  diagnostics  about  nonconformant code from errors to warnings.  Thus, using [1m-fpermissive[0m
           allows some nonconforming code to compile.

       [1m-fno-pretty-templates[0m
           When an error message refers to a specialization of a function template, the compiler normally prints  the
           signature  of  the  template  followed  by  the  template  arguments  and any typedefs or typenames in the
           signature (e.g. "void f(T) [with T = int]" rather than "void f(int)") so that it's clear which template is
           involved.  When an error message refers to a specialization of a class template, the  compiler  omits  any
           template  arguments  that  match  the  default  template  arguments for that template.  If either of these
           behaviors  make  it  harder  to  understand  the  error  message  rather  than   easier,   you   can   use
           [1m-fno-pretty-templates [22mto disable them.

       [1m-fno-rtti[0m
           Disable  generation  of  information  about every class with virtual functions for use by the C++ run-time
           type identification features ("dynamic_cast" and "typeid").  If you don't use those parts of the language,
           you can save some space by using this flag.  Note that exception handling uses the same  information,  but
           G++  generates  it  as needed. The "dynamic_cast" operator can still be used for casts that do not require
           run-time type information, i.e. casts to "void *" or to unambiguous base classes.

           Mixing code compiled with [1m-frtti [22mwith that compiled with [1m-fno-rtti [22mmay not work.   For  example,  programs
           may fail to link if a class compiled with [1m-fno-rtti [22mis used as a base for a class compiled with [1m-frtti[22m.

       [1m-fsized-deallocation[0m
           Enable the built-in global declarations

                   void operator delete (void *, std::size_t) noexcept;
                   void operator delete[] (void *, std::size_t) noexcept;

           as  introduced  in  C++14.   This  is useful for user-defined replacement deallocation functions that, for
           example, use the size of the object to make deallocation faster.  Enabled by default under [1m-std=c++14  [22mand
           above.  The flag [1m-Wsized-deallocation [22mwarns about places that might want to add a definition.

       [1m-fstrict-enums[0m
           Allow the compiler to optimize using the assumption that a value of enumerated type can only be one of the
           values  of  the enumeration (as defined in the C++ standard; basically, a value that can be represented in
           the minimum number of bits needed to represent all the enumerators).  This assumption may not be valid  if
           the program uses a cast to convert an arbitrary integer value to the enumerated type.

       [1m-fstrong-eval-order[0m
           Evaluate  member  access,  array  subscripting, and shift expressions in left-to-right order, and evaluate
           assignment  in  right-to-left  order,  as  adopted  for  C++17.   Enabled  by  default  with   [1m-std=c++17[22m.
           [1m-fstrong-eval-order=some  [22menables  just  the  ordering  of member access and shift expressions, and is the
           default without [1m-std=c++17[22m.

       [1m-ftemplate-backtrace-limit=[4m[22mn[0m
           Set the maximum number of template instantiation notes for a single warning or error to  [4mn[24m.   The  default
           value is 10.

       [1m-ftemplate-depth=[4m[22mn[0m
           Set  the  maximum  instantiation  depth  for template classes to [4mn[24m.  A limit on the template instantiation
           depth is needed to detect endless recursions during template class instantiation.  ANSI/ISO C++ conforming
           programs must not rely on a maximum depth greater than 17 (changed to 1024 in C++11).  The  default  value
           is 900, as the compiler can run out of stack space before hitting 1024 in some situations.

       [1m-fno-threadsafe-statics[0m
           Do  not emit the extra code to use the routines specified in the C++ ABI for thread-safe initialization of
           local statics.  You can use this option to reduce code size slightly in  code  that  doesn't  need  to  be
           thread-safe.

       [1m-fuse-cxa-atexit[0m
           Register destructors for objects with static storage duration with the "__cxa_atexit" function rather than
           the  "atexit"  function.   This  option  is  required  for  fully  standards-compliant  handling of static
           destructors, but only works if your C library supports "__cxa_atexit".

       [1m-fno-use-cxa-get-exception-ptr[0m
           Don't use the "__cxa_get_exception_ptr" runtime routine.   This  causes  "std::uncaught_exception"  to  be
           incorrect, but is necessary if the runtime routine is not available.

       [1m-fvisibility-inlines-hidden[0m
           This  switch  declares  that  the user does not attempt to compare pointers to inline functions or methods
           where the addresses of the two functions are taken in different shared objects.

           The effect of this is that GCC may, effectively, mark  inline  methods  with  "__attribute__  ((visibility
           ("hidden")))" so that they do not appear in the export table of a DSO and do not require a PLT indirection
           when used within the DSO.  Enabling this option can have a dramatic effect on load and link times of a DSO
           as  it  massively  reduces  the  size  of  the  dynamic  export  table when the library makes heavy use of
           templates.

           The behavior of this switch is not quite the same as marking the methods as hidden  directly,  because  it
           does  not  affect static variables local to the function or cause the compiler to deduce that the function
           is defined in only one shared object.

           You may mark a method as having a visibility explicitly to negate  the  effect  of  the  switch  for  that
           method.   For example, if you do want to compare pointers to a particular inline method, you might mark it
           as having default visibility.  Marking the enclosing class with explicit visibility has no effect.

           Explicitly instantiated inline methods are unaffected by this option  as  their  linkage  might  otherwise
           cross a shared library boundary.

       [1m-fvisibility-ms-compat[0m
           This  flag  attempts  to  use  visibility settings to make GCC's C++ linkage model compatible with that of
           Microsoft Visual Studio.

           The flag makes these changes to GCC's linkage model:

           1.  It sets the default visibility to "hidden", like [1m-fvisibility=hidden[22m.

           2.  Types, but not their members, are not hidden by default.

           3.  The One Definition Rule is relaxed for types  without  explicit  visibility  specifications  that  are
               defined  in  more  than one shared object: those declarations are permitted if they are permitted when
               this option is not used.

           In new code it is better to use [1m-fvisibility=hidden [22mand export those  classes  that  are  intended  to  be
           externally  visible.   Unfortunately  it is possible for code to rely, perhaps accidentally, on the Visual
           Studio behavior.

           Among the consequences of these changes are that static data members of the same type with the  same  name
           but defined in different shared objects are different, so changing one does not change the other; and that
           pointers to function members defined in different shared objects may not compare equal.  When this flag is
           given, it is a violation of the ODR to define types with the same name differently.

       [1m-fno-weak[0m
           Do  not  use weak symbol support, even if it is provided by the linker.  By default, G++ uses weak symbols
           if they are available.  This option exists only for testing, and should  not  be  used  by  end-users;  it
           results in inferior code and has no benefits.  This option may be removed in a future release of G++.

       [1m-fext-numeric-literals [22m(C++ and Objective-C++ only)
           Accept  imaginary,  fixed-point,  or machine-defined literal number suffixes as GNU extensions.  When this
           option is turned off these suffixes are treated as C++11 user-defined literal numeric suffixes.   This  is
           on  by  default  for  all pre-C++11 dialects and all GNU dialects: [1m-std=c++98[22m, [1m-std=gnu++98[22m, [1m-std=gnu++11[22m,
           [1m-std=gnu++14[22m.  This option is off by default for ISO C++11 onwards ([1m-std=c++11[22m, ...).

       [1m-nostdinc++[0m
           Do not search for header files in the standard directories specific to C++, but do still search the  other
           standard directories.  (This option is used when building the C++ library.)

       [1m-flang-info-include-translate[0m
       [1m-flang-info-include-translate-not[0m
       [1m-flang-info-include-translate=[4m[22mheader[0m
           Inform  of include translation events.  The first will note accepted include translations, the second will
           note declined include translations.  The [4mheader[24m form will inform of include translations relating to  that
           specific  header.  If [4mheader[24m is of the form "user" or "<system>" it will be resolved to a specific user or
           system header using the include path.

       [1m-flang-info-module-cmi[0m
       [1m-flang-info-module-cmi=[4m[22mmodule[0m
           Inform of Compiled Module Interface pathnames.  The first will note all read CMI  pathnames.   The  [4mmodule[0m
           form  will not reading a specific module's CMI.  [4mmodule[24m may be a named module or a header-unit (the latter
           indicated by either being a pathname containing directory separators or enclosed in "<>" or "").

       [1m-stdlib=[4m[22mlibstdc++,libc++[0m
           When G++ is configured to support this option, it allows specification of alternate C++ runtime libraries.
           Two options are available: [4mlibstdc++[24m (the default, native C++ runtime for G++) and [4mlibc++[24m which is the C++
           runtime installed on some operating systems (e.g. Darwin versions  from  Darwin11  onwards).   The  option
           switches G++ to use the headers from the specified library and to emit "-lstdc++" or "-lc++" respectively,
           when a C++ runtime is required for linking.

       In addition, these warning options have meanings only for C++ programs:

       [1m-Wabi-tag [22m(C++ and Objective-C++ only)
           Warn when a type with an ABI tag is used in a context that does not have that ABI tag.  See [1mC++ Attributes[0m
           for more information about ABI tags.

       [1m-Wcomma-subscript [22m(C++ and Objective-C++ only)
           Warn  about  uses  of  a  comma expression within a subscripting expression.  This usage was deprecated in
           C++20 and is going to be removed in  C++23.   However,  a  comma  expression  wrapped  in  "(  )"  is  not
           deprecated.  Example:

                   void f(int *a, int b, int c) {
                       a[b,c];     // deprecated in C++20, invalid in C++23
                       a[(b,c)];   // OK
                   }

           In  C++23  it  is  valid  to  have comma separated expressions in a subscript when an overloaded subscript
           operator is found and supports the right number and types of arguments.   G++  will  accept  the  formerly
           valid  syntax  for  code  that  is  not valid in C++23 but used to be valid but deprecated in C++20 with a
           pedantic warning that can be disabled with [1m-Wno-comma-subscript[22m.

           Enabled  by  default  with  [1m-std=c++20  [22munless  [1m-Wno-deprecated[22m,  and  with   [1m-std=c++23   [22mregardless   of
           [1m-Wno-deprecated[22m.

       [1m-Wctad-maybe-unsupported [22m(C++ and Objective-C++ only)
           Warn  when  performing  class  template  argument  deduction  (CTAD)  on a type with no explicitly written
           deduction guides.  This warning will point out cases  where  CTAD  succeeded  only  because  the  compiler
           synthesized the implicit deduction guides, which might not be what the programmer intended.  Certain style
           guides  allow  CTAD  only on types that specifically "opt-in"; i.e., on types that are designed to support
           CTAD.  This warning can be suppressed with the following pattern:

                   struct allow_ctad_t; // any name works
                   template <typename T> struct S {
                     S(T) { }
                   };
                   // Guide with incomplete parameter type will never be considered.
                   S(allow_ctad_t) -> S<void>;

       [1m-Wctor-dtor-privacy [22m(C++ and Objective-C++ only)
           Warn when a class seems unusable because all the constructors or destructors in that  class  are  private,
           and  it  has  neither  friends  nor public static member functions.  Also warn if there are no non-private
           methods, and there's at least one private member function that isn't a constructor or destructor.

       [1m-Wdangling-reference [22m(C++ and Objective-C++ only)
           Warn when a reference is bound to a temporary whose lifetime has ended.  For example:

                   int n = 1;
                   const int& r = std::max(n - 1, n + 1); // r is dangling

           In the example above, two temporaries are created, one for each argument, and a reference to  one  of  the
           temporaries  is  returned.   However, both temporaries are destroyed at the end of the full expression, so
           the reference "r" is dangling.  This warning also detects dangling references in member initializer lists:

                   const int& f(const int& i) { return i; }
                   struct S {
                     const int &r; // r is dangling
                     S() : r(f(10)) { }
                   };

           Member functions are checked as well, but only their object argument:

                   struct S {
                      const S& self () { return *this; }
                   };
                   const S& s = S().self(); // s is dangling

           Certain functions are safe in  this  respect,  for  example  "std::use_facet":  they  take  and  return  a
           reference,  but they don't return one of its arguments, which can fool the warning.  Such functions can be
           excluded from the warning by wrapping them in a "#pragma":

                   #pragma GCC diagnostic push
                   #pragma GCC diagnostic ignored "-Wdangling-reference"
                   const T& foo (const T&) { ... }
                   #pragma GCC diagnostic pop

           [1m-Wdangling-reference [22malso warns about code like

                   auto p = std::minmax(1, 2);

           where "std::minmax" returns "std::pair<const int&, const int&>", and both references dangle after the  end
           of the full expression that contains the call to "std::minmax".

           This warning is enabled by [1m-Wextra[22m.

       [1m-Wdelete-non-virtual-dtor [22m(C++ and Objective-C++ only)
           Warn  when  "delete"  is used to destroy an instance of a class that has virtual functions and non-virtual
           destructor. It is unsafe to delete an instance of a derived class through a pointer to a base class if the
           base class does not have a virtual destructor.  This warning is enabled by [1m-Wall[22m.

       [1m-Wdeprecated-copy [22m(C++ and Objective-C++ only)
           Warn that the implicit declaration of a copy constructor or copy assignment operator is deprecated if  the
           class  has a user-provided copy constructor or copy assignment operator, in C++11 and up.  This warning is
           enabled by [1m-Wextra[22m.  With  [1m-Wdeprecated-copy-dtor[22m,  also  deprecate  if  the  class  has  a  user-provided
           destructor.

       [1m-Wno-deprecated-enum-enum-conversion [22m(C++ and Objective-C++ only)
           Disable the warning about the case when the usual arithmetic conversions are applied on operands where one
           is  of  enumeration type and the other is of a different enumeration type.  This conversion was deprecated
           in C++20.  For example:

                   enum E1 { e };
                   enum E2 { f };
                   int k = f - e;

           [1m-Wdeprecated-enum-enum-conversion [22mis enabled by default with  [1m-std=c++20[22m.   In  pre-C++20  dialects,  this
           warning can be enabled by [1m-Wenum-conversion[22m.

       [1m-Wno-deprecated-enum-float-conversion [22m(C++ and Objective-C++ only)
           Disable the warning about the case when the usual arithmetic conversions are applied on operands where one
           is  of  enumeration  type  and  the  other is of a floating-point type.  This conversion was deprecated in
           C++20.  For example:

                   enum E1 { e };
                   enum E2 { f };
                   bool b = e <= 3.7;

           [1m-Wdeprecated-enum-float-conversion [22mis enabled by default with [1m-std=c++20[22m.   In  pre-C++20  dialects,  this
           warning can be enabled by [1m-Wenum-conversion[22m.

       [1m-Wno-init-list-lifetime [22m(C++ and Objective-C++ only)
           Do  not  warn about uses of "std::initializer_list" that are likely to result in dangling pointers.  Since
           the underlying array for an "initializer_list" is handled like a normal C++ temporary object, it  is  easy
           to inadvertently keep a pointer to the array past the end of the array's lifetime.  For example:

           *   If  a  function  returns  a  temporary "initializer_list", or a local "initializer_list" variable, the
               array's lifetime ends at the end of the return  statement,  so  the  value  returned  has  a  dangling
               pointer.

           *   If a new-expression creates an "initializer_list", the array only lives until the end of the enclosing
               full-expression, so the "initializer_list" in the heap has a dangling pointer.

           *   When  an "initializer_list" variable is assigned from a brace-enclosed initializer list, the temporary
               array created for the right side of the assignment only lives until the end of the full-expression, so
               at the next statement the "initializer_list" variable has a dangling pointer.

                       // li's initial underlying array lives as long as li
                       std::initializer_list<int> li = { 1,2,3 };
                       // assignment changes li to point to a temporary array
                       li = { 4, 5 };
                       // now the temporary is gone and li has a dangling pointer
                       int i = li.begin()[0] // undefined behavior

           *   When a list constructor stores the "begin" pointer from the "initializer_list" argument, this  doesn't
               extend  the  lifetime  of  the  array,  so  if  a  class  variable  is  constructed  from  a temporary
               "initializer_list", the pointer is left dangling by the end of the variable declaration statement.

       [1m-Winvalid-constexpr[0m
           Warn when a function never produces a constant expression.  In C++20 and earlier,  for  every  "constexpr"
           function  and  function  template,  there  must  be at least one set of function arguments in at least one
           instantiation such that an invocation of the function or constructor could be an  evaluated  subexpression
           of  a  core constant expression.  C++23 removed this restriction, so it's possible to have a function or a
           function template marked "constexpr" for which no invocation satisfies the requirements of a core constant
           expression.

           This  warning  is  enabled  as  a  pedantic  warning  by  default  in  C++20  and  earlier.    In   C++23,
           [1m-Winvalid-constexpr [22mcan be turned on, in which case it will be an ordinary warning.  For example:

                   void f (int& i);
                   constexpr void
                   g (int& i)
                   {
                     // Warns by default in C++20, in C++23 only with -Winvalid-constexpr.
                     f(i);
                   }

       [1m-Winvalid-imported-macros[0m
           Verify  all  imported  macro  definitions  are  valid  at  the end of compilation.  This is not enabled by
           default, as it requires additional processing to determine.  It may  be  useful  when  preparing  sets  of
           header-units to ensure consistent macros.

       [1m-Wno-literal-suffix [22m(C++ and Objective-C++ only)
           Do  not  warn  when  a string or character literal is followed by a ud-suffix which does not begin with an
           underscore.  As a conforming extension, GCC treats such suffixes as separate preprocessing tokens in order
           to maintain backwards compatibility with code  that  uses  formatting  macros  from  "<inttypes.h>".   For
           example:

                   #define __STDC_FORMAT_MACROS
                   #include <inttypes.h>
                   #include <stdio.h>

                   int main() {
                     int64_t i64 = 123;
                     printf("My int64: %" PRId64"\n", i64);
                   }

           In this case, "PRId64" is treated as a separate preprocessing token.

           This  option also controls warnings when a user-defined literal operator is declared with a literal suffix
           identifier that doesn't begin with an underscore. Literal suffix identifiers  that  don't  begin  with  an
           underscore are reserved for future standardization.

           These warnings are enabled by default.

       [1m-Wno-narrowing [22m(C++ and Objective-C++ only)
           For  C++11  and  later  standards,  narrowing  conversions  are  diagnosed  by default, as required by the
           standard.  A narrowing conversion from a constant produces an error, and a  narrowing  conversion  from  a
           non-constant  produces  a  warning, but [1m-Wno-narrowing [22msuppresses the diagnostic.  Note that this does not
           affect the meaning of well-formed code; narrowing conversions are still considered  ill-formed  in  SFINAE
           contexts.

           With [1m-Wnarrowing [22min C++98, warn when a narrowing conversion prohibited by C++11 occurs within [1m{ }[22m, e.g.

                   int i = { 2.2 }; // error: narrowing from double to int

           This flag is included in [1m-Wall [22mand [1m-Wc++11-compat[22m.

       [1m-Wnoexcept [22m(C++ and Objective-C++ only)
           Warn  when  a  noexcept-expression evaluates to false because of a call to a function that does not have a
           non-throwing exception specification (i.e. throw() or "noexcept") but is known by the  compiler  to  never
           throw an exception.

       [1m-Wnoexcept-type [22m(C++ and Objective-C++ only)
           Warn  if  the C++17 feature making "noexcept" part of a function type changes the mangled name of a symbol
           relative to C++14.  Enabled by [1m-Wabi [22mand [1m-Wc++17-compat[22m.

           As an example:

                   template <class T> void f(T t) { t(); };
                   void g() noexcept;
                   void h() { f(g); }

           In C++14, "f" calls "f<void(*)()>", but in C++17 it calls "f<void(*)()noexcept>".

       [1m-Wclass-memaccess [22m(C++ and Objective-C++ only)
           Warn when the destination of a call to a raw memory function such as "memset" or "memcpy" is an object  of
           class type, and when writing into such an object might bypass the class non-trivial or deleted constructor
           or  copy  assignment,  violate  const-correctness  or  encapsulation,  or  corrupt virtual table pointers.
           Modifying the representation of such objects may violate invariants maintained by member functions of  the
           class.   For  example,  the  call  to  "memset" below is undefined because it modifies a non-trivial class
           object and is, therefore, diagnosed.  The safe way to either initialize or clear the storage of objects of
           such types is by using the appropriate constructor or assignment operator, if one is available.

                   std::string str = "abc";
                   memset (&str, 0, sizeof str);

           The [1m-Wclass-memaccess [22moption is enabled by [1m-Wall[22m.  Explicitly casting the pointer to the class  object  to
           "void *" or to a type that can be safely accessed by the raw memory function suppresses the warning.

       [1m-Wnon-virtual-dtor [22m(C++ and Objective-C++ only)
           Warn  when  a  class  has  virtual  functions  and  an  accessible  non-virtual destructor itself or in an
           accessible polymorphic base class, in which case it is possible but unsafe to  delete  an  instance  of  a
           derived  class through a pointer to the class itself or base class.  This warning is automatically enabled
           if [1m-Weffc++ [22mis specified.  The [1m-Wdelete-non-virtual-dtor [22moption (enabled by  [1m-Wall[22m)  should  be  preferred
           because it warns about the unsafe cases without false positives.

       [1m-Wregister [22m(C++ and Objective-C++ only)
           Warn  on  uses  of  the  "register"  storage  class  specifier, except when it is part of the GNU [1mExplicit[0m
           [1mRegister Variables [22mextension.  The use of the "register" keyword  as  storage  class  specifier  has  been
           deprecated in C++11 and removed in C++17.  Enabled by default with [1m-std=c++17[22m.

       [1m-Wreorder [22m(C++ and Objective-C++ only)
           Warn  when  the order of member initializers given in the code does not match the order in which they must
           be executed.  For instance:

                   struct A {
                     int i;
                     int j;
                     A(): j (0), i (1) { }
                   };

           The compiler rearranges the member initializers for "i" and "j" to match  the  declaration  order  of  the
           members, emitting a warning to that effect.  This warning is enabled by [1m-Wall[22m.

       [1m-Wno-pessimizing-move [22m(C++ and Objective-C++ only)
           This warning warns when a call to "std::move" prevents copy elision.  A typical scenario when copy elision
           can  occur is when returning in a function with a class return type, when the expression being returned is
           the name of a non-volatile automatic object, and is not a function parameter, and has the same type as the
           function return type.

                   struct T {
                   ...
                   };
                   T fn()
                   {
                     T t;
                     ...
                     return std::move (t);
                   }

           But in this example, the "std::move" call prevents copy elision.

           This warning is enabled by [1m-Wall[22m.

       [1m-Wno-redundant-move [22m(C++ and Objective-C++ only)
           This warning warns about redundant calls to "std::move"; that is, when a move operation  would  have  been
           performed  even  without  the  "std::move" call.  This happens because the compiler is forced to treat the
           object as if it were an rvalue in certain situations such  as  returning  a  local  variable,  where  copy
           elision isn't applicable.  Consider:

                   struct T {
                   ...
                   };
                   T fn(T t)
                   {
                     ...
                     return std::move (t);
                   }

           Here, the "std::move" call is redundant.  Because G++ implements Core Issue 1579, another example is:

                   struct T { // convertible to U
                   ...
                   };
                   struct U {
                   ...
                   };
                   U fn()
                   {
                     T t;
                     ...
                     return std::move (t);
                   }

           In  this  example, copy elision isn't applicable because the type of the expression being returned and the
           function return type differ, yet G++ treats the return value as if it were designated by an rvalue.

           This warning is enabled by [1m-Wextra[22m.

       [1m-Wrange-loop-construct [22m(C++ and Objective-C++ only)
           This warning warns when a C++ range-based for-loop is creating an unnecessary copy.  This can happen  when
           the range declaration is not a reference, but probably should be.  For example:

                   struct S { char arr[128]; };
                   void fn () {
                     S arr[5];
                     for (const auto x : arr) { ... }
                   }

           It does not warn when the type being copied is a trivially-copyable type whose size is less than 64 bytes.

           This  warning  also  warns when a loop variable in a range-based for-loop is initialized with a value of a
           different type resulting in a copy.  For example:

                   void fn() {
                     int arr[10];
                     for (const double &x : arr) { ... }
                   }

           In the example above, in every iteration of the loop a temporary value of type  "double"  is  created  and
           destroyed, to which the reference "const double &" is bound.

           This warning is enabled by [1m-Wall[22m.

       [1m-Wredundant-tags [22m(C++ and Objective-C++ only)
           Warn  about redundant class-key and enum-key in references to class types and enumerated types in contexts
           where the key can be eliminated without causing an ambiguity.  For example:

                   struct foo;
                   struct foo *p;   // warn that keyword struct can be eliminated

           On the other hand, in this example there is no warning:

                   struct foo;
                   void foo ();   // "hides" struct foo
                   void bar (struct foo&);  // no warning, keyword struct is necessary

       [1m-Wno-subobject-linkage [22m(C++ and Objective-C++ only)
           Do not warn if a class type has a base or a field whose type uses the anonymous namespace or depends on  a
           type  with  no  linkage.   If  a  type  A  depends on a type B with no or internal linkage, defining it in
           multiple translation units would be an ODR violation because  the  meaning  of  B  is  different  in  each
           translation  unit.  If A only appears in a single translation unit, the best way to silence the warning is
           to give it internal linkage by putting it in an anonymous namespace as well.  The  compiler  doesn't  give
           this  warning  for  types defined in the main .C file, as those are unlikely to have multiple definitions.
           [1m-Wsubobject-linkage [22mis enabled by default.

       [1m-Weffc++ [22m(C++ and Objective-C++ only)
           Warn about violations of the following style guidelines from Scott Meyers' [4mEffective[24m [4mC++[24m series of books:

           *   Define a copy constructor and an assignment operator for classes with dynamically-allocated memory.

           *   Prefer initialization to assignment in constructors.

           *   Have "operator=" return a reference to *this.

           *   Don't try to return a reference when you must return an object.

           *   Distinguish between prefix and postfix forms of increment and decrement operators.

           *   Never overload "&&", "||", or ",".

           This option also enables [1m-Wnon-virtual-dtor[22m, which is also  one  of  the  effective  C++  recommendations.
           However,  the check is extended to warn about the lack of virtual destructor in accessible non-polymorphic
           bases classes too.

           When selecting this option, be aware  that  the  standard  library  headers  do  not  obey  all  of  these
           guidelines; use [1mgrep -v [22mto filter out those warnings.

       [1m-Wno-exceptions [22m(C++ and Objective-C++ only)
           Disable  the  warning  about  the case when an exception handler is shadowed by another handler, which can
           point out a wrong ordering of exception handlers.

       [1m-Wstrict-null-sentinel [22m(C++ and Objective-C++ only)
           Warn about the use of an uncasted "NULL" as sentinel.  When compiling  only  with  GCC  this  is  a  valid
           sentinel,  as  "NULL"  is  defined to "__null".  Although it is a null pointer constant rather than a null
           pointer, it is guaranteed to be of the same size as a pointer.   But  this  use  is  not  portable  across
           different compilers.

       [1m-Wno-non-template-friend [22m(C++ and Objective-C++ only)
           Disable  warnings when non-template friend functions are declared within a template.  In very old versions
           of GCC that predate implementation of the ISO standard, declarations such as [1mfriend  int  foo(int)[22m,  where
           the  name  of  the  friend  is an unqualified-id, could be interpreted as a particular specialization of a
           template function; the warning exists to diagnose compatibility problems, and is enabled by default.

       [1m-Wold-style-cast [22m(C++ and Objective-C++ only)
           Warn if an old-style (C-style) cast to a non-void type is used within a C++ program.  The new-style  casts
           ("dynamic_cast",  "static_cast",  "reinterpret_cast",  and "const_cast") are less vulnerable to unintended
           effects and much easier to search for.

       [1m-Woverloaded-virtual [22m(C++ and Objective-C++ only)
       [1m-Woverloaded-virtual=[4m[22mn[0m
           Warn when a function declaration hides virtual functions from a base class.  For example, in:

                   struct A {
                     virtual void f();
                   };

                   struct B: public A {
                     void f(int); // does not override
                   };

           the "A" class version of "f" is hidden in "B", and code like:

                   B* b;
                   b->f();

           fails to compile.

           In cases where the different signatures are not an accident, the simplest solution  is  to  add  a  using-
           declaration to the derived class to un-hide the base function, e.g. add "using A::f;" to "B".

           The  optional  level  suffix controls the behavior when all the declarations in the derived class override
           virtual functions in the base class, even if not all of the base functions are overridden:

                   struct C {
                     virtual void f();
                     virtual void f(int);
                   };

                   struct D: public C {
                     void f(int); // does override
                   }

           This pattern is less likely to be a mistake; if D is only used virtually, the user might have decided that
           the base class semantics for some of the overloads are fine.

           At level 1, this case does not warn; at level 2, it does.  [1m-Woverloaded-virtual [22mby itself selects level 2.
           Level 1 is included in [1m-Wall[22m.

       [1m-Wno-pmf-conversions [22m(C++ and Objective-C++ only)
           Disable the diagnostic for converting a bound pointer to member function to a plain pointer.

       [1m-Wsign-promo [22m(C++ and Objective-C++ only)
           Warn when overload resolution chooses a promotion from unsigned or enumerated type to a signed type,  over
           a  conversion  to  an  unsigned  type  of  the  same  size.   Previous  versions  of G++ tried to preserve
           unsignedness, but the standard mandates the current behavior.

       [1m-Wtemplates [22m(C++ and Objective-C++ only)
           Warn when a primary template declaration is encountered.  Some coding rules disallow templates,  and  this
           may  be  used to enforce that rule.  The warning is inactive inside a system header file, such as the STL,
           so one can still use the STL.  One may also instantiate or specialize templates.

       [1m-Wmismatched-new-delete [22m(C++ and Objective-C++ only)
           Warn for mismatches between calls to "operator new" or "operator delete" and the corresponding call to the
           allocation or deallocation function.  This includes invocations of C++  "operator  delete"  with  pointers
           returned from either mismatched forms of "operator new", or from other functions that allocate objects for
           which the "operator delete" isn't a suitable deallocator, as well as calls to other deallocation functions
           with pointers returned from "operator new" for which the deallocation function isn't suitable.

           For example, the "delete" expression in the function below is diagnosed because it doesn't match the array
           form  of  the  "new"  expression the pointer argument was returned from.  Similarly, the call to "free" is
           also diagnosed.

                   void f ()
                   {
                     int *a = new int[n];
                     delete a;   // warning: mismatch in array forms of expressions

                     char *p = new char[n];
                     free (p);   // warning: mismatch between new and free
                   }

           The related  option  [1m-Wmismatched-dealloc  [22mdiagnoses  mismatches  involving  allocation  and  deallocation
           functions other than "operator new" and "operator delete".

           [1m-Wmismatched-new-delete [22mis included in [1m-Wall[22m.

       [1m-Wmismatched-tags [22m(C++ and Objective-C++ only)
           Warn  for declarations of structs, classes, and class templates and their specializations with a class-key
           that does not match either the definition or the first declaration if no definition is provided.

           For example, the declaration of "struct Object" in the argument list of "draw" triggers the  warning.   To
           avoid  it,  either  remove  the  redundant  class-key  "struct"  or  replace  it with "class" to match its
           definition.

                   class Object {
                   public:
                     virtual ~Object () = 0;
                   };
                   void draw (struct Object*);

           It is not wrong to declare a  class  with  the  class-key  "struct"  as  the  example  above  shows.   The
           [1m-Wmismatched-tags  [22moption  is  intended to help achieve a consistent style of class declarations.  In code
           that is intended to be portable to Windows-based compilers the warning helps prevent unresolved references
           due to the difference in the mangling of symbols declared with different class-keys.  The  option  can  be
           used either on its own or in conjunction with [1m-Wredundant-tags[22m.

       [1m-Wmultiple-inheritance [22m(C++ and Objective-C++ only)
           Warn  when  a  class  is  defined  with multiple direct base classes.  Some coding rules disallow multiple
           inheritance, and this may be used to enforce that rule.  The warning is inactive inside  a  system  header
           file,  such  as  the  STL,  so one can still use the STL.  One may also define classes that indirectly use
           multiple inheritance.

       [1m-Wvirtual-inheritance[0m
           Warn when a class is defined with a virtual direct  base  class.   Some  coding  rules  disallow  multiple
           inheritance,  and  this  may be used to enforce that rule.  The warning is inactive inside a system header
           file, such as the STL, so one can still use the STL.  One may also  define  classes  that  indirectly  use
           virtual inheritance.

       [1m-Wno-virtual-move-assign[0m
           Suppress  warnings about inheriting from a virtual base with a non-trivial C++11 move assignment operator.
           This is dangerous because if the virtual base is reachable along more than one path, it is moved  multiple
           times,  which  can  mean  both objects end up in the moved-from state.  If the move assignment operator is
           written to avoid moving from a moved-from object, this warning can be disabled.

       [1m-Wnamespaces[0m
           Warn when a namespace definition is opened.  Some coding rules disallow namespaces, and this may  be  used
           to  enforce  that  rule.  The warning is inactive inside a system header file, such as the STL, so one can
           still use the STL.  One may also use using directives and qualified names.

       [1m-Wno-terminate [22m(C++ and Objective-C++ only)
           Disable the warning about a throw-expression that will immediately result in a call to "terminate".

       [1m-Wno-vexing-parse [22m(C++ and Objective-C++ only)
           Warn about the most vexing parse syntactic ambiguity.  This warns about the cases when a declaration looks
           like a variable definition, but the C++ language requires it to be interpreted as a function  declaration.
           For instance:

                   void f(double a) {
                     int i();        // extern int i (void);
                     int n(int(a));  // extern int n (int);
                   }

           Another example:

                   struct S { S(int); };
                   void f(double a) {
                     S x(int(a));   // extern struct S x (int);
                     S y(int());    // extern struct S y (int (*) (void));
                     S z();         // extern struct S z (void);
                   }

           The  warning  will  suggest  options how to deal with such an ambiguity; e.g., it can suggest removing the
           parentheses or using braces instead.

           This warning is enabled by default.

       [1m-Wno-class-conversion [22m(C++ and Objective-C++ only)
           Do not warn when a conversion function converts an object to the same type, to a base class of that  type,
           or to void; such a conversion function will never be called.

       [1m-Wvolatile [22m(C++ and Objective-C++ only)
           Warn  about  deprecated  uses of the "volatile" qualifier.  This includes postfix and prefix "++" and "--"
           expressions of  "volatile"-qualified  types,  using  simple  assignments  where  the  left  operand  is  a
           "volatile"-qualified  non-class  type  for  their  value, compound assignments where the left operand is a
           "volatile"-qualified non-class  type,  "volatile"-qualified  function  return  type,  "volatile"-qualified
           parameter  type,  and  structured  bindings  of a "volatile"-qualified type.  This usage was deprecated in
           C++20.

           Enabled by default with [1m-std=c++20[22m.

       [1m-Wzero-as-null-pointer-constant [22m(C++ and Objective-C++ only)
           Warn when a literal [1m0 [22mis used as null pointer constant.  This can be useful to facilitate  the  conversion
           to "nullptr" in C++11.

       [1m-Waligned-new[0m
           Warn  about  a new-expression of a type that requires greater alignment than the alignof(std::max_align_t)
           but uses an allocation function without an explicit alignment parameter. This option is enabled by [1m-Wall[22m.

           Normally this only warns about global allocation functions, but [1m-Waligned-new=all [22malso warns  about  class
           member allocation functions.

       [1m-Wno-placement-new[0m
       [1m-Wplacement-new=[4m[22mn[0m
           Warn  about  placement new expressions with undefined behavior, such as constructing an object in a buffer
           that is smaller than the type of the object.  For example, the placement new expression below is diagnosed
           because it attempts to construct an array of 64 integers in a buffer only 64 bytes large.

                   char buf [64];
                   new (buf) int[64];

           This warning is enabled by default.

           [1m-Wplacement-new=1[0m
               This is the default warning level of [1m-Wplacement-new[22m.  At this level the warning  is  not  issued  for
               some  strictly  undefined constructs that GCC allows as extensions for compatibility with legacy code.
               For example, the following "new" expression is  not  diagnosed  at  this  level  even  though  it  has
               undefined  behavior  according  to  the C++ standard because it writes past the end of the one-element
               array.

                       struct S { int n, a[1]; };
                       S *s = (S *)malloc (sizeof *s + 31 * sizeof s->a[0]);
                       new (s->a)int [32]();

           [1m-Wplacement-new=2[0m
               At this level, in addition to diagnosing all the same constructs as at level 1, a diagnostic  is  also
               issued  for  placement  new expressions that construct an object in the last member of structure whose
               type is an array of a single element and whose size  is  less  than  the  size  of  the  object  being
               constructed.   While the previous example would be diagnosed, the following construct makes use of the
               flexible member array extension to avoid the warning at level 2.

                       struct S { int n, a[]; };
                       S *s = (S *)malloc (sizeof *s + 32 * sizeof s->a[0]);
                       new (s->a)int [32]();

       [1m-Wcatch-value[0m
       [1m-Wcatch-value=[4m[22mn[24m (C++ and Objective-C++ only)
           Warn about catch handlers that do not catch via reference.  With  [1m-Wcatch-value=1  [22m(or  [1m-Wcatch-value  [22mfor
           short)  warn  about polymorphic class types that are caught by value.  With [1m-Wcatch-value=2 [22mwarn about all
           class types that are caught by value. With [1m-Wcatch-value=3 [22mwarn about all types that  are  not  caught  by
           reference. [1m-Wcatch-value [22mis enabled by [1m-Wall[22m.

       [1m-Wconditionally-supported [22m(C++ and Objective-C++ only)
           Warn for conditionally-supported (C++11 [intro.defs]) constructs.

       [1m-Wno-delete-incomplete [22m(C++ and Objective-C++ only)
           Do  not  warn  when  deleting a pointer to incomplete type, which may cause undefined behavior at runtime.
           This warning is enabled by default.

       [1m-Wextra-semi [22m(C++, Objective-C++ only)
           Warn about redundant semicolons after in-class function definitions.

       [1m-Wno-inaccessible-base [22m(C++, Objective-C++ only)
           This option controls warnings when a base class is  inaccessible  in  a  class  derived  from  it  due  to
           ambiguity.   The  warning  is  enabled  by  default.  Note that the warning for ambiguous virtual bases is
           enabled by the [1m-Wextra [22moption.

                   struct A { int a; };

                   struct B : A { };

                   struct C : B, A { };

       [1m-Wno-inherited-variadic-ctor[0m
           Suppress warnings about use of C++11 inheriting constructors when the base class inherited from  has  a  C
           variadic constructor; the warning is on by default because the ellipsis is not inherited.

       [1m-Wno-invalid-offsetof [22m(C++ and Objective-C++ only)
           Suppress  warnings  from  applying  the "offsetof" macro to a non-POD type.  According to the 2014 ISO C++
           standard,  applying  "offsetof"  to  a  non-standard-layout  type   is   undefined.    In   existing   C++
           implementations,  however,  "offsetof" typically gives meaningful results.  This flag is for users who are
           aware that they are writing nonportable code and who have deliberately chosen to ignore the warning  about
           it.

           The restrictions on "offsetof" may be relaxed in a future version of the C++ standard.

       [1m-Wsized-deallocation [22m(C++ and Objective-C++ only)
           Warn about a definition of an unsized deallocation function

                   void operator delete (void *) noexcept;
                   void operator delete[] (void *) noexcept;

           without a definition of the corresponding sized deallocation function

                   void operator delete (void *, std::size_t) noexcept;
                   void operator delete[] (void *, std::size_t) noexcept;

           or vice versa.  Enabled by [1m-Wextra [22malong with [1m-fsized-deallocation[22m.

       [1m-Wsuggest-final-types[0m
           Warn  about types with virtual methods where code quality would be improved if the type were declared with
           the C++11 "final" specifier, or, if possible, declared in an anonymous namespace. This allows GCC to  more
           aggressively   devirtualize  the  polymorphic  calls.  This  warning  is  more  effective  with  link-time
           optimization, where the information about the class hierarchy graph is more complete.

       [1m-Wsuggest-final-methods[0m
           Warn about virtual methods where code quality would be improved if the method were declared with the C++11
           "final" specifier, or, if possible, its type were declared in an anonymous namespace or with  the  "final"
           specifier.   This  warning  is more effective with link-time optimization, where the information about the
           class  hierarchy  graph  is  more  complete.  It  is  recommended  to  first   consider   suggestions   of
           [1m-Wsuggest-final-types [22mand then rebuild with new annotations.

       [1m-Wsuggest-override[0m
           Warn about overriding virtual functions that are not marked with the "override" keyword.

       [1m-Wuse-after-free[0m
       [1m-Wuse-after-free=[4m[22mn[0m
           Warn  about  uses  of pointers to dynamically allocated objects that have been rendered indeterminate by a
           call to a deallocation function.  The warning  is  enabled  at  all  optimization  levels  but  may  yield
           different results with optimization than without.

           [1m-Wuse-after-free=1[0m
               At  level 1 the warning attempts to diagnose only unconditional uses of pointers made indeterminate by
               a deallocation call or a successful call to "realloc", regardless of whether or not the call  resulted
               in  an  actual reallocatio of memory.  This includes double-"free" calls as well as uses in arithmetic
               and relational expressions.  Although undefined,  uses  of  indeterminate  pointers  in  equality  (or
               inequality) expressions are not diagnosed at this level.

           [1m-Wuse-after-free=2[0m
               At level 2, in addition to unconditional uses, the warning also diagnoses conditional uses of pointers
               made  indeterminate  by  a  deallocation  call.   As  at  level  2,  uses  in equality (or inequality)
               expressions are not diagnosed.  For example, the second call to "free" in the  following  function  is
               diagnosed at this level:

                       struct A { int refcount; void *data; };

                       void release (struct A *p)
                       {
                         int refcount = --p->refcount;
                         free (p);
                         if (refcount == 0)
                           free (p->data);   // warning: p may be used after free
                       }

           [1m-Wuse-after-free=3[0m
               At  level  3,  the warning also diagnoses uses of indeterminate pointers in equality expressions.  All
               uses of indeterminate pointers are undefined but  equality  tests  sometimes  appear  after  calls  to
               "realloc" as an attempt to determine whether the call resulted in relocating the object to a different
               address.   They  are  diagnosed  at  a  separate level to aid legacy code gradually transition to safe
               alternatives.  For example, the equality test in the function below is diagnosed at this level:

                       void adjust_pointers (int**, int);

                       void grow (int **p, int n)
                       {
                         int **q = (int**)realloc (p, n *= 2);
                         if (q == p)
                           return;
                         adjust_pointers ((int**)q, n);
                       }

               To avoid the warning at this level, store offsets into allocated memory  instead  of  pointers.   This
               approach obviates needing to adjust the stored pointers after reallocation.

           [1m-Wuse-after-free=2 [22mis included in [1m-Wall[22m.

       [1m-Wuseless-cast [22m(C++ and Objective-C++ only)
           Warn  when  an  expression  is  cast  to its own type.  This warning does not occur when a class object is
           converted to a non-reference type as that is a way to create a temporary:

                   struct S { };
                   void g (S&&);
                   void f (S&& arg)
                   {
                     g (S(arg)); // make arg prvalue so that it can bind to S&&
                   }

       [1m-Wno-conversion-null [22m(C++ and Objective-C++ only)
           Do not warn for conversions between "NULL" and non-pointer types. [1m-Wconversion-null [22mis enabled by default.

   [1mOptions Controlling Objective-C and Objective-C++ Dialects[0m
       (NOTE: This manual does not describe the Objective-C and Objective-C++ languages themselves.

       This section describes the command-line options that are only meaningful  for  Objective-C  and  Objective-C++
       programs.   You  can  also  use most of the language-independent GNU compiler options.  For example, you might
       compile a file [4msome_class.m[24m like this:

               gcc -g -fgnu-runtime -O -c some_class.m

       In this example, [1m-fgnu-runtime [22mis an option meant only for Objective-C and Objective-C++ programs; you can use
       the other options with any language supported by GCC.

       Note that since Objective-C is an extension of the C language, Objective-C compilations may also  use  options
       specific to the C front-end (e.g., [1m-Wtraditional[22m).  Similarly, Objective-C++ compilations may use C++-specific
       options (e.g., [1m-Wabi[22m).

       Here is a list of options that are [4monly[24m for compiling Objective-C and Objective-C++ programs:

       [1m-fconstant-string-class=[4m[22mclass-name[0m
           Use  [4mclass-name[24m  as the name of the class to instantiate for each literal string specified with the syntax
           "@"..."".  The  default  class  name  is  "NXConstantString"  if  the  GNU  runtime  is  being  used,  and
           "NSConstantString"  if  the NeXT runtime is being used (see below).  On Darwin (macOS, MacOS X) platforms,
           the [1m-fconstant-cfstrings [22moption, if also present, overrides the [1m-fconstant-string-class [22msetting and  cause
           "@"..."" literals to be laid out as constant CoreFoundation strings.  Note that [1m-fconstant-cfstrings [22mis an
           alias for the target-specific [1m-mconstant-cfstrings [22mequivalent.

       [1m-fgnu-runtime[0m
           Generate  object  code compatible with the standard GNU Objective-C runtime.  This is the default for most
           types of systems.

       [1m-fnext-runtime[0m
           Generate output compatible with the NeXT runtime.  This is the default for NeXT-based  systems,  including
           Darwin and Mac OS X.  The macro "__NEXT_RUNTIME__" is predefined if (and only if) this option is used.

       [1m-fno-nil-receivers[0m
           Assume  that all Objective-C message dispatches ("[receiver message:arg]") in this translation unit ensure
           that the receiver is not "nil".  This allows for more efficient entry points in the runtime  to  be  used.
           This option is only available in conjunction with the NeXT runtime and ABI version 0 or 1.

       [1m-fobjc-abi-version=[4m[22mn[0m
           Use  version  [4mn[24m  of the Objective-C ABI for the selected runtime.  This option is currently supported only
           for the NeXT runtime.  In that case, Version 0  is  the  traditional  (32-bit)  ABI  without  support  for
           properties  and  other  Objective-C 2.0 additions.  Version 1 is the traditional (32-bit) ABI with support
           for properties and other Objective-C 2.0 additions.  Version 2 is the modern (64-bit) ABI.  If nothing  is
           specified, the default is Version 0 on 32-bit target machines, and Version 2 on 64-bit target machines.

       [1m-fobjc-call-cxx-cdtors[0m
           For  each  Objective-C  class,  check  if any of its instance variables is a C++ object with a non-trivial
           default constructor.  If so, synthesize a special "- (id) .cxx_construct" instance method which runs  non-
           trivial default constructors on any such instance variables, in order, and then return "self".  Similarly,
           check  if  any  instance  variable  is a C++ object with a non-trivial destructor, and if so, synthesize a
           special "- (void) .cxx_destruct" method which runs all such default destructors, in reverse order.

           The "- (id) .cxx_construct" and "- (void) .cxx_destruct" methods thusly generated only operate on instance
           variables declared in the current Objective-C class, and not those inherited from superclasses.  It is the
           responsibility of the Objective-C runtime to invoke all such methods in an object's inheritance hierarchy.
           The "- (id) .cxx_construct" methods are invoked by the runtime immediately after a new object instance  is
           allocated;  the "- (void) .cxx_destruct" methods are invoked immediately before the runtime deallocates an
           object instance.

           As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has support for invoking the "-  (id)
           .cxx_construct" and "- (void) .cxx_destruct" methods.

       [1m-fobjc-direct-dispatch[0m
           Allow fast jumps to the message dispatcher.  On Darwin this is accomplished via the comm page.

       [1m-fobjc-exceptions[0m
           Enable  syntactic  support for structured exception handling in Objective-C, similar to what is offered by
           C++.  This option is required  to  use  the  Objective-C  keywords  @try,  @throw,  @catch,  @finally  and
           @synchronized.  This option is available with both the GNU runtime and the NeXT runtime (but not available
           in conjunction with the NeXT runtime on Mac OS X 10.2 and earlier).

       [1m-fobjc-gc[0m
           Enable  garbage  collection (GC) in Objective-C and Objective-C++ programs.  This option is only available
           with the NeXT runtime; the GNU runtime has a different garbage collection  implementation  that  does  not
           require special compiler flags.

       [1m-fobjc-nilcheck[0m
           For  the  NeXT  runtime  with  version 2 of the ABI, check for a nil receiver in method invocations before
           doing the actual method call.  This is the default and can be disabled  using  [1m-fno-objc-nilcheck[22m.   Class
           methods  and  super  calls  are  never  checked  for  nil  in this way no matter what this flag is set to.
           Currently this flag does nothing when the GNU runtime, or an older version of the  NeXT  runtime  ABI,  is
           used.

       [1m-fobjc-std=objc1[0m
           Conform  to the language syntax of Objective-C 1.0, the language recognized by GCC 4.0.  This only affects
           the Objective-C additions to the C/C++ language; it does not affect conformance to C/C++ standards,  which
           is  controlled  by the separate C/C++ dialect option flags.  When this option is used with the Objective-C
           or Objective-C++ compiler, any Objective-C syntax that is not recognized by GCC 4.0 is rejected.  This  is
           useful if you need to make sure that your Objective-C code can be compiled with older versions of GCC.

       [1m-freplace-objc-classes[0m
           Emit  a  special  marker  instructing [1mld(1) [22mnot to statically link in the resulting object file, and allow
           [1mdyld(1) [22mto load it in at run time  instead.   This  is  used  in  conjunction  with  the  Fix-and-Continue
           debugging mode, where the object file in question may be recompiled and dynamically reloaded in the course
           of  program  execution,  without  the  need  to  restart  the program itself.  Currently, Fix-and-Continue
           functionality is only available in conjunction with the NeXT runtime on Mac OS X 10.3 and later.

       [1m-fzero-link[0m
           When compiling for the NeXT runtime, the compiler ordinarily replaces calls to objc_getClass("...")  (when
           the  name of the class is known at compile time) with static class references that get initialized at load
           time, which improves run-time performance.  Specifying the [1m-fzero-link [22mflag suppresses this  behavior  and
           causes  calls  to objc_getClass("...")  to be retained.  This is useful in Zero-Link debugging mode, since
           it allows for individual class implementations to be modified during program execution.  The  GNU  runtime
           currently always retains calls to objc_get_class("...")  regardless of command-line options.

       [1m-fno-local-ivars[0m
           By  default  instance variables in Objective-C can be accessed as if they were local variables from within
           the methods of the class they're declared in.  This can lead to shadowing between instance  variables  and
           other  variables declared either locally inside a class method or globally with the same name.  Specifying
           the [1m-fno-local-ivars [22mflag disables this behavior thus avoiding variable shadowing issues.

       [1m-fivar-visibility=[22m[[1mpublic[22m|[1mprotected[22m|[1mprivate[22m|[1mpackage[22m]
           Set the default instance variable visibility to the specified option so that instance  variables  declared
           outside the scope of any access modifier directives default to the specified visibility.

       [1m-gen-decls[0m
           Dump interface declarations for all classes seen in the source file to a file named [4msourcename.decl[24m.

       [1m-Wassign-intercept [22m(Objective-C and Objective-C++ only)
           Warn whenever an Objective-C assignment is being intercepted by the garbage collector.

       [1m-Wno-property-assign-default [22m(Objective-C and Objective-C++ only)
           Do not warn if a property for an Objective-C object has no assign semantics specified.

       [1m-Wno-protocol [22m(Objective-C and Objective-C++ only)
           If  a class is declared to implement a protocol, a warning is issued for every method in the protocol that
           is not implemented by the class.  The default behavior  is  to  issue  a  warning  for  every  method  not
           explicitly implemented in the class, even if a method implementation is inherited from the superclass.  If
           you  use  the  [1m-Wno-protocol  [22moption,  then  methods  inherited  from  the superclass are considered to be
           implemented, and no warning is issued for them.

       [1m-Wobjc-root-class [22m(Objective-C and Objective-C++ only)
           Warn if a class interface lacks a superclass. Most classes will inherit from "NSObject" (or "Object")  for
           example.   When  declaring  classes  intended to be root classes, the warning can be suppressed by marking
           their interfaces with "__attribute__((objc_root_class))".

       [1m-Wselector [22m(Objective-C and Objective-C++ only)
           Warn if multiple methods of different types for the same selector are found during compilation.  The check
           is performed on the list of methods in the final stage of compilation.  Additionally, a check is performed
           for each selector appearing in a @selector(...)  expression, and a corresponding method for that  selector
           has  been  found  during  compilation.   Because  these  checks  scan  the method table only at the end of
           compilation, these warnings are not produced if the final stage of compilation is not reached, for example
           because an error is found during compilation, or because the [1m-fsyntax-only [22moption is being used.

       [1m-Wstrict-selector-match [22m(Objective-C and Objective-C++ only)
           Warn if multiple methods with differing argument and/or return types are found for a given  selector  when
           attempting to send a message using this selector to a receiver of type "id" or "Class".  When this flag is
           off  (which  is  the  default  behavior),  the  compiler  omits such warnings if any differences found are
           confined to types that share the same size and alignment.

       [1m-Wundeclared-selector [22m(Objective-C and Objective-C++ only)
           Warn if a @selector(...) expression  referring  to  an  undeclared  selector  is  found.   A  selector  is
           considered  undeclared if no method with that name has been declared before the @selector(...) expression,
           either explicitly in an @interface or @protocol declaration, or implicitly in an @implementation  section.
           This  option  always performs its checks as soon as a @selector(...) expression is found, while [1m-Wselector[0m
           only performs its checks in the  final  stage  of  compilation.   This  also  enforces  the  coding  style
           convention that methods and selectors must be declared before being used.

       [1m-print-objc-runtime-info[0m
           Generate C header describing the largest structure that is passed by value, if any.

   [1mOptions to Control Diagnostic Messages Formatting[0m
       Traditionally,  diagnostic  messages  have been formatted irrespective of the output device's aspect (e.g. its
       width, ...).  You can use the options described below to  control  the  formatting  algorithm  for  diagnostic
       messages,  e.g.  how many characters per line, how often source location information should be reported.  Note
       that some language front ends may not honor these options.

       [1m-fmessage-length=[4m[22mn[0m
           Try to format error messages so that they fit on lines of about [4mn[24m characters.  If [4mn[24m is zero, then no line-
           wrapping is done; each error message appears on a single line.  This is the default for all front ends.

           Note - this option also affects the display of the [1m#error [22mand [1m#warning [22mpre-processor directives,  and  the
           [1mdeprecated [22mfunction/type/variable attribute.  It does not however affect the [1mpragma GCC warning [22mand [1mpragma[0m
           [1mGCC error [22mpragmas.

       [1m-fdiagnostics-plain-output[0m
           This  option  requests  that diagnostic output look as plain as possible, which may be useful when running
           [1mdejagnu [22mor other utilities that need to parse diagnostics output and prefer that  it  remain  more  stable
           over   time.    [1m-fdiagnostics-plain-output   [22mis   currently   equivalent   to   the   following   options:
           [1m-fno-diagnostics-show-caret          -fno-diagnostics-show-line-numbers          -fdiagnostics-color=never[0m
           [1m-fdiagnostics-urls=never  -fdiagnostics-path-format=separate-events  [22mIn  the  future,  if  GCC changes the
           default appearance of its diagnostics, the corresponding option to disable the new behavior will be  added
           to this list.

       [1m-fdiagnostics-show-location=once[0m
           Only meaningful in line-wrapping mode.  Instructs the diagnostic messages reporter to emit source location
           information  [4monce[24m; that is, in case the message is too long to fit on a single physical line and has to be
           wrapped, the source location won't be emitted (as prefix) again, over and over, in subsequent continuation
           lines.  This is the default behavior.

       [1m-fdiagnostics-show-location=every-line[0m
           Only meaningful in line-wrapping mode.  Instructs the diagnostic messages reporter to emit the same source
           location information (as prefix) for physical lines that result from the process  of  breaking  a  message
           which is too long to fit on a single line.

       [1m-fdiagnostics-color[=[4m[22mWHEN[24m[1m][0m
       [1m-fno-diagnostics-color[0m
           Use  color  in  diagnostics.  [4mWHEN[24m is [1mnever[22m, [1malways[22m, or [1mauto[22m.  The default depends on how the compiler has
           been configured, it can be any of the above [4mWHEN[24m options or also [1mnever [22mif [1mGCC_COLORS [22menvironment  variable
           isn't  present  in  the  environment, and [1mauto [22motherwise.  [1mauto [22mmakes GCC use color only when the standard
           error is a terminal, and when not  executing  in  an  emacs  shell.   The  forms  [1m-fdiagnostics-color  [22mand
           [1m-fno-diagnostics-color   [22mare   aliases   for   [1m-fdiagnostics-color=always  [22mand  [1m-fdiagnostics-color=never[22m,
           respectively.

           The colors are defined by the environment variable [1mGCC_COLORS[22m.  Its value is  a  colon-separated  list  of
           capabilities  and  Select Graphic Rendition (SGR) substrings. SGR commands are interpreted by the terminal
           or terminal emulator.  (See the section in the documentation of your text terminal  for  permitted  values
           and   their   meanings  as  character  attributes.)   These  substring  values  are  integers  in  decimal
           representation and can be concatenated with semicolons.  Common values to concatenate include [1m1 [22mfor  bold,
           [1m4  [22mfor  underline,  [1m5  [22mfor  blink, [1m7 [22mfor inverse, [1m39 [22mfor default foreground color, [1m30 [22mto [1m37 [22mfor foreground
           colors, [1m90 [22mto [1m97 [22mfor 16-color mode foreground colors, [1m38;5;0 [22mto [1m38;5;255 [22mfor 88-color and 256-color  modes
           foreground  colors,  [1m49  [22mfor  default  background  color,  [1m40  [22mto [1m47 [22mfor background colors, [1m100 [22mto [1m107 [22mfor
           16-color mode background colors, and [1m48;5;0 [22mto  [1m48;5;255  [22mfor  88-color  and  256-color  modes  background
           colors.

           The default [1mGCC_COLORS [22mis

                   error=01;31:warning=01;35:note=01;36:range1=32:range2=34:locus=01:\
                   quote=01:path=01;36:fixit-insert=32:fixit-delete=31:\
                   diff-filename=01:diff-hunk=32:diff-delete=31:diff-insert=32:\
                   type-diff=01;32:fnname=01;32:targs=35

           where  [1m01;31  [22mis bold red, [1m01;35 [22mis bold magenta, [1m01;36 [22mis bold cyan, [1m32 [22mis green, [1m34 [22mis blue, [1m01 [22mis bold,
           and [1m31 [22mis red.  Setting [1mGCC_COLORS [22mto the empty string disables colors.   Supported  capabilities  are  as
           follows.

           "error="
               SGR substring for error: markers.

           "warning="
               SGR substring for warning: markers.

           "note="
               SGR substring for note: markers.

           "path="
               SGR  substring  for colorizing paths of control-flow events as printed via [1m-fdiagnostics-path-format=[22m,
               such as the identifiers of individual events and lines indicating interprocedural calls and returns.

           "range1="
               SGR substring for first additional range.

           "range2="
               SGR substring for second additional range.

           "locus="
               SGR substring for location information, [1mfile:line [22mor [1mfile:line:column [22metc.

           "quote="
               SGR substring for information printed within quotes.

           "fnname="
               SGR substring for names of C++ functions.

           "targs="
               SGR substring for C++ function template parameter bindings.

           "fixit-insert="
               SGR substring for fix-it hints suggesting text to be inserted or replaced.

           "fixit-delete="
               SGR substring for fix-it hints suggesting text to be deleted.

           "diff-filename="
               SGR substring for filename headers within generated patches.

           "diff-hunk="
               SGR substring for the starts of hunks within generated patches.

           "diff-delete="
               SGR substring for deleted lines within generated patches.

           "diff-insert="
               SGR substring for inserted lines within generated patches.

           "type-diff="
               SGR substring for highlighting mismatching types within template arguments in the C++ frontend.

       [1m-fdiagnostics-urls[=[4m[22mWHEN[24m[1m][0m
           Use escape sequences to embed URLs in diagnostics.  For example, when [1m-fdiagnostics-show-option [22memits text
           showing the command-line option controlling a diagnostic, embed a URL for documentation of that option.

           [4mWHEN[24m is [1mnever[22m, [1malways[22m, or [1mauto[22m.  [1mauto [22mmakes GCC use URL escape sequences only when the standard error is a
           terminal, and when not executing in an emacs shell  or  any  graphical  terminal  which  is  known  to  be
           incompatible with this feature, see below.

           The default depends on how the compiler has been configured.  It can be any of the above [4mWHEN[24m options.

           GCC can also be configured (via the [1m--with-diagnostics-urls=auto-if-env [22mconfigure-time option) so that the
           default  is  affected by environment variables.  Under such a configuration, GCC defaults to using [1mauto [22mif
           either [1mGCC_URLS [22mor [1mTERM_URLS [22menvironment variables are present and non-empty in  the  environment  of  the
           compiler, or [1mnever [22mif neither are.

           However,  even with [1m-fdiagnostics-urls=always [22mthe behavior is dependent on those environment variables: If
           [1mGCC_URLS [22mis set to empty or [1mno[22m, do not embed URLs in diagnostics.  If  set  to  [1mst[22m,  URLs  use  ST  escape
           sequences.   If set to [1mbel[22m, the default, URLs use BEL escape sequences.  Any other non-empty value enables
           the feature.  If [1mGCC_URLS [22mis not set, use [1mTERM_URLS [22mas a fallback.  Note: ST is an ANSI  escape  sequence,
           string terminator [1mESC \[22m, BEL is an ASCII character, CTRL-G that usually sounds like a beep.

           At this time GCC tries to detect also a few terminals that are known to not implement the URL feature, and
           have bugs or at least had bugs in some versions that are still in use, where the URL escapes are likely to
           misbehave,  i.e.  print garbage on the screen.  That list is currently xfce4-terminal, certain known to be
           buggy gnome-terminal versions, the linux  console,  and  mingw.   This  check  can  be  skipped  with  the
           [1m-fdiagnostics-urls=always[22m.

       [1m-fno-diagnostics-show-option[0m
           By  default,  each  diagnostic  emitted  includes  text  indicating  the command-line option that directly
           controls the diagnostic (if such an  option  is  known  to  the  diagnostic  machinery).   Specifying  the
           [1m-fno-diagnostics-show-option [22mflag suppresses that behavior.

       [1m-fno-diagnostics-show-caret[0m
           By default, each diagnostic emitted includes the original source line and a caret [1m^ [22mindicating the column.
           This  option  suppresses  this  information.   The  source  line  is  truncated  to  [4mn[24m  characters, if the
           [1m-fmessage-length=n [22moption is given.  When the output is done to the terminal, the width is limited to  the
           width given by the [1mCOLUMNS [22menvironment variable or, if not set, to the terminal width.

       [1m-fno-diagnostics-show-labels[0m
           By  default,  when  printing  source  code (via [1m-fdiagnostics-show-caret[22m), diagnostics can label ranges of
           source code with pertinent information, such as the types of expressions:

                       printf ("foo %s bar", long_i + long_j);
                                    ~^       ~~~~~~~~~~~~~~~
                                     |              |
                                     char *         long int

           This option suppresses the printing of these labels (in the example above, the vertical bars and the "char
           *" and "long int" text).

       [1m-fno-diagnostics-show-cwe[0m
           Diagnostic messages can optionally have an associated
            CWE ("https://cwe.mitre.org/index.html") identifier.  GCC itself only provides such metadata for some  of
           the  [1m-fanalyzer [22mdiagnostics.  GCC plugins may also provide diagnostics with such metadata.  By default, if
           this information is present, it will be printed with the diagnostic.  This option suppresses the  printing
           of this metadata.

       [1m-fno-diagnostics-show-rules[0m
           Diagnostic  messages  can optionally have rules associated with them, such as from a coding standard, or a
           specification.  GCC itself does not do this for any of  its  diagnostics,  but  plugins  may  do  so.   By
           default,  if  this information is present, it will be printed with the diagnostic.  This option suppresses
           the printing of this metadata.

       [1m-fno-diagnostics-show-line-numbers[0m
           By default, when printing source code (via [1m-fdiagnostics-show-caret[22m), a left margin  is  printed,  showing
           line numbers.  This option suppresses this left margin.

       [1m-fdiagnostics-minimum-margin-width=[4m[22mwidth[0m
           This  option controls the minimum width of the left margin printed by [1m-fdiagnostics-show-line-numbers[22m.  It
           defaults to 6.

       [1m-fdiagnostics-parseable-fixits[0m
           Emit fix-it hints in a machine-parseable format, suitable for consumption by IDEs.   For  each  fix-it,  a
           line will be printed after the relevant diagnostic, starting with the string "fix-it:".  For example:

                   fix-it:"test.c":{45:3-45:21}:"gtk_widget_show_all"

           The  location is expressed as a half-open range, expressed as a count of bytes, starting at byte 1 for the
           initial column.  In the above example, bytes 3 through 20 of line 45 of "test.c" are to be  replaced  with
           the given string:

                   00000000011111111112222222222
                   12345678901234567890123456789
                     gtk_widget_showall (dlg);
                     ^^^^^^^^^^^^^^^^^^
                     gtk_widget_show_all

           The  filename and replacement string escape backslash as "\\", tab as "\t", newline as "\n", double quotes
           as "\"", non-printable characters as octal (e.g. vertical tab as "\013").

           An empty replacement string indicates that the given range  is  to  be  removed.   An  empty  range  (e.g.
           "45:3-45:3") indicates that the string is to be inserted at the given position.

       [1m-fdiagnostics-generate-patch[0m
           Print fix-it hints to stderr in unified diff format, after any diagnostics are printed.  For example:

                   --- test.c
                   +++ test.c
                   @ -42,5 +42,5 @

                    void show_cb(GtkDialog *dlg)
                    {
                   -  gtk_widget_showall(dlg);
                   +  gtk_widget_show_all(dlg);
                    }

           The   diff   may   or   may   not  be  colorized,  following  the  same  rules  as  for  diagnostics  (see
           [1m-fdiagnostics-color[22m).

       [1m-fdiagnostics-show-template-tree[0m
           In the C++ frontend, when printing diagnostics showing mismatching template types, such as:

                     could not convert 'std::map<int, std::vector<double> >()'
                       from 'map<[...],vector<double>>' to 'map<[...],vector<float>>

           the [1m-fdiagnostics-show-template-tree [22mflag enables printing a tree-like structure showing  the  common  and
           differing parts of the types, such as:

                     map<
                       [...],
                       vector<
                         [double != float]>>

           The parts that differ are highlighted with color ("double" and "float" in this case).

       [1m-fno-elide-type[0m
           By  default  when  the C++ frontend prints diagnostics showing mismatching template types, common parts of
           the types are printed as "[...]" to simplify the error message.  For example:

                     could not convert 'std::map<int, std::vector<double> >()'
                       from 'map<[...],vector<double>>' to 'map<[...],vector<float>>

           Specifying the [1m-fno-elide-type [22mflag suppresses that behavior.  This flag also affects the  output  of  the
           [1m-fdiagnostics-show-template-tree [22mflag.

       [1m-fdiagnostics-path-format=[4m[22mKIND[0m
           Specify  how  to  print paths of control-flow events for diagnostics that have such a path associated with
           them.

           [4mKIND[24m is [1mnone[22m, [1mseparate-events[22m, or [1minline-events[22m, the default.

           [1mnone [22mmeans to not print diagnostic paths.

           [1mseparate-events [22mmeans to print a separate "note" diagnostic for each event  within  the  diagnostic.   For
           example:

                   test.c:29:5: error: passing NULL as argument 1 to 'PyList_Append' which requires a non-NULL parameter
                   test.c:25:10: note: (1) when 'PyList_New' fails, returning NULL
                   test.c:27:3: note: (2) when 'i < count'
                   test.c:29:5: note: (3) when calling 'PyList_Append', passing NULL from (1) as argument 1

           [1minline-events  [22mmeans  to  print  the  events  "inline"  within  the  source  code.   This view attempts to
           consolidate the events into runs of sufficiently-close events, printing them as labelled ranges within the
           source.

           For example, the same events as above might be printed as:

                     'test': events 1-3
                       |
                       |   25 |   list = PyList_New(0);
                       |      |          ^~~~~~~~~~~~~
                       |      |          |
                       |      |          (1) when 'PyList_New' fails, returning NULL
                       |   26 |
                       |   27 |   for (i = 0; i < count; i++) {
                       |      |   ~~~
                       |      |   |
                       |      |   (2) when 'i < count'
                       |   28 |     item = PyLong_FromLong(random());
                       |   29 |     PyList_Append(list, item);
                       |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~
                       |      |     |
                       |      |     (3) when calling 'PyList_Append', passing NULL from (1) as argument 1
                       |

           Interprocedural control flow is shown by grouping the events by stack frame, and using indentation to show
           how stack frames are nested, pushed, and popped.

           For example:

                     'test': events 1-2
                       |
                       |  133 | {
                       |      | ^
                       |      | |
                       |      | (1) entering 'test'
                       |  134 |   boxed_int *obj = make_boxed_int (i);
                       |      |                    ~~~~~~~~~~~~~~~~~~
                       |      |                    |
                       |      |                    (2) calling 'make_boxed_int'
                       |
                       +--> 'make_boxed_int': events 3-4
                              |
                              |  120 | {
                              |      | ^
                              |      | |
                              |      | (3) entering 'make_boxed_int'
                              |  121 |   boxed_int *result = (boxed_int *)wrapped_malloc (sizeof (boxed_int));
                              |      |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                              |      |                                    |
                              |      |                                    (4) calling 'wrapped_malloc'
                              |
                              +--> 'wrapped_malloc': events 5-6
                                     |
                                     |    7 | {
                                     |      | ^
                                     |      | |
                                     |      | (5) entering 'wrapped_malloc'
                                     |    8 |   return malloc (size);
                                     |      |          ~~~~~~~~~~~~~
                                     |      |          |
                                     |      |          (6) calling 'malloc'
                                     |
                       <-------------+
                       |
                    'test': event 7
                       |
                       |  138 |   free_boxed_int (obj);
                       |      |   ^~~~~~~~~~~~~~~~~~~~
                       |      |   |
                       |      |   (7) calling 'free_boxed_int'
                       |
                   (etc)

       [1m-fdiagnostics-show-path-depths[0m
           This option provides additional information when printing control-flow paths associated with a diagnostic.

           If this is option is provided then the stack  depth  will  be  printed  for  each  run  of  events  within
           [1m-fdiagnostics-path-format=inline-events[22m.  If provided with [1m-fdiagnostics-path-format=separate-events[22m, then
           the stack depth and function declaration will be appended when printing each event.

           This  is  intended  for use by GCC developers and plugin developers when debugging diagnostics that report
           interprocedural control flow.

       [1m-fno-show-column[0m
           Do not print column numbers in diagnostics.  This may be necessary if diagnostics are being scanned  by  a
           program that does not understand the column numbers, such as [1mdejagnu[22m.

       [1m-fdiagnostics-column-unit=[4m[22mUNIT[0m
           Select  the  units  for  the  column  number.   This  affects  traditional  diagnostics (in the absence of
           [1m-fno-show-column[22m), as well as JSON format diagnostics if requested.

           The default [4mUNIT[24m, [1mdisplay[22m, considers the number of display columns occupied by each character.   This  may
           be  larger than the number of bytes required to encode the character, in the case of tab characters, or it
           may be smaller, in the case of multibyte characters.  For example, the character "GREEK  SMALL  LETTER  PI
           (U+03C0)"  occupies one display column, and its UTF-8 encoding requires two bytes; the character "SLIGHTLY
           SMILING FACE (U+1F642)" occupies two display columns, and its UTF-8 encoding requires four bytes.

           Setting [4mUNIT[24m to [1mbyte [22mchanges the column number to the raw byte count in all cases,  as  was  traditionally
           output by GCC prior to version 11.1.0.

       [1m-fdiagnostics-column-origin=[4m[22mORIGIN[0m
           Select  the  origin  for column numbers, i.e. the column number assigned to the first column.  The default
           value of 1 corresponds to traditional GCC behavior and to the GNU style guide.  Some utilities may perform
           better with an origin of 0; any non-negative value may be specified.

       [1m-fdiagnostics-escape-format=[4m[22mFORMAT[0m
           When GCC prints pertinent source lines for a diagnostic it normally attempts to  print  the  source  bytes
           directly.   However,  some  diagnostics  relate  to  encoding issues in the source file, such as malformed
           UTF-8, or issues with Unicode normalization.  These diagnostics are flagged so that GCC will escape  bytes
           that are not printable ASCII when printing their pertinent source lines.

           This option controls how such bytes should be escaped.

           The default [4mFORMAT[24m, [1municode [22mdisplays Unicode characters that are not printable ASCII in the form [1m<U+XXXX>[22m,
           and bytes that do not correspond to a Unicode character validly-encoded in UTF-8-encoded will be displayed
           as hexadecimal in the form [1m<XX>[22m.

           For  example,  a source line containing the string [1mbefore [22mfollowed by the Unicode character U+03C0 ("GREEK
           SMALL LETTER PI", with UTF-8 encoding 0xCF 0x80) followed by the byte 0xBF (a stray UTF-8 trailing  byte),
           followed by the string [1mafter [22mwill be printed for such a diagnostic as:

                    before<U+03C0><BF>after

           Setting  [4mFORMAT[24m  to  [1mbytes  [22mwill  display all non-printable-ASCII bytes in the form [1m<XX>[22m, thus showing the
           underlying encoding of non-ASCII Unicode characters.   For  the  example  above,  the  following  will  be
           printed:

                    before<CF><80><BF>after

       [1m-fdiagnostics-format=[4m[22mFORMAT[0m
           Select a different format for printing diagnostics.  [4mFORMAT[24m is [1mtext[22m, [1msarif-stderr[22m, [1msarif-file[22m, [1mjson[22m, [1mjson-[0m
           [1mstderr[22m, or [1mjson-file[22m.

           The default is [1mtext[22m.

           The  [1msarif-stderr  [22mand  [1msarif-file  [22mformats both emit diagnostics in SARIF Version 2.1.0 format, either to
           stderr, or to a file named [4msource.sarif[24m, respectively.

           The [1mjson [22mformat is a synonym for [1mjson-stderr[22m.  The [1mjson-stderr [22mand [1mjson-file [22mformats are identical,  apart
           from where the JSON is emitted to - with the former, the JSON is emitted to stderr, whereas with [1mjson-file[0m
           it is written to [4msource.gcc.json[24m.

           The  emitted JSON consists of a top-level JSON array containing JSON objects representing the diagnostics.
           The JSON is emitted as one line, without formatting; the examples below have been formatted for clarity.

           Diagnostics can have child diagnostics.  For example, this error and note:

                   misleading-indentation.c:15:3: warning: this 'if' clause does not
                     guard... [-Wmisleading-indentation]
                      15 |   if (flag)
                         |   ^~
                   misleading-indentation.c:17:5: note: ...this statement, but the latter
                     is misleadingly indented as if it were guarded by the 'if'
                      17 |     y = 2;
                         |     ^

           might be printed in JSON form (after formatting) like this:

                   [
                       {
                           "kind": "warning",
                           "locations": [
                               {
                                   "caret": {
                                       "display-column": 3,
                                       "byte-column": 3,
                                       "column": 3,
                                       "file": "misleading-indentation.c",
                                       "line": 15
                                   },
                                   "finish": {
                                       "display-column": 4,
                                       "byte-column": 4,
                                       "column": 4,
                                       "file": "misleading-indentation.c",
                                       "line": 15
                                   }
                               }
                           ],
                           "message": "this \u2018if\u2019 clause does not guard...",
                           "option": "-Wmisleading-indentation",
                           "option_url": "https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wmisleading-indentation",
                           "children": [
                               {
                                   "kind": "note",
                                   "locations": [
                                       {
                                           "caret": {
                                               "display-column": 5,
                                               "byte-column": 5,
                                               "column": 5,
                                               "file": "misleading-indentation.c",
                                               "line": 17
                                           }
                                       }
                                   ],
                                   "escape-source": false,
                                   "message": "...this statement, but the latter is ..."
                               }
                           ]
                           "escape-source": false,
                           "column-origin": 1,
                       }
                   ]

           where the "note" is a child of the "warning".

           A diagnostic has a "kind".  If this is "warning", then there is an "option" key  describing  the  command-
           line option controlling the warning.

           A  diagnostic  can contain zero or more locations.  Each location has an optional "label" string and up to
           three positions within it: a "caret" position and optional "start" and "finish" positions.  A position  is
           described by a "file" name, a "line" number, and three numbers indicating a column position:

           *   "display-column" counts display columns, accounting for tabs and multibyte characters.

           *   "byte-column" counts raw bytes.

           *   "column" is equal to one of the previous two, as dictated by the [1m-fdiagnostics-column-unit [22moption.

           All  three columns are relative to the origin specified by [1m-fdiagnostics-column-origin[22m, which is typically
           equal to 1 but may be set, for instance, to 0 for compatibility with other utilities that  number  columns
           from  0.   The  column origin is recorded in the JSON output in the "column-origin" tag.  In the remaining
           examples below, the extra column number outputs have been omitted for brevity.

           For example, this error:

                   bad-binary-ops.c:64:23: error: invalid operands to binary + (have 'S' {aka
                      'struct s'} and 'T' {aka 'struct t'})
                      64 |   return callee_4a () + callee_4b ();
                         |          ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~
                         |          |              |
                         |          |              T {aka struct t}
                         |          S {aka struct s}

           has three locations.  Its primary location is at the "+"  token  at  column  23.   It  has  two  secondary
           locations,  describing  the  left  and right-hand sides of the expression, which have labels.  It might be
           printed in JSON form as:

                       {
                           "children": [],
                           "kind": "error",
                           "locations": [
                               {
                                   "caret": {
                                       "column": 23, "file": "bad-binary-ops.c", "line": 64
                                   }
                               },
                               {
                                   "caret": {
                                       "column": 10, "file": "bad-binary-ops.c", "line": 64
                                   },
                                   "finish": {
                                       "column": 21, "file": "bad-binary-ops.c", "line": 64
                                   },
                                   "label": "S {aka struct s}"
                               },
                               {
                                   "caret": {
                                       "column": 25, "file": "bad-binary-ops.c", "line": 64
                                   },
                                   "finish": {
                                       "column": 36, "file": "bad-binary-ops.c", "line": 64
                                   },
                                   "label": "T {aka struct t}"
                               }
                           ],
                           "escape-source": false,
                           "message": "invalid operands to binary + ..."
                       }

           If a diagnostic contains fix-it hints, it has a "fixits" array, consisting of half-open intervals, similar
           to the output of [1m-fdiagnostics-parseable-fixits[22m.  For example, this diagnostic with a  replacement  fix-it
           hint:

                   demo.c:8:15: error: 'struct s' has no member named 'colour'; did you
                     mean 'color'?
                       8 |   return ptr->colour;
                         |               ^~~~~~
                         |               color

           might be printed in JSON form as:

                       {
                           "children": [],
                           "fixits": [
                               {
                                   "next": {
                                       "column": 21,
                                       "file": "demo.c",
                                       "line": 8
                                   },
                                   "start": {
                                       "column": 15,
                                       "file": "demo.c",
                                       "line": 8
                                   },
                                   "string": "color"
                               }
                           ],
                           "kind": "error",
                           "locations": [
                               {
                                   "caret": {
                                       "column": 15,
                                       "file": "demo.c",
                                       "line": 8
                                   },
                                   "finish": {
                                       "column": 20,
                                       "file": "demo.c",
                                       "line": 8
                                   }
                               }
                           ],
                           "escape-source": false,
                           "message": "\u2018struct s\u2019 has no member named ..."
                       }

           where  the  fix-it  hint  suggests  replacing  the  text  from "start" up to but not including "next" with
           "string"'s value.  Deletions are expressed via an empty value for "string", insertions by  having  "start"
           equal "next".

           If  the  diagnostic has a path of control-flow events associated with it, it has a "path" array of objects
           representing the events.  Each event object has a "description" string, a "location" object, along with  a
           "function"  string and a "depth" number for representing interprocedural paths.  The "function" represents
           the current function at that event, and the "depth" represents the stack depth relative to some  baseline:
           the higher, the more frames are within the stack.

           For example, the intraprocedural example shown for [1m-fdiagnostics-path-format= [22mmight have this JSON for its
           path:

                       "path": [
                           {
                               "depth": 0,
                               "description": "when 'PyList_New' fails, returning NULL",
                               "function": "test",
                               "location": {
                                   "column": 10,
                                   "file": "test.c",
                                   "line": 25
                               }
                           },
                           {
                               "depth": 0,
                               "description": "when 'i < count'",
                               "function": "test",
                               "location": {
                                   "column": 3,
                                   "file": "test.c",
                                   "line": 27
                               }
                           },
                           {
                               "depth": 0,
                               "description": "when calling 'PyList_Append', passing NULL from (1) as argument 1",
                               "function": "test",
                               "location": {
                                   "column": 5,
                                   "file": "test.c",
                                   "line": 29
                               }
                           }
                       ]

           Diagnostics  have  a  boolean attribute "escape-source", hinting whether non-ASCII bytes should be escaped
           when printing the pertinent lines of  source  code  ("true"  for  diagnostics  involving  source  encoding
           issues).

   [1mOptions to Request or Suppress Warnings[0m
       Warnings  are  diagnostic  messages  that  report constructions that are not inherently erroneous but that are
       risky or suggest there may have been an error.

       The following language-independent  options  do  not  enable  specific  warnings  but  control  the  kinds  of
       diagnostics produced by GCC.

       [1m-fsyntax-only[0m
           Check the code for syntax errors, but don't do anything beyond that.

       [1m-fmax-errors=[4m[22mn[0m
           Limits  the  maximum number of error messages to [4mn[24m, at which point GCC bails out rather than attempting to
           continue processing the source code.  If [4mn[24m is 0 (the default), there is no limit on the  number  of  error
           messages  produced.   If  [1m-Wfatal-errors [22mis also specified, then [1m-Wfatal-errors [22mtakes precedence over this
           option.

       [1m-w  [22mInhibit all warning messages.

       [1m-Werror[0m
           Make all warnings into errors.

       [1m-Werror=[0m
           Make the specified warning into  an  error.   The  specifier  for  a  warning  is  appended;  for  example
           [1m-Werror=switch  [22mturns the warnings controlled by [1m-Wswitch [22minto errors.  This switch takes a negative form,
           to be used to negate [1m-Werror [22mfor specific warnings; for example [1m-Wno-error=switch [22mmakes [1m-Wswitch  [22mwarnings
           not be errors, even when [1m-Werror [22mis in effect.

           The  warning  message  for  each controllable warning includes the option that controls the warning.  That
           option can then be used with [1m-Werror= [22mand [1m-Wno-error= [22mas described above.  (Printing of the option in  the
           warning message can be disabled using the [1m-fno-diagnostics-show-option [22mflag.)

           Note  that  specifying  [1m-Werror=[4m[22mfoo[24m  automatically  implies [1m-W[4m[22mfoo[24m.  However, [1m-Wno-error=[4m[22mfoo[24m does not imply
           anything.

       [1m-Wfatal-errors[0m
           This option causes the compiler to abort compilation on the first error occurred  rather  than  trying  to
           keep going and printing further error messages.

       You  can  request  many  specific  warnings  with options beginning with [1m-W[22m, for example [1m-Wimplicit [22mto request
       warnings on implicit declarations.  Each of these specific warning options also has a negative form  beginning
       [1m-Wno-  [22mto  turn  off  warnings;  for  example,  [1m-Wno-implicit[22m.   This  manual lists only one of the two forms,
       whichever is not the default.  For further language-specific options also refer to  [1mC++  Dialect  Options  [22mand
       [1mObjective-C  and  Objective-C++  Dialect  Options[22m.  Additional warnings can be produced by enabling the static
       analyzer;

       Some options, such as [1m-Wall [22mand [1m-Wextra[22m, turn on other options, such as [1m-Wunused[22m, which may  turn  on  further
       options,  such  as  [1m-Wunused-value[22m.  The  combined effect of positive and negative forms is that more specific
       options have priority over less specific ones, independently  of  their  position  in  the  command-line.  For
       options  of  the  same  specificity,  the  last one takes effect. Options enabled or disabled via pragmas take
       effect as if they appeared at the end of the command-line.

       When an unrecognized warning option is requested (e.g., [1m-Wunknown-warning[22m), GCC  emits  a  diagnostic  stating
       that the option is not recognized.  However, if the [1m-Wno- [22mform is used, the behavior is slightly different: no
       diagnostic  is produced for [1m-Wno-unknown-warning [22munless other diagnostics are being produced.  This allows the
       use of new [1m-Wno- [22moptions with old compilers,  but  if  something  goes  wrong,  the  compiler  warns  that  an
       unrecognized option is present.

       The   effectiveness   of   some   warnings   depends   on   optimizations  also  being  enabled.  For  example
       [1m-Wsuggest-final-types [22mis more effective with link-time optimization and some instances of other  warnings  may
       not  be  issued at all unless optimization is enabled.  While optimization in general improves the efficacy of
       control and data flow sensitive warnings, in some cases it may also cause false positives.

       [1m-Wpedantic[0m
       [1m-pedantic[0m
           Issue all the warnings demanded by strict ISO C and ISO  C++;  reject  all  programs  that  use  forbidden
           extensions,  and some other programs that do not follow ISO C and ISO C++.  For ISO C, follows the version
           of the ISO C standard specified by any [1m-std [22moption used.

           Valid ISO C and ISO C++ programs should compile properly with or without this option (though  a  rare  few
           require  [1m-ansi  [22mor a [1m-std [22moption specifying the required version of ISO C).  However, without this option,
           certain GNU extensions and traditional C and C++ features are supported as well.  With this  option,  they
           are rejected.

           [1m-Wpedantic  [22mdoes  not  cause  warning messages for use of the alternate keywords whose names begin and end
           with [1m__[22m.  This alternate format can also be used to  disable  warnings  for  non-ISO  [1m__intN  [22mtypes,  i.e.
           [1m__intN__[22m.   Pedantic  warnings are also disabled in the expression that follows "__extension__".  However,
           only system header files should use these escape routes; application programs should avoid them.

           Some users try to use [1m-Wpedantic [22mto check programs for strict ISO C conformance.  They soon find  that  it
           does  not do quite what they want: it finds some non-ISO practices, but not all---only those for which ISO
           C [4mrequires[24m a diagnostic, and some others for which diagnostics have been added.

           A feature to report any failure to conform to ISO C might be useful in some instances, but  would  require
           considerable additional work and would be quite different from [1m-Wpedantic[22m.  We don't have plans to support
           such a feature in the near future.

           Where  the  standard  specified  with [1m-std [22mrepresents a GNU extended dialect of C, such as [1mgnu90 [22mor [1mgnu99[22m,
           there is a corresponding [4mbase[24m [4mstandard[24m, the version of ISO C on which the GNU extended dialect  is  based.
           Warnings  from [1m-Wpedantic [22mare given where they are required by the base standard.  (It does not make sense
           for such warnings to be given only for features not in the specified GNU C dialect,  since  by  definition
           the GNU dialects of C include all features the compiler supports with the given option, and there would be
           nothing to warn about.)

       [1m-pedantic-errors[0m
           Give an error whenever the [4mbase[24m [4mstandard[24m (see [1m-Wpedantic[22m) requires a diagnostic, in some cases where there
           is  undefined behavior at compile-time and in some other cases that do not prevent compilation of programs
           that are valid according to the standard. This is not equivalent  to  [1m-Werror=pedantic[22m,  since  there  are
           errors enabled by this option and not enabled by the latter and vice versa.

       [1m-Wall[0m
           This enables all the warnings about constructions that some users consider questionable, and that are easy
           to  avoid  (or  modify  to  prevent the warning), even in conjunction with macros.  This also enables some
           language-specific warnings described in [1mC++ Dialect Options  [22mand  [1mObjective-C  and  Objective-C++  Dialect[0m
           [1mOptions[22m.

           [1m-Wall [22mturns on the following warning flags:

           [1m-Waddress  -Warray-bounds=1  [22m(only  with [1m-O2[22m) [1m-Warray-compare -Warray-parameter=2 [22m(C and Objective-C only)
           [1m-Wbool-compare -Wbool-operation -Wc++11-compat  -Wc++14-compat -Wcatch-value [22m(C++ and Objective-C++  only)
           [1m-Wchar-subscripts  -Wcomment  -Wdangling-pointer=2  -Wduplicate-decl-specifier  [22m(C  and  Objective-C only)
           [1m-Wenum-compare [22m(in C/ObjC; this is on by default in C++)  [1m-Wenum-int-mismatch  [22m(C  and  Objective-C  only)
           [1m-Wformat  -Wformat-overflow  -Wformat-truncation -Wint-in-bool-context -Wimplicit [22m(C and Objective-C only)
           [1m-Wimplicit-int  [22m(C  and  Objective-C  only)  [1m-Wimplicit-function-declaration  [22m(C  and  Objective-C   only)
           [1m-Winit-self  [22m(only  for  C++) [1m-Wlogical-not-parentheses -Wmain [22m(only for C/ObjC and unless [1m-ffreestanding[22m)
           [1m-Wmaybe-uninitialized -Wmemset-elt-size -Wmemset-transposed-args -Wmisleading-indentation [22m(only for C/C++)
           [1m-Wmismatched-dealloc -Wmismatched-new-delete [22m(only for C/C++) [1m-Wmissing-attributes -Wmissing-braces  [22m(only
           for  C/ObjC)  [1m-Wmultistatement-macros -Wnarrowing [22m(only for C++) [1m-Wnonnull -Wnonnull-compare -Wopenmp-simd[0m
           [1m-Wparentheses -Wpessimizing-move [22m(only for  C++)  [1m-Wpointer-sign  -Wrange-loop-construct  [22m(only  for  C++)
           [1m-Wreorder  -Wrestrict  -Wreturn-type  -Wself-move  [22m(only for C++) [1m-Wsequence-point -Wsign-compare [22m(only in
           C++)     [1m-Wsizeof-array-div     -Wsizeof-pointer-div     -Wsizeof-pointer-memaccess      -Wstrict-aliasing[0m
           [1m-Wstrict-overflow=1   -Wswitch   -Wtautological-compare   -Wtrigraphs   -Wuninitialized  -Wunknown-pragmas[0m
           [1m-Wunused-function -Wunused-label -Wunused-value -Wunused-variable  -Wuse-after-free=2  -Wvla-parameter  [22m(C
           and Objective-C only) [1m-Wvolatile-register-var -Wzero-length-bounds[0m

           Note  that  some warning flags are not implied by [1m-Wall[22m.  Some of them warn about constructions that users
           generally do not consider questionable, but which occasionally you might wish to check  for;  others  warn
           about  constructions  that  are  necessary  or  hard to avoid in some cases, and there is no simple way to
           modify the code to suppress the warning. Some of them are enabled by [1m-Wextra [22mbut  many  of  them  must  be
           enabled individually.

       [1m-Wextra[0m
           This  enables  some  extra warning flags that are not enabled by [1m-Wall[22m. (This option used to be called [1m-W[22m.
           The older name is still supported, but the newer name is more descriptive.)

           [1m-Wclobbered -Wcast-function-type -Wdangling-reference [22m(C++ only) [1m-Wdeprecated-copy [22m(C++ only) [1m-Wempty-body[0m
           [1m-Wenum-conversion  [22m(C  only)  [1m-Wignored-qualifiers  -Wimplicit-fallthrough=3  -Wmissing-field-initializers[0m
           [1m-Wmissing-parameter-type [22m(C only) [1m-Wold-style-declaration [22m(C only) [1m-Woverride-init -Wsign-compare [22m(C only)
           [1m-Wstring-compare  -Wredundant-move [22m(only for C++) [1m-Wtype-limits -Wuninitialized -Wshift-negative-value [22m(in
           C++11  to  C++17  and  in  C99   and   newer)   [1m-Wunused-parameter   [22m(only   with   [1m-Wunused   [22mor   [1m-Wall[22m)
           [1m-Wunused-but-set-parameter [22m(only with [1m-Wunused [22mor [1m-Wall[22m)

           The option [1m-Wextra [22malso prints warning messages for the following cases:

           *   A pointer is compared against integer zero with "<", "<=", ">", or ">=".

           *   (C++ only) An enumerator and a non-enumerator both appear in a conditional expression.

           *   (C++ only) Ambiguous virtual bases.

           *   (C++ only) Subscripting an array that has been declared "register".

           *   (C++ only) Taking the address of a variable that has been declared "register".

           *   (C++ only) A base class is not initialized in the copy constructor of a derived class.

       [1m-Wabi [22m(C, Objective-C, C++ and Objective-C++ only)
           Warn  about  code affected by ABI changes.  This includes code that may not be compatible with the vendor-
           neutral C++ ABI as well as the psABI for the particular target.

           Since G++ now defaults to updating the ABI with each major release, normally [1m-Wabi [22mwarns  only  about  C++
           ABI compatibility problems if there is a check added later in a release series for an ABI issue discovered
           since  the  initial  release.   [1m-Wabi  [22mwarns  about  more things if an older ABI version is selected (with
           [1m-fabi-version=[4m[22mn[24m).

           [1m-Wabi [22mcan also be used with an explicit version  number  to  warn  about  C++  ABI  compatibility  with  a
           particular [1m-fabi-version [22mlevel, e.g. [1m-Wabi=2 [22mto warn about changes relative to [1m-fabi-version=2[22m.

           If  an  explicit  version number is provided and [1m-fabi-compat-version [22mis not specified, the version number
           from this option is used for compatibility aliases.  If no explicit version number is provided  with  this
           option, but [1m-fabi-compat-version [22mis specified, that version number is used for C++ ABI warnings.

           Although  an effort has been made to warn about all such cases, there are probably some cases that are not
           warned about, even though G++ is generating incompatible code.  There may also be cases where warnings are
           emitted even though the code that is generated is compatible.

           You should rewrite your code to avoid these warnings if  you  are  concerned  about  the  fact  that  code
           generated by G++ may not be binary compatible with code generated by other compilers.

           Known incompatibilities in [1m-fabi-version=2 [22m(which was the default from GCC 3.4 to 4.9) include:

           *   A template with a non-type template parameter of reference type was mangled incorrectly:

                       extern int N;
                       template <int &> struct S {};
                       void n (S<N>) {2}

               This was fixed in [1m-fabi-version=3[22m.

           *   SIMD vector types declared using "__attribute ((vector_size))" were mangled in a non-standard way that
               does not allow for overloading of functions taking vectors of different sizes.

               The mangling was changed in [1m-fabi-version=4[22m.

           *   "__attribute  ((const))"  and  "noreturn"  were  mangled as type qualifiers, and "decltype" of a plain
               declaration was folded away.

               These mangling issues were fixed in [1m-fabi-version=5[22m.

           *   Scoped enumerators passed as arguments to a variadic function are promoted like unscoped  enumerators,
               causing  "va_arg"  to  complain.   On most targets this does not actually affect the parameter passing
               ABI, as there is no way to pass an argument smaller than "int".

               Also, the ABI changed the mangling of template argument  packs,  "const_cast",  "static_cast",  prefix
               increment/decrement, and a class scope function used as a template argument.

               These issues were corrected in [1m-fabi-version=6[22m.

           *   Lambdas  in  default  argument  scope  were  mangled  incorrectly, and the ABI changed the mangling of
               "nullptr_t".

               These issues were corrected in [1m-fabi-version=7[22m.

           *   When mangling a  function  type  with  function-cv-qualifiers,  the  un-qualified  function  type  was
               incorrectly treated as a substitution candidate.

               This was fixed in [1m-fabi-version=8[22m, the default for GCC 5.1.

           *   decltype(nullptr)  incorrectly  had  an alignment of 1, leading to unaligned accesses.  Note that this
               did not affect the ABI of a function with a  "nullptr_t"  parameter,  as  parameters  have  a  minimum
               alignment.

               This was fixed in [1m-fabi-version=9[22m, the default for GCC 5.2.

           *   Target-specific  attributes  that affect the identity of a type, such as ia32 calling conventions on a
               function type (stdcall, regparm, etc.), did not affect the mangled name, leading  to  name  collisions
               when function pointers were used as template arguments.

               This was fixed in [1m-fabi-version=10[22m, the default for GCC 6.1.

           This  option  also  enables  warnings  about psABI-related changes.  The known psABI changes at this point
           include:

           *   For SysV/x86-64, unions with "long double" members are passed in memory as specified in psABI.   Prior
               to GCC 4.4, this was not the case.  For example:

                       union U {
                         long double ld;
                         int i;
                       };

               "union U" is now always passed in memory.

       [1m-Wno-changes-meaning [22m(C++ and Objective-C++ only)
           C++ requires that unqualified uses of a name within a class have the same meaning in the complete scope of
           the class, so declaring the name after using it is ill-formed:

                   struct A;
                   struct B1 { A a; typedef A A; }; // warning, 'A' changes meaning
                   struct B2 { A a; struct A { }; }; // error, 'A' changes meaning

           By  default,  the  B1 case is only a warning because the two declarations have the same type, while the B2
           case is an error.  Both diagnostics can be disabled with  [1m-Wno-changes-meaning[22m.   Alternately,  the  error
           case can be reduced to a warning with [1m-Wno-error=changes-meaning [22mor [1m-fpermissive[22m.

           Both diagnostics are also suppressed by [1m-fms-extensions[22m.

       [1m-Wchar-subscripts[0m
           Warn  if an array subscript has type "char".  This is a common cause of error, as programmers often forget
           that this type is signed on some machines.  This warning is enabled by [1m-Wall[22m.

       [1m-Wno-coverage-mismatch[0m
           Warn if feedback profiles do not match when using the [1m-fprofile-use [22moption.  If a source file  is  changed
           between  compiling with [1m-fprofile-generate [22mand with [1m-fprofile-use[22m, the files with the profile feedback can
           fail to match the source file and GCC cannot use the  profile  feedback  information.   By  default,  this
           warning  is enabled and is treated as an error.  [1m-Wno-coverage-mismatch [22mcan be used to disable the warning
           or [1m-Wno-error=coverage-mismatch [22mcan be used to disable the error.  Disabling the error  for  this  warning
           can result in poorly optimized code and is useful only in the case of very minor changes such as bug fixes
           to an existing code-base.  Completely disabling the warning is not recommended.

       [1m-Wno-coverage-invalid-line-number[0m
           Warn  in  case  a  function  ends earlier than it begins due to an invalid linenum macros.  The warning is
           emitted only with [1m--coverage [22menabled.

           By default, this warning is enabled and is treated as an error.  [1m-Wno-coverage-invalid-line-number [22mcan  be
           used to disable the warning or [1m-Wno-error=coverage-invalid-line-number [22mcan be used to disable the error.

       [1m-Wno-cpp [22m(C, Objective-C, C++, Objective-C++ and Fortran only)
           Suppress warning messages emitted by "#warning" directives.

       [1m-Wdouble-promotion [22m(C, C++, Objective-C and Objective-C++ only)
           Give  a  warning  when  a  value  of  type "float" is implicitly promoted to "double".  CPUs with a 32-bit
           "single-precision" floating-point unit implement "float" in hardware, but emulate  "double"  in  software.
           On such a machine, doing computations using "double" values is much more expensive because of the overhead
           required for software emulation.

           It is easy to accidentally do computations with "double" because floating-point literals are implicitly of
           type "double".  For example, in:

                   float area(float radius)
                   {
                      return 3.14159 * radius * radius;
                   }

           the  compiler  performs  the  entire  computation  with  "double"  because the floating-point literal is a
           "double".

       [1m-Wduplicate-decl-specifier [22m(C and Objective-C only)
           Warn if a declaration has duplicate "const", "volatile", "restrict" or "_Atomic" specifier.  This  warning
           is enabled by [1m-Wall[22m.

       [1m-Wformat[0m
       [1m-Wformat=[4m[22mn[0m
           Check calls to "printf" and "scanf", etc., to make sure that the arguments supplied have types appropriate
           to  the format string specified, and that the conversions specified in the format string make sense.  This
           includes standard functions, and  others  specified  by  format  attributes,  in  the  "printf",  "scanf",
           "strftime"  and  "strfmon" (an X/Open extension, not in the C standard) families (or other target-specific
           families).  Which functions are checked without format attributes having been  specified  depends  on  the
           standard  version  selected,  and such checks of functions without the attribute specified are disabled by
           [1m-ffreestanding [22mor [1m-fno-builtin[22m.

           The formats are checked against the format features supported by GNU libc version 2.2.  These include  all
           ISO  C90  and  C99  features,  as well as features from the Single Unix Specification and some BSD and GNU
           extensions.  Other library implementations may not support  all  these  features;  GCC  does  not  support
           warning  about features that go beyond a particular library's limitations.  However, if [1m-Wpedantic [22mis used
           with [1m-Wformat[22m, warnings are given about format features not in the selected standard version (but not  for
           "strfmon" formats, since those are not in any version of the C standard).

           [1m-Wformat=1[0m
           [1m-Wformat[0m
               Option  [1m-Wformat  [22mis  equivalent  to  [1m-Wformat=1[22m,  and [1m-Wno-format [22mis equivalent to [1m-Wformat=0[22m.  Since
               [1m-Wformat [22malso checks for null format arguments for several functions, [1m-Wformat [22malso implies [1m-Wnonnull[22m.
               Some  aspects   of   this   level   of   format   checking   can   be   disabled   by   the   options:
               [1m-Wno-format-contains-nul[22m, [1m-Wno-format-extra-args[22m, and [1m-Wno-format-zero-length[22m.  [1m-Wformat [22mis enabled by
               [1m-Wall[22m.

           [1m-Wformat=2[0m
               Enable  [1m-Wformat  [22mplus additional format checks.  Currently equivalent to [1m-Wformat -Wformat-nonliteral[0m
               [1m-Wformat-security -Wformat-y2k[22m.

       [1m-Wno-format-contains-nul[0m
           If [1m-Wformat [22mis specified, do not warn about format strings that contain NUL bytes.

       [1m-Wno-format-extra-args[0m
           If [1m-Wformat [22mis specified, do not warn about excess arguments to a "printf"  or  "scanf"  format  function.
           The C standard specifies that such arguments are ignored.

           Where  the  unused  arguments  lie  between  used  arguments  that  are  specified  with  [1m$ [22moperand number
           specifications, normally warnings are still given, since the implementation could not know  what  type  to
           pass  to  "va_arg"  to  skip  the  unused arguments.  However, in the case of "scanf" formats, this option
           suppresses the warning if the unused arguments are all pointers, since the Single Unix Specification  says
           that such unused arguments are allowed.

       [1m-Wformat-overflow[0m
       [1m-Wformat-overflow=[4m[22mlevel[0m
           Warn  about calls to formatted input/output functions such as "sprintf" and "vsprintf" that might overflow
           the destination buffer.  When the exact number of bytes written by a format directive cannot be determined
           at compile-time it is estimated based on heuristics that depend on the [4mlevel[24m argument and on optimization.
           While enabling optimization will in most cases improve the accuracy of the warning, it may also result  in
           false positives.

           [1m-Wformat-overflow[0m
           [1m-Wformat-overflow=1[0m
               Level [4m1[24m of [1m-Wformat-overflow [22menabled by [1m-Wformat [22memploys a conservative approach that warns only about
               calls  that  most  likely  overflow the buffer.  At this level, numeric arguments to format directives
               with unknown values are assumed to have the value of one, and strings of unknown length to  be  empty.
               Numeric  arguments that are known to be bounded to a subrange of their type, or string arguments whose
               output is bounded either by their directive's precision or by a finite set  of  string  literals,  are
               assumed  to take on the value within the range that results in the most bytes on output.  For example,
               the call to "sprintf" below is diagnosed because even with both [4ma[24m and [4mb[24m equal to zero, the terminating
               NUL character ('\0') appended by the function to the destination buffer will be written past its  end.
               Increasing  the  size of the buffer by a single byte is sufficient to avoid the warning, though it may
               not be sufficient to avoid the overflow.

                       void f (int a, int b)
                       {
                         char buf [13];
                         sprintf (buf, "a = %i, b = %i\n", a, b);
                       }

           [1m-Wformat-overflow=2[0m
               Level [4m2[24m warns also about calls that might  overflow  the  destination  buffer  given  an  argument  of
               sufficient length or magnitude.  At level [4m2[24m, unknown numeric arguments are assumed to have the minimum
               representable  value  for  signed types with a precision greater than 1, and the maximum representable
               value otherwise.  Unknown string arguments whose length cannot be assumed to be bounded either by  the
               directive's  precision,  or  by a finite set of string literals they may evaluate to, or the character
               array they may point to, are assumed to be 1 character long.

               At level [4m2[24m, the call in the example above is again diagnosed, but this time because with [4ma[24m equal to  a
               32-bit  "INT_MIN"  the  first  %i  directive  will  write  some  of  its  digits beyond the end of the
               destination buffer.  To make the call safe regardless of the values of the two variables, the size  of
               the  destination  buffer must be increased to at least 34 bytes.  GCC includes the minimum size of the
               buffer in an informational note following the warning.

               An alternative to increasing the size of the destination buffer is to constrain the range of formatted
               values.  The maximum length of string arguments can be bounded by  specifying  the  precision  in  the
               format  directive.   When  numeric arguments of format directives can be assumed to be bounded by less
               than the precision of their type, choosing an appropriate length modifier to the format specifier will
               reduce the required buffer size.  For example, if [4ma[24m and [4mb[24m in the example above can be  assumed  to  be
               within the precision of the "short int" type then using either the %hi format directive or casting the
               argument to "short" reduces the maximum required size of the buffer to 24 bytes.

                       void f (int a, int b)
                       {
                         char buf [23];
                         sprintf (buf, "a = %hi, b = %i\n", a, (short)b);
                       }

       [1m-Wno-format-zero-length[0m
           If  [1m-Wformat  [22mis  specified,  do  not warn about zero-length formats.  The C standard specifies that zero-
           length formats are allowed.

       [1m-Wformat-nonliteral[0m
           If [1m-Wformat [22mis specified, also warn if the format string is not a string literal and so cannot be checked,
           unless the format function takes its format arguments as a "va_list".

       [1m-Wformat-security[0m
           If [1m-Wformat [22mis specified, also warn about uses  of  format  functions  that  represent  possible  security
           problems.  At present, this warns about calls to "printf" and "scanf" functions where the format string is
           not  a  string  literal  and there are no format arguments, as in "printf (foo);".  This may be a security
           hole if the format string came from untrusted input and contains [1m%n[22m.  (This is currently a subset of  what
           [1m-Wformat-nonliteral  [22mwarns  about,  but  in future warnings may be added to [1m-Wformat-security [22mthat are not
           included in [1m-Wformat-nonliteral[22m.)

       [1m-Wformat-signedness[0m
           If [1m-Wformat [22mis specified, also warn if the format string requires an unsigned argument and the argument is
           signed and vice versa.

       [1m-Wformat-truncation[0m
       [1m-Wformat-truncation=[4m[22mlevel[0m
           Warn about calls to formatted input/output functions such as "snprintf" and "vsnprintf" that might  result
           in  output  truncation.  When the exact number of bytes written by a format directive cannot be determined
           at compile-time it is estimated based on heuristics that depend on the [4mlevel[24m argument and on optimization.
           While enabling optimization will in most cases improve the accuracy of the warning, it may also result  in
           false positives.  Except as noted otherwise, the option uses the same logic [1m-Wformat-overflow[22m.

           [1m-Wformat-truncation[0m
           [1m-Wformat-truncation=1[0m
               Level  [4m1[24m  of  [1m-Wformat-truncation  [22menabled by [1m-Wformat [22memploys a conservative approach that warns only
               about calls to bounded functions whose return value is unused and that  will  most  likely  result  in
               output truncation.

           [1m-Wformat-truncation=2[0m
               Level  [4m2[24m  warns also about calls to bounded functions whose return value is used and that might result
               in truncation given an argument of sufficient length or magnitude.

       [1m-Wformat-y2k[0m
           If [1m-Wformat [22mis specified, also warn about "strftime" formats that may yield only a two-digit year.

       [1m-Wnonnull[0m
           Warn about passing a null pointer for arguments marked as requiring a  non-null  value  by  the  "nonnull"
           function attribute.

           [1m-Wnonnull [22mis included in [1m-Wall [22mand [1m-Wformat[22m.  It can be disabled with the [1m-Wno-nonnull [22moption.

       [1m-Wnonnull-compare[0m
           Warn  when  comparing  an  argument  marked  with the "nonnull" function attribute against null inside the
           function.

           [1m-Wnonnull-compare [22mis included in [1m-Wall[22m.  It can be disabled with the [1m-Wno-nonnull-compare [22moption.

       [1m-Wnull-dereference[0m
           Warn if the compiler detects paths that trigger erroneous or undefined behavior  due  to  dereferencing  a
           null pointer.  This option is only active when [1m-fdelete-null-pointer-checks [22mis active, which is enabled by
           optimizations in most targets.  The precision of the warnings depends on the optimization options used.

       [1m-Winfinite-recursion[0m
           Warn  about  infinitely recursive calls.  The warning is effective at all optimization levels but requires
           optimization  in  order  to  detect  infinite  recursion  in  calls  between  two   or   more   functions.
           [1m-Winfinite-recursion [22mis included in [1m-Wall[22m.

           Compare  with  [1m-Wanalyzer-infinite-recursion  [22mwhich provides a similar diagnostic, but is implemented in a
           different way (as part of [1m-fanalyzer[22m).

       [1m-Winit-self [22m(C, C++, Objective-C and Objective-C++ only)
           Warn about uninitialized variables that are initialized with themselves.  Note this  option  can  only  be
           used with the [1m-Wuninitialized [22moption.

           For  example,  GCC  warns about "i" being uninitialized in the following snippet only when [1m-Winit-self [22mhas
           been specified:

                   int f()
                   {
                     int i = i;
                     return i;
                   }

           This warning is enabled by [1m-Wall [22min C++.

       [1m-Wno-implicit-int [22m(C and Objective-C only)
           This option controls warnings when a declaration does not specify a type.   This  warning  is  enabled  by
           default in C99 and later dialects of C, and also by [1m-Wall[22m.

       [1m-Wno-implicit-function-declaration [22m(C and Objective-C only)
           This  option  controls warnings when a function is used before being declared.  This warning is enabled by
           default in C99 and later dialects of C, and also  by  [1m-Wall[22m.   The  warning  is  made  into  an  error  by
           [1m-pedantic-errors[22m.

       [1m-Wimplicit [22m(C and Objective-C only)
           Same as [1m-Wimplicit-int [22mand [1m-Wimplicit-function-declaration[22m.  This warning is enabled by [1m-Wall[22m.

       [1m-Wimplicit-fallthrough[0m
           [1m-Wimplicit-fallthrough  [22mis  the same as [1m-Wimplicit-fallthrough=3 [22mand [1m-Wno-implicit-fallthrough [22mis the same
           as [1m-Wimplicit-fallthrough=0[22m.

       [1m-Wimplicit-fallthrough=[4m[22mn[0m
           Warn when a switch case falls through.  For example:

                   switch (cond)
                     {
                     case 1:
                       a = 1;
                       break;
                     case 2:
                       a = 2;
                     case 3:
                       a = 3;
                       break;
                     }

           This warning does not warn when the last statement of a case cannot fall through, e.g.  when  there  is  a
           return statement or a call to function declared with the noreturn attribute.  [1m-Wimplicit-fallthrough= [22malso
           takes into account control flow statements, such as ifs, and only warns when appropriate.  E.g.

                   switch (cond)
                     {
                     case 1:
                       if (i > 3) {
                         bar (5);
                         break;
                       } else if (i < 1) {
                         bar (0);
                       } else
                         return;
                     default:
                       ...
                     }

           Since  there  are  occasions  where  a  switch  case fall through is desirable, GCC provides an attribute,
           "__attribute__ ((fallthrough))", that is to be used along with a null statement to suppress  this  warning
           that would normally occur:

                   switch (cond)
                     {
                     case 1:
                       bar (0);
                       __attribute__ ((fallthrough));
                     default:
                       ...
                     }

           C++17  provides  a  standard  way  to suppress the [1m-Wimplicit-fallthrough [22mwarning using "[[fallthrough]];"
           instead of the GNU attribute.  In C++11 or C++14 users can use "[[gnu::fallthrough]];",  which  is  a  GNU
           extension.   Instead  of these attributes, it is also possible to add a fallthrough comment to silence the
           warning.  The whole body of the C or C++ style comment should match the given regular  expressions  listed
           below.  The option argument [4mn[24m specifies what kind of comments are accepted:

           *<[1m-Wimplicit-fallthrough=0 [22mdisables the warning altogether.>
           *<[1m-Wimplicit-fallthrough=1 [22mmatches ".*" regular>
               expression, any comment is used as fallthrough comment.

           *<[1m-Wimplicit-fallthrough=2 [22mcase insensitively matches>
               ".*falls?[ \t-]*thr(ough|u).*" regular expression.

           *<[1m-Wimplicit-fallthrough=3 [22mcase sensitively matches one of the>
               following regular expressions:

               *<"-fallthrough">
               *<"@fallthrough@">
               *<"lint -fallthrough[ \t]*">
               *<"[ \t.!]*(ELSE,? |INTENTIONAL(LY)? )?FALL(S | |-)?THR(OUGH|U)[ \t.!]*(-[^\n\r]*)?">
               *<"[ \t.!]*(Else,? |Intentional(ly)? )?Fall((s | |-)[Tt]|t)hr(ough|u)[ \t.!]*(-[^\n\r]*)?">
               *<"[ \t.!]*([Ee]lse,? |[Ii]ntentional(ly)? )?fall(s | |-)?thr(ough|u)[ \t.!]*(-[^\n\r]*)?">
           *<[1m-Wimplicit-fallthrough=4 [22mcase sensitively matches one of the>
               following regular expressions:

               *<"-fallthrough">
               *<"@fallthrough@">
               *<"lint -fallthrough[ \t]*">
               *<"[ \t]*FALLTHR(OUGH|U)[ \t]*">
           *<[1m-Wimplicit-fallthrough=5 [22mdoesn't recognize any comments as>
               fallthrough comments, only attributes disable the warning.

           The  comment  needs  to  be  followed  after optional whitespace and other comments by "case" or "default"
           keywords or by a user label that precedes some "case" or "default" label.

                   switch (cond)
                     {
                     case 1:
                       bar (0);
                       /* FALLTHRU */
                     default:
                       ...
                     }

           The [1m-Wimplicit-fallthrough=3 [22mwarning is enabled by [1m-Wextra[22m.

       [1m-Wno-if-not-aligned [22m(C, C++, Objective-C and Objective-C++ only)
           Control if warnings triggered by the "warn_if_not_aligned" attribute should be issued.  These warnings are
           enabled by default.

       [1m-Wignored-qualifiers [22m(C and C++ only)
           Warn if the return type of a function has a type qualifier such  as  "const".   For  ISO  C  such  a  type
           qualifier has no effect, since the value returned by a function is not an lvalue.  For C++, the warning is
           only  emitted  for  scalar  types  or  "void".   ISO C prohibits qualified "void" return types on function
           definitions, so such return types always receive a warning even without this option.

           This warning is also enabled by [1m-Wextra[22m.

       [1m-Wno-ignored-attributes [22m(C and C++ only)
           This option controls warnings when an attribute is ignored.   This  is  different  from  the  [1m-Wattributes[0m
           option  in  that  it  warns  whenever the compiler decides to drop an attribute, not that the attribute is
           either unknown, used in a wrong place, etc.  This warning is enabled by default.

       [1m-Wmain[0m
           Warn if the type of "main" is suspicious.  "main" should be a function with  external  linkage,  returning
           int,  taking either zero arguments, two, or three arguments of appropriate types.  This warning is enabled
           by default in C++ and is enabled by either [1m-Wall [22mor [1m-Wpedantic[22m.

       [1m-Wmisleading-indentation [22m(C and C++ only)
           Warn when the indentation of the code does not reflect the block structure.  Specifically,  a  warning  is
           issued  for  "if",  "else",  "while", and "for" clauses with a guarded statement that does not use braces,
           followed by an unguarded statement with the same indentation.

           In the following example, the call to "bar" is misleadingly indented as if it were  guarded  by  the  "if"
           conditional.

                     if (some_condition ())
                       foo ();
                       bar ();  /* Gotcha: this is not guarded by the "if".  */

           In  the  case  of  mixed  tabs  and  spaces,  the  warning  uses the [1m-ftabstop= [22moption to determine if the
           statements line up (defaulting to 8).

           The warning is not issued for code involving multiline preprocessor logic such as the following example.

                     if (flagA)
                       foo (0);
                   #if SOME_CONDITION_THAT_DOES_NOT_HOLD
                     if (flagB)
                   #endif
                       foo (1);

           The warning is not issued after a "#line" directive, since this typically  indicates  autogenerated  code,
           and no assumptions can be made about the layout of the file that the directive references.

           This warning is enabled by [1m-Wall [22min C and C++.

       [1m-Wmissing-attributes[0m
           Warn  when  a  declaration  of  a  function  is  missing one or more attributes that a related function is
           declared with and whose absence may adversely affect the correctness or efficiency of generated code.  For
           example, the warning is issued for declarations of aliases that use attributes to specify less restrictive
           requirements than those of their targets.  This typically represents a potential optimization opportunity.
           By contrast, the [1m-Wattribute-alias=2 [22moption controls warnings issued when the alias  is  more  restrictive
           than  the  target,  which  could  lead  to  incorrect  code  generation.   Attributes  considered  include
           "alloc_align", "alloc_size", "cold", "const", "hot", "leaf", "malloc", "nonnull",  "noreturn",  "nothrow",
           "pure", "returns_nonnull", and "returns_twice".

           In  C++,  the  warning  is  issued  when  an  explicit  specialization of a primary template declared with
           attribute "alloc_align", "alloc_size", "assume_aligned", "format", "format_arg", "malloc", or "nonnull" is
           declared without it.  Attributes "deprecated", "error", and "warning" suppress the warning..

           You can use the "copy" attribute to apply the same set of attributes to a declaration as that  on  another
           declaration  without  explicitly enumerating the attributes. This attribute can be applied to declarations
           of functions, variables, or types.

           [1m-Wmissing-attributes [22mis enabled by [1m-Wall[22m.

           For example, since the declaration of the primary function template below  makes  use  of  both  attribute
           "malloc"  and  "alloc_size"  the  declaration  of the explicit specialization of the template is diagnosed
           because it is missing one of the attributes.

                   template <class T>
                   T* __attribute__ ((malloc, alloc_size (1)))
                   allocate (size_t);

                   template <>
                   void* __attribute__ ((malloc))   // missing alloc_size
                   allocate<void> (size_t);

       [1m-Wmissing-braces[0m
           Warn if an aggregate or union  initializer  is  not  fully  bracketed.   In  the  following  example,  the
           initializer for "a" is not fully bracketed, but that for "b" is fully bracketed.

                   int a[2][2] = { 0, 1, 2, 3 };
                   int b[2][2] = { { 0, 1 }, { 2, 3 } };

           This warning is enabled by [1m-Wall[22m.

       [1m-Wmissing-include-dirs [22m(C, C++, Objective-C, Objective-C++ and Fortran only)
           Warn  if  a user-supplied include directory does not exist. This option is disabled by default for C, C++,
           Objective-C and Objective-C++. For Fortran, it is partially enabled by default by warning for -I  and  -J,
           only.

       [1m-Wno-missing-profile[0m
           This  option controls warnings if feedback profiles are missing when using the [1m-fprofile-use [22moption.  This
           option diagnoses those cases where a  new  function  or  a  new  file  is  added  between  compiling  with
           [1m-fprofile-generate [22mand with [1m-fprofile-use[22m, without regenerating the profiles.  In these cases, the profile
           feedback  data  files do not contain any profile feedback information for the newly added function or file
           respectively.  Also, in the case when profile count data (.gcda) files are removed,  GCC  cannot  use  any
           profile  feedback  information.   In  all  these  cases,  warnings are issued to inform you that a profile
           generation step is due.  Ignoring the warning can result in poorly optimized  code.   [1m-Wno-missing-profile[0m
           can  be used to disable the warning, but this is not recommended and should be done only when non-existent
           profile data is justified.

       [1m-Wmismatched-dealloc[0m
           Warn for calls to deallocation functions with pointer arguments returned from from  allocations  functions
           for  which  the  former  isn't  a suitable deallocator.  A pair of functions can be associated as matching
           allocators and deallocators by use of attribute "malloc".  Unless disabled by the [1m-fno-builtin [22moption  the
           standard  functions  "calloc",  "malloc", "realloc", and "free", as well as the corresponding forms of C++
           "operator new" and "operator delete" are implicitly associated as matching  allocators  and  deallocators.
           In the following example "mydealloc" is the deallocator for pointers returned from "myalloc".

                   void mydealloc (void*);

                   __attribute__ ((malloc (mydealloc, 1))) void*
                   myalloc (size_t);

                   void f (void)
                   {
                     void *p = myalloc (32);
                     // ...use p...
                     free (p);   // warning: not a matching deallocator for myalloc
                     mydealloc (p);   // ok
                   }

           In C++, the related option [1m-Wmismatched-new-delete [22mdiagnoses mismatches involving either "operator new" or
           "operator delete".

           Option [1m-Wmismatched-dealloc [22mis included in [1m-Wall[22m.

       [1m-Wmultistatement-macros[0m
           Warn  about  unsafe  multiple statement macros that appear to be guarded by a clause such as "if", "else",
           "for", "switch", or "while", in which only the first statement is actually  guarded  after  the  macro  is
           expanded.

           For example:

                   #define DOIT x++; y++
                   if (c)
                     DOIT;

           will  increment  "y"  unconditionally,  not just when "c" holds.  The can usually be fixed by wrapping the
           macro in a do-while loop:

                   #define DOIT do { x++; y++; } while (0)
                   if (c)
                     DOIT;

           This warning is enabled by [1m-Wall [22min C and C++.

       [1m-Wparentheses[0m
           Warn if parentheses are omitted in certain contexts, such as when there is  an  assignment  in  a  context
           where  a  truth value is expected, or when operators are nested whose precedence people often get confused
           about.

           Also warn if a comparison like "x<=y<=z" appears; this is equivalent to "(x<=y ? 1 : 0) <= z", which is  a
           different interpretation from that of ordinary mathematical notation.

           Also  warn for dangerous uses of the GNU extension to "?:" with omitted middle operand. When the condition
           in the "?": operator is a boolean expression, the omitted value is always 1.  Often programmers expect  it
           to be a value computed inside the conditional expression instead.

           For  C++  this also warns for some cases of unnecessary parentheses in declarations, which can indicate an
           attempt at a function call instead of a declaration:

                   {
                     // Declares a local variable called mymutex.
                     std::unique_lock<std::mutex> (mymutex);
                     // User meant std::unique_lock<std::mutex> lock (mymutex);
                   }

           This warning is enabled by [1m-Wall[22m.

       [1m-Wno-self-move [22m(C++ and Objective-C++ only)
           This warning warns when a value is moved to itself with "std::move".  Such a "std::move" typically has  no
           effect.

                   struct T {
                   ...
                   };
                   void fn()
                   {
                     T t;
                     ...
                     t = std::move (t);
                   }

           This warning is enabled by [1m-Wall[22m.

       [1m-Wsequence-point[0m
           Warn  about  code that may have undefined semantics because of violations of sequence point rules in the C
           and C++ standards.

           The C and C++ standards define the order in which expressions in a C/C++ program are evaluated in terms of
           [4msequence[24m [4mpoints[24m, which represent a partial ordering between the execution of parts of the  program:  those
           executed  before  the  sequence point, and those executed after it.  These occur after the evaluation of a
           full expression (one which is not part of a larger expression), after the evaluation of the first  operand
           of  a  "&&", "||", "? :" or "," (comma) operator, before a function is called (but after the evaluation of
           its arguments and the expression denoting the called function), and in certain other places.   Other  than
           as  expressed  by  the sequence point rules, the order of evaluation of subexpressions of an expression is
           not specified.  All these rules describe only a partial order  rather  than  a  total  order,  since,  for
           example,  if two functions are called within one expression with no sequence point between them, the order
           in which the functions are called is not specified.  However, the  standards  committee  have  ruled  that
           function calls do not overlap.

           It  is  not  specified  when  between  sequence points modifications to the values of objects take effect.
           Programs whose behavior depends on this have undefined behavior; the C  and  C++  standards  specify  that
           "Between  the previous and next sequence point an object shall have its stored value modified at most once
           by the evaluation of an expression.  Furthermore, the prior value shall be  read  only  to  determine  the
           value  to  be stored.".  If a program breaks these rules, the results on any particular implementation are
           entirely unpredictable.

           Examples of code with undefined behavior are "a = a++;", "a[n] = b[n++]" and "a[i++]  =  i;".   Some  more
           complicated  cases  are not diagnosed by this option, and it may give an occasional false positive result,
           but in general it has been found fairly effective at detecting this sort of problem in programs.

           The C++17 standard will define the order of evaluation  of  operands  in  more  cases:  in  particular  it
           requires  that  the  right-hand side of an assignment be evaluated before the left-hand side, so the above
           examples are no longer undefined.  But this option will still  warn  about  them,  to  help  people  avoid
           writing code that is undefined in C and earlier revisions of C++.

           The  standard  is  worded  confusingly,  therefore  there  is  some debate over the precise meaning of the
           sequence point rules in subtle cases.  Links to discussions of  the  problem,  including  proposed  formal
           definitions, may be found on the GCC readings page, at <[1mhttps://gcc.gnu.org/readings.html[22m>.

           This warning is enabled by [1m-Wall [22mfor C and C++.

       [1m-Wno-return-local-addr[0m
           Do  not warn about returning a pointer (or in C++, a reference) to a variable that goes out of scope after
           the function returns.

       [1m-Wreturn-type[0m
           Warn whenever a function is defined with a return type that  defaults  to  "int".   Also  warn  about  any
           "return" statement with no return value in a function whose return type is not "void" (falling off the end
           of the function body is considered returning without a value).

           For  C only, warn about a "return" statement with an expression in a function whose return type is "void",
           unless the expression type is also "void".  As a GNU extension, the latter  case  is  accepted  without  a
           warning unless [1m-Wpedantic [22mis used.  Attempting to use the return value of a non-"void" function other than
           "main"  that  flows  off  the  end  by  reaching  the  closing curly brace that terminates the function is
           undefined.

           Unlike in C, in C++, flowing off the end of a non-"void" function other than "main" results  in  undefined
           behavior even when the value of the function is not used.

           This warning is enabled by default in C++ and by [1m-Wall [22motherwise.

       [1m-Wno-shift-count-negative[0m
           Controls warnings if a shift count is negative.  This warning is enabled by default.

       [1m-Wno-shift-count-overflow[0m
           Controls warnings if a shift count is greater than or equal to the bit width of the type.  This warning is
           enabled by default.

       [1m-Wshift-negative-value[0m
           Warn  if  left shifting a negative value.  This warning is enabled by [1m-Wextra [22min C99 (and newer) and C++11
           to C++17 modes.

       [1m-Wno-shift-overflow[0m
       [1m-Wshift-overflow=[4m[22mn[0m
           These options control warnings about left shift overflows.

           [1m-Wshift-overflow=1[0m
               This is the warning level of [1m-Wshift-overflow [22mand is enabled by default in C99 and  C++11  modes  (and
               newer).   This  warning  level does not warn about left-shifting 1 into the sign bit.  (However, in C,
               such an overflow is still rejected in contexts where an integer constant expression is required.)   No
               warning is emitted in C++20 mode (and newer), as signed left shifts always wrap.

           [1m-Wshift-overflow=2[0m
               This warning level also warns about left-shifting 1 into the sign bit, unless C++14 mode (or newer) is
               active.

       [1m-Wswitch[0m
           Warn  whenever  a "switch" statement has an index of enumerated type and lacks a "case" for one or more of
           the named codes of that enumeration.  (The presence of a "default" label prevents this  warning.)   "case"
           labels  outside  the  enumeration range also provoke warnings when this option is used (even if there is a
           "default" label).  This warning is enabled by [1m-Wall[22m.

       [1m-Wswitch-default[0m
           Warn whenever a "switch" statement does not have a "default" case.

       [1m-Wswitch-enum[0m
           Warn whenever a "switch" statement has an index of enumerated type and lacks a "case" for one or  more  of
           the  named  codes  of that enumeration.  "case" labels outside the enumeration range also provoke warnings
           when this option is used.  The only difference between [1m-Wswitch [22mand this option is that this option  gives
           a warning about an omitted enumeration code even if there is a "default" label.

       [1m-Wno-switch-bool[0m
           Do  not  warn  when  a "switch" statement has an index of boolean type and the case values are outside the
           range of a boolean type.  It is possible to suppress this warning by casting the controlling expression to
           a type other than "bool".  For example:

                   switch ((int) (a == 4))
                     {
                     ...
                     }

           This warning is enabled by default for C and C++ programs.

       [1m-Wno-switch-outside-range[0m
           This option controls warnings when a "switch" case has a value that is  outside  of  its  respective  type
           range.  This warning is enabled by default for C and C++ programs.

       [1m-Wno-switch-unreachable[0m
           Do not warn when a "switch" statement contains statements between the controlling expression and the first
           case label, which will never be executed.  For example:

                   switch (cond)
                     {
                      i = 15;
                     ...
                      case 5:
                     ...
                     }

           [1m-Wswitch-unreachable  [22mdoes not warn if the statement between the controlling expression and the first case
           label is just a declaration:

                   switch (cond)
                     {
                      int i;
                     ...
                      case 5:
                      i = 5;
                     ...
                     }

           This warning is enabled by default for C and C++ programs.

       [1m-Wsync-nand [22m(C and C++ only)
           Warn  when  "__sync_fetch_and_nand"  and  "__sync_nand_and_fetch"  built-in  functions  are  used.   These
           functions changed semantics in GCC 4.4.

       [1m-Wtrivial-auto-var-init[0m
           Warn  when  "-ftrivial-auto-var-init"  cannot initialize the automatic variable.  A common situation is an
           automatic variable that is declared between the controlling expression and  the  first  case  label  of  a
           "switch" statement.

       [1m-Wunused-but-set-parameter[0m
           Warn whenever a function parameter is assigned to, but otherwise unused (aside from its declaration).

           To suppress this warning use the "unused" attribute.

           This warning is also enabled by [1m-Wunused [22mtogether with [1m-Wextra[22m.

       [1m-Wunused-but-set-variable[0m
           Warn  whenever  a  local variable is assigned to, but otherwise unused (aside from its declaration).  This
           warning is enabled by [1m-Wall[22m.

           To suppress this warning use the "unused" attribute.

           This warning is also enabled by [1m-Wunused[22m, which is enabled by [1m-Wall[22m.

       [1m-Wunused-function[0m
           Warn whenever a static function is declared but not defined or a non-inline  static  function  is  unused.
           This warning is enabled by [1m-Wall[22m.

       [1m-Wunused-label[0m
           Warn whenever a label is declared but not used.  This warning is enabled by [1m-Wall[22m.

           To suppress this warning use the "unused" attribute.

       [1m-Wunused-local-typedefs [22m(C, Objective-C, C++ and Objective-C++ only)
           Warn when a typedef locally defined in a function is not used.  This warning is enabled by [1m-Wall[22m.

       [1m-Wunused-parameter[0m
           Warn whenever a function parameter is unused aside from its declaration.

           To suppress this warning use the "unused" attribute.

       [1m-Wno-unused-result[0m
           Do  not  warn if a caller of a function marked with attribute "warn_unused_result" does not use its return
           value. The default is [1m-Wunused-result[22m.

       [1m-Wunused-variable[0m
           Warn whenever a local or static variable is  unused  aside  from  its  declaration.  This  option  implies
           [1m-Wunused-const-variable=1 [22mfor C, but not for C++. This warning is enabled by [1m-Wall[22m.

           To suppress this warning use the "unused" attribute.

       [1m-Wunused-const-variable[0m
       [1m-Wunused-const-variable=[4m[22mn[0m
           Warn  whenever a constant static variable is unused aside from its declaration.  [1m-Wunused-const-variable=1[0m
           is enabled by [1m-Wunused-variable [22mfor C, but not for C++. In C this declares variable storage,  but  in  C++
           this is not an error since const variables take the place of "#define"s.

           To suppress this warning use the "unused" attribute.

           [1m-Wunused-const-variable=1[0m
               This  is  the  warning  level  that is enabled by [1m-Wunused-variable [22mfor C.  It warns only about unused
               static const variables defined in the main compilation unit, but  not  about  static  const  variables
               declared in any header included.

           [1m-Wunused-const-variable=2[0m
               This  warning  level  also  warns  for  unused  constant static variables in headers (excluding system
               headers).  This is the warning level of [1m-Wunused-const-variable [22mand must be explicitly requested since
               in C++ this isn't an error and in C it might be harder to clean up all headers included.

       [1m-Wunused-value[0m
           Warn whenever a statement computes a result that is explicitly not used. To suppress this warning cast the
           unused expression to "void". This includes an expression-statement  or  the  left-hand  side  of  a  comma
           expression  that  contains  no side effects. For example, an expression such as "x[i,j]" causes a warning,
           while "x[(void)i,j]" does not.

           This warning is enabled by [1m-Wall[22m.

       [1m-Wunused[0m
           All the above [1m-Wunused [22moptions combined.

           In order to get a warning about an unused function parameter, you must  either  specify  [1m-Wextra  -Wunused[0m
           (note that [1m-Wall [22mimplies [1m-Wunused[22m), or separately specify [1m-Wunused-parameter[22m.

       [1m-Wuninitialized[0m
           Warn  if  an  object with automatic or allocated storage duration is used without having been initialized.
           In C++, also warn if a non-static reference or non-static  "const"  member  appears  in  a  class  without
           constructors.

           In  addition, passing a pointer (or in C++, a reference) to an uninitialized object to a "const"-qualified
           argument  of  a  built-in  function  known  to  read  the  object  is  also  diagnosed  by  this  warning.
           ([1m-Wmaybe-uninitialized [22mis issued for ordinary functions.)

           If  you  want to warn about code that uses the uninitialized value of the variable in its own initializer,
           use the [1m-Winit-self [22moption.

           These warnings occur for individual uninitialized elements of structure, union or array variables as  well
           as  for variables that are uninitialized as a whole.  They do not occur for variables or elements declared
           "volatile".  Because these warnings depend on optimization, the exact  variables  or  elements  for  which
           there are warnings depend on the precise optimization options and version of GCC used.

           Note  that  there  may  be no warning about a variable that is used only to compute a value that itself is
           never used, because such computations may be deleted  by  data  flow  analysis  before  the  warnings  are
           printed.

           In  C++,  this  warning  also  warns  about  using uninitialized objects in member-initializer-lists.  For
           example, GCC warns about "b" being uninitialized in the following snippet:

                   struct A {
                     int a;
                     int b;
                     A() : a(b) { }
                   };

       [1m-Wno-invalid-memory-model[0m
           This option controls warnings for invocations of [1m__atomic Builtins[22m, [1m__sync Builtins[22m, and  the  C11  atomic
           generic  functions  with a memory consistency argument that is either invalid for the operation or outside
           the range of values of the "memory_order"  enumeration.   For  example,  since  the  "__atomic_store"  and
           "__atomic_store_n" built-ins are only defined for the relaxed, release, and sequentially consistent memory
           orders the following code is diagnosed:

                   void store (int *i)
                   {
                     __atomic_store_n (i, 0, memory_order_consume);
                   }

           [1m-Winvalid-memory-model [22mis enabled by default.

       [1m-Wmaybe-uninitialized[0m
           For an object with automatic or allocated storage duration, if there exists a path from the function entry
           to  a  use of the object that is initialized, but there exist some other paths for which the object is not
           initialized, the compiler emits a warning if it cannot prove the uninitialized paths are not  executed  at
           run time.

           In  addition, passing a pointer (or in C++, a reference) to an uninitialized object to a "const"-qualified
           function argument is also diagnosed by this warning.  ([1m-Wuninitialized [22mis issued  for  built-in  functions
           known  to  read  the  object.)   Annotating the function with attribute "access (none)" indicates that the
           argument isn't used to access the object and avoids the warning.

           These warnings are only possible in optimizing compilation, because otherwise GCC does not keep  track  of
           the state of variables.

           These  warnings  are  made  optional  because GCC may not be able to determine when the code is correct in
           spite of appearing to have an error.  Here is one example of how this can happen:

                   {
                     int x;
                     switch (y)
                       {
                       case 1: x = 1;
                         break;
                       case 2: x = 4;
                         break;
                       case 3: x = 5;
                       }
                     foo (x);
                   }

           If the value of "y" is always 1, 2 or 3, then "x" is always initialized, but GCC  doesn't  know  this.  To
           suppress the warning, you need to provide a default case with [1massert[22m(0) or similar code.

           This  option  also  warns  when a non-volatile automatic variable might be changed by a call to "longjmp".
           The compiler sees only the calls to "setjmp".  It cannot know where "longjmp" will be called; in  fact,  a
           signal handler could call it at any point in the code.  As a result, you may get a warning even when there
           is in fact no problem because "longjmp" cannot in fact be called at the place that would cause a problem.

           Some  spurious  warnings  can  be  avoided  if  you declare all the functions you use that never return as
           "noreturn".

           This warning is enabled by [1m-Wall [22mor [1m-Wextra[22m.

       [1m-Wunknown-pragmas[0m
           Warn when a "#pragma" directive is encountered that is not understood by GCC.  If this command-line option
           is used, warnings are even issued for unknown pragmas in system header files.  This is not the case if the
           warnings are only enabled by the [1m-Wall [22mcommand-line option.

       [1m-Wno-pragmas[0m
           Do not warn about misuses of pragmas, such as incorrect parameters, invalid syntax, or  conflicts  between
           pragmas.  See also [1m-Wunknown-pragmas[22m.

       [1m-Wno-prio-ctor-dtor[0m
           Do not warn if a priority from 0 to 100 is used for constructor or destructor.  The use of constructor and
           destructor attributes allow you to assign a priority to the constructor/destructor to control its order of
           execution  before  "main"  is called or after it returns.  The priority values must be greater than 100 as
           the compiler reserves priority values between 0--100 for the implementation.

       [1m-Wstrict-aliasing[0m
           This option is only active when [1m-fstrict-aliasing [22mis active.  It warns about code  that  might  break  the
           strict  aliasing rules that the compiler is using for optimization.  The warning does not catch all cases,
           but does attempt to catch the more common pitfalls.  It  is  included  in  [1m-Wall[22m.   It  is  equivalent  to
           [1m-Wstrict-aliasing=3[0m

       [1m-Wstrict-aliasing=n[0m
           This  option  is  only  active when [1m-fstrict-aliasing [22mis active.  It warns about code that might break the
           strict aliasing rules that the compiler is using for optimization.  Higher  levels  correspond  to  higher
           accuracy  (fewer  false  positives).   Higher levels also correspond to more effort, similar to the way [1m-O[0m
           works.  [1m-Wstrict-aliasing [22mis equivalent to [1m-Wstrict-aliasing=3[22m.

           Level 1: Most aggressive, quick, least accurate.  Possibly useful when  higher  levels  do  not  warn  but
           [1m-fstrict-aliasing  [22mstill  breaks the code, as it has very few false negatives.  However, it has many false
           positives.  Warns for  all  pointer  conversions  between  possibly  incompatible  types,  even  if  never
           dereferenced.  Runs in the front end only.

           Level  2: Aggressive, quick, not too precise.  May still have many false positives (not as many as level 1
           though), and few false negatives (but possibly more than level 1).  Unlike level 1, it only warns when  an
           address is taken.  Warns about incomplete types.  Runs in the front end only.

           Level  3  (default  for  [1m-Wstrict-aliasing[22m): Should have very few false positives and few false negatives.
           Slightly slower than levels 1 or 2 when optimization is enabled.  Takes care of the common pun+dereference
           pattern in the front end: "*(int*)&some_float".  If optimization is enabled, it also runs in the back end,
           where it deals with multiple statement cases using flow-sensitive points-to information.  Only warns  when
           the converted pointer is dereferenced.  Does not warn about incomplete types.

       [1m-Wstrict-overflow[0m
       [1m-Wstrict-overflow=[4m[22mn[0m
           This  option  is  only  active when signed overflow is undefined.  It warns about cases where the compiler
           optimizes based on the assumption that signed overflow does not occur.  Note that it does not  warn  about
           all  cases  where  the  code  might overflow: it only warns about cases where the compiler implements some
           optimization.  Thus this warning depends on the optimization level.

           An optimization that assumes that signed overflow does not occur is perfectly safe if the  values  of  the
           variables  involved  are such that overflow never does, in fact, occur.  Therefore this warning can easily
           give a false positive: a warning about code that is not actually a problem.  To help  focus  on  important
           issues,  several  warning  levels  are  defined.   No  warnings are issued for the use of undefined signed
           overflow when estimating how many iterations a loop requires, in particular  when  determining  whether  a
           loop will be executed at all.

           [1m-Wstrict-overflow=1[0m
               Warn about cases that are both questionable and easy to avoid.  For example the compiler simplifies "x
               +  1  > x" to 1.  This level of [1m-Wstrict-overflow [22mis enabled by [1m-Wall[22m; higher levels are not, and must
               be explicitly requested.

           [1m-Wstrict-overflow=2[0m
               Also warn about other cases where a comparison is simplified to a constant.  For example: "abs (x)  >=
               0".   This  can  only be simplified when signed integer overflow is undefined, because "abs (INT_MIN)"
               overflows to "INT_MIN", which is less than zero.  [1m-Wstrict-overflow [22m(with no level)  is  the  same  as
               [1m-Wstrict-overflow=2[22m.

           [1m-Wstrict-overflow=3[0m
               Also  warn about other cases where a comparison is simplified.  For example: "x + 1 > 1" is simplified
               to "x > 0".

           [1m-Wstrict-overflow=4[0m
               Also warn about other simplifications not covered by the above cases.  For example: "(x * 10) / 5"  is
               simplified to "x * 2".

           [1m-Wstrict-overflow=5[0m
               Also warn about cases where the compiler reduces the magnitude of a constant involved in a comparison.
               For  example: "x + 2 > y" is simplified to "x + 1 >= y".  This is reported only at the highest warning
               level because this simplification applies to many comparisons, so this  warning  level  gives  a  very
               large number of false positives.

       [1m-Wstring-compare[0m
           Warn for calls to "strcmp" and "strncmp" whose result is determined to be either zero or non-zero in tests
           for  such  equality owing to the length of one argument being greater than the size of the array the other
           argument is stored in (or the bound in the case  of  "strncmp").   Such  calls  could  be  mistakes.   For
           example,  the  call to "strcmp" below is diagnosed because its result is necessarily non-zero irrespective
           of the contents of the array "a".

                   extern char a[4];
                   void f (char *d)
                   {
                     strcpy (d, "string");
                     ...
                     if (0 == strcmp (a, d))   // cannot be true
                       puts ("a and d are the same");
                   }

           [1m-Wstring-compare [22mis enabled by [1m-Wextra[22m.

       [1m-Wno-stringop-overflow[0m
       [1m-Wstringop-overflow[0m
       [1m-Wstringop-overflow=[4m[22mtype[0m
           Warn for calls to string manipulation functions such as "memcpy"  and  "strcpy"  that  are  determined  to
           overflow  the  destination  buffer.   The  optional  argument  is one greater than the type of Object Size
           Checking to perform to determine the size of  the  destination.   The  argument  is  meaningful  only  for
           functions  that  operate  on  character arrays but not for raw memory functions like "memcpy" which always
           make use of Object Size type-0.  The option also warns for calls that specify a  size  in  excess  of  the
           largest  possible  object  or  at  most  "SIZE_MAX  / 2" bytes.  The option produces the best results with
           optimization enabled but can detect a small subset of simple buffer overflows even without optimization in
           calls to the GCC built-in functions like "__builtin_memcpy" that correspond to the standard functions.  In
           any case, the option warns about just a subset of buffer overflows detected by the corresponding  overflow
           checking  built-ins.   For  example,  the  option  issues a warning for the "strcpy" call below because it
           copies at least 5 characters (the string "blue" including the terminating NUL) into the buffer of size 4.

                   enum Color { blue, purple, yellow };
                   const char* f (enum Color clr)
                   {
                     static char buf [4];
                     const char *str;
                     switch (clr)
                       {
                         case blue: str = "blue"; break;
                         case purple: str = "purple"; break;
                         case yellow: str = "yellow"; break;
                       }

                     return strcpy (buf, str);   // warning here
                   }

           Option [1m-Wstringop-overflow=2 [22mis enabled by default.

           [1m-Wstringop-overflow[0m
           [1m-Wstringop-overflow=1[0m
               The [1m-Wstringop-overflow=1 [22moption uses type-zero  Object  Size  Checking  to  determine  the  sizes  of
               destination  objects.   At this setting the option does not warn for writes past the end of subobjects
               of larger objects accessed by pointers unless the size of the largest  surrounding  object  is  known.
               When  the  destination  may be one of several objects it is assumed to be the largest one of them.  On
               Linux systems, when optimization is enabled at this setting the option warns for the same code as when
               the "_FORTIFY_SOURCE" macro is defined to a non-zero value.

           [1m-Wstringop-overflow=2[0m
               The [1m-Wstringop-overflow=2 [22moption uses  type-one  Object  Size  Checking  to  determine  the  sizes  of
               destination  objects.  At this setting the option warns about overflows when writing to members of the
               largest complete objects whose exact size is known.  However, it does not warn for excessive writes to
               the same members of unknown objects referenced by pointers since they may point to  arrays  containing
               unknown numbers of elements.  This is the default setting of the option.

           [1m-Wstringop-overflow=3[0m
               The  [1m-Wstringop-overflow=3  [22moption  uses  type-two  Object  Size  Checking  to  determine the sizes of
               destination objects.  At this setting the option warns about overflowing the smallest object  or  data
               member.  This is the most restrictive setting of the option that may result in warnings for safe code.

           [1m-Wstringop-overflow=4[0m
               The  [1m-Wstringop-overflow=4  [22moption  uses  type-three  Object  Size  Checking to determine the sizes of
               destination objects.  At this setting the option warns about overflowing any data  members,  and  when
               the destination is one of several objects it uses the size of the largest of them to decide whether to
               issue a warning.  Similarly to [1m-Wstringop-overflow=3 [22mthis setting of the option may result in warnings
               for benign code.

       [1m-Wno-stringop-overread[0m
           Warn  for calls to string manipulation functions such as "memchr", or "strcpy" that are determined to read
           past the end of the source sequence.

           Option [1m-Wstringop-overread [22mis enabled by default.

       [1m-Wno-stringop-truncation[0m
           Do not warn for calls to bounded string manipulation functions such as "strncat", "strncpy", and "stpncpy"
           that may either truncate the copied string or leave the destination unchanged.

           In the following example, the call to "strncat" specifies a bound that is less  than  the  length  of  the
           source  string.   As  a result, the copy of the source will be truncated and so the call is diagnosed.  To
           avoid the warning use "bufsize - strlen (buf) - 1)" as the bound.

                   void append (char *buf, size_t bufsize)
                   {
                     strncat (buf, ".txt", 3);
                   }

           As another example, the following call to  "strncpy"  results  in  copying  to  "d"  just  the  characters
           preceding  the terminating NUL, without appending the NUL to the end.  Assuming the result of "strncpy" is
           necessarily a NUL-terminated string is a common mistake, and so the  call  is  diagnosed.   To  avoid  the
           warning when the result is not expected to be NUL-terminated, call "memcpy" instead.

                   void copy (char *d, const char *s)
                   {
                     strncpy (d, s, strlen (s));
                   }

           In the following example, the call to "strncpy" specifies the size of the destination buffer as the bound.
           If  the  length of the source string is equal to or greater than this size the result of the copy will not
           be NUL-terminated.  Therefore, the call is also diagnosed.  To avoid the warning, specify "sizeof buf - 1"
           as the bound and set the last element of the buffer to "NUL".

                   void copy (const char *s)
                   {
                     char buf[80];
                     strncpy (buf, s, sizeof buf);
                     ...
                   }

           In situations where a character array is intended to store a sequence of bytes with no  terminating  "NUL"
           such  an  array  may be annotated with attribute "nonstring" to avoid this warning.  Such arrays, however,
           are not suitable arguments to functions that expect "NUL"-terminated strings.  To help  detect  accidental
           misuses of such arrays GCC issues warnings unless it can prove that the use is safe.

       [1m-Wstrict-flex-arrays[0m
           Warn  about  inproper  usages  of  flexible array members according to the [4mlevel[24m of the "strict_flex_array
           ([4mlevel[24m)" attribute attached to the trailing array field  of  a  structure  if  it's  available,  otherwise
           according to the [4mlevel[24m of the option [1m-fstrict-flex-arrays=[4m[22mlevel[24m.

           This option is effective only when [4mlevel[24m is bigger than 0.  Otherwise, it will be ignored with a warning.

           when  [4mlevel[24m=1,  warnings  will be issued for a trailing array reference of a structure that have 2 or more
           elements if the trailing array is referenced as a flexible array member.

           when [4mlevel[24m=2, in addition to [4mlevel[24m=1, additional warnings will be issued for a trailing one-element  array
           reference of a structure if the array is referenced as a flexible array member.

           when  [4mlevel[24m=3, in addition to [4mlevel[24m=2, additional warnings will be issued for a trailing zero-length array
           reference of a structure if the array is referenced as a flexible array member.

       [1m-Wsuggest-attribute=[22m[[1mpure[22m|[1mconst[22m|[1mnoreturn[22m|[1mformat[22m|[1mcold[22m|[1mmalloc[22m]
           Warn for cases where adding an attribute may be beneficial. The attributes currently supported are  listed
           below.

           [1m-Wsuggest-attribute=pure[0m
           [1m-Wsuggest-attribute=const[0m
           [1m-Wsuggest-attribute=noreturn[0m
           [1m-Wmissing-noreturn[0m
           [1m-Wsuggest-attribute=malloc[0m
               Warn  about  functions  that  might  be  candidates  for  attributes  "pure", "const" or "noreturn" or
               "malloc". The compiler only warns for functions visible in other compilation units or (in the case  of
               "pure" and "const") if it cannot prove that the function returns normally. A function returns normally
               if  it doesn't contain an infinite loop or return abnormally by throwing, calling "abort" or trapping.
               This analysis requires option [1m-fipa-pure-const[22m, which is enabled by default at [1m-O [22mand higher.   Higher
               optimization levels improve the accuracy of the analysis.

           [1m-Wsuggest-attribute=format[0m
           [1m-Wmissing-format-attribute[0m
               Warn  about  function  pointers that might be candidates for "format" attributes.  Note these are only
               possible candidates, not absolute ones.  GCC guesses that function pointers with  "format"  attributes
               that  are  used  in  assignment,  initialization, parameter passing or return statements should have a
               corresponding "format" attribute in the resulting type.  I.e. the left-hand side of the assignment  or
               initialization,  the  type  of  the  parameter variable, or the return type of the containing function
               respectively should also have a "format" attribute to avoid the warning.

               GCC also warns about function definitions that might be candidates for  "format"  attributes.   Again,
               these are only possible candidates.  GCC guesses that "format" attributes might be appropriate for any
               function  that calls a function like "vprintf" or "vscanf", but this might not always be the case, and
               some functions for which "format" attributes are appropriate may not be detected.

           [1m-Wsuggest-attribute=cold[0m
               Warn about functions that might be candidates for "cold" attribute.  This is based on static detection
               and generally only warns about functions which always leads to a call to another "cold" function  such
               as wrappers of C++ "throw" or fatal error reporting functions leading to "abort".

       [1m-Walloc-zero[0m
           Warn  about  calls  to allocation functions decorated with attribute "alloc_size" that specify zero bytes,
           including those to the built-in forms of the functions "aligned_alloc", "alloca", "calloc", "malloc",  and
           "realloc".   Because  the  behavior  of  these  functions  when  called  with  a  zero  size differs among
           implementations (and in the case of "realloc" has been deprecated) relying on  it  may  result  in  subtle
           portability bugs and should be avoided.

       [1m-Walloc-size-larger-than=[4m[22mbyte-size[0m
           Warn  about  calls  to  functions  decorated  with attribute "alloc_size" that attempt to allocate objects
           larger than the specified number of bytes, or where the result of the size computation in an integer  type
           with    infinite    precision    would    exceed    the    value    of    [1mPTRDIFF_MAX   [22mon   the   target.
           [1m-Walloc-size-larger-than=PTRDIFF_MAX [22mis enabled by default.  Warnings controlled  by  the  option  can  be
           disabled either by specifying [4mbyte-size[24m of [1mSIZE_MAX [22mor more or by [1m-Wno-alloc-size-larger-than[22m.

       [1m-Wno-alloc-size-larger-than[0m
           Disable [1m-Walloc-size-larger-than= [22mwarnings.  The option is equivalent to [1m-Walloc-size-larger-than=SIZE_MAX[0m
           or larger.

       [1m-Walloca[0m
           This option warns on all uses of "alloca" in the source.

       [1m-Walloca-larger-than=[4m[22mbyte-size[0m
           This option warns on calls to "alloca" with an integer argument whose value is either zero, or that is not
           bounded by a controlling predicate that limits its value to at most [4mbyte-size[24m.  It also warns for calls to
           "alloca"  where  the bound value is unknown.  Arguments of non-integer types are considered unbounded even
           if they appear to be constrained to the expected range.

           For example, a bounded case of "alloca" could be:

                   void func (size_t n)
                   {
                     void *p;
                     if (n <= 1000)
                       p = alloca (n);
                     else
                       p = malloc (n);
                     f (p);
                   }

           In the above example, passing "-Walloca-larger-than=1000" would not issue a warning because  the  call  to
           "alloca"  is  known  to  be  at  most 1000 bytes.  However, if "-Walloca-larger-than=500" were passed, the
           compiler would emit a warning.

           Unbounded uses, on the other hand, are uses of "alloca" with no  controlling  predicate  constraining  its
           integer argument.  For example:

                   void func ()
                   {
                     void *p = alloca (n);
                     f (p);
                   }

           If "-Walloca-larger-than=500" were passed, the above would trigger a warning, but this time because of the
           lack of bounds checking.

           Note, that even seemingly correct code involving signed integers could cause a warning:

                   void func (signed int n)
                   {
                     if (n < 500)
                       {
                         p = alloca (n);
                         f (p);
                       }
                   }

           In  the  above example, [4mn[24m could be negative, causing a larger than expected argument to be implicitly cast
           into the "alloca" call.

           This option also warns when "alloca" is used in a loop.

           [1m-Walloca-larger-than=PTRDIFF_MAX [22mis enabled by default but is usually only effective  when  [1m-ftree-vrp  [22mis
           active (default for [1m-O2 [22mand above).

           See also [1m-Wvla-larger-than=byte-size[22m.

       [1m-Wno-alloca-larger-than[0m
           Disable  [1m-Walloca-larger-than=  [22mwarnings.   The  option  is equivalent to [1m-Walloca-larger-than=SIZE_MAX [22mor
           larger.

       [1m-Warith-conversion[0m
           Do warn about implicit conversions from arithmetic operations even when conversion of the operands to  the
           same  type  cannot  change their values.  This affects warnings from [1m-Wconversion[22m, [1m-Wfloat-conversion[22m, and
           [1m-Wsign-conversion[22m.

                   void f (char c, int i)
                   {
                     c = c + i; // warns with B<-Wconversion>
                     c = c + 1; // only warns with B<-Warith-conversion>
                   }

       [1m-Warray-bounds[0m
       [1m-Warray-bounds=[4m[22mn[0m
           Warn about out of bounds subscripts or offsets into arrays.  This warning is enabled by [1m-Wall[22m.  It is more
           effective when [1m-ftree-vrp [22mis active (the default for [1m-O2 [22mand above) but a subset of instances  are  issued
           even without optimization.

           By default, the trailing array of a structure will be treated as a flexible array member by [1m-Warray-bounds[0m
           or  [1m-Warray-bounds=[4m[22mn[24m  if it is declared as either a flexible array member per C99 standard onwards ([1m[][22m), a
           GCC zero-length array extension ([1m[0][22m), or  an  one-element  array  ([1m[1][22m).  As  a  result,  out  of  bounds
           subscripts or offsets into zero-length arrays or one-element arrays are not warned by default.

           You can add the option [1m-fstrict-flex-arrays [22mor [1m-fstrict-flex-arrays=[4m[22mlevel[24m to control how this option treat
           trailing array of a structure as a flexible array member:

           when [4mlevel[24m<=1, no change to the default behavior.

           when  [4mlevel[24m=2, additional warnings will be issued for out of bounds subscripts or offsets into one-element
           arrays;

           when [4mlevel[24m=3, in addition to [4mlevel[24m=2, additional warnings will be issued for out of bounds  subscripts  or
           offsets into zero-length arrays.

           [1m-Warray-bounds=1[0m
               This  is  the  default warning level of [1m-Warray-bounds [22mand is enabled by [1m-Wall[22m; higher levels are not,
               and must be explicitly requested.

           [1m-Warray-bounds=2[0m
               This warning level also warns about the intermediate results of pointer arithmetic that may yield  out
               of bounds values. This warning level may give a larger number of false positives and is deactivated by
               default.

       [1m-Warray-compare[0m
           Warn  about  equality  and relational comparisons between two operands of array type.  This comparison was
           deprecated in C++20.  For example:

                   int arr1[5];
                   int arr2[5];
                   bool same = arr1 == arr2;

           [1m-Warray-compare [22mis enabled by [1m-Wall[22m.

       [1m-Warray-parameter[0m
       [1m-Warray-parameter=[4m[22mn[0m
           Warn about redeclarations of functions involving arguments of array or pointer types of inconsistent kinds
           or forms, and enable the detection of out-of-bounds accesses  to  such  parameters  by  warnings  such  as
           [1m-Warray-bounds[22m.

           If  the  first  function declaration uses the array form the bound specified in the array is assumed to be
           the minimum number of elements expected to be provided in calls to the function and the maximum number  of
           elements  accessed  by  it.   Failing  to  provide arguments of sufficient size or accessing more than the
           maximum number of elements may be diagnosed by warnings such as [1m-Warray-bounds[22m.  At level  1  the  warning
           diagnoses inconsistencies involving array parameters declared using the "T[static N]" form.

           For  example,  the warning triggers for the following redeclarations because the first one allows an array
           of any size to be passed to "f" while the second one with the keyword "static" specifies  that  the  array
           argument must have at least four elements.

                   void f (int[static 4]);
                   void f (int[]);           // warning (inconsistent array form)

                   void g (void)
                   {
                     int *p = (int *)malloc (4);
                     f (p);                  // warning (array too small)
                     ...
                   }

           At  level  2  the  warning  also triggers for redeclarations involving any other inconsistency in array or
           pointer argument forms denoting array sizes.  Pointers and arrays  of  unspecified  bound  are  considered
           equivalent and do not trigger a warning.

                   void g (int*);
                   void g (int[]);     // no warning
                   void g (int[8]);    // warning (inconsistent array bound)

           [1m-Warray-parameter=2  [22mis  included  in  [1m-Wall[22m.   The  [1m-Wvla-parameter  [22moption triggers warnings for similar
           inconsistencies involving Variable Length Array arguments.

       [1m-Wattribute-alias=[4m[22mn[0m
       [1m-Wno-attribute-alias[0m
           Warn about declarations using the "alias" and similar attributes whose target  is  incompatible  with  the
           type of the alias.

           [1m-Wattribute-alias=1[0m
               The default warning level of the [1m-Wattribute-alias [22moption diagnoses incompatibilities between the type
               of  the  alias declaration and that of its target.  Such incompatibilities are typically indicative of
               bugs.

           [1m-Wattribute-alias=2[0m
               At this level [1m-Wattribute-alias [22malso diagnoses cases where the attributes of the alias declaration are
               more restrictive than the attributes applied to its target.  These mismatches can  potentially  result
               in  incorrect  code  generation.   In  other  cases they may be benign and could be resolved simply by
               adding the missing attribute to the target.  For  comparison,  see  the  [1m-Wmissing-attributes  [22moption,
               which controls diagnostics when the alias declaration is less restrictive than the target, rather than
               more restrictive.

               Attributes  considered  include "alloc_align", "alloc_size", "cold", "const", "hot", "leaf", "malloc",
               "nonnull", "noreturn", "nothrow", "pure", "returns_nonnull", and "returns_twice".

           [1m-Wattribute-alias [22mis equivalent to [1m-Wattribute-alias=1[22m.  This is  the  default.   You  can  disable  these
           warnings with either [1m-Wno-attribute-alias [22mor [1m-Wattribute-alias=0[22m.

       [1m-Wbidi-chars=[22m[[1mnone[22m|[1munpaired[22m|[1many[22m|[1mucn[22m]
           Warn  about  possibly  misleading  UTF-8  bidirectional  control  characters in comments, string literals,
           character constants, and identifiers.  Such characters can change  left-to-right  writing  direction  into
           right-to-left  (and  vice  versa),  which  can cause confusion between the logical order and visual order.
           This may be dangerous; for instance, it may seem that a piece of code is not commented out, whereas it  in
           fact is.

           There  are  three  levels  of warning supported by GCC.  The default is [1m-Wbidi-chars=unpaired[22m, which warns
           about improperly terminated bidi contexts.  [1m-Wbidi-chars=none [22mturns  the  warning  off.   [1m-Wbidi-chars=any[0m
           warns about any use of bidirectional control characters.

           By  default,  this warning does not warn about UCNs.  It is, however, possible to turn on such checking by
           using  [1m-Wbidi-chars=unpaired,ucn  [22mor  [1m-Wbidi-chars=any,ucn[22m.   Using  [1m-Wbidi-chars=ucn  [22mis  valid,  and  is
           equivalent to [1m-Wbidi-chars=unpaired,ucn[22m, if no previous [1m-Wbidi-chars=any [22mwas specified.

       [1m-Wbool-compare[0m
           Warn about boolean expression compared with an integer value different from "true"/"false".  For instance,
           the following comparison is always false:

                   int n = 5;
                   ...
                   if ((n > 1) == 2) { ... }

           This warning is enabled by [1m-Wall[22m.

       [1m-Wbool-operation[0m
           Warn  about  suspicious  operations on expressions of a boolean type.  For instance, bitwise negation of a
           boolean is very likely a bug in the program.  For  C,  this  warning  also  warns  about  incrementing  or
           decrementing  a  boolean,  which  rarely  makes sense.  (In C++, decrementing a boolean is always invalid.
           Incrementing a boolean is invalid in C++17, and deprecated otherwise.)

           This warning is enabled by [1m-Wall[22m.

       [1m-Wduplicated-branches[0m
           Warn when an if-else has identical branches.  This warning detects cases like

                   if (p != NULL)
                     return 0;
                   else
                     return 0;

           It doesn't warn when both branches contain just a null statement.  This warning also warn for  conditional
           operators:

                     int i = x ? *p : *p;

       [1m-Wduplicated-cond[0m
           Warn about duplicated conditions in an if-else-if chain.  For instance, warn for the following code:

                   if (p->q != NULL) { ... }
                   else if (p->q != NULL) { ... }

       [1m-Wframe-address[0m
           Warn  when the [1m__builtin_frame_address [22mor [1m__builtin_return_address [22mis called with an argument greater than
           0.  Such calls may return indeterminate values or crash the program.  The warning is included in [1m-Wall[22m.

       [1m-Wno-discarded-qualifiers [22m(C and Objective-C only)
           Do not warn if type qualifiers on pointers are being discarded.  Typically, the compiler warns if a "const
           char *" variable is passed to a function that takes a "char *" parameter.  This  option  can  be  used  to
           suppress such a warning.

       [1m-Wno-discarded-array-qualifiers [22m(C and Objective-C only)
           Do  not  warn  if type qualifiers on arrays which are pointer targets are being discarded.  Typically, the
           compiler warns if a "const int (*)[]" variable is passed to a function that takes a "int (*)[]" parameter.
           This option can be used to suppress such a warning.

       [1m-Wno-incompatible-pointer-types [22m(C and Objective-C only)
           Do not warn when there is a conversion between pointers that have incompatible types.  This warning is for
           cases not covered by [1m-Wno-pointer-sign[22m, which warns  for  pointer  argument  passing  or  assignment  with
           different signedness.

       [1m-Wno-int-conversion [22m(C and Objective-C only)
           Do  not  warn  about  incompatible integer to pointer and pointer to integer conversions.  This warning is
           about  implicit  conversions;  for  explicit  conversions  the   warnings   [1m-Wno-int-to-pointer-cast   [22mand
           [1m-Wno-pointer-to-int-cast [22mmay be used.

       [1m-Wzero-length-bounds[0m
           Warn  about accesses to elements of zero-length array members that might overlap other members of the same
           object.  Declaring interior zero-length arrays is discouraged because accesses to them are undefined.

           For example, the first two stores in function "bad" are diagnosed because the array elements  overlap  the
           subsequent  members  "b" and "c".  The third store is diagnosed by [1m-Warray-bounds [22mbecause it is beyond the
           bounds of the enclosing object.

                   struct X { int a[0]; int b, c; };
                   struct X x;

                   void bad (void)
                   {
                     x.a[0] = 0;   // -Wzero-length-bounds
                     x.a[1] = 1;   // -Wzero-length-bounds
                     x.a[2] = 2;   // -Warray-bounds
                   }

           Option [1m-Wzero-length-bounds [22mis enabled by [1m-Warray-bounds[22m.

       [1m-Wno-div-by-zero[0m
           Do not warn about compile-time integer division by zero.  Floating-point division by zero  is  not  warned
           about, as it can be a legitimate way of obtaining infinities and NaNs.

       [1m-Wsystem-headers[0m
           Print  warning  messages  for  constructs  found in system header files.  Warnings from system headers are
           normally suppressed, on the assumption that they usually do not indicate real problems and would only make
           the compiler output harder to read.  Using this command-line option tells GCC to emit warnings from system
           headers as if they occurred in user code.  However, note that using [1m-Wall [22min conjunction with this  option
           does [4mnot[24m warn about unknown pragmas in system headers---for that, [1m-Wunknown-pragmas [22mmust also be used.

       [1m-Wtautological-compare[0m
           Warn  if  a self-comparison always evaluates to true or false.  This warning detects various mistakes such
           as:

                   int i = 1;
                   ...
                   if (i > i) { ... }

           This warning also warns about bitwise comparisons that always evaluate to true or false, for instance:

                   if ((a & 16) == 10) { ... }

           will always be false.

           This warning is enabled by [1m-Wall[22m.

       [1m-Wtrampolines[0m
           Warn about trampolines generated for pointers to nested functions.  A trampoline is a small piece of  data
           or  code  that  is created at run time on the stack when the address of a nested function is taken, and is
           used to call the nested function indirectly.  For some targets, it is  made  up  of  data  only  and  thus
           requires  no  special treatment.  But, for most targets, it is made up of code and thus requires the stack
           to be made executable in order for the program to work properly.

       [1m-Wfloat-equal[0m
           Warn if floating-point values are used in equality comparisons.

           The idea behind this is that sometimes it is convenient (for the programmer)  to  consider  floating-point
           values  as  approximations  to  infinitely  precise real numbers.  If you are doing this, then you need to
           compute (by analyzing the code, or in some other way)  the  maximum  or  likely  maximum  error  that  the
           computation  introduces,  and  allow  for  it  when performing comparisons (and when producing output, but
           that's a different problem).  In particular, instead of testing for equality,  you  should  check  to  see
           whether  the  two  values  have  ranges  that  overlap; and this is done with the relational operators, so
           equality comparisons are probably mistaken.

       [1m-Wtraditional [22m(C and Objective-C only)
           Warn about certain constructs that behave differently in traditional and ISO C.  Also  warn  about  ISO  C
           constructs that have no traditional C equivalent, and/or problematic constructs that should be avoided.

           *   Macro  parameters  that  appear  within  string  literals  in  the macro body.  In traditional C macro
               replacement takes place within string literals, but in ISO C it does not.

           *   In traditional C,  some  preprocessor  directives  did  not  exist.   Traditional  preprocessors  only
               considered  a  line  to  be  a  directive  if  the  [1m#  [22mappeared  in  column  1 on the line.  Therefore
               [1m-Wtraditional [22mwarns about directives that traditional C understands but ignores because the [1m# [22mdoes not
               appear as the first character on the line.  It also suggests you hide directives  like  "#pragma"  not
               understood  by  traditional  C  by  indenting them.  Some traditional implementations do not recognize
               "#elif", so this option suggests avoiding it altogether.

           *   A function-like macro that appears without arguments.

           *   The unary plus operator.

           *   The [1mU [22minteger constant suffix, or the [1mF [22mor [1mL [22mfloating-point constant suffixes.   (Traditional  C  does
               support  the  [1mL  [22msuffix  on  integer constants.)  Note, these suffixes appear in macros defined in the
               system headers of most modern systems, e.g. the [1m_MIN[22m/[1m_MAX [22mmacros in "<limits.h>".  Use of these macros
               in user code might normally lead to spurious  warnings,  however  GCC's  integrated  preprocessor  has
               enough context to avoid warning in these cases.

           *   A function declared external in one block and then used after the end of the block.

           *   A "switch" statement has an operand of type "long".

           *   A  non-"static"  function  declaration follows a "static" one.  This construct is not accepted by some
               traditional C compilers.

           *   The ISO type of an integer constant has a different width or signedness  from  its  traditional  type.
               This  warning  is  only  issued if the base of the constant is ten.  I.e. hexadecimal or octal values,
               which typically represent bit patterns, are not warned about.

           *   Usage of ISO string concatenation is detected.

           *   Initialization of automatic aggregates.

           *   Identifier conflicts with labels.  Traditional C lacks a separate namespace for labels.

           *   Initialization of unions.  If the initializer is zero, the warning is omitted.  This is done under the
               assumption that the zero initializer in user code appears conditioned  on  e.g.  "__STDC__"  to  avoid
               missing initializer warnings and relies on default initialization to zero in the traditional C case.

           *   Conversions  by  prototypes  between fixed/floating-point values and vice versa.  The absence of these
               prototypes when compiling with traditional C causes  serious  problems.   This  is  a  subset  of  the
               possible conversion warnings; for the full set use [1m-Wtraditional-conversion[22m.

           *   Use  of  ISO  C  style  function  definitions.  This warning intentionally is [4mnot[24m issued for prototype
               declarations or variadic functions because these ISO  C  features  appear  in  your  code  when  using
               libiberty's traditional C compatibility macros, "PARAMS" and "VPARAMS".  This warning is also bypassed
               for  nested  functions  because  that  feature  is  already  a  GCC extension and thus not relevant to
               traditional C compatibility.

       [1m-Wtraditional-conversion [22m(C and Objective-C only)
           Warn if a prototype causes a type conversion that is different from what would happen to the same argument
           in the absence of a prototype.  This includes conversions of fixed point to floating and vice  versa,  and
           conversions changing the width or signedness of a fixed-point argument except when the same as the default
           promotion.

       [1m-Wdeclaration-after-statement [22m(C and Objective-C only)
           Warn  when  a  declaration  is  found  after  a statement in a block.  This construct, known from C++, was
           introduced with ISO C99 and is by default allowed in GCC.  It is not supported by ISO C90.

       [1m-Wshadow[0m
           Warn whenever a local variable or type declaration shadows another variable, parameter, type, class member
           (in C++), or instance variable (in Objective-C) or whenever a built-in function is shadowed.  Note that in
           C++, the compiler warns if a local variable  shadows  an  explicit  typedef,  but  not  if  it  shadows  a
           struct/class/enum.   If  this warning is enabled, it includes also all instances of local shadowing.  This
           means that [1m-Wno-shadow=local [22mand [1m-Wno-shadow=compatible-local [22mare ignored when [1m-Wshadow [22mis used.  Same  as
           [1m-Wshadow=global[22m.

       [1m-Wno-shadow-ivar [22m(Objective-C only)
           Do not warn whenever a local variable shadows an instance variable in an Objective-C method.

       [1m-Wshadow=global[0m
           Warn for any shadowing.  Same as [1m-Wshadow[22m.

       [1m-Wshadow=local[0m
           Warn when a local variable shadows another local variable or parameter.

       [1m-Wshadow=compatible-local[0m
           Warn  when a local variable shadows another local variable or parameter whose type is compatible with that
           of the shadowing variable.  In C++, type compatibility here means the type of the shadowing  variable  can
           be  converted to that of the shadowed variable.  The creation of this flag (in addition to [1m-Wshadow=local[22m)
           is based on the idea that when a local variable shadows another one  of  incompatible  type,  it  is  most
           likely intentional, not a bug or typo, as shown in the following example:

                   for (SomeIterator i = SomeObj.begin(); i != SomeObj.end(); ++i)
                   {
                     for (int i = 0; i < N; ++i)
                     {
                       ...
                     }
                     ...
                   }

           Since   the   two   variable   "i"   in   the   example  above  have  incompatible  types,  enabling  only
           [1m-Wshadow=compatible-local [22mdoes not emit a warning.  Because their types are incompatible, if a  programmer
           accidentally  uses one in place of the other, type checking is expected to catch that and emit an error or
           warning.  Use of this flag instead of [1m-Wshadow=local [22mcan possibly reduce the number of warnings  triggered
           by  intentional shadowing.  Note that this also means that shadowing "const char *i" by "char *i" does not
           emit a warning.

           This warning is also enabled by [1m-Wshadow=local[22m.

       [1m-Wlarger-than=[4m[22mbyte-size[0m
           Warn whenever an object is defined whose size exceeds [4mbyte-size[24m.  [1m-Wlarger-than=PTRDIFF_MAX [22mis enabled  by
           default.   Warnings controlled by the option can be disabled either by specifying [4mbyte-size[24m of [1mSIZE_MAX [22mor
           more or by [1m-Wno-larger-than[22m.

           Also warn for calls to bounded functions such as "memchr" or "strnlen" that specify a bound  greater  than
           the  largest  possible object, which is [1mPTRDIFF_MAX [22mbytes by default.  These warnings can only be disabled
           by [1m-Wno-larger-than[22m.

       [1m-Wno-larger-than[0m
           Disable [1m-Wlarger-than= [22mwarnings.  The option is equivalent to [1m-Wlarger-than=SIZE_MAX [22mor larger.

       [1m-Wframe-larger-than=[4m[22mbyte-size[0m
           Warn if the size of a function frame exceeds [4mbyte-size[24m.  The computation done to determine the stack frame
           size is approximate and not conservative.  The actual requirements may be somewhat greater than  [4mbyte-size[0m
           even  if you do not get a warning.  In addition, any space allocated via "alloca", variable-length arrays,
           or related constructs is not included by the compiler when determining whether or not to issue a  warning.
           [1m-Wframe-larger-than=PTRDIFF_MAX  [22mis enabled by default.  Warnings controlled by the option can be disabled
           either by specifying [4mbyte-size[24m of [1mSIZE_MAX [22mor more or by [1m-Wno-frame-larger-than[22m.

       [1m-Wno-frame-larger-than[0m
           Disable [1m-Wframe-larger-than= [22mwarnings.   The  option  is  equivalent  to  [1m-Wframe-larger-than=SIZE_MAX  [22mor
           larger.

       [1m-Wfree-nonheap-object[0m
           Warn  when  attempting  to  deallocate  an object that was either not allocated on the heap, or by using a
           pointer that was not returned from a prior call to the corresponding allocation  function.   For  example,
           because  the  call to "stpcpy" returns a pointer to the terminating nul character and not to the beginning
           of the object, the call to "free" below is diagnosed.

                   void f (char *p)
                   {
                     p = stpcpy (p, "abc");
                     // ...
                     free (p);   // warning
                   }

           [1m-Wfree-nonheap-object [22mis included in [1m-Wall[22m.

       [1m-Wstack-usage=[4m[22mbyte-size[0m
           Warn if the stack usage of a function might exceed [4mbyte-size[24m.  The computation done to determine the stack
           usage is conservative.  Any space allocated via "alloca", variable-length arrays, or related constructs is
           included by the compiler when determining whether or not to issue a warning.

           The message is in keeping with the output of [1m-fstack-usage[22m.

           *   If the stack usage is fully static but exceeds the specified amount, it's:

                         warning: stack usage is 1120 bytes

           *   If the stack usage is (partly) dynamic but bounded, it's:

                         warning: stack usage might be 1648 bytes

           *   If the stack usage is (partly) dynamic and not bounded, it's:

                         warning: stack usage might be unbounded

           [1m-Wstack-usage=PTRDIFF_MAX [22mis enabled by default.  Warnings controlled by the option can be disabled either
           by specifying [4mbyte-size[24m of [1mSIZE_MAX [22mor more or by [1m-Wno-stack-usage[22m.

       [1m-Wno-stack-usage[0m
           Disable [1m-Wstack-usage= [22mwarnings.  The option is equivalent to [1m-Wstack-usage=SIZE_MAX [22mor larger.

       [1m-Wunsafe-loop-optimizations[0m
           Warn if the loop cannot be optimized because the compiler cannot assume anything on the bounds of the loop
           indices.  With [1m-funsafe-loop-optimizations [22mwarn if the compiler makes such assumptions.

       [1m-Wno-pedantic-ms-format [22m(MinGW targets only)
           When used in combination with [1m-Wformat [22mand [1m-pedantic [22mwithout GNU  extensions,  this  option  disables  the
           warnings  about  non-ISO  "printf" / "scanf" format width specifiers "I32", "I64", and "I" used on Windows
           targets, which depend on the MS runtime.

       [1m-Wpointer-arith[0m
           Warn about anything that depends on the "size of" a function type or of "void".  GNU C assigns these types
           a size of 1, for convenience in calculations with "void *" pointers and pointers to  functions.   In  C++,
           warn also when an arithmetic operation involves "NULL".  This warning is also enabled by [1m-Wpedantic[22m.

       [1m-Wno-pointer-compare[0m
           Do  not warn if a pointer is compared with a zero character constant.  This usually means that the pointer
           was meant to be dereferenced.  For example:

                   const char *p = foo ();
                   if (p == '\0')
                     return 42;

           Note that the code above is invalid in C++11.

           This warning is enabled by default.

       [1m-Wtsan[0m
           Warn about unsupported features in ThreadSanitizer.

           ThreadSanitizer does not support "std::atomic_thread_fence" and can report false positives.

           This warning is enabled by default.

       [1m-Wtype-limits[0m
           Warn if a comparison is always true or always false due to the limited range of the data type, but do  not
           warn  for  constant  expressions.  For example, warn if an unsigned variable is compared against zero with
           "<" or ">=".  This warning is also enabled by [1m-Wextra[22m.

       [1m-Wabsolute-value [22m(C and Objective-C only)
           Warn for calls to standard functions  that  compute  the  absolute  value  of  an  argument  when  a  more
           appropriate  standard  function is available.  For example, calling abs(3.14) triggers the warning because
           the appropriate function to call to compute the absolute value of a double argument is "fabs".  The option
           also triggers warnings when the argument in a call to such a function has an unsigned type.  This  warning
           can be suppressed with an explicit type cast and it is also enabled by [1m-Wextra[22m.

       [1m-Wcomment[0m
       [1m-Wcomments[0m
           Warn whenever a comment-start sequence [1m/* [22mappears in a [1m/* [22mcomment, or whenever a backslash-newline appears
           in a [1m// [22mcomment.  This warning is enabled by [1m-Wall[22m.

       [1m-Wtrigraphs[0m
           Warn  if  any  trigraphs  are  encountered that might change the meaning of the program.  Trigraphs within
           comments are not warned about, except those that would form escaped newlines.

           This option is implied by [1m-Wall[22m.  If [1m-Wall [22mis not given, this option is still enabled unless trigraphs are
           enabled.  To get trigraph conversion without warnings, but get the other [1m-Wall  [22mwarnings,  use  [1m-trigraphs[0m
           [1m-Wall -Wno-trigraphs[22m.

       [1m-Wundef[0m
           Warn  if  an  undefined identifier is evaluated in an "#if" directive.  Such identifiers are replaced with
           zero.

       [1m-Wexpansion-to-defined[0m
           Warn whenever [1mdefined [22mis encountered in the expansion of a macro (including the case where  the  macro  is
           expanded  by  an  [1m#if [22mdirective).  Such usage is not portable.  This warning is also enabled by [1m-Wpedantic[0m
           and [1m-Wextra[22m.

       [1m-Wunused-macros[0m
           Warn about macros defined in the main file that are unused.  A macro is [4mused[24m if it is expanded  or  tested
           for existence at least once.  The preprocessor also warns if the macro has not been used at the time it is
           redefined or undefined.

           Built-in  macros,  macros  defined on the command line, and macros defined in include files are not warned
           about.

           [4mNote:[24m If a macro is actually used, but only used in skipped  conditional  blocks,  then  the  preprocessor
           reports  it  as  unused.   To avoid the warning in such a case, you might improve the scope of the macro's
           definition by, for example, moving it into the first skipped block.  Alternatively, you  could  provide  a
           dummy use with something like:

                   #if defined the_macro_causing_the_warning
                   #endif

       [1m-Wno-endif-labels[0m
           Do  not  warn  whenever  an  "#else" or an "#endif" are followed by text.  This sometimes happens in older
           programs with code of the form

                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO

           The second and third "FOO" should be in comments.  This warning is on by default.

       [1m-Wbad-function-cast [22m(C and Objective-C only)
           Warn when a function call is cast to a non-matching type.  For example, warn  if  a  call  to  a  function
           returning an integer type is cast to a pointer type.

       [1m-Wc90-c99-compat [22m(C and Objective-C only)
           Warn  about  features  not  present  in  ISO C90, but present in ISO C99.  For instance, warn about use of
           variable length arrays, "long long" type, "bool" type, compound literals, designated initializers, and  so
           on.   This  option  is  independent  of  the standards mode.  Warnings are disabled in the expression that
           follows "__extension__".

       [1m-Wc99-c11-compat [22m(C and Objective-C only)
           Warn about features not present in ISO C99, but present in ISO C11.   For  instance,  warn  about  use  of
           anonymous  structures  and  unions,  "_Atomic"  type  qualifier,  "_Thread_local" storage-class specifier,
           "_Alignas" specifier, "Alignof" operator, "_Generic" keyword, and so on.  This option  is  independent  of
           the standards mode.  Warnings are disabled in the expression that follows "__extension__".

       [1m-Wc11-c2x-compat [22m(C and Objective-C only)
           Warn about features not present in ISO C11, but present in ISO C2X.  For instance, warn about omitting the
           string in "_Static_assert", use of [1m[[]] [22msyntax for attributes, use of decimal floating-point types, and so
           on.   This  option  is  independent  of  the standards mode.  Warnings are disabled in the expression that
           follows "__extension__".

       [1m-Wc++-compat [22m(C and Objective-C only)
           Warn about ISO C constructs that are outside of the common subset of ISO C and ISO C++, e.g.  request  for
           implicit conversion from "void *" to a pointer to non-"void" type.

       [1m-Wc++11-compat [22m(C++ and Objective-C++ only)
           Warn  about  C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011, e.g., identifiers
           in ISO C++ 1998 that are keywords in ISO C++ 2011.  This warning turns on [1m-Wnarrowing [22mand  is  enabled  by
           [1m-Wall[22m.

       [1m-Wc++14-compat [22m(C++ and Objective-C++ only)
           Warn  about  C++  constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014.  This warning is
           enabled by [1m-Wall[22m.

       [1m-Wc++17-compat [22m(C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.   This  warning  is
           enabled by [1m-Wall[22m.

       [1m-Wc++20-compat [22m(C++ and Objective-C++ only)
           Warn  about  C++  constructs whose meaning differs between ISO C++ 2017 and ISO C++ 2020.  This warning is
           enabled by [1m-Wall[22m.

       [1m-Wno-c++11-extensions [22m(C++ and Objective-C++ only)
           Do not warn about C++11 constructs in code being compiled using an older C++ standard.  Even without  this
           option, some C++11 constructs will only be diagnosed if [1m-Wpedantic [22mis used.

       [1m-Wno-c++14-extensions [22m(C++ and Objective-C++ only)
           Do  not warn about C++14 constructs in code being compiled using an older C++ standard.  Even without this
           option, some C++14 constructs will only be diagnosed if [1m-Wpedantic [22mis used.

       [1m-Wno-c++17-extensions [22m(C++ and Objective-C++ only)
           Do not warn about C++17 constructs in code being compiled using an older C++ standard.  Even without  this
           option, some C++17 constructs will only be diagnosed if [1m-Wpedantic [22mis used.

       [1m-Wno-c++20-extensions [22m(C++ and Objective-C++ only)
           Do  not warn about C++20 constructs in code being compiled using an older C++ standard.  Even without this
           option, some C++20 constructs will only be diagnosed if [1m-Wpedantic [22mis used.

       [1m-Wno-c++23-extensions [22m(C++ and Objective-C++ only)
           Do not warn about C++23 constructs in code being compiled using an older C++ standard.  Even without  this
           option, some C++23 constructs will only be diagnosed if [1m-Wpedantic [22mis used.

       [1m-Wcast-qual[0m
           Warn  whenever a pointer is cast so as to remove a type qualifier from the target type.  For example, warn
           if a "const char *" is cast to an ordinary "char *".

           Also warn when making a cast that introduces a type qualifier in an  unsafe  way.   For  example,  casting
           "char **" to "const char **" is unsafe, as in this example:

                     /* p is char ** value.  */
                     const char **q = (const char **) p;
                     /* Assignment of readonly string to const char * is OK.  */
                     *q = "string";
                     /* Now char** pointer points to read-only memory.  */
                     **p = 'b';

       [1m-Wcast-align[0m
           Warn whenever a pointer is cast such that the required alignment of the target is increased.  For example,
           warn  if a "char *" is cast to an "int *" on machines where integers can only be accessed at two- or four-
           byte boundaries.

       [1m-Wcast-align=strict[0m
           Warn whenever a pointer is cast such that the required alignment of the target is increased.  For example,
           warn if a "char *" is cast to an "int *" regardless of the target machine.

       [1m-Wcast-function-type[0m
           Warn when a function pointer is cast to an incompatible function pointer.  In a  cast  involving  function
           types  with a variable argument list only the types of initial arguments that are provided are considered.
           Any parameter of pointer-type matches any other pointer-type.  Any benign differences  in  integral  types
           are  ignored, like "int" vs. "long" on ILP32 targets.  Likewise type qualifiers are ignored.  The function
           type "void (*) (void)" is special and matches everything, which can be used to suppress this warning.   In
           a cast involving pointer to member types this warning warns whenever the type cast is changing the pointer
           to member type.  This warning is enabled by [1m-Wextra[22m.

       [1m-Wwrite-strings[0m
           When  compiling  C, give string constants the type "const char[[4mlength[24m]" so that copying the address of one
           into a non-"const" "char *" pointer produces a warning.  These warnings help you find at compile time code
           that can try to write into a string constant, but only if you have been very careful about  using  "const"
           in  declarations  and  prototypes.   Otherwise,  it  is just a nuisance. This is why we did not make [1m-Wall[0m
           request these warnings.

           When compiling C++, warn about the deprecated conversion from string literals to "char *".   This  warning
           is enabled by default for C++ programs.

       [1m-Wclobbered[0m
           Warn  for  variables  that  might  be  changed  by  "longjmp" or "vfork".  This warning is also enabled by
           [1m-Wextra[22m.

       [1m-Wno-complain-wrong-lang[0m
           By default, language front ends complain when a command-line option is valid, but not applicable  to  that
           front  end.   This  may  be disabled with [1m-Wno-complain-wrong-lang[22m, which is mostly useful when invoking a
           single compiler driver for multiple source files written in different languages, for example:

                   $ g++ -fno-rtti a.cc b.f90

           The driver [4mg++[24m invokes the C++ front end to compile [4ma.cc[24m and the Fortran front end to compile [4mb.f90[24m.   The
           latter  front  end  diagnoses [1mf951: Warning: command-line option '-fno-rtti' is valid for C++/D/ObjC++ but[0m
           [1mnot for Fortran[22m, which may be disabled with [1m-Wno-complain-wrong-lang[22m.

       [1m-Wconversion[0m
           Warn for implicit conversions that may alter a value. This includes conversions between real and  integer,
           like "abs (x)" when "x" is "double"; conversions between signed and unsigned, like "unsigned ui = -1"; and
           conversions to smaller types, like "sqrtf (M_PI)". Do not warn for explicit casts like "abs ((int) x)" and
           "ui  =  (unsigned)  -1",  or  if the value is not changed by the conversion like in "abs (2.0)".  Warnings
           about conversions between signed and unsigned integers can be disabled by using [1m-Wno-sign-conversion[22m.

           For C++, also warn for confusing overload resolution for user-defined conversions;  and  conversions  that
           never use a type conversion operator: conversions to "void", the same type, a base class or a reference to
           them.  Warnings  about  conversions  between  signed  and unsigned integers are disabled by default in C++
           unless [1m-Wsign-conversion [22mis explicitly enabled.

           Warnings about conversion from arithmetic on  a  small  type  back  to  that  type  are  only  given  with
           [1m-Warith-conversion[22m.

       [1m-Wdangling-else[0m
           Warn  about  constructions  where there may be confusion to which "if" statement an "else" branch belongs.
           Here is an example of such a case:

                   {
                     if (a)
                       if (b)
                         foo ();
                     else
                       bar ();
                   }

           In C/C++, every "else" branch belongs to the innermost possible "if" statement, which in this  example  is
           "if  (b)".   This  is  often  not  what  the  programmer  expected, as illustrated in the above example by
           indentation the programmer chose.  When there is the potential for this confusion, GCC  issues  a  warning
           when  this  flag  is  specified.   To eliminate the warning, add explicit braces around the innermost "if"
           statement so there is no way the "else" can belong to the enclosing "if".  The resulting code  looks  like
           this:

                   {
                     if (a)
                       {
                         if (b)
                           foo ();
                         else
                           bar ();
                       }
                   }

           This warning is enabled by [1m-Wparentheses[22m.

       [1m-Wdangling-pointer[0m
       [1m-Wdangling-pointer=[4m[22mn[0m
           Warn  about  uses  of  pointers (or C++ references) to objects with automatic storage duration after their
           lifetime has ended.  This includes local variables declared in nested blocks, compound literals and  other
           unnamed  temporary  objects.   In  addition,  warn  about  storing  the address of such objects in escaped
           pointers.  The warning is enabled at  all  optimization  levels  but  may  yield  different  results  with
           optimization than without.

           [1m-Wdangling-pointer=1[0m
               At level 1 the warning diagnoses only unconditional uses of dangling pointers.  For example

                       int f (int c1, int c2, x)
                       {
                         char *p = strchr ((char[]){ c1, c2 }, c3);
                         // warning: dangling pointer to a compound literal
                         return p ? *p : 'x';
                       }

               In the following function the store of the address of the local variable "x" in the escaped pointer *p
               also triggers the warning.

                       void g (int **p)
                       {
                         int x = 7;
                         // warning: storing the address of a local variable in *p
                         *p = &x;
                       }

           [1m-Wdangling-pointer=2[0m
               At  level 2, in addition to unconditional uses the warning also diagnoses conditional uses of dangling
               pointers.

               For example, because the array [4ma[24m in the following function is out of scope when the pointer [4ms[24m that was
               set to point is used, the warning triggers at this level.

                       void f (char *s)
                       {
                         if (!s)
                           {
                             char a[12] = "tmpname";
                             s = a;
                           }
                         // warning: dangling pointer to a may be used
                         strcat (s, ".tmp");
                         ...
                       }

           [1m-Wdangling-pointer=2 [22mis included in [1m-Wall[22m.

       [1m-Wdate-time[0m
           Warn when macros "__TIME__", "__DATE__" or "__TIMESTAMP__" are encountered as they might prevent bit-wise-
           identical reproducible compilations.

       [1m-Wempty-body[0m
           Warn if an empty body occurs in an "if", "else" or "do while" statement.  This warning is also enabled  by
           [1m-Wextra[22m.

       [1m-Wno-endif-labels[0m
           Do not warn about stray tokens after "#else" and "#endif".

       [1m-Wenum-compare[0m
           Warn  about  a comparison between values of different enumerated types.  In C++ enumerated type mismatches
           in conditional expressions are also diagnosed and the warning is enabled by default.  In C this warning is
           enabled by [1m-Wall[22m.

       [1m-Wenum-conversion[0m
           Warn when a value of enumerated type is implicitly converted to a different enumerated type.  This warning
           is enabled by [1m-Wextra [22min C.

       [1m-Wenum-int-mismatch [22m(C and Objective-C only)
           Warn about mismatches between an enumerated type and an integer type in declarations.  For example:

                   enum E { l = -1, z = 0, g = 1 };
                   int foo(void);
                   enum E foo(void);

           In C, an enumerated type is compatible with "char", a signed integer type, or an  unsigned  integer  type.
           However,  since  the  choice  of the underlying type of an enumerated type is implementation-defined, such
           mismatches may cause portability issues.  In C++, such mismatches are an error.  In  C,  this  warning  is
           enabled by [1m-Wall [22mand [1m-Wc++-compat[22m.

       [1m-Wjump-misses-init [22m(C, Objective-C only)
           Warn  if a "goto" statement or a "switch" statement jumps forward across the initialization of a variable,
           or jumps backward to a label after the variable has been initialized.  This  only  warns  about  variables
           that are initialized when they are declared.  This warning is only supported for C and Objective-C; in C++
           this sort of branch is an error in any case.

           [1m-Wjump-misses-init [22mis included in [1m-Wc++-compat[22m.  It can be disabled with the [1m-Wno-jump-misses-init [22moption.

       [1m-Wsign-compare[0m
           Warn  when  a  comparison  between  signed  and unsigned values could produce an incorrect result when the
           signed value is converted to unsigned.  In C++, this warning is also enabled by [1m-Wall[22m.  In C, it  is  also
           enabled by [1m-Wextra[22m.

       [1m-Wsign-conversion[0m
           Warn  for  implicit  conversions  that  may  change  the sign of an integer value, like assigning a signed
           integer expression to an unsigned integer variable. An explicit cast silences  the  warning.  In  C,  this
           option is enabled also by [1m-Wconversion[22m.

       [1m-Wfloat-conversion[0m
           Warn  for  implicit conversions that reduce the precision of a real value.  This includes conversions from
           real to integer, and from higher precision real to lower precision  real  values.   This  option  is  also
           enabled by [1m-Wconversion[22m.

       [1m-Wno-scalar-storage-order[0m
           Do not warn on suspicious constructs involving reverse scalar storage order.

       [1m-Wsizeof-array-div[0m
           Warn  about  divisions  of  two sizeof operators when the first one is applied to an array and the divisor
           does not equal the size of the array element.  In such a case, the computation will not yield  the  number
           of elements in the array, which is likely what the user intended.  This warning warns e.g. about

                   int fn ()
                   {
                     int arr[10];
                     return sizeof (arr) / sizeof (short);
                   }

           This warning is enabled by [1m-Wall[22m.

       [1m-Wsizeof-pointer-div[0m
           Warn  for suspicious divisions of two sizeof expressions that divide the pointer size by the element size,
           which is the usual way to compute the array size but won't work out correctly with pointers.  This warning
           warns e.g. about "sizeof (ptr) / sizeof (ptr[0])" if "ptr" is not an array, but a pointer.   This  warning
           is enabled by [1m-Wall[22m.

       [1m-Wsizeof-pointer-memaccess[0m
           Warn for suspicious length parameters to certain string and memory built-in functions if the argument uses
           "sizeof".   This  warning  triggers  for  example  for "memset (ptr, 0, sizeof (ptr));" if "ptr" is not an
           array, but a pointer, and suggests a  possible  fix,  or  about  "memcpy  (&foo,  ptr,  sizeof  (&foo));".
           [1m-Wsizeof-pointer-memaccess  [22malso  warns  about  calls  to  bounded string copy functions like "strncat" or
           "strncpy" that specify as the bound a "sizeof" expression of  the  source  array.   For  example,  in  the
           following  function  the  call to "strncat" specifies the size of the source string as the bound.  That is
           almost certainly a mistake and so the call is diagnosed.

                   void make_file (const char *name)
                   {
                     char path[PATH_MAX];
                     strncpy (path, name, sizeof path - 1);
                     strncat (path, ".text", sizeof ".text");
                     ...
                   }

           The [1m-Wsizeof-pointer-memaccess [22moption is enabled by [1m-Wall[22m.

       [1m-Wno-sizeof-array-argument[0m
           Do not warn when the "sizeof" operator is applied to a parameter  that  is  declared  as  an  array  in  a
           function definition.  This warning is enabled by default for C and C++ programs.

       [1m-Wmemset-elt-size[0m
           Warn  for  suspicious  calls to the "memset" built-in function, if the first argument references an array,
           and the third argument is a number equal to the number of elements, but not equal to the size of the array
           in memory.  This indicates that the user has omitted a multiplication by the element size.   This  warning
           is enabled by [1m-Wall[22m.

       [1m-Wmemset-transposed-args[0m
           Warn  for suspicious calls to the "memset" built-in function where the second argument is not zero and the
           third argument is zero.  For example, the call "memset (buf, sizeof buf, 0)" is diagnosed because  "memset
           (buf,  0,  sizeof  buf)"  was  meant  instead.   The diagnostic is only emitted if the third argument is a
           literal zero.  Otherwise, if it is an expression that is folded to zero, or a cast of zero to  some  type,
           it  is far less likely that the arguments have been mistakenly transposed and no warning is emitted.  This
           warning is enabled by [1m-Wall[22m.

       [1m-Waddress[0m
           Warn about suspicious uses of address expressions. These include comparing the address of a function or  a
           declared object to the null pointer constant such as in

                   void f (void);
                   void g (void)
                   {
                     if (!f)   // warning: expression evaluates to false
                       abort ();
                   }

           comparisons of a pointer to a string literal, such as in

                   void f (const char *x)
                   {
                     if (x == "abc")   // warning: expression evaluates to false
                       puts ("equal");
                   }

           and tests of the results of pointer addition or subtraction for equality to null, such as in

                   void f (const int *p, int i)
                   {
                     return p + i == NULL;
                   }

           Such  uses  typically  indicate  a programmer error: the address of most functions and objects necessarily
           evaluates to true (the exception are weak symbols), so their use in a conditional might  indicate  missing
           parentheses in a function call or a missing dereference in an array expression.  The subset of the warning
           for object pointers can be suppressed by casting the pointer operand to an integer type such as "intptr_t"
           or  "uintptr_t".  Comparisons against string literals result in unspecified behavior and are not portable,
           and suggest the intent was to call "strcmp".  The warning is suppressed if the  suspicious  expression  is
           the result of macro expansion.  [1m-Waddress [22mwarning is enabled by [1m-Wall[22m.

       [1m-Wno-address-of-packed-member[0m
           Do  not  warn  when  the address of packed member of struct or union is taken, which usually results in an
           unaligned pointer value.  This is enabled by default.

       [1m-Wlogical-op[0m
           Warn about suspicious uses of logical operators in expressions.  This includes using logical operators  in
           contexts  where  a  bit-wise operator is likely to be expected.  Also warns when the operands of a logical
           operator are the same:

                   extern int a;
                   if (a < 0 && a < 0) { ... }

       [1m-Wlogical-not-parentheses[0m
           Warn about logical not used on the left hand side operand of a comparison.  This option does not  warn  if
           the right operand is considered to be a boolean expression.  Its purpose is to detect suspicious code like
           the following:

                   int a;
                   ...
                   if (!a > 1) { ... }

           It is possible to suppress the warning by wrapping the LHS into parentheses:

                   if ((!a) > 1) { ... }

           This warning is enabled by [1m-Wall[22m.

       [1m-Waggregate-return[0m
           Warn if any functions that return structures or unions are defined or called.  (In languages where you can
           return an array, this also elicits a warning.)

       [1m-Wno-aggressive-loop-optimizations[0m
           Warn  if  in  a  loop  with  constant number of iterations the compiler detects undefined behavior in some
           statement during one or more of the iterations.

       [1m-Wno-attributes[0m
           Do not warn if an unexpected "__attribute__" is used, such as unrecognized attributes, function attributes
           applied to variables, etc.  This does not stop errors for incorrect use of supported attributes.

           Additionally, using [1m-Wno-attributes=[22m, it is possible to suppress warnings about unknown scoped  attributes
           (in  C++11  and  C2X).   For  example,  [1m-Wno-attributes=vendor::attr  [22mdisables warning about the following
           declaration:

                   [[vendor::attr]] void f();

           It is also possible to disable warning about all attributes in a namespace using  [1m-Wno-attributes=vendor::[0m
           which prevents warning about both of these declarations:

                   [[vendor::safe]] void f();
                   [[vendor::unsafe]] void f2();

           Note that [1m-Wno-attributes= [22mdoes not imply [1m-Wno-attributes[22m.

       [1m-Wno-builtin-declaration-mismatch[0m
           Warn  if  a  built-in  function is declared with an incompatible signature or as a non-function, or when a
           built-in function declared with a type that does not include a prototype is called  with  arguments  whose
           promoted  types  do not match those expected by the function.  When [1m-Wextra [22mis specified, also warn when a
           built-in    function    that    takes    arguments    is    declared    without    a    prototype.     The
           [1m-Wbuiltin-declaration-mismatch  [22mwarning  is  enabled  by  default.   To  avoid  the  warning  include  the
           appropriate header to bring the prototypes of built-in functions into scope.

           For example, the call to "memset" below is diagnosed by the warning because the function expects  a  value
           of  type  "size_t"  as  its  argument  but  the type of 32 is "int".  With [1m-Wextra[22m, the declaration of the
           function is diagnosed as well.

                   extern void* memset ();
                   void f (void *d)
                   {
                     memset (d, '\0', 32);
                   }

       [1m-Wno-builtin-macro-redefined[0m
           Do not warn if certain built-in macros are  redefined.   This  suppresses  warnings  for  redefinition  of
           "__TIMESTAMP__", "__TIME__", "__DATE__", "__FILE__", and "__BASE_FILE__".

       [1m-Wstrict-prototypes [22m(C and Objective-C only)
           Warn  if  a function is declared or defined without specifying the argument types.  (An old-style function
           definition is permitted without a warning if preceded by a declaration that specifies the argument types.)

       [1m-Wold-style-declaration [22m(C and Objective-C only)
           Warn for obsolescent usages, according to the C Standard, in a declaration. For example, warn if  storage-
           class specifiers like "static" are not the first things in a declaration.  This warning is also enabled by
           [1m-Wextra[22m.

       [1m-Wold-style-definition [22m(C and Objective-C only)
           Warn  if  an  old-style  function  definition  is  used.   A  warning is given even if there is a previous
           prototype.  A definition using [1m() [22mis not considered an old-style definition in C2X  mode,  because  it  is
           equivalent to [1m(void) [22min that case, but is considered an old-style definition for older standards.

       [1m-Wmissing-parameter-type [22m(C and Objective-C only)
           A function parameter is declared without a type specifier in K&R-style functions:

                   void foo(bar) { }

           This warning is also enabled by [1m-Wextra[22m.

       [1m-Wmissing-prototypes [22m(C and Objective-C only)
           Warn  if  a  global  function is defined without a previous prototype declaration.  This warning is issued
           even if the definition itself provides a prototype.  Use this option to detect global  functions  that  do
           not  have a matching prototype declaration in a header file.  This option is not valid for C++ because all
           function declarations provide prototypes and a non-matching declaration declares an overload  rather  than
           conflict with an earlier declaration.  Use [1m-Wmissing-declarations [22mto detect missing declarations in C++.

       [1m-Wmissing-declarations[0m
           Warn  if a global function is defined without a previous declaration.  Do so even if the definition itself
           provides a prototype.  Use this option to detect global functions that are not declared in  header  files.
           In   C,   no   warnings   are   issued   for  functions  with  previous  non-prototype  declarations;  use
           [1m-Wmissing-prototypes [22mto detect missing prototypes.  In C++, no warnings are issued for function templates,
           or for inline functions, or for functions in anonymous namespaces.

       [1m-Wmissing-field-initializers[0m
           Warn if a structure's initializer has some fields missing.  For example, the following code causes such  a
           warning, because "x.h" is implicitly zero:

                   struct s { int f, g, h; };
                   struct s x = { 3, 4 };

           This  option does not warn about designated initializers, so the following modification does not trigger a
           warning:

                   struct s { int f, g, h; };
                   struct s x = { .f = 3, .g = 4 };

           In C this option does not warn about the universal zero initializer [1m{ 0 }[22m:

                   struct s { int f, g, h; };
                   struct s x = { 0 };

           Likewise, in C++ this option does not warn about the empty { } initializer, for example:

                   struct s { int f, g, h; };
                   s x = { };

           This warning is included in [1m-Wextra[22m.  To  get  other  [1m-Wextra  [22mwarnings  without  this  one,  use  [1m-Wextra[0m
           [1m-Wno-missing-field-initializers[22m.

       [1m-Wno-missing-requires[0m
           By default, the compiler warns about a concept-id appearing as a C++20 simple-requirement:

                   bool satisfied = requires { C<T> };

           Here  [1msatisfied  [22mwill  be  true if [1mC<T> [22mis a valid expression, which it is for all T.  Presumably the user
           meant to write

                   bool satisfied = requires { requires C<T> };

           so [1msatisfied [22mis only true if concept [1mC [22mis satisfied for type [1mT[22m.

           This warning can be disabled with [1m-Wno-missing-requires[22m.

       [1m-Wno-missing-template-keyword[0m
           The member access tokens ., -> and :: must be followed by the "template" keyword if the parent  object  is
           dependent and the member being named is a template.

                   template <class X>
                   void DoStuff (X x)
                   {
                     x.template DoSomeOtherStuff<X>(); // Good.
                     x.DoMoreStuff<X>(); // Warning, x is dependent.
                   }

           In  rare cases it is possible to get false positives. To silence this, wrap the expression in parentheses.
           For example, the following is treated as a template, even where m and N are integers:

                   void NotATemplate (my_class t)
                   {
                     int N = 5;

                     bool test = t.m < N > (0); // Treated as a template.
                     test = (t.m < N) > (0); // Same meaning, but not treated as a template.
                   }

           This warning can be disabled with [1m-Wno-missing-template-keyword[22m.

       [1m-Wno-multichar[0m
           Do not warn if a multicharacter constant ([1m'FOOF'[22m) is used.  Usually they indicate a  typo  in  the  user's
           code, as they have implementation-defined values, and should not be used in portable code.

       [1m-Wnormalized=[22m[[1mnone[22m|[1mid[22m|[1mnfc[22m|[1mnfkc[22m]
           In  ISO  C  and  ISO  C++,  two  identifiers  are different if they are different sequences of characters.
           However, sometimes when characters outside the basic ASCII character  set  are  used,  you  can  have  two
           different  character  sequences  that  look the same.  To avoid confusion, the ISO 10646 standard sets out
           some [4mnormalization[24m [4mrules[24m which when applied ensure that two sequences that look the same are  turned  into
           the  same  sequence.   GCC  can  warn you if you are using identifiers that have not been normalized; this
           option controls that warning.

           There are four levels of warning supported by GCC.  The default is [1m-Wnormalized=nfc[22m, which warns about any
           identifier that is not in the ISO 10646 "C" normalized form, [4mNFC[24m.  NFC is the recommended  form  for  most
           uses.  It is equivalent to [1m-Wnormalized[22m.

           Unfortunately,  there  are  some  characters allowed in identifiers by ISO C and ISO C++ that, when turned
           into NFC, are not allowed in identifiers.  That is, there's no way to use these symbols in portable ISO  C
           or C++ and have all your identifiers in NFC.  [1m-Wnormalized=id [22msuppresses the warning for these characters.
           It  is hoped that future versions of the standards involved will correct this, which is why this option is
           not the default.

           You can switch the warning off for all characters by writing [1m-Wnormalized=none  [22mor  [1m-Wno-normalized[22m.   You
           should only do this if you are using some other normalization scheme (like "D"), because otherwise you can
           easily create bugs that are literally impossible to see.

           Some  characters  in  ISO  10646  have  distinct  meanings  but  look  identical  in some fonts or display
           methodologies, especially once formatting has been applied.  For  instance  "\u207F",  "SUPERSCRIPT  LATIN
           SMALL  LETTER  N",  displays  just  like  a  regular "n" that has been placed in a superscript.  ISO 10646
           defines the [4mNFKC[24m normalization scheme to convert all these into a standard form as well, and GCC warns  if
           your  code is not in NFKC if you use [1m-Wnormalized=nfkc[22m.  This warning is comparable to warning about every
           identifier that contains the letter O because it might be confused with the digit 0, and  so  is  not  the
           default,  but may be useful as a local coding convention if the programming environment cannot be fixed to
           display these characters distinctly.

       [1m-Wno-attribute-warning[0m
           Do not warn about usage of functions declared with "warning"  attribute.   By  default,  this  warning  is
           enabled.  [1m-Wno-attribute-warning [22mcan be used to disable the warning or [1m-Wno-error=attribute-warning [22mcan be
           used to disable the error when compiled with [1m-Werror [22mflag.

       [1m-Wno-deprecated[0m
           Do not warn about usage of deprecated features.

       [1m-Wno-deprecated-declarations[0m
           Do  not  warn about uses of functions, variables, and types marked as deprecated by using the "deprecated"
           attribute.

       [1m-Wno-overflow[0m
           Do not warn about compile-time overflow in constant expressions.

       [1m-Wno-odr[0m
           Warn about One Definition Rule violations during link-time optimization.  Enabled by default.

       [1m-Wopenacc-parallelism[0m
           Warn about potentially suboptimal choices related to OpenACC parallelism.

       [1m-Wopenmp-simd[0m
           Warn  if  the  vectorizer  cost  model  overrides  the  OpenMP  simd   directive   set   by   user.    The
           [1m-fsimd-cost-model=unlimited [22moption can be used to relax the cost model.

       [1m-Woverride-init [22m(C and Objective-C only)
           Warn if an initialized field without side effects is overridden when using designated initializers.

           This  warning  is  included  in  [1m-Wextra[22m.   To  get  other  [1m-Wextra [22mwarnings without this one, use [1m-Wextra[0m
           [1m-Wno-override-init[22m.

       [1m-Wno-override-init-side-effects [22m(C and Objective-C only)
           Do not warn if an initialized field with side effects is overridden when  using  designated  initializers.
           This warning is enabled by default.

       [1m-Wpacked[0m
           Warn if a structure is given the packed attribute, but the packed attribute has no effect on the layout or
           size  of  the  structure.   Such  structures may be mis-aligned for little benefit.  For instance, in this
           code, the variable "f.x" in "struct bar" is misaligned even though "struct bar" does not itself  have  the
           packed attribute:

                   struct foo {
                     int x;
                     char a, b, c, d;
                   } __attribute__((packed));
                   struct bar {
                     char z;
                     struct foo f;
                   };

       [1m-Wnopacked-bitfield-compat[0m
           The  4.1,  4.2 and 4.3 series of GCC ignore the "packed" attribute on bit-fields of type "char".  This was
           fixed in GCC 4.4 but the change can lead to differences in the structure layout.  GCC informs you when the
           offset of such a field has changed in GCC 4.4.  For example there is no longer  a  4-bit  padding  between
           field "a" and "b" in this structure:

                   struct foo
                   {
                     char a:4;
                     char b:8;
                   } __attribute__ ((packed));

           This warning is enabled by default.  Use [1m-Wno-packed-bitfield-compat [22mto disable this warning.

       [1m-Wpacked-not-aligned [22m(C, C++, Objective-C and Objective-C++ only)
           Warn  if  a structure field with explicitly specified alignment in a packed struct or union is misaligned.
           For example, a warning will be issued on "struct S", like, "warning: alignment 1 of  'struct  S'  is  less
           than 8", in this code:

                   struct __attribute__ ((aligned (8))) S8 { char a[8]; };
                   struct __attribute__ ((packed)) S {
                     struct S8 s8;
                   };

           This warning is enabled by [1m-Wall[22m.

       [1m-Wpadded[0m
           Warn  if  padding  is included in a structure, either to align an element of the structure or to align the
           whole structure.  Sometimes when this happens it is possible to rearrange the fields of the  structure  to
           reduce the padding and so make the structure smaller.

       [1m-Wredundant-decls[0m
           Warn if anything is declared more than once in the same scope, even in cases where multiple declaration is
           valid and changes nothing.

       [1m-Wrestrict[0m
           Warn  when  an object referenced by a "restrict"-qualified parameter (or, in C++, a "__restrict"-qualified
           parameter) is aliased by another argument, or when copies between such objects overlap.  For example,  the
           call  to  the  "strcpy" function below attempts to truncate the string by replacing its initial characters
           with the last four.  However, because the call writes the terminating NUL into "a[4]", the copies  overlap
           and the call is diagnosed.

                   void foo (void)
                   {
                     char a[] = "abcd1234";
                     strcpy (a, a + 4);
                     ...
                   }

           The [1m-Wrestrict [22moption detects some instances of simple overlap even without optimization but works best at
           [1m-O2 [22mand above.  It is included in [1m-Wall[22m.

       [1m-Wnested-externs [22m(C and Objective-C only)
           Warn if an "extern" declaration is encountered within a function.

       [1m-Winline[0m
           Warn if a function that is declared as inline cannot be inlined.  Even with this option, the compiler does
           not warn about failures to inline functions declared in system headers.

           The  compiler uses a variety of heuristics to determine whether or not to inline a function.  For example,
           the compiler takes into account the size of the function being inlined and the amount of inlining that has
           already been done in the current function.  Therefore,  seemingly  insignificant  changes  in  the  source
           program can cause the warnings produced by [1m-Winline [22mto appear or disappear.

       [1m-Winterference-size[0m
           Warn  about  use  of C++17 "std::hardware_destructive_interference_size" without specifying its value with
           [1m--param destructive-interference-size[22m.  Also warn about questionable values for that option.

           This variable is intended to be used for controlling class layout, to avoid false  sharing  in  concurrent
           code:

                   struct independent_fields {
                     alignas(std::hardware_destructive_interference_size)
                       std::atomic<int> one;
                     alignas(std::hardware_destructive_interference_size)
                       std::atomic<int> two;
                   };

           Here  [1mone  [22mand  [1mtwo  [22mare  intended to be far enough apart that stores to one won't require accesses to the
           other to reload the cache line.

           By default, [1m--param destructive-interference-size [22mand [1m--param constructive-interference-size [22mare set based
           on the current [1m-mtune [22moption, typically to the L1 cache line size for the particular target CPU, sometimes
           to a range if tuning for a generic target.  So all translation units that depend on ABI compatibility  for
           the use of these variables must be compiled with the same [1m-mtune [22m(or [1m-mcpu[22m).

           If  ABI  stability  is important, such as if the use is in a header for a library, you should probably not
           use the hardware interference size variables at all.  Alternatively, you can force a particular value with
           [1m--param[22m.

           If you are confident that your use of the variable does not affect ABI outside  a  single  build  of  your
           project, you can turn off the warning with [1m-Wno-interference-size[22m.

       [1m-Wint-in-bool-context[0m
           Warn  for  suspicious  use  of  integer  values  where  boolean  values  are expected, such as conditional
           expressions (?:) using non-boolean integer constants in boolean context, like "if (a <= b ? 2 :  3)".   Or
           left  shifting  of signed integers in boolean context, like "for (a = 0; 1 << a; a++);".  Likewise for all
           kinds of multiplications regardless of the data type.  This warning is enabled by [1m-Wall[22m.

       [1m-Wno-int-to-pointer-cast[0m
           Suppress warnings from casts to pointer type of an integer of a different  size.  In  C++,  casting  to  a
           pointer type of smaller size is an error. [1mWint-to-pointer-cast [22mis enabled by default.

       [1m-Wno-pointer-to-int-cast [22m(C and Objective-C only)
           Suppress warnings from casts from a pointer to an integer type of a different size.

       [1m-Winvalid-pch[0m
           Warn if a precompiled header is found in the search path but cannot be used.

       [1m-Winvalid-utf8[0m
           Warn   if   an  invalid  UTF-8  character  is  found.   This  warning  is  on  by  default  for  C++23  if
           [1m-finput-charset=UTF-8 [22mis used and turned into error with [1m-pedantic-errors[22m.

       [1m-Wno-unicode[0m
           Don't diagnose invalid forms of delimited or named escape sequences which are treated as separate  tokens.
           [1mWunicode [22mis enabled by default.

       [1m-Wlong-long[0m
           Warn  if  "long  long" type is used.  This is enabled by either [1m-Wpedantic [22mor [1m-Wtraditional [22min ISO C90 and
           C++98 modes.  To inhibit the warning messages, use [1m-Wno-long-long[22m.

       [1m-Wvariadic-macros[0m
           Warn if variadic macros are used in ISO C90 mode, or if the GNU alternate syntax is used in ISO C99  mode.
           This   is  enabled  by  either  [1m-Wpedantic  [22mor  [1m-Wtraditional[22m.   To  inhibit  the  warning  messages,  use
           [1m-Wno-variadic-macros[22m.

       [1m-Wno-varargs[0m
           Do not warn upon questionable usage of the macros used  to  handle  variable  arguments  like  "va_start".
           These warnings are enabled by default.

       [1m-Wvector-operation-performance[0m
           Warn  if vector operation is not implemented via SIMD capabilities of the architecture.  Mainly useful for
           the performance tuning.  Vector operation can be implemented "piecewise",  which  means  that  the  scalar
           operation  is  performed  on every vector element; "in parallel", which means that the vector operation is
           implemented using scalars of wider type, which normally is more performance efficient; and  "as  a  single
           scalar", which means that vector fits into a scalar type.

       [1m-Wvla[0m
           Warn  if  a  variable-length  array  is used in the code.  [1m-Wno-vla [22mprevents the [1m-Wpedantic [22mwarning of the
           variable-length array.

       [1m-Wvla-larger-than=[4m[22mbyte-size[0m
           If this option is used, the compiler warns for declarations of variable-length arrays whose size is either
           unbounded, or bounded by an argument that allows the array  size  to  exceed  [4mbyte-size[24m  bytes.   This  is
           similar to how [1m-Walloca-larger-than=[4m[22mbyte-size[24m works, but with variable-length arrays.

           Note  that  GCC  may  optimize  small  variable-length  arrays of a known value into plain arrays, so this
           warning may not get triggered for such arrays.

           [1m-Wvla-larger-than=PTRDIFF_MAX [22mis enabled by default but is typically only  effective  when  [1m-ftree-vrp  [22mis
           active (default for [1m-O2 [22mand above).

           See also [1m-Walloca-larger-than=[4m[22mbyte-size[24m.

       [1m-Wno-vla-larger-than[0m
           Disable [1m-Wvla-larger-than= [22mwarnings.  The option is equivalent to [1m-Wvla-larger-than=SIZE_MAX [22mor larger.

       [1m-Wvla-parameter[0m
           Warn  about redeclarations of functions involving arguments of Variable Length Array types of inconsistent
           kinds or forms, and enable the detection of out-of-bounds accesses to such parameters by warnings such  as
           [1m-Warray-bounds[22m.

           If  the first function declaration uses the VLA form the bound specified in the array is assumed to be the
           minimum number of elements expected to be provided in calls to the function  and  the  maximum  number  of
           elements  accessed  by  it.   Failing  to  provide arguments of sufficient size or accessing more than the
           maximum number of elements may be diagnosed.

           For example, the warning triggers for the following redeclarations because the first one allows  an  array
           of  any size to be passed to "f" while the second one specifies that the array argument must have at least
           "n" elements.  In addition, calling "f" with the associated VLA bound parameter in excess  of  the  actual
           VLA bound triggers a warning as well.

                   void f (int n, int[n]);
                   // warning: argument 2 previously declared as a VLA
                   void f (int, int[]);

                   void g (int n)
                   {
                       if (n > 4)
                         return;
                       int a[n];
                       // warning: access to a by f may be out of bounds
                       f (sizeof a, a);
                     ...
                   }

           [1m-Wvla-parameter [22mis included in [1m-Wall[22m.  The [1m-Warray-parameter [22moption triggers warnings for similar problems
           involving ordinary array arguments.

       [1m-Wvolatile-register-var[0m
           Warn  if  a  register  variable  is  declared  volatile.   The  volatile  modifier  does  not  inhibit all
           optimizations that may eliminate reads and/or writes to register variables.  This warning  is  enabled  by
           [1m-Wall[22m.

       [1m-Wxor-used-as-pow [22m(C, C++, Objective-C and Objective-C++ only)
           Warn  about  uses  of  "^",  the  exclusive  or  operator, where it appears the user meant exponentiation.
           Specifically, the warning occurs when the left-hand side is the decimal constant 2 or 10  and  the  right-
           hand side is also a decimal constant.

           In  C  and  C++,  "^"  means  exclusive or, whereas in some other languages (e.g. TeX and some versions of
           BASIC) it means exponentiation.

           This warning is enabled by default.  It can be silenced by converting one of the operands to hexadecimal.

       [1m-Wdisabled-optimization[0m
           Warn if a requested optimization pass is disabled.  This warning does not generally indicate that there is
           anything wrong with your code; it merely indicates that GCC's optimizers are unable  to  handle  the  code
           effectively.   Often,  the  problem  is  that your code is too big or too complex; GCC refuses to optimize
           programs when the optimization itself is likely to take inordinate amounts of time.

       [1m-Wpointer-sign [22m(C and Objective-C only)
           Warn for pointer argument passing or assignment with different signedness.  This option is only  supported
           for  C  and  Objective-C.   It  is  implied  by  [1m-Wall  [22mand  by  [1m-Wpedantic[22m,  which  can  be disabled with
           [1m-Wno-pointer-sign[22m.

       [1m-Wstack-protector[0m
           This option is only active when [1m-fstack-protector [22mis active.   It  warns  about  functions  that  are  not
           protected against stack smashing.

       [1m-Woverlength-strings[0m
           Warn about string constants that are longer than the "minimum maximum" length specified in the C standard.
           Modern  compilers generally allow string constants that are much longer than the standard's minimum limit,
           but very portable programs should avoid using longer strings.

           The limit applies [4mafter[24m string constant concatenation, and does not count the trailing NUL.  In  C90,  the
           limit  was  509  characters;  in  C99,  it was raised to 4095.  C++98 does not specify a normative minimum
           maximum, so we do not diagnose overlength strings in C++.

           This option is implied by [1m-Wpedantic[22m, and can be disabled with [1m-Wno-overlength-strings[22m.

       [1m-Wunsuffixed-float-constants [22m(C and Objective-C only)
           Issue a warning for any floating  constant  that  does  not  have  a  suffix.   When  used  together  with
           [1m-Wsystem-headers  [22mit warns about such constants in system header files.  This can be useful when preparing
           code to use with the "FLOAT_CONST_DECIMAL64" pragma from the decimal floating-point extension to C99.

       [1m-Wno-lto-type-mismatch[0m
           During the link-time optimization, do not warn about type mismatches in global declarations from different
           compilation units.  Requires [1m-flto [22mto be enabled.  Enabled by default.

       [1m-Wno-designated-init [22m(C and Objective-C only)
           Suppress warnings when a positional initializer is used to initialize a structure  that  has  been  marked
           with the "designated_init" attribute.

   [1mOptions That Control Static Analysis[0m
       [1m-fanalyzer[0m
           This option enables an static analysis of program flow which looks for "interesting" interprocedural paths
           through the code, and issues warnings for problems found on them.

           This analysis is much more expensive than other GCC warnings.

           In  technical  terms,  it  performs  coverage-guided symbolic execution of the code being compiled.  It is
           neither sound nor complete: it can have false positives and false negatives.  It is  a  bug-finding  tool,
           rather than a tool for proving program correctness.

           The analyzer is only suitable for use on C code in this release.

           Enabling this option effectively enables the following warnings:

           [1m-Wanalyzer-allocation-size  -Wanalyzer-deref-before-check  -Wanalyzer-double-fclose -Wanalyzer-double-free[0m
           [1m-Wanalyzer-exposure-through-output-file                            -Wanalyzer-exposure-through-uninit-copy[0m
           [1m-Wanalyzer-fd-access-mode-mismatch              -Wanalyzer-fd-double-close              -Wanalyzer-fd-leak[0m
           [1m-Wanalyzer-fd-phase-mismatch           -Wanalyzer-fd-type-mismatch           -Wanalyzer-fd-use-after-close[0m
           [1m-Wanalyzer-fd-use-without-check              -Wanalyzer-file-leak              -Wanalyzer-free-of-non-heap[0m
           [1m-Wanalyzer-imprecise-fp-arithmetic       -Wanalyzer-infinite-recursion        -Wanalyzer-jump-through-null[0m
           [1m-Wanalyzer-malloc-leak             -Wanalyzer-mismatching-deallocation            -Wanalyzer-null-argument[0m
           [1m-Wanalyzer-null-dereference           -Wanalyzer-out-of-bounds           -Wanalyzer-possible-null-argument[0m
           [1m-Wanalyzer-possible-null-dereference     -Wanalyzer-putenv-of-auto-var     -Wanalyzer-shift-count-negative[0m
           [1m-Wanalyzer-shift-count-overflow                                             -Wanalyzer-stale-setjmp-buffer[0m
           [1m-Wanalyzer-unsafe-call-within-signal-handler                                     -Wanalyzer-use-after-free[0m
           [1m-Wanalyzer-use-of-pointer-in-stale-stack-frame                       -Wanalyzer-use-of-uninitialized-value[0m
           [1m-Wanalyzer-va-arg-type-mismatch            -Wanalyzer-va-list-exhausted            -Wanalyzer-va-list-leak[0m
           [1m-Wanalyzer-va-list-use-after-va-end -Wanalyzer-write-to-const -Wanalyzer-write-to-string-literal[0m

           This option is only available if GCC was configured with analyzer support enabled.

       [1m-Wanalyzer-too-complex[0m
           If [1m-fanalyzer [22mis enabled, the analyzer uses various heuristics to attempt to explore the control flow  and
           data flow in the program, but these can be defeated by sufficiently complicated code.

           By  default,  the analysis silently stops if the code is too complicated for the analyzer to fully explore
           and it reaches an internal limit.  The [1m-Wanalyzer-too-complex [22moption warns if this occurs.

       [1m-Wno-analyzer-allocation-size[0m
           This warning requires [1m-fanalyzer[22m, which enables it; to disable it, use [1m-Wno-analyzer-allocation-size[22m.

           This diagnostic warns for paths through the code in which a pointer to a buffer is assigned to point at  a
           buffer with a size that is not a multiple of "sizeof (*pointer)".

           See  CWE-131: Incorrect Calculation of Buffer Size ("https://cwe.mitre.org/data/definitions/131.html").

       [1m-Wno-analyzer-deref-before-check[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-deref-before-check [22mto disable it.

           This  diagnostic  warns for paths through the code in which a pointer is checked for "NULL" *after* it has
           already been dereferenced, suggesting that the pointer could have been NULL.  Such cases suggest that  the
           check for NULL is either redundant, or that it needs to be moved to before the pointer is dereferenced.

           This diagnostic also considers values passed to a function argument marked with "__attribute__((nonnull))"
           as  requiring  a  non-NULL  value,  and  thus  will  complain  if such values are checked for "NULL" after
           returning from such a function call.

           This diagnostic is unlikely  to  be  reported  when  any  level  of  optimization  is  enabled,  as  GCC's
           optimization logic will typically consider such checks for NULL as being redundant, and optimize them away
           before  the  analyzer  "sees" them.  Hence optimization should be disabled when attempting to trigger this
           diagnostic.

       [1m-Wno-analyzer-double-fclose[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-double-fclose [22mto disable it.

           This diagnostic warns for paths through the code in which a "FILE *" can have "fclose" called on  it  more
           than once.

           See        CWE-1341:       Multiple       Releases       of       Same       Resource       or      Handle
           ("https://cwe.mitre.org/data/definitions/1341.html").

       [1m-Wno-analyzer-double-free[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-double-free [22mto disable it.

           This diagnostic warns for paths through the code in which a pointer can have a deallocator  called  on  it
           more than once, either "free", or a deallocator referenced by attribute "malloc".

           See  CWE-415: Double Free ("https://cwe.mitre.org/data/definitions/415.html").

       [1m-Wno-analyzer-exposure-through-output-file[0m
           This  warning  requires  [1m-fanalyzer[22m,  which  enables it; use [1m-Wno-analyzer-exposure-through-output-file [22mto
           disable it.

           This diagnostic warns for paths through the code in which a security-sensitive  value  is  written  to  an
           output file (such as writing a password to a log file).

           See  CWE-532: Information Exposure Through Log Files ("https://cwe.mitre.org/data/definitions/532.html").

       [1m-Wanalyzer-exposure-through-uninit-copy[0m
           This  warning  requires both [1m-fanalyzer [22mand the use of a plugin to specify a function that copies across a
           "trust boundary".  Use [1m-Wno-analyzer-exposure-through-uninit-copy [22mto disable it.

           This diagnostic warns for "infoleaks" - paths through the code in which uninitialized  values  are  copied
           across a security boundary (such as code within an OS kernel that copies a partially-initialized struct on
           the stack to user space).

           See      CWE-200:     Exposure     of     Sensitive     Information     to     an    Unauthorized    Actor
           ("https://cwe.mitre.org/data/definitions/200.html").

       [1m-Wno-analyzer-fd-access-mode-mismatch[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-fd-access-mode-mismatch  [22mto  disable
           it.

           This  diagnostic  warns  for  paths  through  code  in  which  a "read" on a write-only file descriptor is
           attempted, or vice versa.

           This diagnostic also warns for code paths in a which a function with attribute "fd_arg_read (N)" is called
           with a file descriptor opened with "O_WRONLY" at referenced argument "N"  or  a  function  with  attribute
           "fd_arg_write (N)" is called with a file descriptor opened with "O_RDONLY" at referenced argument [4mN[24m.

       [1m-Wno-analyzer-fd-double-close[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-fd-double-close [22mto disable it.

           This diagnostic warns for paths through code in which a file descriptor can be closed more than once.

           See        CWE-1341:       Multiple       Releases       of       Same       Resource       or      Handle
           ("https://cwe.mitre.org/data/definitions/1341.html").

       [1m-Wno-analyzer-fd-leak[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-fd-leak [22mto disable it.

           This diagnostic warns for paths through code in which an open file descriptor is leaked.

           See    CWE-775:   Missing   Release   of   File   Descriptor   or   Handle   after   Effective    Lifetime
           ("https://cwe.mitre.org/data/definitions/775.html").

       [1m-Wno-analyzer-fd-phase-mismatch[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-fd-phase-mismatch [22mto disable it.

           This  diagnostic  warns  for paths through code in which an operation is attempted in the wrong phase of a
           file descriptor's lifetime.  For example, it will warn on attempts to call "accept"  on  a  stream  socket
           that has not yet had "listen" successfully called on it.

           See       CWE-666:      Operation      on      Resource      in      Wrong      Phase      of     Lifetime
           ("https://cwe.mitre.org/data/definitions/666.html").

       [1m-Wno-analyzer-fd-type-mismatch[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-fd-type-mismatch [22mto disable it.

           This diagnostic warns for paths through code in which an operation is attempted on the wrong type of  file
           descriptor.   For example, it will warn on attempts to use socket operations on a file descriptor obtained
           via "open", or when attempting to use a stream socket operation on a datagram socket.

       [1m-Wno-analyzer-fd-use-after-close[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-fd-use-after-close [22mto disable it.

           This diagnostic warns for paths through code in which  a  read  or  write  is  called  on  a  closed  file
           descriptor.

           This  diagnostic  also  warns  for  paths  through code in which a function with attribute "fd_arg (N)" or
           "fd_arg_read (N)" or "fd_arg_write (N)" is called with a closed file  descriptor  at  referenced  argument
           "N".

       [1m-Wno-analyzer-fd-use-without-check[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-fd-use-without-check [22mto disable it.

           This  diagnostic warns for paths through code in which a file descriptor is used without being checked for
           validity.

           This diagnostic also warns for paths through code in which a  function  with  attribute  "fd_arg  (N)"  or
           "fd_arg_read  (N)"  or  "fd_arg_write  (N)"  is called with a file descriptor, at referenced argument "N",
           without being checked for validity.

       [1m-Wno-analyzer-file-leak[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-file-leak [22mto disable it.

           This diagnostic warns for paths through the code in which a "<stdio.h>" "FILE *" stream object is leaked.

           See    CWE-775:   Missing   Release   of   File   Descriptor   or   Handle   after   Effective    Lifetime
           ("https://cwe.mitre.org/data/definitions/775.html").

       [1m-Wno-analyzer-free-of-non-heap[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-free-of-non-heap [22mto disable it.

           This  diagnostic warns for paths through the code in which "free" is called on a non-heap pointer (e.g. an
           on-stack buffer, or a global).

           See  CWE-590: Free of Memory not on the Heap ("https://cwe.mitre.org/data/definitions/590.html").

       [1m-Wno-analyzer-imprecise-fp-arithmetic[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-imprecise-fp-arithmetic  [22mto  disable
           it.

           This  diagnostic  warns for paths through the code in which floating-point arithmetic is used in locations
           where precise computation is needed.  This diagnostic only warns on use of floating-point operands  inside
           the calculation of an allocation size at the moment.

       [1m-Wno-analyzer-infinite-recursion[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-infinite-recursion [22mto disable it.

           This diagnostics warns for paths through the code which appear to lead to infinite recursion.

           Specifically,  when the analyzer "sees" a recursive call, it will compare the state of memory at the entry
           to the new frame with that at the entry to the previous frame of that function on the stack.  The  warning
           is  issued  if nothing in memory appears to be changing; any changes observed to parameters or globals are
           assumed to lead to termination of the recursion and thus suppress the warning.

           This diagnostic is likely to miss cases of infinite recursion  that  are  convered  to  iteration  by  the
           optimizer  before  the  analyzer  "sees"  them.   Hence optimization should be disabled when attempting to
           trigger this diagnostic.

           Compare with [1m-Winfinite-recursion[22m, which provides a similar diagnostic, but is implemented in a  different
           way.

       [1m-Wno-analyzer-jump-through-null[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-jump-through-null [22mto disable it.

           This diagnostic warns for paths through the code in which a "NULL" function pointer is called.

       [1m-Wno-analyzer-malloc-leak[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-malloc-leak [22mto disable it.

           This  diagnostic warns for paths through the code in which a pointer allocated via an allocator is leaked:
           either "malloc", or a function marked with attribute "malloc".

           See       CWE-401:      Missing      Release      of      Memory      after       Effective       Lifetime
           ("https://cwe.mitre.org/data/definitions/401.html").

       [1m-Wno-analyzer-mismatching-deallocation[0m
           This  warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-mismatching-deallocation [22mto disable
           it.

           This diagnostic warns for paths through the code in which the wrong deallocation function is called  on  a
           pointer  value,  based on which function was used to allocate the pointer value.  The diagnostic will warn
           about  mismatches  between  "free",  scalar  "delete"  and  vector  "delete[]",  and   those   marked   as
           allocator/deallocator pairs using attribute "malloc".

           See  CWE-762: Mismatched Memory Management Routines ("https://cwe.mitre.org/data/definitions/762.html").

       [1m-Wno-analyzer-out-of-bounds[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-out-of-bounds [22mto disable it.

           This  diagnostic  warns for paths through the code in which a buffer is definitely read or written out-of-
           bounds.  The diagnostic applies for cases where the analyzer is able to determine a  constant  offset  and
           for  accesses  past  the  end of a buffer, also a constant capacity.  Further, the diagnostic does limited
           checking for accesses past the end when the offset as well as the capacity is symbolic.

           See   CWE-119:  Improper  Restriction   of   Operations   within   the   Bounds   of   a   Memory   Buffer
           ("https://cwe.mitre.org/data/definitions/119.html").

       [1m-Wno-analyzer-possible-null-argument[0m
           This  warning  requires  [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-possible-null-argument [22mto disable
           it.

           This diagnostic warns for paths through the code in which a possibly-NULL value is passed  to  a  function
           argument marked with "__attribute__((nonnull))" as requiring a non-NULL value.

           See        CWE-690:       Unchecked      Return      Value      to      NULL      Pointer      Dereference
           ("https://cwe.mitre.org/data/definitions/690.html").

       [1m-Wno-analyzer-possible-null-dereference[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-possible-null-dereference [22mto disable
           it.

           This diagnostic warns for paths through the code in which a possibly-NULL value is dereferenced.

           See       CWE-690:      Unchecked      Return      Value      to      NULL       Pointer       Dereference
           ("https://cwe.mitre.org/data/definitions/690.html").

       [1m-Wno-analyzer-null-argument[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-null-argument [22mto disable it.

           This diagnostic warns for paths through the code in which a value known to be NULL is passed to a function
           argument marked with "__attribute__((nonnull))" as requiring a non-NULL value.

           See  CWE-476: NULL Pointer Dereference ("https://cwe.mitre.org/data/definitions/476.html").

       [1m-Wno-analyzer-null-dereference[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-null-dereference [22mto disable it.

           This diagnostic warns for paths through the code in which a value known to be NULL is dereferenced.

           See  CWE-476: NULL Pointer Dereference ("https://cwe.mitre.org/data/definitions/476.html").

       [1m-Wno-analyzer-putenv-of-auto-var[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-putenv-of-auto-var [22mto disable it.

           This  diagnostic  warns  for  paths through the code in which a call to "putenv" is passed a pointer to an
           automatic variable or an on-stack buffer.

           See   POS34-C.  Do  not  call  [1mputenv()  [22mwith  a  pointer  to  an  automatic  variable  as  the   argument
           ("https://wiki.sei.cmu.edu/confluence/x/6NYxBQ").

       [1m-Wno-analyzer-shift-count-negative[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-shift-count-negative [22mto disable it.

           This  diagnostic warns for paths through the code in which a shift is attempted with a negative count.  It
           is analogous to the [1m-Wshift-count-negative  [22mdiagnostic  implemented  in  the  C/C++  front  ends,  but  is
           implemented  based  on  analyzing  interprocedural  paths,  rather  than  merely  parsing the syntax tree.
           However, the analyzer does not prioritize detection of such paths, so  false  negatives  are  more  likely
           relative to other warnings.

       [1m-Wno-analyzer-shift-count-overflow[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-shift-count-overflow [22mto disable it.

           This  diagnostic  warns for paths through the code in which a shift is attempted with a count greater than
           or equal to the precision of the operand's type.  It is analogous to the [1m-Wshift-count-overflow [22mdiagnostic
           implemented in the C/C++ front ends, but is implemented based on analyzing interprocedural  paths,  rather
           than  merely  parsing the syntax tree.  However, the analyzer does not prioritize detection of such paths,
           so false negatives are more likely relative to other warnings.

       [1m-Wno-analyzer-stale-setjmp-buffer[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-stale-setjmp-buffer [22mto disable it.

           This diagnostic warns for paths through the code in which "longjmp" is called to  rewind  to  a  "jmp_buf"
           relating to a "setjmp" call in a function that has returned.

           When "setjmp" is called on a "jmp_buf" to record a rewind location, it records the stack frame.  The stack
           frame  becomes invalid when the function containing the "setjmp" call returns.  Attempting to rewind to it
           via "longjmp" would reference a stack frame that no longer exists, and likely lead to a crash (or worse).

       [1m-Wno-analyzer-tainted-allocation-size[0m
           This   warning   requires   both   [1m-fanalyzer   [22mand   [1m-fanalyzer-checker=taint   [22mto   enable    it;    use
           [1m-Wno-analyzer-tainted-allocation-size [22mto disable it.

           This  diagnostic  warns  for  paths  through  the  code in which a value that could be under an attacker's
           control is used as the size of an allocation without being sanitized, so that an attacker could inject  an
           excessively large allocation and potentially cause a denial of service attack.

           See         CWE-789:        Memory        Allocation        with        Excessive        Size        Value
           ("https://cwe.mitre.org/data/definitions/789.html").

       [1m-Wno-analyzer-tainted-assertion[0m
           This   warning   requires   both   [1m-fanalyzer   [22mand   [1m-fanalyzer-checker=taint   [22mto   enable    it;    use
           [1m-Wno-analyzer-tainted-assertion [22mto disable it.

           This  diagnostic  warns  for  paths  through  the  code in which a value that could be under an attacker's
           control is used as part of a condition without being first sanitized, and that condition guards a call  to
           a  function  marked  with  attribute  "noreturn"  (such  as  the  function "__builtin_unreachable").  Such
           functions typically indicate abnormal termination of the program, such as for assertion failure  handlers.
           For example:

                   assert (some_tainted_value < SOME_LIMIT);

           In such cases:

           *   when  assertion-checking  is  enabled:  an  attacker could trigger a denial of service by injecting an
               assertion failure

           *   when assertion-checking is disabled, such as by defining "NDEBUG", an attacker could inject data  that
               subverts the process, since it presumably violates a precondition that is being assumed by the code.

           Note  that  when  assertion-checking is disabled, the assertions are typically removed by the preprocessor
           before the analyzer has a chance to "see" them, so this diagnostic can only generate warnings on builds in
           which assertion-checking is enabled.

           For the purpose of this warning, any function marked with attribute "noreturn" is considered as a possible
           assertion failure handler, including "__builtin_unreachable".  Note that  these  functions  are  sometimes
           removed  by  the  optimizer  before  the analyzer "sees" them.  Hence optimization should be disabled when
           attempting to trigger this diagnostic.

           See  CWE-617: Reachable Assertion ("https://cwe.mitre.org/data/definitions/617.html").

           The warning can also report problematic constructions such as

                   switch (some_tainted_value) {
                   case 0:
                     /* [...etc; various valid cases omitted...] */
                     break;

                   default:
                     __builtin_unreachable (); /* BUG: attacker can trigger this  */
                   }

           despite the above not being an assertion failure, strictly speaking.

       [1m-Wno-analyzer-tainted-array-index[0m
           This   warning   requires   both   [1m-fanalyzer   [22mand   [1m-fanalyzer-checker=taint   [22mto   enable    it;    use
           [1m-Wno-analyzer-tainted-array-index [22mto disable it.

           This  diagnostic  warns  for  paths  through  the  code in which a value that could be under an attacker's
           control is used as the index of an array access without being sanitized, so that an attacker could  inject
           an out-of-bounds access.

           See  CWE-129: Improper Validation of Array Index ("https://cwe.mitre.org/data/definitions/129.html").

       [1m-Wno-analyzer-tainted-divisor[0m
           This    warning    requires   both   [1m-fanalyzer   [22mand   [1m-fanalyzer-checker=taint   [22mto   enable   it;   use
           [1m-Wno-analyzer-tainted-divisor [22mto disable it.

           This diagnostic warns for paths through the code in which a  value  that  could  be  under  an  attacker's
           control  is  used  as  the  divisor in a division or modulus operation without being sanitized, so that an
           attacker could inject a division-by-zero.

           See  CWE-369: Divide By Zero ("https://cwe.mitre.org/data/definitions/369.html").

       [1m-Wno-analyzer-tainted-offset[0m
           This   warning   requires   both   [1m-fanalyzer   [22mand   [1m-fanalyzer-checker=taint   [22mto   enable    it;    use
           [1m-Wno-analyzer-tainted-offset [22mto disable it.

           This  diagnostic  warns  for  paths  through  the  code in which a value that could be under an attacker's
           control is used as a pointer offset without being sanitized, so that an attacker could inject  an  out-of-
           bounds access.

           See  CWE-823: Use of Out-of-range Pointer Offset ("https://cwe.mitre.org/data/definitions/823.html").

       [1m-Wno-analyzer-tainted-size[0m
           This    warning    requires   both   [1m-fanalyzer   [22mand   [1m-fanalyzer-checker=taint   [22mto   enable   it;   use
           [1m-Wno-analyzer-tainted-size [22mto disable it.

           This diagnostic warns for paths through the code in which a  value  that  could  be  under  an  attacker's
           control  is used as the size of an operation such as "memset" without being sanitized, so that an attacker
           could inject an out-of-bounds access.

           See  CWE-129: Improper Validation of Array Index ("https://cwe.mitre.org/data/definitions/129.html").

       [1m-Wno-analyzer-unsafe-call-within-signal-handler[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-unsafe-call-within-signal-handler [22mto
           disable it.

           This diagnostic warns for paths through the code in which a function known to be async-signal-unsafe (such
           as "fprintf") is called from a signal handler.

           See       CWE-479:      Signal       Handler       Use       of       a       Non-reentrant       Function
           ("https://cwe.mitre.org/data/definitions/479.html").

       [1m-Wno-analyzer-use-after-free[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-use-after-free [22mto disable it.

           This  diagnostic warns for paths through the code in which a pointer is used after a deallocator is called
           on it: either "free", or a deallocator referenced by attribute "malloc".

           See  CWE-416: Use After Free ("https://cwe.mitre.org/data/definitions/416.html").

       [1m-Wno-analyzer-use-of-pointer-in-stale-stack-frame[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use  [1m-Wno-analyzer-use-of-pointer-in-stale-stack-frame[0m
           to disable it.

           This  diagnostic  warns  for  paths  through  the code in which a pointer is dereferenced that points to a
           variable in a stale stack frame.

       [1m-Wno-analyzer-va-arg-type-mismatch[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-va-arg-type-mismatch [22mto disable it.

           This diagnostic warns for interprocedural paths through the code for which the analyzer detects an attempt
           to use "va_arg" to extract a value passed to a variadic call, but uses a type that does not match that  of
           the expression passed to the call.

           See          CWE-686:        Function        Call        With        Incorrect        Argument        Type
           ("https://cwe.mitre.org/data/definitions/686.html").

       [1m-Wno-analyzer-va-list-exhausted[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-va-list-exhausted [22mto disable it.

           This diagnostic warns for interprocedural paths through the code for which the analyzer detects an attempt
           to use "va_arg" to access the next value passed to a variadic call, but all of the values in the "va_list"
           have already been consumed.

           See       CWE-685:      Function      Call      With       Incorrect       Number       of       Arguments
           ("https://cwe.mitre.org/data/definitions/685.html").

       [1m-Wno-analyzer-va-list-leak[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-va-list-leak [22mto disable it.

           This  diagnostic  warns  for  interprocedural  paths  through the code for which the analyzer detects that
           "va_start" or "va_copy" has been called on a "va_list" without a corresponding call to "va_end".

       [1m-Wno-analyzer-va-list-use-after-va-end[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-va-list-use-after-va-end [22mto  disable
           it.

           This diagnostic warns for interprocedural paths through the code for which the analyzer detects an attempt
           to use a "va_list"  after "va_end" has been called on it.  "va_list".

       [1m-Wno-analyzer-write-to-const[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-write-to-const [22mto disable it.

           This diagnostic warns for paths through the code in which the analyzer detects an attempt to write through
           a  pointer  to  a  "const"  object.  However, the analyzer does not prioritize detection of such paths, so
           false negatives are more likely relative to other warnings.

       [1m-Wno-analyzer-write-to-string-literal[0m
           This warning requires [1m-fanalyzer[22m, which enables it; use [1m-Wno-analyzer-write-to-string-literal  [22mto  disable
           it.

           This diagnostic warns for paths through the code in which the analyzer detects an attempt to write through
           a  pointer  to  a  string  literal.  However, the analyzer does not prioritize detection of such paths, so
           false negatives are more likely relative to other warnings.

       [1m-Wno-analyzer-use-of-uninitialized-value[0m
           This warning requires  [1m-fanalyzer[22m,  which  enables  it;  use  [1m-Wno-analyzer-use-of-uninitialized-value  [22mto
           disable it.

           This diagnostic warns for paths through the code in which an uninitialized value is used.

           See  CWE-457: Use of Uninitialized Variable ("https://cwe.mitre.org/data/definitions/457.html").

       The analyzer has hardcoded knowledge about the behavior of the following memory-management functions:

       *<"alloca">
       *<The built-in functions "__builtin_alloc",>
           "__builtin_alloc_with_align",     @item    "__builtin_calloc",    "__builtin_free",    "__builtin_malloc",
           "__builtin_memcpy",       "__builtin_memcpy_chk",       "__builtin_memset",        "__builtin_memset_chk",
           "__builtin_realloc", "__builtin_stack_restore", and "__builtin_stack_save"

       *<"calloc">
       *<"free">
       *<"malloc">
       *<"memset">
       *<"operator delete">
       *<"operator delete []">
       *<"operator new">
       *<"operator new []">
       *<"realloc">
       *<"strdup">
       *<"strndup">

       of the following functions for working with file descriptors:

       *<"open">
       *<"close">
       *<"creat">
       *<"dup", "dup2" and "dup3">
       *<"isatty">
       *<"pipe", and "pipe2">
       *<"read">
       *<"write">
       *<"socket", "bind", "listen", "accept", and "connect">

       of the following functions for working with "<stdio.h>" streams:

       *<The built-in functions "__builtin_fprintf",>
           "__builtin_fprintf_unlocked",     "__builtin_fputc",     "__builtin_fputc_unlocked",    "__builtin_fputs",
           "__builtin_fputs_unlocked",    "__builtin_fwrite",    "__builtin_fwrite_unlocked",     "__builtin_printf",
           "__builtin_printf_unlocked",    "__builtin_putc",    "__builtin_putchar",    "__builtin_putchar_unlocked",
           "__builtin_putc_unlocked",   "__builtin_puts",   "__builtin_puts_unlocked",   "__builtin_vfprintf",    and
           "__builtin_vprintf"

       *<"fopen">
       *<"fclose">
       *<"ferror">
       *<"fgets">
       *<"fgets_unlocked">
       *<"fileno">
       *<"fread">
       *<"getc">
       *<"getchar">
       *<"fprintf">
       *<"printf">
       *<"fwrite">

       and of the following functions:

       *<The built-in functions "__builtin_expect",>
           "__builtin_expect_with_probability",   "__builtin_strchr",   "__builtin_strcpy",   "__builtin_strcpy_chk",
           "__builtin_strlen", "__builtin_va_copy", and "__builtin_va_start"

       *<The GNU extensions "error" and "error_at_line">
       *<"getpass">
       *<"longjmp">
       *<"putenv">
       *<"setjmp">
       *<"siglongjmp">
       *<"signal">
       *<"sigsetjmp">
       *<"strchr">
       *<"strlen">

       In addition, various functions with an "__analyzer_" prefix have special meaning to the analyzer, described in
       the GCC Internals manual.

       Pertinent parameters for controlling the exploration are:

       *<[1m--param analyzer-bb-explosion-factor=[4m[22mvalue[24m>
       *<[1m--param analyzer-max-enodes-per-program-point=[4m[22mvalue[24m>
       *<[1m--param analyzer-max-recursion-depth=[4m[22mvalue[24m>
       *<[1m--param analyzer-min-snodes-for-call-summary=[4m[22mvalue[24m>

       The following options control the analyzer.

       [1m-fanalyzer-call-summaries[0m
           Simplify interprocedural analysis by computing the effect of certain  calls,  rather  than  exploring  all
           paths through the function from callsite to each possible return.

           If  enabled,  call  summaries  are  only  used  for  functions  with more than one call site, and that are
           sufficiently complicated (as per [1m--param analyzer-min-snodes-for-call-summary=[4m[22mvalue[24m).

       [1m-fanalyzer-checker=[4m[22mname[0m
           Restrict the analyzer to run just the named checker, and enable it.

           Some checkers are disabled by default (even with [1m-fanalyzer[22m), such as the "taint" checker that  implements
           [1m-Wanalyzer-tainted-array-index[22m, and this option is required to enable them.

           [4mNote:[24m currently, [1m-fanalyzer-checker=taint [22mdisables the following warnings from [1m-fanalyzer[22m:

           [1m-Wanalyzer-deref-before-check                -Wanalyzer-double-fclose               -Wanalyzer-double-free[0m
           [1m-Wanalyzer-exposure-through-output-file   -Wanalyzer-fd-access-mode-mismatch    -Wanalyzer-fd-double-close[0m
           [1m-Wanalyzer-fd-leak   -Wanalyzer-fd-use-after-close   -Wanalyzer-fd-use-without-check  -Wanalyzer-file-leak[0m
           [1m-Wanalyzer-free-of-non-heap           -Wanalyzer-malloc-leak           -Wanalyzer-mismatching-deallocation[0m
           [1m-Wanalyzer-null-argument           -Wanalyzer-null-dereference           -Wanalyzer-possible-null-argument[0m
           [1m-Wanalyzer-possible-null-dereference                          -Wanalyzer-unsafe-call-within-signal-handler[0m
           [1m-Wanalyzer-use-after-free -Wanalyzer-va-list-leak -Wanalyzer-va-list-use-after-va-end[0m

       [1m-fno-analyzer-feasibility[0m
           This option is intended for analyzer developers.

           By  default the analyzer verifies that there is a feasible control flow path for each diagnostic it emits:
           that the conditions that hold are not mutually exclusive.  Diagnostics for which no feasible path  can  be
           found are rejected.  This filtering can be suppressed with [1m-fno-analyzer-feasibility[22m, for debugging issues
           in this code.

       [1m-fanalyzer-fine-grained[0m
           This option is intended for analyzer developers.

           Internally  the  analyzer  builds  an  "exploded  graph"  that combines control flow graphs with data flow
           information.

           By default, an edge in this graph can contain the effects of a run of multiple statements within  a  basic
           block.  With [1m-fanalyzer-fine-grained[22m, each statement gets its own edge.

       [1m-fanalyzer-show-duplicate-count[0m
           This  option  is  intended  for  analyzer  developers: if multiple diagnostics have been detected as being
           duplicates of each other, it emits a note when  reporting  the  best  diagnostic,  giving  the  number  of
           additional diagnostics that were suppressed by the deduplication logic.

       [1m-fno-analyzer-state-merge[0m
           This option is intended for analyzer developers.

           By  default  the  analyzer  attempts  to  simplify analysis by merging sufficiently similar states at each
           program point as it builds its "exploded graph".   With  [1m-fno-analyzer-state-merge  [22mthis  merging  can  be
           suppressed, for debugging state-handling issues.

       [1m-fno-analyzer-state-purge[0m
           This option is intended for analyzer developers.

           By  default the analyzer attempts to simplify analysis by purging aspects of state at a program point that
           appear to no longer be relevant e.g. the values of locals that aren't accessed later in the  function  and
           which aren't relevant to leak analysis.

           With  [1m-fno-analyzer-state-purge  [22mthis  purging  of  state  can be suppressed, for debugging state-handling
           issues.

       [1m-fno-analyzer-suppress-followups[0m
           This option is intended for analyzer developers.

           By default the analyzer will stop exploring an execution path after encountering certain  diagnostics,  in
           order to avoid potentially issuing a cascade of follow-up diagnostics.

           The diagnostics that terminate analysis along a path are:

           *<[1m-Wanalyzer-null-argument[22m>
           *<[1m-Wanalyzer-null-dereference[22m>
           *<[1m-Wanalyzer-use-after-free[22m>
           *<[1m-Wanalyzer-use-of-pointer-in-stale-stack-frame[22m>
           *<[1m-Wanalyzer-use-of-uninitialized-value[22m>

           With  [1m-fno-analyzer-suppress-followups  [22mthe  analyzer  will continue to explore such paths even after such
           diagnostics, which may be helpful for debugging  issues  in  the  analyzer,  or  for  microbenchmarks  for
           detecting undefined behavior.

       [1m-fanalyzer-transitivity[0m
           This option enables transitivity of constraints within the analyzer.

       [1m-fno-analyzer-undo-inlining[0m
           This option is intended for analyzer developers.

           [1m-fanalyzer [22mruns relatively late compared to other code analysis tools, and some optimizations have already
           been  applied  to  the  code.   In  particular  function  inlining  may  have  occurred,  leading  to  the
           interprocedural execution paths emitted by the analyzer containing function frames that  don't  correspond
           to those in the original source code.

           By  default  the analyzer attempts to reconstruct the original function frames, and to emit events showing
           the inlined calls.

           With [1m-fno-analyzer-undo-inlining [22mthis attempt to reconstruct the original  frame  information  can  be  be
           disabled, which may be of help when debugging issues in the analyzer.

       [1m-fanalyzer-verbose-edges[0m
           This  option  is  intended  for  analyzer  developers.  It enables more verbose, lower-level detail in the
           descriptions of control flow within diagnostic paths.

       [1m-fanalyzer-verbose-state-changes[0m
           This option is intended for analyzer developers.  It enables  more  verbose,  lower-level  detail  in  the
           descriptions of events relating to state machines within diagnostic paths.

       [1m-fanalyzer-verbosity=[4m[22mlevel[0m
           This option controls the complexity of the control flow paths that are emitted for analyzer diagnostics.

           The [4mlevel[24m can be one of:

           [1m0   [22mAt  this  level,  interprocedural  call and return events are displayed, along with the most pertinent
               state-change events relating to a diagnostic.  For example, for a double-"free" diagnostic, both calls
               to "free" will be shown.

           [1m1   [22mAs per the previous level, but also show events for the entry to each function.

           [1m2   [22mAs per the previous level, but also show events relating to  control  flow  that  are  significant  to
               triggering the issue (e.g. "true path taken" at a conditional).

               This level is the default.

           [1m3   [22mAs per the previous level, but show all control flow events, not just significant ones.

           [1m4   [22mThis  level  is  intended for analyzer developers; it adds various other events intended for debugging
               the analyzer.

       [1m-fdump-analyzer[0m
           Dump internal details about what the  analyzer  is  doing  to  [4mfile.analyzer.txt[24m.   [1m-fdump-analyzer-stderr[0m
           overrides this option.

       [1m-fdump-analyzer-stderr[0m
           Dump internal details about what the analyzer is doing to stderr.  This option overrides [1m-fdump-analyzer[22m.

       [1m-fdump-analyzer-callgraph[0m
           Dump a representation of the call graph suitable for viewing with GraphViz to [4mfile.callgraph.dot[24m.

       [1m-fdump-analyzer-exploded-graph[0m
           Dump  a  representation  of the "exploded graph" suitable for viewing with GraphViz to [4mfile.eg.dot[24m.  Nodes
           are color-coded based on state-machine states to emphasize state changes.

       [1m-fdump-analyzer-exploded-nodes[0m
           Emit diagnostics showing where nodes in the "exploded graph" are in relation to the program source.

       [1m-fdump-analyzer-exploded-nodes-2[0m
           Dump a textual representation of the "exploded graph" to [4mfile.eg.txt[24m.

       [1m-fdump-analyzer-exploded-nodes-3[0m
           Dump a textual representation of the "exploded graph" to one dump file per node, to [4mfile.eg-id.txt[24m.   This
           is typically a large number of dump files.

       [1m-fdump-analyzer-exploded-paths[0m
           Dump a textual representation of the "exploded path" for each diagnostic to [4mfile.idx.kind.epath.txt[24m.

       [1m-fdump-analyzer-feasibility[0m
           Dump  internal  details about the analyzer's search for feasible paths.  The details are written in a form
           suitable  for  viewing  with  GraphViz  to  filenames  of  the  form  [4mfile.*.fg.dot[24m,  [4mfile.*.tg.dot[24m,   and
           [4mfile.*.fpath.txt[24m.

       [1m-fdump-analyzer-json[0m
           Dump  a compressed JSON representation of analyzer internals to [4mfile.analyzer.json.gz[24m.  The precise format
           is subject to change.

       [1m-fdump-analyzer-state-purge[0m
           As per [1m-fdump-analyzer-supergraph[22m, dump a representation of the "supergraph"  suitable  for  viewing  with
           GraphViz, but annotate the graph with information on what state will be purged at each node.  The graph is
           written to [4mfile.state-purge.dot[24m.

       [1m-fdump-analyzer-supergraph[0m
           Dump  representations of the "supergraph" suitable for viewing with GraphViz to [4mfile.supergraph.dot[24m and to
           [4mfile.supergraph-eg.dot[24m.  These show all of the control flow graphs in the  program,  with  interprocedural
           edges  for  calls and returns.  The second dump contains annotations showing nodes in the "exploded graph"
           and diagnostics associated with them.

       [1m-fdump-analyzer-untracked[0m
           Emit custom warnings with internal details intended for analyzer developers.

   [1mOptions for Debugging Your Program[0m
       To tell GCC to emit extra information for use by a debugger, in almost all cases you need only to  add  [1m-g  [22mto
       your  other  options.   Some  debug  formats  can  co-exist (like DWARF with CTF) when each of them is enabled
       explicitly by adding the respective command line option to your other options.

       GCC allows you to use [1m-g [22mwith [1m-O[22m.  The shortcuts taken by optimized code may occasionally be surprising:  some
       variables  you  declared  may  not exist at all; flow of control may briefly move where you did not expect it;
       some statements may not be executed because they compute constant results or their values are already at hand;
       some statements may execute in different places because they have been moved out of loops.  Nevertheless it is
       possible to debug optimized output.  This makes it reasonable to use the optimizer  for  programs  that  might
       have bugs.

       If  you  are  not using some other optimization option, consider using [1m-Og [22mwith [1m-g[22m.  With no [1m-O [22moption at all,
       some compiler passes that collect information useful for debugging do not run at all, so that [1m-Og  [22mmay  result
       in a better debugging experience.

       [1m-g  [22mProduce debugging information in the operating system's native format (stabs, COFF, XCOFF, or DWARF).  GDB
           can work with this debugging information.

           On  most  systems  that  use stabs format, [1m-g [22menables use of extra debugging information that only GDB can
           use; this extra information makes debugging work better in GDB but probably makes other debuggers crash or
           refuse to read the program.  If you want to control for certain whether to generate the extra information,
           use [1m-gvms [22m(see below).

       [1m-ggdb[0m
           Produce debugging information for use by GDB.  This means to use  the  most  expressive  format  available
           (DWARF, stabs, or the native format if neither of those are supported), including GDB extensions if at all
           possible.

       [1m-gdwarf[0m
       [1m-gdwarf-[4m[22mversion[0m
           Produce  debugging information in DWARF format (if that is supported).  The value of [4mversion[24m may be either
           2, 3, 4 or 5; the default version for most targets is 5 (with the exception of VxWorks, TPF and Darwin/Mac
           OS X, which default to version 2, and AIX, which defaults to version 4).

           Note that with DWARF Version 2, some ports require and always use some non-conflicting DWARF 3  extensions
           in the unwind tables.

           Version  4  may require GDB 7.0 and [1m-fvar-tracking-assignments [22mfor maximum benefit. Version 5 requires GDB
           8.0 or higher.

           GCC no longer supports DWARF Version 1, which is substantially different than Version 2  and  later.   For
           historical  reasons,  some  other DWARF-related options such as [1m-fno-dwarf2-cfi-asm[22m) retain a reference to
           DWARF Version 2 in their names, but apply to all currently-supported versions of DWARF.

       [1m-gbtf[0m
           Request BTF debug information.  BTF is the default  debugging  format  for  the  eBPF  target.   On  other
           targets,  like x86, BTF debug information can be generated along with DWARF debug information when both of
           the debug formats are enabled explicitly via their respective command line options.

       [1m-gctf[0m
       [1m-gctf[4m[22mlevel[0m
           Request CTF debug information and use level to specify how much CTF debug information should be  produced.
           If [1m-gctf [22mis specified without a value for level, the default level of CTF debug information is 2.

           CTF  debug  information can be generated along with DWARF debug information when both of the debug formats
           are enabled explicitly via their respective command line options.

           Level 0 produces no CTF debug information at all.  Thus, [1m-gctf0 [22mnegates [1m-gctf[22m.

           Level 1 produces CTF information for tracebacks only.  This includes callsite information,  but  does  not
           include type information.

           Level  2  produces  type information for entities (functions, data objects etc.)  at file-scope or global-
           scope only.

       [1m-gvms[0m
           Produce debugging information in Alpha/VMS debug format (if that is supported).  This is the  format  used
           by DEBUG on Alpha/VMS systems.

       [1m-g[4m[22mlevel[0m
       [1m-ggdb[4m[22mlevel[0m
       [1m-gvms[4m[22mlevel[0m
           Request debugging information and also use [4mlevel[24m to specify how much information.  The default level is 2.

           Level 0 produces no debug information at all.  Thus, [1m-g0 [22mnegates [1m-g[22m.

           Level  1 produces minimal information, enough for making backtraces in parts of the program that you don't
           plan to debug.  This includes descriptions of functions and external variables, and  line  number  tables,
           but no information about local variables.

           Level  3  includes  extra  information,  such  as  all the macro definitions present in the program.  Some
           debuggers support macro expansion when you use [1m-g3[22m.

           If you use multiple [1m-g [22moptions, with or without level numbers, the last such option is  the  one  that  is
           effective.

           [1m-gdwarf [22mdoes not accept a concatenated debug level, to avoid confusion with [1m-gdwarf-[4m[22mlevel[24m.  Instead use an
           additional [1m-g[4m[22mlevel[24m option to change the debug level for DWARF.

       [1m-fno-eliminate-unused-debug-symbols[0m
           By  default,  no  debug information is produced for symbols that are not actually used. Use this option if
           you want debug information for all symbols.

       [1m-femit-class-debug-always[0m
           Instead of emitting debugging information for a C++ class in only one object file, emit it in  all  object
           files  using  the class.  This option should be used only with debuggers that are unable to handle the way
           GCC normally emits debugging information for classes because using  this  option  increases  the  size  of
           debugging information by as much as a factor of two.

       [1m-fno-merge-debug-strings[0m
           Direct  the  linker  to  not  merge  together  strings  in the debugging information that are identical in
           different object files.  Merging is not supported by all assemblers or  linkers.   Merging  decreases  the
           size  of the debug information in the output file at the cost of increasing link processing time.  Merging
           is enabled by default.

       [1m-fdebug-prefix-map=[4m[22mold[24m[1m=[4m[22mnew[0m
           When compiling files residing in directory [4mold[24m, record debugging information describing  them  as  if  the
           files  resided  in  directory [4mnew[24m instead.  This can be used to replace a build-time path with an install-
           time path in the debug info.  It can also be used to change an absolute path to a relative path by using [4m.[0m
           for [4mnew[24m.  This can give more reproducible builds, which are location independent, but may require an extra
           command to tell GDB where to find the source files. See also [1m-ffile-prefix-map [22mand [1m-fcanon-prefix-map[22m.

       [1m-fvar-tracking[0m
           Run variable tracking pass.  It computes where variables are stored at  each  position  in  code.   Better
           debugging information is then generated (if the debugging information format supports this information).

           It  is enabled by default when compiling with optimization ([1m-Os[22m, [1m-O[22m, [1m-O2[22m, ...), debugging information ([1m-g[22m)
           and the debug info format supports it.

       [1m-fvar-tracking-assignments[0m
           Annotate assignments to user variables early in the compilation and attempt to carry the annotations  over
           throughout  the  compilation  all  the  way  to  the end, in an attempt to improve debug information while
           optimizing.  Use of [1m-gdwarf-4 [22mis recommended along with it.

           It can be enabled even if var-tracking is disabled, in which case annotations are created and  maintained,
           but  discarded  at  the  end.   By default, this flag is enabled together with [1m-fvar-tracking[22m, except when
           selective scheduling is enabled.

       [1m-gsplit-dwarf[0m
           If DWARF debugging information is enabled, separate as much  debugging  information  as  possible  into  a
           separate  output file with the extension [4m.dwo[24m.  This option allows the build system to avoid linking files
           with debug information.  To be useful, this option requires a debugger capable of reading [4m.dwo[24m files.

       [1m-gdwarf32[0m
       [1m-gdwarf64[0m
           If DWARF debugging information is enabled, the [1m-gdwarf32 [22mselects the 32-bit DWARF format and the [1m-gdwarf64[0m
           selects the 64-bit DWARF format.  The default is target specific, on most targets it is [1m-gdwarf32  [22mthough.
           The  32-bit  DWARF  format is smaller, but can't support more than 2GiB of debug information in any of the
           DWARF debug information sections.  The 64-bit DWARF format allows larger debug information and  might  not
           be well supported by all consumers yet.

       [1m-gdescribe-dies[0m
           Add  description  attributes to some DWARF DIEs that have no name attribute, such as artificial variables,
           external references and call site parameter DIEs.

       [1m-gpubnames[0m
           Generate DWARF ".debug_pubnames" and ".debug_pubtypes" sections.

       [1m-ggnu-pubnames[0m
           Generate ".debug_pubnames" and ".debug_pubtypes" sections in a format suitable for conversion into  a  GDB
           index.  This option is only useful with a linker that can produce GDB index version 7.

       [1m-fdebug-types-section[0m
           When  using  DWARF Version 4 or higher, type DIEs can be put into their own ".debug_types" section instead
           of making them part of the ".debug_info" section.  It is more efficient to put them in a  separate  comdat
           section  since  the linker can then remove duplicates.  But not all DWARF consumers support ".debug_types"
           sections yet and on some objects ".debug_types" produces larger instead of smaller debugging information.

       [1m-grecord-gcc-switches[0m
       [1m-gno-record-gcc-switches[0m
           This switch causes the command-line options used to invoke the compiler that may affect code generation to
           be appended to the DW_AT_producer attribute in DWARF debugging information.  The options are  concatenated
           with spaces separating them from each other and from the compiler version.  It is enabled by default.  See
           also [1m-frecord-gcc-switches [22mfor another way of storing compiler options into the object file.

       [1m-gstrict-dwarf[0m
           Disallow  using  extensions  of  later DWARF standard version than selected with [1m-gdwarf-[4m[22mversion[24m.  On most
           targets using non-conflicting DWARF extensions from later standard versions is allowed.

       [1m-gno-strict-dwarf[0m
           Allow using extensions of later DWARF standard version than selected with [1m-gdwarf-[4m[22mversion[24m.

       [1m-gas-loc-support[0m
           Inform the compiler that the assembler supports ".loc" directives.  It may then use them for the assembler
           to generate DWARF2+ line number tables.

           This is generally desirable, because assembler-generated line-number tables are a lot  more  compact  than
           those the compiler can generate itself.

           This  option will be enabled by default if, at GCC configure time, the assembler was found to support such
           directives.

       [1m-gno-as-loc-support[0m
           Force GCC to generate DWARF2+ line number tables internally, if DWARF2+  line  number  tables  are  to  be
           generated.

       [1m-gas-locview-support[0m
           Inform  the  compiler that the assembler supports "view" assignment and reset assertion checking in ".loc"
           directives.

           This option will be enabled by default if, at GCC configure time, the assembler was found to support them.

       [1m-gno-as-locview-support[0m
           Force GCC to assign view numbers internally, if [1m-gvariable-location-views [22mare explicitly requested.

       [1m-gcolumn-info[0m
       [1m-gno-column-info[0m
           Emit location column information into DWARF debugging information, rather than just file and  line.   This
           option is enabled by default.

       [1m-gstatement-frontiers[0m
       [1m-gno-statement-frontiers[0m
           This  option  causes  GCC to create markers in the internal representation at the beginning of statements,
           and to keep them roughly in place throughout compilation, using them to  guide  the  output  of  "is_stmt"
           markers  in the line number table.  This is enabled by default when compiling with optimization ([1m-Os[22m, [1m-O1[22m,
           [1m-O2[22m, ...), and outputting DWARF 2 debug information at the normal level.

       [1m-gvariable-location-views[0m
       [1m-gvariable-location-views=incompat5[0m
       [1m-gno-variable-location-views[0m
           Augment variable location lists with progressive view numbers implied from the line  number  table.   This
           enables  debug  information  consumers  to  inspect  state  at  certain  points of the program, even if no
           instructions associated with the corresponding source  locations  are  present  at  that  point.   If  the
           assembler  lacks  support for view numbers in line number tables, this will cause the compiler to emit the
           line number table, which generally makes them somewhat less compact.  The augmented line number tables and
           location lists are fully backward-compatible, so they can be consumed by debug information consumers  that
           are not aware of these augmentations, but they won't derive any benefit from them either.

           This is enabled by default when outputting DWARF 2 debug information at the normal level, as long as there
           is  assembler  support,  [1m-fvar-tracking-assignments  [22mis enabled and [1m-gstrict-dwarf [22mis not.  When assembler
           support is not available, this may still be enabled, but it will force GCC to output internal line  number
           tables,  and  if [1m-ginternal-reset-location-views [22mis not enabled, that will most certainly lead to silently
           mismatching location views.

           There is a proposed representation for view numbers that is not backward compatible with the location list
           format introduced in DWARF 5, that can be enabled with [1m-gvariable-location-views=incompat5[22m.   This  option
           may  be  removed  in  the  future,  is  only  provided  as  a  reference  implementation  of  the proposed
           representation.  Debug information consumers are not expected to support this extended  format,  and  they
           would be rendered unable to decode location lists using it.

       [1m-ginternal-reset-location-views[0m
       [1m-gno-internal-reset-location-views[0m
           Attempt  to  determine  location  views  that  can be omitted from location view lists.  This requires the
           compiler to have very accurate insn length estimates, which isn't  always  the  case,  and  it  may  cause
           incorrect  view lists to be generated silently when using an assembler that does not support location view
           lists.  The GNU assembler will flag any such error as a "view number mismatch".  This is only  enabled  on
           ports that define a reliable estimation function.

       [1m-ginline-points[0m
       [1m-gno-inline-points[0m
           Generate extended debug information for inlined functions.  Location view tracking markers are inserted at
           inlined  entry  points,  so that address and view numbers can be computed and output in debug information.
           This can be enabled independently of location views, in which case the view numbers won't be  output,  but
           it can only be enabled along with statement frontiers, and it is only enabled by default if location views
           are enabled.

       [1m-gz[22m[[1m=[4m[22mtype[24m]
           Produce  compressed  debug  sections  in  DWARF  format,  if that is supported.  If [4mtype[24m is not given, the
           default type depends on the capabilities of the assembler and linker used.  [4mtype[24m may be one of [1mnone [22m(don't
           compress debug sections), or [1mzlib [22m(use zlib compression in  ELF  gABI  format).   If  the  linker  doesn't
           support  writing  compressed debug sections, the option is rejected.  Otherwise, if the assembler does not
           support them, [1m-gz [22mis silently ignored when producing object files.

       [1m-femit-struct-debug-baseonly[0m
           Emit debug information for struct-like types only when the  base  name  of  the  compilation  source  file
           matches the base name of file in which the struct is defined.

           This  option substantially reduces the size of debugging information, but at significant potential loss in
           type information to the debugger.  See [1m-femit-struct-debug-reduced [22mfor  a  less  aggressive  option.   See
           [1m-femit-struct-debug-detailed [22mfor more detailed control.

           This option works only with DWARF debug output.

       [1m-femit-struct-debug-reduced[0m
           Emit  debug  information  for  struct-like  types  only  when the base name of the compilation source file
           matches the base name of file in which the type is defined, unless the struct is a template or defined  in
           a system header.

           This  option  significantly  reduces  the  size of debugging information, with some potential loss in type
           information to the  debugger.   See  [1m-femit-struct-debug-baseonly  [22mfor  a  more  aggressive  option.   See
           [1m-femit-struct-debug-detailed [22mfor more detailed control.

           This option works only with DWARF debug output.

       [1m-femit-struct-debug-detailed[22m[[1m=[4m[22mspec-list[24m]
           Specify the struct-like types for which the compiler generates debug information.  The intent is to reduce
           duplicate struct debug information between different object files within the same program.

           This  option  is a detailed version of [1m-femit-struct-debug-reduced [22mand [1m-femit-struct-debug-baseonly[22m, which
           serves for most needs.

           A specification has the syntax[[1mdir:[22m|[1mind:[22m][[1mord:[22m|[1mgen:[22m]([1many[22m|[1msys[22m|[1mbase[22m|[1mnone[22m)

           The optional first word limits the specification  to  structs  that  are  used  directly  ([1mdir:[22m)  or  used
           indirectly  ([1mind:[22m).   A  struct type is used directly when it is the type of a variable, member.  Indirect
           uses arise through pointers to structs.  That is, when use of an incomplete struct is valid,  the  use  is
           indirect.  An example is [1mstruct one direct; struct two * indirect;[22m.

           The  optional  second  word limits the specification to ordinary structs ([1mord:[22m) or generic structs ([1mgen:[22m).
           Generic structs are a bit complicated to explain.  For C++,  these  are  non-explicit  specializations  of
           template  classes,  or  non-template classes within the above.  Other programming languages have generics,
           but [1m-femit-struct-debug-detailed [22mdoes not yet implement them.

           The third word specifies the source files for those structs for  which  the  compiler  should  emit  debug
           information.  The values [1mnone [22mand [1many [22mhave the normal meaning.  The value [1mbase [22mmeans that the base of name
           of  the file in which the type declaration appears must match the base of the name of the main compilation
           file.  In practice, this means that when  compiling  [4mfoo.c[24m,  debug  information  is  generated  for  types
           declared  in  that file and [4mfoo.h[24m, but not other header files.  The value [1msys [22mmeans those types satisfying
           [1mbase [22mor declared in system or compiler headers.

           You may need to experiment to determine the best settings for your application.

           The default is [1m-femit-struct-debug-detailed=all[22m.

           This option works only with DWARF debug output.

       [1m-fno-dwarf2-cfi-asm[0m
           Emit DWARF unwind info as compiler generated ".eh_frame" section instead of using GAS ".cfi_*" directives.

       [1m-fno-eliminate-unused-debug-types[0m
           Normally, when producing DWARF output, GCC avoids producing debug symbol output for types that are nowhere
           used in the source file being compiled.  Sometimes it is useful to have GCC emit debugging information for
           all types declared in a compilation unit, regardless of whether or not they  are  actually  used  in  that
           compilation unit, for example if, in the debugger, you want to cast a value to a type that is not actually
           used  in  your  program  (but  is declared).  More often, however, this results in a significant amount of
           wasted space.

   [1mOptions That Control Optimization[0m
       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is  to  reduce  the  cost  of  compilation  and  to  make
       debugging produce the expected results.  Statements are independent: if you stop the program with a breakpoint
       between statements, you can then assign a new value to any variable or change the program counter to any other
       statement in the function and get exactly the results you expect from the source code.

       Turning  on  optimization  flags makes the compiler attempt to improve the performance and/or code size at the
       expense of compilation time and possibly the ability to debug the program.

       The compiler performs optimization based on the knowledge it has of the program.  Compiling multiple files  at
       once  to  a  single  output file mode allows the compiler to use information gained from all of the files when
       compiling each of them.

       Not all optimizations are controlled directly by a flag.  Only optimizations that have a flag  are  listed  in
       this section.

       Most  optimizations  are  completely disabled at [1m-O0 [22mor if an [1m-O [22mlevel is not set on the command line, even if
       individual optimization flags are specified.  Similarly, [1m-Og [22msuppresses many optimization passes.

       Depending on the target and how GCC was configured, a slightly different set of optimizations may  be  enabled
       at  each  [1m-O [22mlevel than those listed here.  You can invoke GCC with [1m-Q --help=optimizers [22mto find out the exact
       set of optimizations that are enabled at each level.

       [1m-O[0m
       [1m-O1 [22mOptimize.  Optimizing compilation takes somewhat more time, and a lot more memory for a large function.

           With [1m-O[22m, the compiler tries to reduce code size and execution time, without performing  any  optimizations
           that take a great deal of compilation time.

           [1m-O [22mturns on the following optimization flags:

           [1m-fauto-inc-dec   -fbranch-count-reg  -fcombine-stack-adjustments  -fcompare-elim  -fcprop-registers  -fdce[0m
           [1m-fdefer-pop  -fdelayed-branch   -fdse   -fforward-propagate   -fguess-branch-probability   -fif-conversion[0m
           [1m-fif-conversion2     -finline-functions-called-once     -fipa-modref     -fipa-profile    -fipa-pure-const[0m
           [1m-fipa-reference -fipa-reference-addressable  -fmerge-constants  -fmove-loop-invariants  -fmove-loop-stores[0m
           [1m-fomit-frame-pointer     -freorder-blocks    -fshrink-wrap    -fshrink-wrap-separate    -fsplit-wide-types[0m
           [1m-fssa-backprop -fssa-phiopt  -ftree-bit-ccp  -ftree-ccp  -ftree-ch  -ftree-coalesce-vars  -ftree-copy-prop[0m
           [1m-ftree-dce   -ftree-dominator-opts   -ftree-dse   -ftree-forwprop   -ftree-fre  -ftree-phiprop  -ftree-pta[0m
           [1m-ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra -ftree-ter -funit-at-a-time[0m

       [1m-O2 [22mOptimize even more.  GCC performs nearly all supported optimizations that do  not  involve  a  space-speed
           tradeoff.   As  compared  to  [1m-O[22m,  this  option increases both compilation time and the performance of the
           generated code.

           [1m-O2 [22mturns on all optimization flags specified by [1m-O1[22m.  It also turns on the following optimization flags:

           [1m-falign-functions    -falign-jumps   -falign-labels     -falign-loops    -fcaller-saves    -fcode-hoisting[0m
           [1m-fcrossjumping    -fcse-follow-jumps     -fcse-skip-blocks   -fdelete-null-pointer-checks   -fdevirtualize[0m
           [1m-fdevirtualize-speculatively     -fexpensive-optimizations      -ffinite-loops      -fgcse       -fgcse-lm[0m
           [1m-fhoist-adjacent-loads   -finline-functions   -finline-small-functions   -findirect-inlining  -fipa-bit-cp[0m
           [1m-fipa-cp   -fipa-icf  -fipa-ra   -fipa-sra   -fipa-vrp  -fisolate-erroneous-paths-dereference  -flra-remat[0m
           [1m-foptimize-sibling-calls  -foptimize-strlen  -fpartial-inlining -fpeephole2 -freorder-blocks-algorithm=stc[0m
           [1m-freorder-blocks-and-partition       -freorder-functions      -frerun-cse-after-loop      -fschedule-insns[0m
           [1m-fschedule-insns2   -fsched-interblock    -fsched-spec  -fstore-merging  -fstrict-aliasing  -fthread-jumps[0m
           [1m-ftree-builtin-call-dce  -ftree-loop-vectorize  -ftree-pre  -ftree-slp-vectorize  -ftree-switch-conversion[0m
           [1m-ftree-tail-merge -ftree-vrp -fvect-cost-model=very-cheap[0m

           Please note the warning under [1m-fgcse [22mabout invoking [1m-O2 [22mon programs that use computed gotos.

       [1m-O3 [22mOptimize  yet  more.   [1m-O3  [22mturns  on  all  optimizations specified by [1m-O2 [22mand also turns on the following
           optimization flags:

           [1m-fgcse-after-reload     -fipa-cp-clone     -floop-interchange      -floop-unroll-and-jam      -fpeel-loops[0m
           [1m-fpredictive-commoning    -fsplit-loops    -fsplit-paths    -ftree-loop-distribution    -ftree-partial-pre[0m
           [1m-funswitch-loops -fvect-cost-model=dynamic -fversion-loops-for-strides[0m

       [1m-O0 [22mReduce compilation time and make debugging produce the expected results.  This is the default.

       [1m-Os [22mOptimize for size.  [1m-Os [22menables all [1m-O2 [22moptimizations except those that often increase code size:

           [1m-falign-functions       -falign-jumps      -falign-labels       -falign-loops       -fprefetch-loop-arrays[0m
           [1m-freorder-blocks-algorithm=stc[0m

           It also enables [1m-finline-functions[22m, causes the compiler to tune for code size rather than execution speed,
           and performs further optimizations designed to reduce code size.

       [1m-Ofast[0m
           Disregard   strict  standards  compliance.   [1m-Ofast  [22menables  all  [1m-O3  [22moptimizations.   It  also  enables
           optimizations that  are  not  valid  for  all  standard-compliant  programs.   It  turns  on  [1m-ffast-math[22m,
           [1m-fallow-store-data-races   [22mand   the   Fortran-specific  [1m-fstack-arrays[22m,  unless  [1m-fmax-stack-var-size  [22mis
           specified, and [1m-fno-protect-parens[22m.  It turns off [1m-fsemantic-interposition[22m.

       [1m-Og [22mOptimize debugging experience.  [1m-Og [22mshould be the optimization level of  choice  for  the  standard  edit-
           compile-debug  cycle, offering a reasonable level of optimization while maintaining fast compilation and a
           good debugging experience.  It is a better choice than [1m-O0 [22mfor  producing  debuggable  code  because  some
           compiler passes that collect debug information are disabled at [1m-O0[22m.

           Like  [1m-O0[22m,  [1m-Og [22mcompletely disables a number of optimization passes so that individual options controlling
           them have no effect.  Otherwise [1m-Og [22menables all [1m-O1 [22moptimization flags except for those that may interfere
           with debugging:

           [1m-fbranch-count-reg         -fdelayed-branch        -fdse         -fif-conversion          -fif-conversion2[0m
           [1m-finline-functions-called-once  -fmove-loop-invariants   -fmove-loop-stores   -fssa-phiopt  -ftree-bit-ccp[0m
           [1m-ftree-dse  -ftree-pta  -ftree-sra[0m

       [1m-Oz [22mOptimize aggressively for size rather than speed.  This may increase the number of  instructions  executed
           if those instructions require fewer bytes to encode.  [1m-Oz [22mbehaves similarly to [1m-Os [22mincluding enabling most
           [1m-O2 [22moptimizations.

       If  you  use  multiple  [1m-O  [22moptions,  with  or  without level numbers, the last such option is the one that is
       effective.

       Options of the form [1m-f[4m[22mflag[24m specify machine-independent flags.  Most flags  have  both  positive  and  negative
       forms;  the negative form of [1m-ffoo [22mis [1m-fno-foo[22m.  In the table below, only one of the forms is listed---the one
       you typically use.  You can figure out the other form by either removing [1mno- [22mor adding it.

       The following options control specific optimizations.  They are either activated by [1m-O [22moptions or are  related
       to ones that are.  You can use the following flags in the rare cases when "fine-tuning" of optimizations to be
       performed is desired.

       [1m-fno-defer-pop[0m
           For  machines  that  must  pop  arguments  after a function call, always pop the arguments as soon as each
           function returns.  At levels [1m-O1 [22mand higher, [1m-fdefer-pop [22mis the default; this allows the compiler  to  let
           arguments accumulate on the stack for several function calls and pop them all at once.

       [1m-fforward-propagate[0m
           Perform  a  forward propagation pass on RTL.  The pass tries to combine two instructions and checks if the
           result can be simplified.  If loop unrolling is active,  two  passes  are  performed  and  the  second  is
           scheduled after loop unrolling.

           This option is enabled by default at optimization levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-ffp-contract=[4m[22mstyle[0m
           [1m-ffp-contract=off  [22mdisables  floating-point  expression contraction.  [1m-ffp-contract=fast [22menables floating-
           point expression contraction such as forming of fused multiply-add operations if  the  target  has  native
           support  for  them.   [1m-ffp-contract=on  [22menables  floating-point  expression  contraction if allowed by the
           language standard.  This is currently not implemented and treated equal to [1m-ffp-contract=off[22m.

           The default is [1m-ffp-contract=fast[22m.

       [1m-fomit-frame-pointer[0m
           Omit the frame pointer in functions that don't need one.  This avoids the instructions to save, set up and
           restore the frame pointer; on many targets it also makes an extra register available.

           On some targets this flag has no effect because the standard calling sequence always uses a frame pointer,
           so it cannot be omitted.

           Note that [1m-fno-omit-frame-pointer [22mdoesn't guarantee the frame pointer is used in all  functions.   Several
           targets always omit the frame pointer in leaf functions.

           Enabled by default at [1m-O1 [22mand higher.

       [1m-foptimize-sibling-calls[0m
           Optimize sibling and tail recursive calls.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-foptimize-strlen[0m
           Optimize   various   standard  C  string  functions  (e.g.  "strlen",  "strchr"  or  "strcpy")  and  their
           "_FORTIFY_SOURCE" counterparts into faster alternatives.

           Enabled at levels [1m-O2[22m, [1m-O3[22m.

       [1m-fno-inline[0m
           Do not expand any functions inline apart from those marked with the "always_inline"  attribute.   This  is
           the default when not optimizing.

           Single functions can be exempted from inlining by marking them with the "noinline" attribute.

       [1m-finline-small-functions[0m
           Integrate  functions  into  their  callers when their body is smaller than expected function call code (so
           overall size of program gets smaller).  The compiler heuristically  decides  which  functions  are  simple
           enough  to  be  worth  integrating  in  this  way.  This inlining applies to all functions, even those not
           declared inline.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-findirect-inlining[0m
           Inline also indirect calls that are discovered to be known at compile time thanks  to  previous  inlining.
           This  option  has  any  effect  only  when  inlining  itself  is  turned  on  by the [1m-finline-functions [22mor
           [1m-finline-small-functions [22moptions.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-finline-functions[0m
           Consider all functions for inlining, even if they are not declared  inline.   The  compiler  heuristically
           decides which functions are worth integrating in this way.

           If  all calls to a given function are integrated, and the function is declared "static", then the function
           is normally not output as assembler code in its own right.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.  Also enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-finline-functions-called-once[0m
           Consider all "static" functions called once for inlining into their caller even if  they  are  not  marked
           "inline".   If a call to a given function is integrated, then the function is not output as assembler code
           in its own right.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3 [22mand [1m-Os[22m, but not [1m-Og[22m.

       [1m-fearly-inlining[0m
           Inline functions marked by "always_inline" and functions whose body seems smaller than the  function  call
           overhead  early  before  doing  [1m-fprofile-generate [22minstrumentation and real inlining pass.  Doing so makes
           profiling significantly cheaper and usually inlining faster on programs  having  large  chains  of  nested
           wrapper functions.

           Enabled by default.

       [1m-fipa-sra[0m
           Perform  interprocedural scalar replacement of aggregates, removal of unused parameters and replacement of
           parameters passed by reference by parameters passed by value.

           Enabled at levels [1m-O2[22m, [1m-O3 [22mand [1m-Os[22m.

       [1m-finline-limit=[4m[22mn[0m
           By default, GCC limits the size of functions that can be inlined.  This flag allows coarse control of this
           limit.  [4mn[24m is the size of functions that can be inlined in number of pseudo instructions.

           Inlining is actually controlled by a number of parameters, which may be specified  individually  by  using
           [1m--param [4m[22mname[24m[1m=[4m[22mvalue[24m.  The [1m-finline-limit=[4m[22mn[24m option sets some of these parameters as follows:

           [1mmax-inline-insns-single[0m
               is set to [4mn[24m/2.

           [1mmax-inline-insns-auto[0m
               is set to [4mn[24m/2.

           See  below  for  a documentation of the individual parameters controlling inlining and for the defaults of
           these parameters.

           [4mNote:[24m there may be no value to [1m-finline-limit [22mthat results in default behavior.

           [4mNote:[24m pseudo instruction represents, in this particular context, an  abstract  measurement  of  function's
           size.   In  no  way does it represent a count of assembly instructions and as such its exact meaning might
           change from one release to an another.

       [1m-fno-keep-inline-dllexport[0m
           This is a more fine-grained version of [1m-fkeep-inline-functions[22m, which applies only to functions  that  are
           declared using the "dllexport" attribute or declspec.

       [1m-fkeep-inline-functions[0m
           In  C,  emit  "static" functions that are declared "inline" into the object file, even if the function has
           been inlined into all of its callers.  This switch does not affect functions  using  the  "extern  inline"
           extension in GNU C90.  In C++, emit any and all inline functions into the object file.

       [1m-fkeep-static-functions[0m
           Emit "static" functions into the object file, even if the function is never used.

       [1m-fkeep-static-consts[0m
           Emit  variables  declared  "static  const" when optimization isn't turned on, even if the variables aren't
           referenced.

           GCC enables this option by default.  If you want  to  force  the  compiler  to  check  if  a  variable  is
           referenced,  regardless  of  whether  or  not  optimization  is turned on, use the [1m-fno-keep-static-consts[0m
           option.

       [1m-fmerge-constants[0m
           Attempt to merge identical constants (string constants and floating-point  constants)  across  compilation
           units.

           This  option  is  the  default  for  optimized  compilation  if  the assembler and linker support it.  Use
           [1m-fno-merge-constants [22mto inhibit this behavior.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fmerge-all-constants[0m
           Attempt to merge identical constants and identical variables.

           This option implies [1m-fmerge-constants[22m.  In addition to [1m-fmerge-constants [22mthis considers e.g. even constant
           initialized arrays or initialized constant variables with integral  or  floating-point  types.   Languages
           like C or C++ require each variable, including multiple instances of the same variable in recursive calls,
           to have distinct locations, so using this option results in non-conforming behavior.

       [1m-fmodulo-sched[0m
           Perform  swing  modulo  scheduling  immediately  before  the  first  scheduling  pass.  This pass looks at
           innermost loops and reorders their instructions by overlapping different iterations.

       [1m-fmodulo-sched-allow-regmoves[0m
           Perform more aggressive SMS-based modulo scheduling with register moves allowed.   By  setting  this  flag
           certain  anti-dependences edges are deleted, which triggers the generation of reg-moves based on the life-
           range analysis.  This option is effective only with [1m-fmodulo-sched [22menabled.

       [1m-fno-branch-count-reg[0m
           Disable the optimization pass that scans for opportunities to use "decrement and branch" instructions on a
           count register instead of instruction sequences that decrement a register, compare it  against  zero,  and
           then  branch  based  upon  the  result.  This option is only meaningful on architectures that support such
           instructions, which include x86, PowerPC, IA-64 and S/390.  Note  that  the  [1m-fno-branch-count-reg  [22moption
           doesn't  remove  the decrement and branch instructions from the generated instruction stream introduced by
           other optimization passes.

           The default is [1m-fbranch-count-reg [22mat [1m-O1 [22mand higher, except for [1m-Og[22m.

       [1m-fno-function-cse[0m
           Do not put function addresses in registers; make each instruction that calls a constant  function  contain
           the function's address explicitly.

           This  option results in less efficient code, but some strange hacks that alter the assembler output may be
           confused by the optimizations performed when this option is not used.

           The default is [1m-ffunction-cse[0m

       [1m-fno-zero-initialized-in-bss[0m
           If the target supports a BSS section, GCC by default puts variables that are initialized to zero into BSS.
           This can save space in the resulting code.

           This option turns off this behavior because some programs explicitly rely on variables going to  the  data
           section---e.g.,  so  that  the  resulting  executable  can  find the beginning of that section and/or make
           assumptions based on that.

           The default is [1m-fzero-initialized-in-bss[22m.

       [1m-fthread-jumps[0m
           Perform optimizations that check to see if a jump branches to a location where another comparison subsumed
           by the first is found.  If so, the first branch is redirected to either  the  destination  of  the  second
           branch  or  a  point  immediately  following it, depending on whether the condition is known to be true or
           false.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fsplit-wide-types[0m
           When using a type that occupies multiple registers, such as "long long" on  a  32-bit  system,  split  the
           registers apart and allocate them independently.  This normally generates better code for those types, but
           may make debugging more difficult.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fsplit-wide-types-early[0m
           Fully  split  wide types early, instead of very late.  This option has no effect unless [1m-fsplit-wide-types[0m
           is turned on.

           This is the default on some targets.

       [1m-fcse-follow-jumps[0m
           In common subexpression elimination (CSE), scan through jump instructions when the target of the  jump  is
           not  reached by any other path.  For example, when CSE encounters an "if" statement with an "else" clause,
           CSE follows the jump when the condition tested is false.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fcse-skip-blocks[0m
           This is similar to [1m-fcse-follow-jumps[22m, but causes CSE to follow jumps that conditionally skip over blocks.
           When CSE encounters a simple "if" statement with no else clause, [1m-fcse-skip-blocks [22mcauses  CSE  to  follow
           the jump around the body of the "if".

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-frerun-cse-after-loop[0m
           Re-run common subexpression elimination after loop optimizations are performed.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fgcse[0m
           Perform  a global common subexpression elimination pass.  This pass also performs global constant and copy
           propagation.

           [4mNote:[24m When compiling a program using computed  gotos,  a  GCC  extension,  you  may  get  better  run-time
           performance  if  you  disable  the global common subexpression elimination pass by adding [1m-fno-gcse [22mto the
           command line.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fgcse-lm[0m
           When [1m-fgcse-lm [22mis enabled, global common subexpression elimination attempts to move loads  that  are  only
           killed  by stores into themselves.  This allows a loop containing a load/store sequence to be changed to a
           load outside the loop, and a copy/store within the loop.

           Enabled by default when [1m-fgcse [22mis enabled.

       [1m-fgcse-sm[0m
           When [1m-fgcse-sm [22mis enabled, a store motion pass is run after global common subexpression elimination.  This
           pass attempts to move stores out of loops.  When used in conjunction with [1m-fgcse-lm[22m,  loops  containing  a
           load/store sequence can be changed to a load before the loop and a store after the loop.

           Not enabled at any optimization level.

       [1m-fgcse-las[0m
           When  [1m-fgcse-las  [22mis  enabled, the global common subexpression elimination pass eliminates redundant loads
           that come after stores to the same memory location (both partial and full redundancies).

           Not enabled at any optimization level.

       [1m-fgcse-after-reload[0m
           When [1m-fgcse-after-reload [22mis enabled, a redundant load elimination pass is  performed  after  reload.   The
           purpose of this pass is to clean up redundant spilling.

           Enabled by [1m-O3[22m, [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-faggressive-loop-optimizations[0m
           This  option  tells  the  loop  optimizer  to  use language constraints to derive bounds for the number of
           iterations of a loop.  This assumes that loop code does not  invoke  undefined  behavior  by  for  example
           causing  signed integer overflows or out-of-bound array accesses.  The bounds for the number of iterations
           of a loop are used to guide loop unrolling and peeling and loop exit test optimizations.  This  option  is
           enabled by default.

       [1m-funconstrained-commons[0m
           This  option  tells  the  compiler  that  variables  declared in common blocks (e.g. Fortran) may later be
           overridden with longer trailing arrays. This prevents certain optimizations that  depend  on  knowing  the
           array bounds.

       [1m-fcrossjumping[0m
           Perform  cross-jumping  transformation.   This transformation unifies equivalent code and saves code size.
           The resulting code may or may not perform better than without cross-jumping.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fauto-inc-dec[0m
           Combine increments or decrements of addresses with memory  accesses.   This  pass  is  always  skipped  on
           architectures  that  do  not  have  instructions to support this.  Enabled by default at [1m-O1 [22mand higher on
           architectures that support this.

       [1m-fdce[0m
           Perform dead code elimination (DCE) on RTL.  Enabled by default at [1m-O1 [22mand higher.

       [1m-fdse[0m
           Perform dead store elimination (DSE) on RTL.  Enabled by default at [1m-O1 [22mand higher.

       [1m-fif-conversion[0m
           Attempt to transform conditional jumps into branch-less equivalents.  This  includes  use  of  conditional
           moves,  min, max, set flags and abs instructions, and some tricks doable by standard arithmetics.  The use
           of conditional execution on chips where it is available is controlled by [1m-fif-conversion2[22m.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m, but not with [1m-Og[22m.

       [1m-fif-conversion2[0m
           Use conditional execution (where available) to transform conditional jumps into branch-less equivalents.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m, but not with [1m-Og[22m.

       [1m-fdeclone-ctor-dtor[0m
           The C++ ABI requires multiple entry points for constructors and destructors: one for a base subobject, one
           for a complete object, and one for a virtual destructor that calls  operator  delete  afterwards.   For  a
           hierarchy  with  virtual  bases,  the base and complete variants are clones, which means two copies of the
           function.  With this option, the base and complete variants are changed to be thunks that  call  a  common
           implementation.

           Enabled by [1m-Os[22m.

       [1m-fdelete-null-pointer-checks[0m
           Assume  that programs cannot safely dereference null pointers, and that no code or data element resides at
           address zero.  This option enables simple constant folding optimizations at all optimization  levels.   In
           addition,  other  optimization  passes  in  GCC  use  this  flag  to control global dataflow analyses that
           eliminate useless checks for null pointers; these assume that a  memory  access  to  address  zero  always
           results  in  a  trap, so that if a pointer is checked after it has already been dereferenced, it cannot be
           null.

           Note however that in some environments this assumption is not true.   Use  [1m-fno-delete-null-pointer-checks[0m
           to disable this optimization for programs that depend on that behavior.

           This  option  is  enabled  by  default  on  most targets.  On Nios II ELF, it defaults to off.  On AVR and
           MSP430, this option is completely disabled.

           Passes that use the dataflow information are enabled independently at different optimization levels.

       [1m-fdevirtualize[0m
           Attempt to convert calls to virtual functions to direct calls.  This is done both within a  procedure  and
           interprocedurally  as  part  of  indirect  inlining  ([1m-findirect-inlining[22m)  and  interprocedural  constant
           propagation ([1m-fipa-cp[22m).  Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fdevirtualize-speculatively[0m
           Attempt to convert calls to virtual functions to speculative direct calls.  Based on the analysis  of  the
           type  inheritance  graph,  determine  for  a  given  call  the set of likely targets. If the set is small,
           preferably of size 1, change the call into a conditional deciding between direct and indirect calls.   The
           speculative  calls  enable  more  optimizations,  such  as inlining.  When they seem useless after further
           optimization, they are converted back into original form.

       [1m-fdevirtualize-at-ltrans[0m
           Stream extra information needed for aggressive devirtualization when running the  link-time  optimizer  in
           local transformation mode.  This option enables more devirtualization but significantly increases the size
           of streamed data. For this reason it is disabled by default.

       [1m-fexpensive-optimizations[0m
           Perform a number of minor optimizations that are relatively expensive.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-free[0m
           Attempt  to  remove  redundant  extension  instructions.   This  is  especially  helpful  for  the  x86-64
           architecture, which implicitly zero-extends in 64-bit registers after writing to their lower 32-bit half.

           Enabled for Alpha, AArch64 and x86 at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fno-lifetime-dse[0m
           In C++ the value of an object is only affected by  changes  within  its  lifetime:  when  the  constructor
           begins,  the object has an indeterminate value, and any changes during the lifetime of the object are dead
           when the object is destroyed.  Normally dead store elimination will take advantage of this; if  your  code
           relies  on  the value of the object storage persisting beyond the lifetime of the object, you can use this
           flag to disable this optimization.  To preserve stores before the constructor starts  (e.g.  because  your
           operator  new  clears the object storage) but still treat the object as dead after the destructor, you can
           use  [1m-flifetime-dse=1[22m.   The  default  behavior  can  be  explicitly   selected   with   [1m-flifetime-dse=2[22m.
           [1m-flifetime-dse=0 [22mis equivalent to [1m-fno-lifetime-dse[22m.

       [1m-flive-range-shrinkage[0m
           Attempt  to  decrease  register  pressure through register live range shrinkage.  This is helpful for fast
           processors with small or moderate size register sets.

       [1m-fira-algorithm=[4m[22malgorithm[0m
           Use the specified coloring algorithm for the integrated register allocator.  The [4malgorithm[24m argument can be
           [1mpriority[22m, which specifies Chow's priority  coloring,  or  [1mCB[22m,  which  specifies  Chaitin-Briggs  coloring.
           Chaitin-Briggs  coloring  is  not implemented for all architectures, but for those targets that do support
           it, it is the default because it generates better code.

       [1m-fira-region=[4m[22mregion[0m
           Use specified regions for the integrated register allocator.  The [4mregion[24m argument should  be  one  of  the
           following:

           [1mall [22mUse  all  loops  as  register  allocation regions.  This can give the best results for machines with a
               small and/or irregular register set.

           [1mmixed[0m
               Use all loops except for loops with small register pressure as the regions.  This value usually  gives
               the  best  results  in most cases and for most architectures, and is enabled by default when compiling
               with optimization for speed ([1m-O[22m, [1m-O2[22m, ...).

           [1mone [22mUse all functions as a single region.  This typically results  in  the  smallest  code  size,  and  is
               enabled by default for [1m-Os [22mor [1m-O0[22m.

       [1m-fira-hoist-pressure[0m
           Use  IRA to evaluate register pressure in the code hoisting pass for decisions to hoist expressions.  This
           option usually results in smaller code, but it can slow the compiler down.

           This option is enabled at level [1m-Os [22mfor all targets.

       [1m-fira-loop-pressure[0m
           Use IRA to evaluate register pressure in loops for decisions to move loop invariants.  This option usually
           results in generation of faster and smaller code on machines with large register files (>= 32  registers),
           but it can slow the compiler down.

           This option is enabled at level [1m-O3 [22mfor some targets.

       [1m-fno-ira-share-save-slots[0m
           Disable  sharing of stack slots used for saving call-used hard registers living through a call.  Each hard
           register gets a separate stack slot, and as a result function stack frames are larger.

       [1m-fno-ira-share-spill-slots[0m
           Disable sharing of stack slots allocated for pseudo-registers.  Each pseudo-register that does not  get  a
           hard register gets a separate stack slot, and as a result function stack frames are larger.

       [1m-flra-remat[0m
           Enable CFG-sensitive rematerialization in LRA.  Instead of loading values of spilled pseudos, LRA tries to
           rematerialize (recalculate) values if it is profitable.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fdelayed-branch[0m
           If  supported  for  the  target  machine,  attempt  to  reorder  instructions to exploit instruction slots
           available after delayed branch instructions.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m, but not at [1m-Og[22m.

       [1m-fschedule-insns[0m
           If supported for the target machine, attempt to reorder instructions to eliminate execution stalls due  to
           required  data  being  unavailable.   This  helps  machines  that  have slow floating point or memory load
           instructions by allowing other instructions to be issued until the result of the  load  or  floating-point
           instruction is required.

           Enabled at levels [1m-O2[22m, [1m-O3[22m.

       [1m-fschedule-insns2[0m
           Similar  to  [1m-fschedule-insns[22m,  but  requests  an additional pass of instruction scheduling after register
           allocation has been done.  This is especially useful  on  machines  with  a  relatively  small  number  of
           registers and where memory load instructions take more than one cycle.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fno-sched-interblock[0m
           Disable  instruction  scheduling  across  basic  blocks,  which is normally enabled when scheduling before
           register allocation, i.e.  with [1m-fschedule-insns [22mor at [1m-O2 [22mor higher.

       [1m-fno-sched-spec[0m
           Disable speculative motion of non-load instructions, which is  normally  enabled  when  scheduling  before
           register allocation, i.e.  with [1m-fschedule-insns [22mor at [1m-O2 [22mor higher.

       [1m-fsched-pressure[0m
           Enable register pressure sensitive insn scheduling before register allocation.  This only makes sense when
           scheduling  before  register allocation is enabled, i.e. with [1m-fschedule-insns [22mor at [1m-O2 [22mor higher.  Usage
           of this option can improve the generated code and  decrease  its  size  by  preventing  register  pressure
           increase above the number of available hard registers and subsequent spills in register allocation.

       [1m-fsched-spec-load[0m
           Allow speculative motion of some load instructions.  This only makes sense when scheduling before register
           allocation, i.e. with [1m-fschedule-insns [22mor at [1m-O2 [22mor higher.

       [1m-fsched-spec-load-dangerous[0m
           Allow speculative motion of more load instructions.  This only makes sense when scheduling before register
           allocation, i.e. with [1m-fschedule-insns [22mor at [1m-O2 [22mor higher.

       [1m-fsched-stalled-insns[0m
       [1m-fsched-stalled-insns=[4m[22mn[0m
           Define  how  many  insns  (if any) can be moved prematurely from the queue of stalled insns into the ready
           list during  the  second  scheduling  pass.   [1m-fno-sched-stalled-insns  [22mmeans  that  no  insns  are  moved
           prematurely,  [1m-fsched-stalled-insns=0  [22mmeans  there  is  no  limit  on  how many queued insns can be moved
           prematurely.  [1m-fsched-stalled-insns [22mwithout a value is equivalent to [1m-fsched-stalled-insns=1[22m.

       [1m-fsched-stalled-insns-dep[0m
       [1m-fsched-stalled-insns-dep=[4m[22mn[0m
           Define how many insn groups (cycles) are examined for a dependency on a stalled insn that is  a  candidate
           for  premature  removal  from  the  queue  of  stalled  insns.   This has an effect only during the second
           scheduling pass, and only if [1m-fsched-stalled-insns [22mis used.  [1m-fno-sched-stalled-insns-dep [22mis equivalent to
           [1m-fsched-stalled-insns-dep=0[22m.    [1m-fsched-stalled-insns-dep   [22mwithout   a    value    is    equivalent    to
           [1m-fsched-stalled-insns-dep=1[22m.

       [1m-fsched2-use-superblocks[0m
           When  scheduling  after  register  allocation, use superblock scheduling.  This allows motion across basic
           block boundaries, resulting in faster  schedules.   This  option  is  experimental,  as  not  all  machine
           descriptions used by GCC model the CPU closely enough to avoid unreliable results from the algorithm.

           This  only makes sense when scheduling after register allocation, i.e. with [1m-fschedule-insns2 [22mor at [1m-O2 [22mor
           higher.

       [1m-fsched-group-heuristic[0m
           Enable the group heuristic in the scheduler.  This heuristic favors the  instruction  that  belongs  to  a
           schedule  group.   This  is  enabled  by default when scheduling is enabled, i.e. with [1m-fschedule-insns [22mor
           [1m-fschedule-insns2 [22mor at [1m-O2 [22mor higher.

       [1m-fsched-critical-path-heuristic[0m
           Enable the critical-path heuristic in the scheduler.  This heuristic favors instructions on  the  critical
           path.    This   is  enabled  by  default  when  scheduling  is  enabled,  i.e.  with  [1m-fschedule-insns  [22mor
           [1m-fschedule-insns2 [22mor at [1m-O2 [22mor higher.

       [1m-fsched-spec-insn-heuristic[0m
           Enable the speculative  instruction  heuristic  in  the  scheduler.   This  heuristic  favors  speculative
           instructions  with  greater  dependency  weakness.  This is enabled by default when scheduling is enabled,
           i.e.  with [1m-fschedule-insns [22mor [1m-fschedule-insns2 [22mor at [1m-O2 [22mor higher.

       [1m-fsched-rank-heuristic[0m
           Enable the rank heuristic in the scheduler.  This heuristic favors the instruction belonging  to  a  basic
           block  with  greater size or frequency.  This is enabled by default when scheduling is enabled, i.e.  with
           [1m-fschedule-insns [22mor [1m-fschedule-insns2 [22mor at [1m-O2 [22mor higher.

       [1m-fsched-last-insn-heuristic[0m
           Enable the last-instruction heuristic in the scheduler.  This heuristic favors  the  instruction  that  is
           less  dependent on the last instruction scheduled.  This is enabled by default when scheduling is enabled,
           i.e. with [1m-fschedule-insns [22mor [1m-fschedule-insns2 [22mor at [1m-O2 [22mor higher.

       [1m-fsched-dep-count-heuristic[0m
           Enable the dependent-count heuristic in the scheduler.  This heuristic favors  the  instruction  that  has
           more  instructions  depending  on  it.   This is enabled by default when scheduling is enabled, i.e.  with
           [1m-fschedule-insns [22mor [1m-fschedule-insns2 [22mor at [1m-O2 [22mor higher.

       [1m-freschedule-modulo-scheduled-loops[0m
           Modulo scheduling is performed before traditional scheduling.   If  a  loop  is  modulo  scheduled,  later
           scheduling passes may change its schedule.  Use this option to control that behavior.

       [1m-fselective-scheduling[0m
           Schedule  instructions  using  selective  scheduling  algorithm.  Selective scheduling runs instead of the
           first scheduler pass.

       [1m-fselective-scheduling2[0m
           Schedule instructions using selective scheduling algorithm.  Selective  scheduling  runs  instead  of  the
           second scheduler pass.

       [1m-fsel-sched-pipelining[0m
           Enable  software  pipelining  of  innermost  loops during selective scheduling.  This option has no effect
           unless one of [1m-fselective-scheduling [22mor [1m-fselective-scheduling2 [22mis turned on.

       [1m-fsel-sched-pipelining-outer-loops[0m
           When pipelining loops during selective scheduling, also pipeline outer loops.  This option has  no  effect
           unless [1m-fsel-sched-pipelining [22mis turned on.

       [1m-fsemantic-interposition[0m
           Some  object  formats,  like ELF, allow interposing of symbols by the dynamic linker.  This means that for
           symbols exported from the DSO, the compiler cannot perform interprocedural propagation, inlining and other
           optimizations in anticipation that the function or variable in question may change. While this feature  is
           useful, for example, to rewrite memory allocation functions by a debugging implementation, it is expensive
           in the terms of code quality.  With [1m-fno-semantic-interposition [22mthe compiler assumes that if interposition
           happens  for functions the overwriting function will have precisely the same semantics (and side effects).
           Similarly if interposition happens for variables, the constructor of the variable will be  the  same.  The
           flag  has  no effect for functions explicitly declared inline (where it is never allowed for interposition
           to change semantics) and for symbols explicitly declared weak.

       [1m-fshrink-wrap[0m
           Emit function prologues only before parts of the function that need it, rather than  at  the  top  of  the
           function.  This flag is enabled by default at [1m-O [22mand higher.

       [1m-fshrink-wrap-separate[0m
           Shrink-wrap  separate parts of the prologue and epilogue separately, so that those parts are only executed
           when needed.  This option is on by default, but has no effect unless [1m-fshrink-wrap [22mis also turned  on  and
           the target supports this.

       [1m-fcaller-saves[0m
           Enable  allocation  of  values  to  registers  that  are  clobbered  by  function calls, by emitting extra
           instructions to save and restore the registers around such calls.  Such allocation is done  only  when  it
           seems to result in better code.

           This  option  is always enabled by default on certain machines, usually those which have no call-preserved
           registers to use instead.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fcombine-stack-adjustments[0m
           Tracks stack adjustments (pushes and pops) and stack memory references and then  tries  to  find  ways  to
           combine them.

           Enabled by default at [1m-O1 [22mand higher.

       [1m-fipa-ra[0m
           Use  caller save registers for allocation if those registers are not used by any called function.  In that
           case it is not necessary to save and restore them around calls.  This is only possible if called functions
           are part of same compilation unit as current function and they are compiled before it.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m, however the option is disabled if generated code will be instrumented for
           profiling ([1m-p[22m, or [1m-pg[22m) or if callee's register usage cannot be known exactly (this happens on targets that
           do not expose prologues and epilogues in RTL).

       [1m-fconserve-stack[0m
           Attempt to minimize stack usage.  The compiler attempts to use less stack space, even if  that  makes  the
           program  slower.   This option implies setting the [1mlarge-stack-frame [22mparameter to 100 and the [1mlarge-stack-[0m
           [1mframe-growth [22mparameter to 400.

       [1m-ftree-reassoc[0m
           Perform reassociation on trees.  This flag is enabled by default at [1m-O1 [22mand higher.

       [1m-fcode-hoisting[0m
           Perform code hoisting.  Code hoisting tries to move the evaluation of expressions executed on all paths to
           the function exit as early as possible.  This is especially useful as a code  size  optimization,  but  it
           often helps for code speed as well.  This flag is enabled by default at [1m-O2 [22mand higher.

       [1m-ftree-pre[0m
           Perform partial redundancy elimination (PRE) on trees.  This flag is enabled by default at [1m-O2 [22mand [1m-O3[22m.

       [1m-ftree-partial-pre[0m
           Make partial redundancy elimination (PRE) more aggressive.  This flag is enabled by default at [1m-O3[22m.

       [1m-ftree-forwprop[0m
           Perform forward propagation on trees.  This flag is enabled by default at [1m-O1 [22mand higher.

       [1m-ftree-fre[0m
           Perform  full  redundancy elimination (FRE) on trees.  The difference between FRE and PRE is that FRE only
           considers expressions that are computed on all paths leading to the redundant computation.  This  analysis
           is  faster  than  PRE,  though  it exposes fewer redundancies.  This flag is enabled by default at [1m-O1 [22mand
           higher.

       [1m-ftree-phiprop[0m
           Perform hoisting of loads from conditional pointers on trees.  This pass is enabled by default at [1m-O1  [22mand
           higher.

       [1m-fhoist-adjacent-loads[0m
           Speculatively  hoist  loads from both branches of an if-then-else if the loads are from adjacent locations
           in the same structure and the target architecture has  a  conditional  move  instruction.   This  flag  is
           enabled by default at [1m-O2 [22mand higher.

       [1m-ftree-copy-prop[0m
           Perform  copy  propagation  on  trees.   This  pass  eliminates unnecessary copy operations.  This flag is
           enabled by default at [1m-O1 [22mand higher.

       [1m-fipa-pure-const[0m
           Discover which functions are pure or constant.  Enabled by default at [1m-O1 [22mand higher.

       [1m-fipa-reference[0m
           Discover which static variables do not escape the compilation unit.  Enabled by default at [1m-O1 [22mand higher.

       [1m-fipa-reference-addressable[0m
           Discover read-only, write-only and non-addressable static  variables.   Enabled  by  default  at  [1m-O1  [22mand
           higher.

       [1m-fipa-stack-alignment[0m
           Reduce stack alignment on call sites if possible.  Enabled by default.

       [1m-fipa-pta[0m
           Perform  interprocedural  pointer  analysis and interprocedural modification and reference analysis.  This
           option can cause excessive memory and compile-time usage on large compilation units.  It is not enabled by
           default at any optimization level.

       [1m-fipa-profile[0m
           Perform interprocedural profile propagation.  The functions called only from cold functions are marked  as
           cold.  Also  functions  executed once (such as "cold", "noreturn", static constructors or destructors) are
           identified. Cold functions and loop less parts of functions executed once are  then  optimized  for  size.
           Enabled by default at [1m-O1 [22mand higher.

       [1m-fipa-modref[0m
           Perform  interprocedural  mod/ref  analysis.   This  optimization  analyzes  the side effects of functions
           (memory locations that are modified or referenced) and enables better  optimization  across  the  function
           call boundary.  This flag is enabled by default at [1m-O1 [22mand higher.

       [1m-fipa-cp[0m
           Perform  interprocedural  constant  propagation.  This optimization analyzes the program to determine when
           values passed  to  functions  are  constants  and  then  optimizes  accordingly.   This  optimization  can
           substantially  increase  performance  if  the application has constants passed to functions.  This flag is
           enabled by default at [1m-O2[22m, [1m-Os [22mand [1m-O3[22m.  It is also enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-fipa-cp-clone[0m
           Perform  function  cloning  to  make  interprocedural  constant  propagation  stronger.    When   enabled,
           interprocedural  constant  propagation  performs  function cloning when externally visible function can be
           called with constant arguments.  Because this optimization can create multiple copies of functions, it may
           significantly increase code size (see [1m--param ipa-cp-unit-growth=[4m[22mvalue[24m).  This flag is enabled by  default
           at [1m-O3[22m.  It is also enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-fipa-bit-cp[0m
           When enabled, perform interprocedural bitwise constant propagation. This flag is enabled by default at [1m-O2[0m
           and by [1m-fprofile-use [22mand [1m-fauto-profile[22m.  It requires that [1m-fipa-cp [22mis enabled.

       [1m-fipa-vrp[0m
           When enabled, perform interprocedural propagation of value ranges. This flag is enabled by default at [1m-O2[22m.
           It requires that [1m-fipa-cp [22mis enabled.

       [1m-fipa-icf[0m
           Perform  Identical Code Folding for functions and read-only variables.  The optimization reduces code size
           and may disturb unwind stacks by replacing a function  by  equivalent  one  with  a  different  name.  The
           optimization works more effectively with link-time optimization enabled.

           Although  the behavior is similar to the Gold Linker's ICF optimization, GCC ICF works on different levels
           and thus the optimizations are not same  -  there  are  equivalences  that  are  found  only  by  GCC  and
           equivalences found only by Gold.

           This flag is enabled by default at [1m-O2 [22mand [1m-Os[22m.

       [1m-flive-patching=[4m[22mlevel[0m
           Control GCC's optimizations to produce output suitable for live-patching.

           If  the  compiler's  optimization  uses  a  function's  body  or  information  extracted  from its body to
           optimize/change another function, the latter is called an impacted function of the former.  If a  function
           is patched, its impacted functions should be patched too.

           The  impacted  functions  are  determined by the compiler's interprocedural optimizations.  For example, a
           caller is impacted when inlining a function into its caller, cloning a function and changing its caller to
           call this new clone, or extracting a function's pureness/constness information to optimize its  direct  or
           indirect callers, etc.

           Usually,  the  more  IPA  optimizations  enabled,  the  larger  the  number of impacted functions for each
           function.  In order to control the number of impacted functions  and  more  easily  compute  the  list  of
           impacted function, IPA optimizations can be partially enabled at two different levels.

           The [4mlevel[24m argument should be one of the following:

           [1minline-clone[0m
               Only  enable  inlining  and  cloning  optimizations, which includes inlining, cloning, interprocedural
               scalar replacement of aggregates and partial inlining.  As a result, when patching a function, all its
               callers and its clones' callers are impacted, therefore need to be patched as well.

               [1m-flive-patching=inline-clone [22mdisables the following  optimization  flags:  [1m-fwhole-program   -fipa-pta[0m
               [1m-fipa-reference   -fipa-ra -fipa-icf  -fipa-icf-functions  -fipa-icf-variables -fipa-bit-cp  -fipa-vrp[0m
               [1m-fipa-pure-const -fipa-reference-addressable -fipa-stack-alignment -fipa-modref[0m

           [1minline-only-static[0m
               Only enable inlining of static functions.  As a result, when  patching  a  static  function,  all  its
               callers are impacted and so need to be patched as well.

               In     addition     to     all     the     flags     that    [1m-flive-patching=inline-clone    [22mdisables,
               [1m-flive-patching=inline-only-static   [22mdisables   the   following   additional    optimization    flags:
               [1m-fipa-cp-clone  -fipa-sra  -fpartial-inlining  -fipa-cp[0m

           When [1m-flive-patching [22mis specified without any value, the default value is [4minline-clone[24m.

           This flag is disabled by default.

           Note that [1m-flive-patching [22mis not supported with link-time optimization ([1m-flto[22m).

       [1m-fisolate-erroneous-paths-dereference[0m
           Detect  paths  that  trigger erroneous or undefined behavior due to dereferencing a null pointer.  Isolate
           those paths from the main control flow and turn the statement with erroneous or undefined behavior into  a
           trap.   This flag is enabled by default at [1m-O2 [22mand higher and depends on [1m-fdelete-null-pointer-checks [22malso
           being enabled.

       [1m-fisolate-erroneous-paths-attribute[0m
           Detect paths that trigger erroneous or undefined behavior due  to  a  null  value  being  used  in  a  way
           forbidden  by  a "returns_nonnull" or "nonnull" attribute.  Isolate those paths from the main control flow
           and turn the statement with erroneous or undefined behavior into a trap.  This is not  currently  enabled,
           but may be enabled by [1m-O2 [22min the future.

       [1m-ftree-sink[0m
           Perform forward store motion on trees.  This flag is enabled by default at [1m-O1 [22mand higher.

       [1m-ftree-bit-ccp[0m
           Perform  sparse conditional bit constant propagation on trees and propagate pointer alignment information.
           This pass only operates on local scalar variables and is enabled by default at [1m-O1 [22mand higher, except  for
           [1m-Og[22m.  It requires that [1m-ftree-ccp [22mis enabled.

       [1m-ftree-ccp[0m
           Perform  sparse  conditional constant propagation (CCP) on trees.  This pass only operates on local scalar
           variables and is enabled by default at [1m-O1 [22mand higher.

       [1m-fssa-backprop[0m
           Propagate information about uses of a value up the definition chain in order to simplify the  definitions.
           For  example,  this pass strips sign operations if the sign of a value never matters.  The flag is enabled
           by default at [1m-O1 [22mand higher.

       [1m-fssa-phiopt[0m
           Perform pattern matching on SSA PHI nodes to optimize conditional code.  This pass is enabled  by  default
           at [1m-O1 [22mand higher, except for [1m-Og[22m.

       [1m-ftree-switch-conversion[0m
           Perform  conversion  of  simple  initializations in a switch to initializations from a scalar array.  This
           flag is enabled by default at [1m-O2 [22mand higher.

       [1m-ftree-tail-merge[0m
           Look for identical code sequences.  When found, replace one with a jump to the other.   This  optimization
           is  known  as  tail  merging  or  cross  jumping.  This flag is enabled by default at [1m-O2 [22mand higher.  The
           compilation time in this pass can be limited  using  [1mmax-tail-merge-comparisons  [22mparameter  and  [1mmax-tail-[0m
           [1mmerge-iterations [22mparameter.

       [1m-ftree-dce[0m
           Perform dead code elimination (DCE) on trees.  This flag is enabled by default at [1m-O1 [22mand higher.

       [1m-ftree-builtin-call-dce[0m
           Perform  conditional  dead code elimination (DCE) for calls to built-in functions that may set "errno" but
           are otherwise free of side effects.  This flag is enabled by default at [1m-O2 [22mand higher if [1m-Os [22mis not  also
           specified.

       [1m-ffinite-loops[0m
           Assume  that a loop with an exit will eventually take the exit and not loop indefinitely.  This allows the
           compiler to remove loops that otherwise have no side-effects, not considering eventual endless looping  as
           such.

           This option is enabled by default at [1m-O2 [22mfor C++ with -std=c++11 or higher.

       [1m-ftree-dominator-opts[0m
           Perform  a  variety  of  simple  scalar cleanups (constant/copy propagation, redundancy elimination, range
           propagation and expression simplification) based on a dominator tree traversal.  This also  performs  jump
           threading (to reduce jumps to jumps). This flag is enabled by default at [1m-O1 [22mand higher.

       [1m-ftree-dse[0m
           Perform  dead  store  elimination  (DSE) on trees.  A dead store is a store into a memory location that is
           later overwritten by another store without any intervening loads.  In this case the earlier store  can  be
           deleted.  This flag is enabled by default at [1m-O1 [22mand higher.

       [1m-ftree-ch[0m
           Perform  loop header copying on trees.  This is beneficial since it increases effectiveness of code motion
           optimizations.  It also saves one jump.  This flag is enabled by default at [1m-O1 [22mand  higher.   It  is  not
           enabled for [1m-Os[22m, since it usually increases code size.

       [1m-ftree-loop-optimize[0m
           Perform loop optimizations on trees.  This flag is enabled by default at [1m-O1 [22mand higher.

       [1m-ftree-loop-linear[0m
       [1m-floop-strip-mine[0m
       [1m-floop-block[0m
           Perform  loop nest optimizations.  Same as [1m-floop-nest-optimize[22m.  To use this code transformation, GCC has
           to be configured with [1m--with-isl [22mto enable the Graphite loop transformation infrastructure.

       [1m-fgraphite-identity[0m
           Enable the identity transformation for graphite.  For every SCoP we generate the polyhedral representation
           and transform it back to gimple.  Using [1m-fgraphite-identity [22mwe can check the  costs  or  benefits  of  the
           GIMPLE  ->  GRAPHITE  -> GIMPLE transformation.  Some minimal optimizations are also performed by the code
           generator isl, like index splitting and dead code elimination in loops.

       [1m-floop-nest-optimize[0m
           Enable the isl based loop nest optimizer.  This is a generic  loop  nest  optimizer  based  on  the  Pluto
           optimization  algorithms.   It  calculates  a  loop structure optimized for data-locality and parallelism.
           This option is experimental.

       [1m-floop-parallelize-all[0m
           Use the Graphite data dependence analysis to identify loops that can be parallelized.  Parallelize all the
           loops that can be analyzed to not contain loop carried dependences without checking that it is  profitable
           to parallelize the loops.

       [1m-ftree-coalesce-vars[0m
           While  transforming  the  program  out  of the SSA representation, attempt to reduce copying by coalescing
           versions of different user-defined variables, instead of just compiler  temporaries.   This  may  severely
           limit  the  ability  to  debug  an  optimized program compiled with [1m-fno-var-tracking-assignments[22m.  In the
           negated form, this flag prevents SSA coalescing of user variables.  This option is enabled by  default  if
           optimization is enabled, and it does very little otherwise.

       [1m-ftree-loop-if-convert[0m
           Attempt  to  transform conditional jumps in the innermost loops to branch-less equivalents.  The intent is
           to remove control-flow from the innermost loops in order to improve the ability of the vectorization  pass
           to handle these loops.  This is enabled by default if vectorization is enabled.

       [1m-ftree-loop-distribution[0m
           Perform  loop  distribution.  This flag can improve cache performance on big loop bodies and allow further
           loop optimizations, like parallelization or vectorization, to take place.  For example, the loop

                   DO I = 1, N
                     A(I) = B(I) + C
                     D(I) = E(I) * F
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = B(I) + C
                   ENDDO
                   DO I = 1, N
                      D(I) = E(I) * F
                   ENDDO

           This flag is enabled by default at [1m-O3[22m.  It is also enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-ftree-loop-distribute-patterns[0m
           Perform loop distribution of patterns that can be code generated with calls to a library.   This  flag  is
           enabled by default at [1m-O2 [22mand higher, and by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

           This pass distributes the initialization loops and generates a call to memset zero.  For example, the loop

                   DO I = 1, N
                     A(I) = 0
                     B(I) = A(I) + I
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = 0
                   ENDDO
                   DO I = 1, N
                      B(I) = A(I) + I
                   ENDDO

           and the initialization loop is transformed into a call to memset zero.  This flag is enabled by default at
           [1m-O3[22m.  It is also enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-floop-interchange[0m
           Perform  loop  interchange  outside of graphite.  This flag can improve cache performance on loop nest and
           allow further loop optimizations, like vectorization, to take place.  For example, the loop

                   for (int i = 0; i < N; i++)
                     for (int j = 0; j < N; j++)
                       for (int k = 0; k < N; k++)
                         c[i][j] = c[i][j] + a[i][k]*b[k][j];

           is transformed to

                   for (int i = 0; i < N; i++)
                     for (int k = 0; k < N; k++)
                       for (int j = 0; j < N; j++)
                         c[i][j] = c[i][j] + a[i][k]*b[k][j];

           This flag is enabled by default at [1m-O3[22m.  It is also enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-floop-unroll-and-jam[0m
           Apply unroll and jam transformations on feasible loops.  In a loop nest this unrolls  the  outer  loop  by
           some  factor and fuses the resulting multiple inner loops.  This flag is enabled by default at [1m-O3[22m.  It is
           also enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-ftree-loop-im[0m
           Perform loop invariant motion on trees.  This pass moves only invariants that are hard to  handle  at  RTL
           level (function calls, operations that expand to nontrivial sequences of insns).  With [1m-funswitch-loops [22mit
           also  moves  operands  of  conditions  that are invariant out of the loop, so that we can use just trivial
           invariantness analysis in loop unswitching.  The pass also includes store motion.

       [1m-ftree-loop-ivcanon[0m
           Create a canonical counter for number of iterations in loops for which determining  number  of  iterations
           requires  complicated  analysis.   Later  optimizations  then  may  determine  the  number easily.  Useful
           especially in connection with unrolling.

       [1m-ftree-scev-cprop[0m
           Perform final value replacement.  If a variable is modified in a loop in such a way that  its  value  when
           exiting the loop can be determined using only its initial value and the number of loop iterations, replace
           uses  of  the  final  value  by  such a computation, provided it is sufficiently cheap.  This reduces data
           dependencies and may allow further simplifications.  Enabled by default at [1m-O1 [22mand higher.

       [1m-fivopts[0m
           Perform induction variable optimizations (strength reduction, induction  variable  merging  and  induction
           variable elimination) on trees.

       [1m-ftree-parallelize-loops=n[0m
           Parallelize loops, i.e., split their iteration space to run in n threads.  This is only possible for loops
           whose iterations are independent and can be arbitrarily reordered.  The optimization is only profitable on
           multiprocessor  machines,  for  loops  that  are  CPU-intensive,  rather  than  constrained e.g. by memory
           bandwidth.  This option implies [1m-pthread[22m, and thus is only supported on  targets  that  have  support  for
           [1m-pthread[22m.

       [1m-ftree-pta[0m
           Perform  function-local  points-to  analysis on trees.  This flag is enabled by default at [1m-O1 [22mand higher,
           except for [1m-Og[22m.

       [1m-ftree-sra[0m
           Perform scalar replacement of aggregates.  This pass replaces structure references with scalars to prevent
           committing structures to memory too early.  This flag is enabled by default at [1m-O1 [22mand higher, except  for
           [1m-Og[22m.

       [1m-fstore-merging[0m
           Perform  merging  of narrow stores to consecutive memory addresses.  This pass merges contiguous stores of
           immediate values narrower than a word into fewer wider stores to reduce the number of instructions.   This
           is enabled by default at [1m-O2 [22mand higher as well as [1m-Os[22m.

       [1m-ftree-ter[0m
           Perform  temporary expression replacement during the SSA->normal phase.  Single use/single def temporaries
           are replaced at their use location with their defining expression.  This results in non-GIMPLE  code,  but
           gives  the  expanders  much  more  complex  trees  to work on resulting in better RTL generation.  This is
           enabled by default at [1m-O1 [22mand higher.

       [1m-ftree-slsr[0m
           Perform straight-line  strength  reduction  on  trees.   This  recognizes  related  expressions  involving
           multiplications  and  replaces  them  by  less  expensive  calculations when possible.  This is enabled by
           default at [1m-O1 [22mand higher.

       [1m-ftree-vectorize[0m
           Perform vectorization on trees. This flag enables [1m-ftree-loop-vectorize [22mand  [1m-ftree-slp-vectorize  [22mif  not
           explicitly specified.

       [1m-ftree-loop-vectorize[0m
           Perform  loop  vectorization  on  trees.  This  flag is enabled by default at [1m-O2 [22mand by [1m-ftree-vectorize[22m,
           [1m-fprofile-use[22m, and [1m-fauto-profile[22m.

       [1m-ftree-slp-vectorize[0m
           Perform  basic  block  vectorization  on  trees.  This  flag  is  enabled  by  default  at  [1m-O2   [22mand   by
           [1m-ftree-vectorize[22m, [1m-fprofile-use[22m, and [1m-fauto-profile[22m.

       [1m-ftrivial-auto-var-init=[4m[22mchoice[0m
           Initialize  automatic  variables  with  either  a  pattern  or  with  zeroes  to increase the security and
           predictability of a program by preventing uninitialized memory disclosure and use.  GCC still considers an
           automatic variable that doesn't  have  an  explicit  initializer  as  uninitialized,  [1m-Wuninitialized  [22mand
           [1m-Wanalyzer-use-of-uninitialized-value  [22mwill  still report warning messages on such automatic variables and
           the compiler will perform optimization as if the variable were uninitialized.  With this option, GCC  will
           also initialize any padding of automatic variables that have structure or union types to zeroes.  However,
           the current implementation cannot initialize automatic variables that are declared between the controlling
           expression  and  the first case of a "switch" statement.  Using [1m-Wtrivial-auto-var-init [22mto report all such
           cases.

           The three values of [4mchoice[24m are:

           *   [1muninitialized [22mdoesn't initialize any automatic variables.  This is C and C++'s default.

           *   [1mpattern [22mInitialize automatic variables with values which will likely transform logic bugs into crashes
               down the line, are easily recognized in a crash dump and without being  values  that  programmers  can
               rely  on for useful program semantics.  The current value is byte-repeatable pattern with byte "0xFE".
               The values used for pattern initialization might be changed in the future.

           *   [1mzero [22mInitialize automatic variables with zeroes.

           The default is [1muninitialized[22m.

           You can control this behavior for a specific variable by using the variable attribute "uninitialized".

       [1m-fvect-cost-model=[4m[22mmodel[0m
           Alter the cost model used for vectorization.  The [4mmodel[24m argument should  be  one  of  [1munlimited[22m,  [1mdynamic[22m,
           [1mcheap  [22mor [1mvery-cheap[22m.  With the [1munlimited [22mmodel the vectorized code-path is assumed to be profitable while
           with the [1mdynamic [22mmodel a runtime check guards the vectorized code-path to enable  it  only  for  iteration
           counts  that  will  likely  execute  faster than when executing the original scalar loop.  The [1mcheap [22mmodel
           disables vectorization of loops where doing so would be cost  prohibitive  for  example  due  to  required
           runtime  checks  for  data dependence or alignment but otherwise is equal to the [1mdynamic [22mmodel.  The [1mvery-[0m
           [1mcheap [22mmodel only allows vectorization if the vector code would entirely replace the scalar  code  that  is
           being  vectorized.   For  example,  if  each  iteration  of a vectorized loop would only be able to handle
           exactly four iterations of the scalar loop, the [1mvery-cheap [22mmodel would only  allow  vectorization  if  the
           scalar iteration count is known to be a multiple of four.

           The default cost model depends on other optimization flags and is either [1mdynamic [22mor [1mcheap[22m.

       [1m-fsimd-cost-model=[4m[22mmodel[0m
           Alter  the  cost  model  used for vectorization of loops marked with the OpenMP simd directive.  The [4mmodel[0m
           argument should be one of [1munlimited[22m, [1mdynamic[22m, [1mcheap[22m.  All  values  of  [4mmodel[24m  have  the  same  meaning  as
           described in [1m-fvect-cost-model [22mand by default a cost model defined with [1m-fvect-cost-model [22mis used.

       [1m-ftree-vrp[0m
           Perform  Value  Range Propagation on trees.  This is similar to the constant propagation pass, but instead
           of values, ranges of values are propagated.  This allows the optimizers to remove unnecessary range checks
           like array bound checks and null pointer checks.  This is enabled by default  at  [1m-O2  [22mand  higher.   Null
           pointer check elimination is only done if [1m-fdelete-null-pointer-checks [22mis enabled.

       [1m-fsplit-paths[0m
           Split  paths  leading  to loop backedges.  This can improve dead code elimination and common subexpression
           elimination.  This is enabled by default at [1m-O3 [22mand above.

       [1m-fsplit-ivs-in-unroller[0m
           Enables expression of values of induction variables in later iterations of the  unrolled  loop  using  the
           value  in  the  first  iteration.   This  breaks  long dependency chains, thus improving efficiency of the
           scheduling passes.

           A combination of [1m-fweb [22mand CSE is often sufficient to obtain  the  same  effect.   However,  that  is  not
           reliable  in  cases  where  the loop body is more complicated than a single basic block.  It also does not
           work at all on some architectures due to restrictions in the CSE pass.

           This optimization is enabled by default.

       [1m-fvariable-expansion-in-unroller[0m
           With this option, the compiler creates multiple copies of some local  variables  when  unrolling  a  loop,
           which can result in superior code.

           This optimization is enabled by default for PowerPC targets, but disabled by default otherwise.

       [1m-fpartial-inlining[0m
           Inline  parts  of  functions.   This  option  has any effect only when inlining itself is turned on by the
           [1m-finline-functions [22mor [1m-finline-small-functions [22moptions.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fpredictive-commoning[0m
           Perform predictive commoning optimization, i.e., reusing computations (especially memory loads and stores)
           performed in previous iterations of loops.

           This option is enabled at level [1m-O3[22m.  It is also enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-fprefetch-loop-arrays[0m
           If supported by the target machine, generate instructions to prefetch memory to improve the performance of
           loops that access large arrays.

           This option may generate better or worse code; results are highly dependent  on  the  structure  of  loops
           within the source code.

           Disabled at level [1m-Os[22m.

       [1m-fno-printf-return-value[0m
           Do  not  substitute  constants  for  known  return  value of formatted output functions such as "sprintf",
           "snprintf", "vsprintf", and "vsnprintf" (but not "printf" of "fprintf").  This transformation  allows  GCC
           to  optimize  or  even  eliminate  branches based on the known return value of these functions called with
           arguments that are either constant, or whose values are known to be in a range that makes determining  the
           exact  return  value  possible.  For example, when [1m-fprintf-return-value [22mis in effect, both the branch and
           the body of the "if" statement (but not the call to "snprint") can be optimized away when "i" is a  32-bit
           or smaller integer because the return value is guaranteed to be at most 8.

                   char buf[9];
                   if (snprintf (buf, "%08x", i) >= sizeof buf)
                     ...

           The [1m-fprintf-return-value [22moption relies on other optimizations and yields best results with [1m-O2 [22mand above.
           It  works in tandem with the [1m-Wformat-overflow [22mand [1m-Wformat-truncation [22moptions.  The [1m-fprintf-return-value[0m
           option is enabled by default.

       [1m-fno-peephole[0m
       [1m-fno-peephole2[0m
           Disable  any  machine-specific  peephole  optimizations.   The  difference   between   [1m-fno-peephole   [22mand
           [1m-fno-peephole2 [22mis in how they are implemented in the compiler; some targets use one, some use the other, a
           few use both.

           [1m-fpeephole [22mis enabled by default.  [1m-fpeephole2 [22menabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fno-guess-branch-probability[0m
           Do not guess branch probabilities using heuristics.

           GCC  uses  heuristics  to  guess  branch  probabilities  if  they  are  not provided by profiling feedback
           ([1m-fprofile-arcs[22m).  These heuristics are based on the control flow graph.  If some branch probabilities are
           specified by "__builtin_expect", then the heuristics are used to guess branch probabilities for  the  rest
           of  the control flow graph, taking the "__builtin_expect" info into account.  The interactions between the
           heuristics and "__builtin_expect" can be complex, and in some cases, it  may  be  useful  to  disable  the
           heuristics so that the effects of "__builtin_expect" are easier to understand.

           It    is    also    possible    to    specify    expected    probability    of    the    expression   with
           "__builtin_expect_with_probability" built-in function.

           The default is [1m-fguess-branch-probability [22mat levels [1m-O[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-freorder-blocks[0m
           Reorder basic blocks in the compiled function in order to reduce number of taken branches and improve code
           locality.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-freorder-blocks-algorithm=[4m[22malgorithm[0m
           Use the specified algorithm for basic block reordering.  The [4malgorithm[24m argument can be [1msimple[22m, which  does
           not  increase  code size (except sometimes due to secondary effects like alignment), or [1mstc[22m, the "software
           trace cache" algorithm, which tries to put all often executed code  together,  minimizing  the  number  of
           branches executed by making extra copies of code.

           The default is [1msimple [22mat levels [1m-O1[22m, [1m-Os[22m, and [1mstc [22mat levels [1m-O2[22m, [1m-O3[22m.

       [1m-freorder-blocks-and-partition[0m
           In  addition  to  reordering  basic  blocks  in  the compiled function, in order to reduce number of taken
           branches, partitions hot and cold basic blocks into separate sections of the assembly  and  [4m.o[24m  files,  to
           improve paging and cache locality performance.

           This  optimization  is automatically turned off in the presence of exception handling or unwind tables (on
           targets using setjump/longjump or target specific scheme), for linkonce sections,  for  functions  with  a
           user-defined  section  attribute  and  on  any  architecture  that  does not support named sections.  When
           [1m-fsplit-stack [22mis used this option is not enabled by default (to avoid linker errors), but may  be  enabled
           explicitly (if using a working linker).

           Enabled for x86 at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-freorder-functions[0m
           Reorder  functions  in  the  object  file in order to improve code locality.  This is implemented by using
           special subsections ".text.hot" for most frequently executed functions and ".text.unlikely"  for  unlikely
           executed  functions.   Reordering  is done by the linker so object file format must support named sections
           and linker must place them in a reasonable way.

           This option isn't effective unless you either provide profile feedback (see [1m-fprofile-arcs [22mfor details) or
           manually annotate functions with "hot" or "cold" attributes.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fstrict-aliasing[0m
           Allow the compiler to assume the strictest aliasing rules applicable to the language being compiled.   For
           C  (and  C++), this activates optimizations based on the type of expressions.  In particular, an object of
           one type is assumed never to reside at the same address as an object of a different type, unless the types
           are almost the same.  For example, an "unsigned int" can alias an "int", but not a "void*" or a  "double".
           A character type may alias any other type.

           Pay special attention to code like this:

                   union a_union {
                     int i;
                     double d;
                   };

                   int f() {
                     union a_union t;
                     t.d = 3.0;
                     return t.i;
                   }

           The practice of reading from a different union member than the one most recently written to (called "type-
           punning")  is  common.   Even  with  [1m-fstrict-aliasing[22m,  type-punning  is  allowed, provided the memory is
           accessed through the union type.  So, the code above works as expected.    However, this code might not:

                   int f() {
                     union a_union t;
                     int* ip;
                     t.d = 3.0;
                     ip = &t.i;
                     return *ip;
                   }

           Similarly, access by taking the address, casting the resulting pointer and dereferencing  the  result  has
           undefined behavior, even if the cast uses a union type, e.g.:

                   int f() {
                     double d = 3.0;
                     return ((union a_union *) &d)->i;
                   }

           The [1m-fstrict-aliasing [22moption is enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fipa-strict-aliasing[0m
           Controls whether rules of [1m-fstrict-aliasing [22mare applied across function boundaries.  Note that if multiple
           functions  gets inlined into a single function the memory accesses are no longer considered to be crossing
           a function boundary.

           The [1m-fipa-strict-aliasing [22moption is  enabled  by  default  and  is  effective  only  in  combination  with
           [1m-fstrict-aliasing[22m.

       [1m-falign-functions[0m
       [1m-falign-functions=[4m[22mn[0m
       [1m-falign-functions=[4m[22mn[24m[1m:[4m[22mm[0m
       [1m-falign-functions=[4m[22mn[24m[1m:[4m[22mm[24m[1m:[4m[22mn2[0m
       [1m-falign-functions=[4m[22mn[24m[1m:[4m[22mm[24m[1m:[4m[22mn2[24m[1m:[4m[22mm2[0m
           Align  the  start  of  functions  to  the next power-of-two greater than or equal to [4mn[24m, skipping up to [4mm[24m-1
           bytes.  This ensures that at least the first [4mm[24m bytes of the function can be fetched  by  the  CPU  without
           crossing an [4mn[24m-byte alignment boundary.

           If [4mm[24m is not specified, it defaults to [4mn[24m.

           Examples:  [1m-falign-functions=32 [22maligns functions to the next 32-byte boundary, [1m-falign-functions=24 [22maligns
           to the next 32-byte boundary only if this can be done by skipping 23 bytes or less, [1m-falign-functions=32:7[0m
           aligns to the next 32-byte boundary only if this can be done by skipping 6 bytes or less.

           The second pair of [4mn2[24m:[4mm2[24m values allows you to specify a secondary  alignment:  [1m-falign-functions=64:7:32:3[0m
           aligns  to  the next 64-byte boundary if this can be done by skipping 6 bytes or less, otherwise aligns to
           the next 32-byte boundary if this can be done by skipping 2 bytes or less.  If [4mm2[24m  is  not  specified,  it
           defaults to [4mn2[24m.

           Some assemblers only support this flag when [4mn[24m is a power of two; in that case, it is rounded up.

           [1m-fno-align-functions [22mand [1m-falign-functions=1 [22mare equivalent and mean that functions are not aligned.

           If  [4mn[24m is not specified or is zero, use a machine-dependent default.  The maximum allowed [4mn[24m option value is
           65536.

           Enabled at levels [1m-O2[22m, [1m-O3[22m.

       [1m-flimit-function-alignment[0m
           If this option is enabled, the compiler tries to avoid unnecessarily overaligning functions.  It  attempts
           to  instruct  the  assembler  to  align by the amount specified by [1m-falign-functions[22m, but not to skip more
           bytes than the size of the function.

       [1m-falign-labels[0m
       [1m-falign-labels=[4m[22mn[0m
       [1m-falign-labels=[4m[22mn[24m[1m:[4m[22mm[0m
       [1m-falign-labels=[4m[22mn[24m[1m:[4m[22mm[24m[1m:[4m[22mn2[0m
       [1m-falign-labels=[4m[22mn[24m[1m:[4m[22mm[24m[1m:[4m[22mn2[24m[1m:[4m[22mm2[0m
           Align all branch targets to a power-of-two boundary.

           Parameters  of  this  option  are  analogous  to  the  [1m-falign-functions  [22moption.   [1m-fno-align-labels  [22mand
           [1m-falign-labels=1 [22mare equivalent and mean that labels are not aligned.

           If  [1m-falign-loops  [22mor  [1m-falign-jumps [22mare applicable and are greater than this value, then their values are
           used instead.

           If [4mn[24m is not specified or is zero, use a machine-dependent default which is very likely to be [1m1[22m, meaning no
           alignment.  The maximum allowed [4mn[24m option value is 65536.

           Enabled at levels [1m-O2[22m, [1m-O3[22m.

       [1m-falign-loops[0m
       [1m-falign-loops=[4m[22mn[0m
       [1m-falign-loops=[4m[22mn[24m[1m:[4m[22mm[0m
       [1m-falign-loops=[4m[22mn[24m[1m:[4m[22mm[24m[1m:[4m[22mn2[0m
       [1m-falign-loops=[4m[22mn[24m[1m:[4m[22mm[24m[1m:[4m[22mn2[24m[1m:[4m[22mm2[0m
           Align loops to a power-of-two boundary.  If the loops are executed many  times,  this  makes  up  for  any
           execution of the dummy padding instructions.

           If [1m-falign-labels [22mis greater than this value, then its value is used instead.

           Parameters   of  this  option  are  analogous  to  the  [1m-falign-functions  [22moption.   [1m-fno-align-loops  [22mand
           [1m-falign-loops=1 [22mare equivalent and mean that loops are not aligned.  The maximum allowed [4mn[24m option value is
           65536.

           If [4mn[24m is not specified or is zero, use a machine-dependent default.

           Enabled at levels [1m-O2[22m, [1m-O3[22m.

       [1m-falign-jumps[0m
       [1m-falign-jumps=[4m[22mn[0m
       [1m-falign-jumps=[4m[22mn[24m[1m:[4m[22mm[0m
       [1m-falign-jumps=[4m[22mn[24m[1m:[4m[22mm[24m[1m:[4m[22mn2[0m
       [1m-falign-jumps=[4m[22mn[24m[1m:[4m[22mm[24m[1m:[4m[22mn2[24m[1m:[4m[22mm2[0m
           Align branch targets to a power-of-two boundary, for branch targets where the targets can only be  reached
           by jumping.  In this case, no dummy operations need be executed.

           If [1m-falign-labels [22mis greater than this value, then its value is used instead.

           Parameters   of  this  option  are  analogous  to  the  [1m-falign-functions  [22moption.   [1m-fno-align-jumps  [22mand
           [1m-falign-jumps=1 [22mare equivalent and mean that loops are not aligned.

           If [4mn[24m is not specified or is zero, use a machine-dependent default.  The maximum allowed [4mn[24m option value  is
           65536.

           Enabled at levels [1m-O2[22m, [1m-O3[22m.

       [1m-fno-allocation-dce[0m
           Do not remove unused C++ allocations in dead code elimination.

       [1m-fallow-store-data-races[0m
           Allow  the  compiler to perform optimizations that may introduce new data races on stores, without proving
           that the variable cannot be concurrently accessed by other threads.  Does not affect optimization of local
           data.  It is safe to use this option if it is known that global data will  not  be  accessed  by  multiple
           threads.

           Examples  of optimizations enabled by [1m-fallow-store-data-races [22minclude hoisting or if-conversions that may
           cause a value that was already in memory to be re-written with that same value.  Such re-writing  is  safe
           in a single threaded context but may be unsafe in a multi-threaded context.  Note that on some processors,
           if-conversions may be required in order to enable vectorization.

           Enabled at level [1m-Ofast[22m.

       [1m-funit-at-a-time[0m
           This  option  is left for compatibility reasons. [1m-funit-at-a-time [22mhas no effect, while [1m-fno-unit-at-a-time[0m
           implies [1m-fno-toplevel-reorder [22mand [1m-fno-section-anchors[22m.

           Enabled by default.

       [1m-fno-toplevel-reorder[0m
           Do not reorder top-level functions, variables, and "asm" statements.  Output them in the same  order  that
           they  appear  in the input file.  When this option is used, unreferenced static variables are not removed.
           This option is intended to support existing code that relies on a particular ordering.  For new  code,  it
           is better to use attributes when possible.

           [1m-ftoplevel-reorder  [22mis  the  default at [1m-O1 [22mand higher, and also at [1m-O0 [22mif [1m-fsection-anchors [22mis explicitly
           requested.  Additionally [1m-fno-toplevel-reorder [22mimplies [1m-fno-section-anchors[22m.

       [1m-funreachable-traps[0m
           With this option, the compiler turns calls to "__builtin_unreachable" into traps, instead  of  using  them
           for optimization.  This also affects any such calls implicitly generated by the compiler.

           This option has the same effect as [1m-fsanitize=unreachable -fsanitize-trap=unreachable[22m, but does not affect
           the  values  of those options.  If [1m-fsanitize=unreachable [22mis enabled, that option takes priority over this
           one.

           This option is enabled by default at [1m-O0 [22mand [1m-Og[22m.

       [1m-fweb[0m
           Constructs webs as commonly used for register allocation purposes and assign each  web  individual  pseudo
           register.   This  allows the register allocation pass to operate on pseudos directly, but also strengthens
           several other optimization passes, such as CSE, loop optimizer and trivial dead  code  remover.   It  can,
           however, make debugging impossible, since variables no longer stay in a "home register".

           Enabled by default with [1m-funroll-loops[22m.

       [1m-fwhole-program[0m
           Assume  that  the  current  compilation  unit  represents  the  whole  program being compiled.  All public
           functions and variables with the exception of "main" and those merged  by  attribute  "externally_visible"
           become static functions and in effect are optimized more aggressively by interprocedural optimizers.

           With [1m-flto [22mthis option has a limited use.  In most cases the precise list of symbols used or exported from
           the  binary  is  known  the resolution info passed to the link-time optimizer by the linker plugin.  It is
           still useful if no linker plugin is used or during incremental link step when final code is produced (with
           [1m-flto -flinker-output=nolto-rel[22m).

       [1m-flto[=[4m[22mn[24m[1m][0m
           This option runs the standard link-time optimizer.  When invoked with source  code,  it  generates  GIMPLE
           (one  of  GCC's  internal representations) and writes it to special ELF sections in the object file.  When
           the object files are linked together, all the function  bodies  are  read  from  these  ELF  sections  and
           instantiated as if they had been part of the same translation unit.

           To  use  the  link-time  optimizer, [1m-flto [22mand optimization options should be specified at compile time and
           during the final link.  It is recommended that you compile all the files participating in  the  same  link
           with the same options and also specify those options at link time.  For example:

                   gcc -c -O2 -flto foo.c
                   gcc -c -O2 -flto bar.c
                   gcc -o myprog -flto -O2 foo.o bar.o

           The first two invocations to GCC save a bytecode representation of GIMPLE into special ELF sections inside
           [4mfoo.o[24m  and  [4mbar.o[24m.   The  final  invocation reads the GIMPLE bytecode from [4mfoo.o[24m and [4mbar.o[24m, merges the two
           files into a single internal image, and compiles the result as usual.  Since  both  [4mfoo.o[24m  and  [4mbar.o[24m  are
           merged  into a single image, this causes all the interprocedural analyses and optimizations in GCC to work
           across the two files as if they were a single one.  This means, for example, that the inliner is  able  to
           inline functions in [4mbar.o[24m into functions in [4mfoo.o[24m and vice-versa.

           Another (simpler) way to enable link-time optimization is:

                   gcc -o myprog -flto -O2 foo.c bar.c

           The above generates bytecode for [4mfoo.c[24m and [4mbar.c[24m, merges them together into a single GIMPLE representation
           and optimizes them as usual to produce [4mmyprog[24m.

           The  important  thing  to  keep  in mind is that to enable link-time optimizations you need to use the GCC
           driver to perform the link step.  GCC automatically performs link-time optimization if any of the  objects
           involved were compiled with the [1m-flto [22mcommand-line option.  You can always override the automatic decision
           to do link-time optimization by passing [1m-fno-lto [22mto the link command.

           To  make  whole program optimization effective, it is necessary to make certain whole program assumptions.
           The compiler needs to know what functions and variables can be accessed by libraries and  runtime  outside
           of   the   link-time   optimized   unit.    When   supported   by  the  linker,  the  linker  plugin  (see
           [1m-fuse-linker-plugin[22m) passes information to the compiler about used and externally visible  symbols.   When
           the  linker  plugin  is  not available, [1m-fwhole-program [22mshould be used to allow the compiler to make these
           assumptions, which leads to more aggressive optimization decisions.

           When a file is compiled with [1m-flto [22mwithout [1m-fuse-linker-plugin[22m, the generated object file is larger than a
           regular object file because it contains GIMPLE bytecodes and the usual final code (see [1m-ffat-lto-objects[22m).
           This means that object files with LTO information can be linked as normal object  files;  if  [1m-fno-lto  [22mis
           passed  to  the linker, no interprocedural optimizations are applied.  Note that when [1m-fno-fat-lto-objects[0m
           is enabled the compile stage is faster but you cannot perform a regular, non-LTO link on them.

           When producing the final binary, GCC only applies link-time optimizations  to  those  files  that  contain
           bytecode.   Therefore,  you  can  mix and match object files and libraries with GIMPLE bytecodes and final
           object code.  GCC automatically selects which files to optimize in  LTO  mode  and  which  files  to  link
           without further processing.

           Generally, options specified at link time override those specified at compile time, although in some cases
           GCC attempts to infer link-time options from the settings used to compile the input files.

           If you do not specify an optimization level option [1m-O [22mat link time, then GCC uses the highest optimization
           level  used  when  compiling  the  object  files.   Note  that  it  is generally ineffective to specify an
           optimization level option only at link time and not at compile time, for two  reasons.   First,  compiling
           without  optimization suppresses compiler passes that gather information needed for effective optimization
           at link time.  Second, some early optimization passes can be performed only at compile  time  and  not  at
           link time.

           There  are  some code generation flags preserved by GCC when generating bytecodes, as they need to be used
           during the final link.  Currently, the following options and their  settings  are  taken  from  the  first
           object  file  that  explicitly specifies them: [1m-fcommon[22m, [1m-fexceptions[22m, [1m-fnon-call-exceptions[22m, [1m-fgnu-tm [22mand
           all the [1m-m [22mtarget flags.

           The following options [1m-fPIC[22m, [1m-fpic[22m, [1m-fpie [22mand [1m-fPIE [22mare combined based on the following scheme:

                   B<-fPIC> + B<-fpic> = B<-fpic>
                   B<-fPIC> + B<-fno-pic> = B<-fno-pic>
                   B<-fpic/-fPIC> + (no option) = (no option)
                   B<-fPIC> + B<-fPIE> = B<-fPIE>
                   B<-fpic> + B<-fPIE> = B<-fpie>
                   B<-fPIC/-fpic> + B<-fpie> = B<-fpie>

           Certain ABI-changing flags are required to match in all compilation units, and trying to override this  at
           link  time  with  a  conflicting  value is ignored.  This includes options such as [1m-freg-struct-return [22mand
           [1m-fpcc-struct-return[22m.

           Other options such as [1m-ffp-contract[22m, [1m-fno-strict-overflow[22m, [1m-fwrapv[22m, [1m-fno-trapv [22mor [1m-fno-strict-aliasing [22mare
           passed  through  to  the  link  stage  and  merged  conservatively  for  conflicting  translation   units.
           Specifically   [1m-fno-strict-overflow[22m,   [1m-fwrapv   [22mand   [1m-fno-trapv   [22mtake   precedence;   and  for  example
           [1m-ffp-contract=off [22mtakes precedence over [1m-ffp-contract=fast[22m.  You can override them at link time.

           Diagnostic options such as [1m-Wstringop-overflow [22mare passed through to the  link  stage  and  their  setting
           matches  that  of  the  compile-step at function granularity.  Note that this matters only for diagnostics
           emitted during optimization.  Note that code transforms such  as  inlining  can  lead  to  warnings  being
           enabled or disabled for regions if code not consistent with the setting at compile time.

           When  you  need  to  pass options to the assembler via [1m-Wa [22mor [1m-Xassembler [22mmake sure to either compile such
           translation units with [1m-fno-lto [22mor consistently use the same assembler options on all  translation  units.
           You can alternatively also specify assembler options at LTO link time.

           To  enable debug info generation you need to supply [1m-g [22mat compile time.  If any of the input files at link
           time were built with debug info generation enabled the link will enable debug  info  generation  as  well.
           Any  elaborate  debug  info  settings like the dwarf level [1m-gdwarf-5 [22mneed to be explicitly repeated at the
           linker command line and mixing different settings in different translation units is discouraged.

           If LTO encounters objects with C linkage declared with incompatible types in separate translation units to
           be linked together (undefined behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be  issued.
           The behavior is still undefined at run time.  Similar diagnostics may be raised for other languages.

           Another  feature  of LTO is that it is possible to apply interprocedural optimizations on files written in
           different languages:

                   gcc -c -flto foo.c
                   g++ -c -flto bar.cc
                   gfortran -c -flto baz.f90
                   g++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran

           Notice that the final link is done with [1mg++ [22mto get the C++ runtime libraries and [1m-lgfortran  [22mis  added  to
           get the Fortran runtime libraries.  In general, when mixing languages in LTO mode, you should use the same
           link command options as when mixing languages in a regular (non-LTO) compilation.

           If  object  files containing GIMPLE bytecode are stored in a library archive, say [4mlibfoo.a[24m, it is possible
           to extract and use them in an LTO link if you are using a linker with plugin support.   To  create  static
           libraries  suitable  for  LTO,  use [1mgcc-ar [22mand [1mgcc-ranlib [22minstead of [1mar [22mand [1mranlib[22m; to show the symbols of
           object files with GIMPLE bytecode, use [1mgcc-nm[22m.  Those commands require that [1mar[22m, [1mranlib [22mand  [1mnm  [22mhave  been
           compiled  with  plugin support.  At link time, use the flag [1m-fuse-linker-plugin [22mto ensure that the library
           participates in the LTO optimization process:

                   gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo

           With the linker plugin enabled, the linker extracts the needed GIMPLE files from [4mlibfoo.a[24m and passes  them
           on to the running GCC to make them part of the aggregated GIMPLE image to be optimized.

           If you are not using a linker with plugin support and/or do not enable the linker plugin, then the objects
           inside  [4mlibfoo.a[24m  are  extracted  and linked as usual, but they do not participate in the LTO optimization
           process.  In order to make a static library suitable for both LTO optimization and usual linkage,  compile
           its object files with [1m-flto -ffat-lto-objects[22m.

           Link-time  optimizations do not require the presence of the whole program to operate.  If the program does
           not require any symbols to be exported, it is possible to combine [1m-flto [22mand [1m-fwhole-program [22mto  allow  the
           interprocedural  optimizers  to  use  more  aggressive assumptions which may lead to improved optimization
           opportunities.   Use  of  [1m-fwhole-program  [22mis   not   needed   when   linker   plugin   is   active   (see
           [1m-fuse-linker-plugin[22m).

           The current implementation of LTO makes no attempt to generate bytecode that is portable between different
           types  of  hosts.  The bytecode files are versioned and there is a strict version check, so bytecode files
           generated in one version of GCC do not work with an older or newer version of GCC.

           Link-time optimization does not work well with generation of debugging information on systems  other  than
           those using a combination of ELF and DWARF.

           If  you  specify  the  optional  [4mn[24m,  the optimization and code generation done at link time is executed in
           parallel using [4mn[24m parallel jobs by utilizing an installed [1mmake [22mprogram.  The environment variable [1mMAKE  [22mmay
           be used to override the program used.

           You can also specify [1m-flto=jobserver [22mto use GNU make's job server mode to determine the number of parallel
           jobs. This is useful when the Makefile calling GCC is already executing in parallel.  You must prepend a [1m+[0m
           to  the  command recipe in the parent Makefile for this to work.  This option likely only works if [1mMAKE [22mis
           GNU make.  Even without the option value, GCC tries to automatically  detect  a  running  GNU  make's  job
           server.

           Use  [1m-flto=auto [22mto use GNU make's job server, if available, or otherwise fall back to autodetection of the
           number of CPU threads present in your system.

       [1m-flto-partition=[4m[22malg[0m
           Specify the partitioning algorithm used by the link-time optimizer.  The value is either [1m1to1 [22mto specify a
           partitioning mirroring the original source files or [1mbalanced [22mto specify partitioning  into  equally  sized
           chunks  (whenever  possible)  or  [1mmax [22mto create new partition for every symbol where possible.  Specifying
           [1mnone [22mas an algorithm disables partitioning and streaming completely.  The default value is [1mbalanced[22m. While
           [1m1to1 [22mcan be used as an workaround for various code ordering issues, the [1mmax [22mpartitioning is  intended  for
           internal  testing only.  The value [1mone [22mspecifies that exactly one partition should be used while the value
           [1mnone [22mbypasses partitioning and executes the link-time optimization step directly from the WPA phase.

       [1m-flto-compression-level=[4m[22mn[0m
           This option specifies the level of compression used for intermediate language written to LTO object files,
           and is only meaningful in conjunction with LTO mode ([1m-flto[22m).  GCC currently supports two  LTO  compression
           algorithms. For zstd, valid values are 0 (no compression) to 19 (maximum compression), while zlib supports
           values  from  0 to 9.  Values outside this range are clamped to either minimum or maximum of the supported
           values.  If the option is not given, a default balanced compression setting is used.

       [1m-fuse-linker-plugin[0m
           Enables the use of a linker plugin during link-time optimization.  This option relies on plugin support in
           the linker, which is available in gold or in GNU ld 2.21 or newer.

           This option enables the extraction of object files with GIMPLE bytecode  out  of  library  archives.  This
           improves  the  quality of optimization by exposing more code to the link-time optimizer.  This information
           specifies what symbols can  be  accessed  externally  (by  non-LTO  object  or  during  dynamic  linking).
           Resulting  code  quality  improvements  on  binaries (and shared libraries that use hidden visibility) are
           similar to [1m-fwhole-program[22m.  See [1m-flto [22mfor a description of the effect of this flag and how to use it.

           This option is enabled by default when LTO support in GCC is enabled and GCC was configured for use with a
           linker supporting plugins (GNU ld 2.21 or newer or gold).

       [1m-ffat-lto-objects[0m
           Fat LTO objects are object files that contain both the intermediate language and  the  object  code.  This
           makes  them  usable  for both LTO linking and normal linking. This option is effective only when compiling
           with [1m-flto [22mand is ignored at link time.

           [1m-fno-fat-lto-objects [22mimproves compilation time over plain LTO, but requires the complete toolchain  to  be
           aware  of LTO. It requires a linker with linker plugin support for basic functionality.  Additionally, [1mnm[22m,
           [1mar [22mand [1mranlib [22mneed to support linker plugins to  allow  a  full-featured  build  environment  (capable  of
           building  static  libraries  etc).  GCC provides the [1mgcc-ar[22m, [1mgcc-nm[22m, [1mgcc-ranlib [22mwrappers to pass the right
           options to these tools. With non fat LTO makefiles need to be modified to use them.

           Note that modern  binutils  provide  plugin  auto-load  mechanism.   Installing  the  linker  plugin  into
           [4m$libdir/bfd-plugins[24m has the same effect as usage of the command wrappers ([1mgcc-ar[22m, [1mgcc-nm [22mand [1mgcc-ranlib[22m).

           The default is [1m-fno-fat-lto-objects [22mon targets with linker plugin support.

       [1m-fcompare-elim[0m
           After  register  allocation  and  post-register  allocation  instruction  splitting,  identify  arithmetic
           instructions that compute processor flags similar to a comparison operation based on that arithmetic.   If
           possible, eliminate the explicit comparison operation.

           This pass only applies to certain targets that cannot explicitly represent the comparison operation before
           register allocation is complete.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fcprop-registers[0m
           After  register  allocation and post-register allocation instruction splitting, perform a copy-propagation
           pass to try to reduce scheduling dependencies and occasionally eliminate the copy.

           Enabled at levels [1m-O1[22m, [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-fprofile-correction[0m
           Profiles collected using an instrumented binary for multi-threaded programs may  be  inconsistent  due  to
           missed  counter  updates. When this option is specified, GCC uses heuristics to correct or smooth out such
           inconsistencies. By default, GCC emits an error message when an inconsistent profile is detected.

           This option is enabled by [1m-fauto-profile[22m.

       [1m-fprofile-partial-training[0m
           With "-fprofile-use" all portions of programs not executed during train run are optimized agressively  for
           size rather than speed.  In some cases it is not practical to train all possible hot paths in the program.
           (For  example,  program may contain functions specific for a given hardware and trianing may not cover all
           hardware configurations program is run on.)  With "-fprofile-partial-training" profile  feedback  will  be
           ignored  for  all functions not executed during the train run leading them to be optimized as if they were
           compiled without profile feedback. This leads to better performance when train run is  not  representative
           but also leads to significantly bigger code.

       [1m-fprofile-use[0m
       [1m-fprofile-use=[4m[22mpath[0m
           Enable  profile  feedback-directed  optimizations,  and  the  following  optimizations,  many of which are
           generally profitable only with profile feedback available:

           [1m-fbranch-probabilities  -fprofile-values -funroll-loops  -fpeel-loops  -ftracer  -fvpt  -finline-functions[0m
           [1m-fipa-cp     -fipa-cp-clone     -fipa-bit-cp   -fpredictive-commoning    -fsplit-loops    -funswitch-loops[0m
           [1m-fgcse-after-reload       -ftree-loop-vectorize       -ftree-slp-vectorize       -fvect-cost-model=dynamic[0m
           [1m-ftree-loop-distribute-patterns -fprofile-reorder-functions[0m

           Before you can use this option, you must first generate profiling information.

           By  default, GCC emits an error message if the feedback profiles do not match the source code.  This error
           can be turned into a warning by using  [1m-Wno-error=coverage-mismatch[22m.   Note  this  may  result  in  poorly
           optimized  code.   Additionally,  by default, GCC also emits a warning message if the feedback profiles do
           not exist (see [1m-Wmissing-profile[22m).

           If [4mpath[24m is specified, GCC looks at the [4mpath[24m to find the profile feedback data files. See [1m-fprofile-dir[22m.

       [1m-fauto-profile[0m
       [1m-fauto-profile=[4m[22mpath[0m
           Enable sampling-based feedback-directed optimizations, and the following optimizations, many of which  are
           generally profitable only with profile feedback available:

           [1m-fbranch-probabilities   -fprofile-values -funroll-loops  -fpeel-loops  -ftracer  -fvpt -finline-functions[0m
           [1m-fipa-cp    -fipa-cp-clone    -fipa-bit-cp   -fpredictive-commoning     -fsplit-loops     -funswitch-loops[0m
           [1m-fgcse-after-reload        -ftree-loop-vectorize       -ftree-slp-vectorize      -fvect-cost-model=dynamic[0m
           [1m-ftree-loop-distribute-patterns -fprofile-correction[0m

           [4mpath[24m is the name of a file containing AutoFDO profile information.  If omitted, it defaults to [4mfbdata.afdo[0m
           in the current directory.

           Producing an AutoFDO profile data file requires running your program with the [1mperf [22mutility on a  supported
           GNU/Linux target system.  For more information, see <[1mhttps://perf.wiki.kernel.org/[22m>.

           E.g.

                   perf record -e br_inst_retired:near_taken -b -o perf.data \
                       -- your_program

           Then  use  the  [1mcreate_gcov [22mtool to convert the raw profile data to a format that can be used by GCC.  You
           must   also   supply   the   unstripped    binary    for    your    program    to    this    tool.     See
           <[1mhttps://github.com/google/autofdo[22m>.

           E.g.

                   create_gcov --binary=your_program.unstripped --profile=perf.data \
                       --gcov=profile.afdo

       The  following options control compiler behavior regarding floating-point arithmetic.  These options trade off
       between speed and correctness.  All must be specifically enabled.

       [1m-ffloat-store[0m
           Do not store floating-point variables in registers, and inhibit other options that might change whether  a
           floating-point value is taken from a register or memory.

           This  option  prevents  undesirable  excess  precision  on  machines  such as the 68000 where the floating
           registers (of the 68881) keep more precision than a "double" is supposed to have.  Similarly for  the  x86
           architecture.   For  most  programs,  the  excess precision does only good, but a few programs rely on the
           precise definition of IEEE floating point.  Use [1m-ffloat-store [22mfor such programs, after modifying  them  to
           store all pertinent intermediate computations into variables.

       [1m-fexcess-precision=[4m[22mstyle[0m
           This option allows further control over excess precision on machines where floating-point operations occur
           in  a format with more precision or range than the IEEE standard and interchange floating-point types.  By
           default, [1m-fexcess-precision=fast [22mis in effect; this means that operations may be carried out  in  a  wider
           precision  than  the  types  specified  in  the  source  if  that  would  result in faster code, and it is
           unpredictable when rounding to the types specified in the source code takes place.  When  compiling  C  or
           C++,  if [1m-fexcess-precision=standard [22mis specified then excess precision follows the rules specified in ISO
           C99 or C++; in particular, both casts and assignments cause values to be rounded to their  semantic  types
           (whereas  [1m-ffloat-store  [22monly  affects  assignments).  This option is enabled by default for C or C++ if a
           strict  conformance  option   such   as   [1m-std=c99   [22mor   [1m-std=c++17   [22mis   used.    [1m-ffast-math   [22menables
           [1m-fexcess-precision=fast [22mby default regardless of whether a strict conformance option is used.

           [1m-fexcess-precision=standard  [22mis  not implemented for languages other than C or C++.  On the x86, it has no
           effect if [1m-mfpmath=sse [22mor [1m-mfpmath=sse+387 [22mis specified; in the former case, IEEE semantics apply  without
           excess precision, and in the latter, rounding is unpredictable.

       [1m-ffast-math[0m
           Sets  the  options  [1m-fno-math-errno[22m,  [1m-funsafe-math-optimizations[22m, [1m-ffinite-math-only[22m, [1m-fno-rounding-math[22m,
           [1m-fno-signaling-nans[22m, [1m-fcx-limited-range [22mand [1m-fexcess-precision=fast[22m.

           This option causes the preprocessor macro "__FAST_MATH__" to be defined.

           This option is not turned on by any [1m-O [22moption besides [1m-Ofast [22msince it can result in incorrect  output  for
           programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It
           may, however, yield faster code for programs that do not require the guarantees of these specifications.

       [1m-fno-math-errno[0m
           Do not set "errno" after calling math functions that are executed with a single instruction, e.g., "sqrt".
           A program that relies on IEEE exceptions for math error handling may want to use this flag for speed while
           maintaining IEEE arithmetic compatibility.

           This  option  is  not turned on by any [1m-O [22moption since it can result in incorrect output for programs that
           depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however,
           yield faster code for programs that do not require the guarantees of these specifications.

           The default is [1m-fmath-errno[22m.

           On Darwin systems, the math library never sets "errno".  There is therefore no reason for the compiler  to
           consider the possibility that it might, and [1m-fno-math-errno [22mis the default.

       [1m-funsafe-math-optimizations[0m
           Allow optimizations for floating-point arithmetic that (a) assume that arguments and results are valid and
           (b) may violate IEEE or ANSI standards.  When used at link time, it may include libraries or startup files
           that change the default FPU control word or other similar optimizations.

           This  option  is  not turned on by any [1m-O [22moption since it can result in incorrect output for programs that
           depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however,
           yield faster code for programs that do not  require  the  guarantees  of  these  specifications.   Enables
           [1m-fno-signed-zeros[22m, [1m-fno-trapping-math[22m, [1m-fassociative-math [22mand [1m-freciprocal-math[22m.

           The default is [1m-fno-unsafe-math-optimizations[22m.

       [1m-fassociative-math[0m
           Allow  re-association of operands in series of floating-point operations.  This violates the ISO C and C++
           language standard by possibly changing computation result.  NOTE: re-ordering may change the sign of  zero
           as  well  as ignore NaNs and inhibit or create underflow or overflow (and thus cannot be used on code that
           relies on rounding behavior like "(x + 2**52) - 2**52".  May also reorder floating-point  comparisons  and
           thus   may  not  be  used  when  ordered  comparisons  are  required.   This  option  requires  that  both
           [1m-fno-signed-zeros [22mand [1m-fno-trapping-math [22mbe  in  effect.   Moreover,  it  doesn't  make  much  sense  with
           [1m-frounding-math[22m.  For  Fortran  the  option  is  automatically  enabled  when  both  [1m-fno-signed-zeros [22mand
           [1m-fno-trapping-math [22mare in effect.

           The default is [1m-fno-associative-math[22m.

       [1m-freciprocal-math[0m
           Allow the reciprocal of a value to be used instead of dividing by the value if this enables optimizations.
           For example "x / y" can be replaced with "x * (1/y)", which is useful if  "(1/y)"  is  subject  to  common
           subexpression  elimination.  Note that this loses precision and increases the number of flops operating on
           the value.

           The default is [1m-fno-reciprocal-math[22m.

       [1m-ffinite-math-only[0m
           Allow optimizations for floating-point arithmetic that assume that arguments and results are not  NaNs  or
           +-Infs.

           This  option  is  not turned on by any [1m-O [22moption since it can result in incorrect output for programs that
           depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however,
           yield faster code for programs that do not require the guarantees of these specifications.

           The default is [1m-fno-finite-math-only[22m.

       [1m-fno-signed-zeros[0m
           Allow optimizations for floating-point arithmetic that ignore the signedness  of  zero.   IEEE  arithmetic
           specifies  the  behavior  of  distinct  +0.0  and  -0.0  values,  which  then  prohibits simplification of
           expressions such as x+0.0 or 0.0*x (even with [1m-ffinite-math-only[22m).  This option implies that the sign of a
           zero result isn't significant.

           The default is [1m-fsigned-zeros[22m.

       [1m-fno-trapping-math[0m
           Compile code assuming that floating-point operations cannot  generate  user-visible  traps.   These  traps
           include division by zero, overflow, underflow, inexact result and invalid operation.  This option requires
           that  [1m-fno-signaling-nans  [22mbe in effect.  Setting this option may allow faster code if one relies on "non-
           stop" IEEE arithmetic, for example.

           This option should never be turned on by any [1m-O [22moption  since  it  can  result  in  incorrect  output  for
           programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions.

           The default is [1m-ftrapping-math[22m.

           Future  versions  of GCC may provide finer control of this setting using C99's "FENV_ACCESS" pragma.  This
           command-line  option  will  be  used  along  with  [1m-frounding-math  [22mto  specify  the  default  state   for
           "FENV_ACCESS".

       [1m-frounding-math[0m
           Disable  transformations  and optimizations that assume default floating-point rounding behavior.  This is
           round-to-zero for all floating point to integer conversions, and round-to-nearest for all other arithmetic
           truncations.  This option should be specified for programs that change the FP rounding  mode  dynamically,
           or  that  may  be  executed  with  a  non-default rounding mode.  This option disables constant folding of
           floating-point expressions at compile time (which  may  be  affected  by  rounding  mode)  and  arithmetic
           transformations that are unsafe in the presence of sign-dependent rounding modes.

           The default is [1m-fno-rounding-math[22m.

           This  option  is  experimental  and does not currently guarantee to disable all GCC optimizations that are
           affected by rounding mode.  Future versions of GCC may provide finer control of this setting  using  C99's
           "FENV_ACCESS"  pragma.   This  command-line  option will be used along with [1m-ftrapping-math [22mto specify the
           default state for "FENV_ACCESS".

       [1m-fsignaling-nans[0m
           Compile code assuming that IEEE signaling NaNs  may  generate  user-visible  traps  during  floating-point
           operations.   Setting  this option disables optimizations that may change the number of exceptions visible
           with signaling NaNs.  This option implies [1m-ftrapping-math[22m.

           This option causes the preprocessor macro "__SUPPORT_SNAN__" to be defined.

           The default is [1m-fno-signaling-nans[22m.

           This option is experimental and does not currently guarantee to disable all GCC optimizations that  affect
           signaling NaN behavior.

       [1m-fno-fp-int-builtin-inexact[0m
           Do  not  allow  the  built-in  functions "ceil", "floor", "round" and "trunc", and their "float" and "long
           double" variants, to generate code that raises  the  "inexact"  floating-point  exception  for  noninteger
           arguments.   ISO  C99  and  C11  allow  these  functions  to raise the "inexact" exception, but ISO/IEC TS
           18661-1:2014, the C bindings to IEEE 754-2008, as integrated into ISO C2X, does not allow these  functions
           to do so.

           The  default  is  [1m-ffp-int-builtin-inexact[22m,  allowing  the exception to be raised, unless C2X or a later C
           standard is selected.  This option does nothing unless [1m-ftrapping-math [22mis in effect.

           Even if [1m-fno-fp-int-builtin-inexact [22mis used, if the functions generate a call to a library  function  then
           the "inexact" exception may be raised if the library implementation does not follow TS 18661.

       [1m-fsingle-precision-constant[0m
           Treat  floating-point  constants  as  single  precision  instead  of implicitly converting them to double-
           precision constants.

       [1m-fcx-limited-range[0m
           When enabled, this option states that a range  reduction  step  is  not  needed  when  performing  complex
           division.  Also, there is no checking whether the result of a complex multiplication or division is "NaN +
           I*NaN",  with  an attempt to rescue the situation in that case.  The default is [1m-fno-cx-limited-range[22m, but
           is enabled by [1m-ffast-math[22m.

           This option controls the default setting of the ISO  C99  "CX_LIMITED_RANGE"  pragma.   Nevertheless,  the
           option applies to all languages.

       [1m-fcx-fortran-rules[0m
           Complex  multiplication  and  division  follow  Fortran rules.  Range reduction is done as part of complex
           division, but there is no checking whether the result of a complex multiplication or division  is  "NaN  +
           I*NaN", with an attempt to rescue the situation in that case.

           The default is [1m-fno-cx-fortran-rules[22m.

       The  following  options  control  optimizations  that  may  improve performance, but are not enabled by any [1m-O[0m
       options.  This section includes experimental options that may produce broken code.

       [1m-fbranch-probabilities[0m
           After  running  a  program  compiled  with  [1m-fprofile-arcs[22m,  you  can  compile  it  a  second  time  using
           [1m-fbranch-probabilities[22m, to improve optimizations based on the number of times each branch was taken.  When
           a  program  compiled  with  [1m-fprofile-arcs  [22mexits,  it  saves  arc  execution  counts  to  a  file  called
           [4msourcename.gcda[24m for each source file.  The information  in  this  data  file  is  very  dependent  on  the
           structure  of  the  generated code, so you must use the same source code and the same optimization options
           for both compilations.  See details about the file naming in [1m-fprofile-arcs[22m.

           With [1m-fbranch-probabilities[22m, GCC puts a [1mREG_BR_PROB [22mnote on each [1mJUMP_INSN [22mand [1mCALL_INSN[22m.   These  can  be
           used  to  improve  optimization.   Currently,  they  are  only  used in one place: in [4mreorg.cc[24m, instead of
           guessing which path a branch is most likely to take, the [1mREG_BR_PROB [22mvalues are used to exactly  determine
           which path is taken more often.

           Enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-fprofile-values[0m
           If combined with [1m-fprofile-arcs[22m, it adds code so that some data about values of expressions in the program
           is gathered.

           With  [1m-fbranch-probabilities[22m,  it  reads  back  the data gathered from profiling values of expressions for
           usage in optimizations.

           Enabled by [1m-fprofile-generate[22m, [1m-fprofile-use[22m, and [1m-fauto-profile[22m.

       [1m-fprofile-reorder-functions[0m
           Function reordering based on profile instrumentation collects first time of execution of  a  function  and
           orders these functions in ascending order.

           Enabled with [1m-fprofile-use[22m.

       [1m-fvpt[0m
           If  combined  with  [1m-fprofile-arcs[22m,  this  option instructs the compiler to add code to gather information
           about values of expressions.

           With [1m-fbranch-probabilities[22m, it reads back the data gathered and actually performs the optimizations based
           on them.  Currently the optimizations include specialization of division operations  using  the  knowledge
           about the value of the denominator.

           Enabled with [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-frename-registers[0m
           Attempt  to avoid false dependencies in scheduled code by making use of registers left over after register
           allocation.  This optimization most benefits processors with lots of registers.  Depending  on  the  debug
           information  format  adopted  by the target, however, it can make debugging impossible, since variables no
           longer stay in a "home register".

           Enabled by default with [1m-funroll-loops[22m.

       [1m-fschedule-fusion[0m
           Performs a target dependent pass over the  instruction  stream  to  schedule  instructions  of  same  type
           together  because  target  machine can execute them more efficiently if they are adjacent to each other in
           the instruction flow.

           Enabled at levels [1m-O2[22m, [1m-O3[22m, [1m-Os[22m.

       [1m-ftracer[0m
           Perform tail duplication to enlarge superblock size.  This transformation simplifies the control  flow  of
           the function allowing other optimizations to do a better job.

           Enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-funroll-loops[0m
           Unroll  loops  whose  number  of  iterations  can be determined at compile time or upon entry to the loop.
           [1m-funroll-loops [22mimplies [1m-frerun-cse-after-loop[22m, [1m-fweb [22mand [1m-frename-registers[22m.  It also  turns  on  complete
           loop  peeling  (i.e.  complete  removal of loops with a small constant number of iterations).  This option
           makes code larger, and may or may not make it run faster.

           Enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-funroll-all-loops[0m
           Unroll all loops, even if their number of iterations is uncertain when the loop is entered.  This  usually
           makes programs run more slowly.  [1m-funroll-all-loops [22mimplies the same options as [1m-funroll-loops[22m.

       [1m-fpeel-loops[0m
           Peels  loops  for  which  there is enough information that they do not roll much (from profile feedback or
           static analysis).  It also turns on complete loop peeling (i.e.  complete  removal  of  loops  with  small
           constant number of iterations).

           Enabled by [1m-O3[22m, [1m-fprofile-use[22m, and [1m-fauto-profile[22m.

       [1m-fmove-loop-invariants[0m
           Enables the loop invariant motion pass in the RTL loop optimizer.  Enabled at level [1m-O1 [22mand higher, except
           for [1m-Og[22m.

       [1m-fmove-loop-stores[0m
           Enables the loop store motion pass in the GIMPLE loop optimizer.  This moves invariant stores to after the
           end  of  the  loop in exchange for carrying the stored value in a register across the iteration.  Note for
           this option to have an effect [1m-ftree-loop-im [22mhas to be enabled as well.  Enabled at level [1m-O1 [22mand  higher,
           except for [1m-Og[22m.

       [1m-fsplit-loops[0m
           Split  a  loop  into two if it contains a condition that's always true for one side of the iteration space
           and false for the other.

           Enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-funswitch-loops[0m
           Move branches with loop invariant conditions out of the loop, with duplicates of the loop on both branches
           (modified according to result of the condition).

           Enabled by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-fversion-loops-for-strides[0m
           If a loop iterates over an array with a variable stride, create another version of the loop  that  assumes
           the stride is always one.  For example:

                   for (int i = 0; i < n; ++i)
                     x[i * stride] = ...;

           becomes:

                   if (stride == 1)
                     for (int i = 0; i < n; ++i)
                       x[i] = ...;
                   else
                     for (int i = 0; i < n; ++i)
                       x[i * stride] = ...;

           This  is  particularly  useful  for  assumed-shape  arrays in Fortran where (for example) it allows better
           vectorization assuming contiguous accesses.  This flag is enabled by default at [1m-O3[22m.  It is  also  enabled
           by [1m-fprofile-use [22mand [1m-fauto-profile[22m.

       [1m-ffunction-sections[0m
       [1m-fdata-sections[0m
           Place  each function or data item into its own section in the output file if the target supports arbitrary
           sections.  The name of the function or the name of the data item determines  the  section's  name  in  the
           output file.

           Use  these  options on systems where the linker can perform optimizations to improve locality of reference
           in the instruction space.  Most systems using the ELF object format have linkers with such  optimizations.
           On AIX, the linker rearranges sections (CSECTs) based on the call graph.  The performance impact varies.

           Together  with a linker garbage collection (linker [1m--gc-sections [22moption) these options may lead to smaller
           statically-linked executables (after stripping).

           On ELF/DWARF systems these options do not degenerate the quality of the debug information.  There could be
           issues with other object files/debug info formats.

           Only use these options when there are significant benefits from doing so.  When you specify these options,
           the assembler and linker create larger object and executable files and are  also  slower.   These  options
           affect code generation.  They prevent optimizations by the compiler and assembler using relative locations
           inside  a  translation  unit  since  the  locations  are  unknown  until link time.  An example of such an
           optimization is relaxing calls to short call instructions.

       [1m-fstdarg-opt[0m
           Optimize the prologue of variadic argument functions with respect to usage of those arguments.

       [1m-fsection-anchors[0m
           Try to reduce the number of symbolic address calculations by using  shared  "anchor"  symbols  to  address
           nearby objects.  This transformation can help to reduce the number of GOT entries and GOT accesses on some
           targets.

           For example, the implementation of the following function "foo":

                   static int a, b, c;
                   int foo (void) { return a + b + c; }

           usually  calculates the addresses of all three variables, but if you compile it with [1m-fsection-anchors[22m, it
           accesses the variables from a common anchor point  instead.   The  effect  is  similar  to  the  following
           pseudocode (which isn't valid C):

                   int foo (void)
                   {
                     register int *xr = &x;
                     return xr[&a - &x] + xr[&b - &x] + xr[&c - &x];
                   }

           Not all targets support this option.

       [1m-fzero-call-used-regs=[4m[22mchoice[0m
           Zero  call-used  registers  at  function  return to increase program security by either mitigating Return-
           Oriented Programming (ROP) attacks or preventing information leakage through registers.

           The possible values of [4mchoice[24m are the same as for the "zero_call_used_regs"  attribute.   The  default  is
           [1mskip[22m.

           You   can   control   this   behavior   for   a   specific   function  by  using  the  function  attribute
           "zero_call_used_regs".

       [1m--param [4m[22mname[24m[1m=[4m[22mvalue[0m
           In some places, GCC uses various constants to control the  amount  of  optimization  that  is  done.   For
           example,  GCC  does not inline functions that contain more than a certain number of instructions.  You can
           control some of these constants on the command line using the [1m--param [22moption.

           The names of specific parameters, and the meaning of  the  values,  are  tied  to  the  internals  of  the
           compiler, and are subject to change without notice in future releases.

           In order to get the minimal, maximal and default values of a parameter, use the [1m--help=param -Q [22moptions.

           In each case, the [4mvalue[24m is an integer.  The following choices of [4mname[24m are recognized for all targets:

           [1mpredictable-branch-outcome[0m
               When  branch is predicted to be taken with probability lower than this threshold (in percent), then it
               is considered well predictable.

           [1mmax-rtl-if-conversion-insns[0m
               RTL if-conversion tries  to  remove  conditional  branches  around  a  block  and  replace  them  with
               conditionally  executed  instructions.   This  parameter gives the maximum number of instructions in a
               block which should be considered for if-conversion.  The compiler will also use  other  heuristics  to
               decide whether if-conversion is likely to be profitable.

           [1mmax-rtl-if-conversion-predictable-cost[0m
               RTL  if-conversion  will  try  to  remove  conditional  branches  around a block and replace them with
               conditionally executed instructions.  These parameters give  the  maximum  permissible  cost  for  the
               sequence  that  would  be  generated  by  if-conversion  depending on whether the branch is statically
               determined to be predictable or not.  The units for this parameter are the same as those for  the  GCC
               internal  seq_cost  metric.   The compiler will try to provide a reasonable default for this parameter
               using the BRANCH_COST target macro.

           [1mmax-crossjump-edges[0m
               The maximum  number  of  incoming  edges  to  consider  for  cross-jumping.   The  algorithm  used  by
               [1m-fcrossjumping  [22mis  O(N^2) in the number of edges incoming to each block.  Increasing values mean more
               aggressive optimization, making the compilation time  increase  with  probably  small  improvement  in
               executable size.

           [1mmin-crossjump-insns[0m
               The  minimum number of instructions that must be matched at the end of two blocks before cross-jumping
               is performed on them.  This value is ignored in the case where all instructions  in  the  block  being
               cross-jumped from are matched.

           [1mmax-grow-copy-bb-insns[0m
               The maximum code size expansion factor when copying basic blocks instead of jumping.  The expansion is
               relative to a jump instruction.

           [1mmax-goto-duplication-insns[0m
               The  maximum  number  of instructions to duplicate to a block that jumps to a computed goto.  To avoid
               O(N^2) behavior in a number of passes, GCC factors computed gotos early in  the  compilation  process,
               and unfactors them as late as possible.  Only computed jumps at the end of a basic blocks with no more
               than max-goto-duplication-insns are unfactored.

           [1mmax-delay-slot-insn-search[0m
               The  maximum  number of instructions to consider when looking for an instruction to fill a delay slot.
               If more than this arbitrary number of instructions are searched, the time  savings  from  filling  the
               delay  slot  are  minimal,  so  stop  searching.  Increasing values mean more aggressive optimization,
               making the compilation time increase with probably small improvement in execution time.

           [1mmax-delay-slot-live-search[0m
               When trying to fill delay slots, the maximum number of instructions to consider when searching  for  a
               block  with  valid  live  register  information.   Increasing this arbitrarily chosen value means more
               aggressive optimization, increasing the compilation time.  This parameter should be removed  when  the
               delay slot code is rewritten to maintain the control-flow graph.

           [1mmax-gcse-memory[0m
               The  approximate maximum amount of memory in "kB" that can be allocated in order to perform the global
               common subexpression elimination optimization.   If  more  memory  than  specified  is  required,  the
               optimization is not done.

           [1mmax-gcse-insertion-ratio[0m
               If  the ratio of expression insertions to deletions is larger than this value for any expression, then
               RTL PRE inserts or removes the expression and thus leaves  partially  redundant  computations  in  the
               instruction stream.

           [1mmax-pending-list-length[0m
               The  maximum  number  of  pending dependencies scheduling allows before flushing the current state and
               starting over.  Large functions with few branches or calls can create excessively  large  lists  which
               needlessly consume memory and resources.

           [1mmax-modulo-backtrack-attempts[0m
               The  maximum  number  of  backtrack  attempts the scheduler should make when modulo scheduling a loop.
               Larger values can exponentially increase compilation time.

           [1mmax-inline-functions-called-once-loop-depth[0m
               Maximal loop depth of a call considered by inline heuristics that tries to inline all functions called
               once.

           [1mmax-inline-functions-called-once-insns[0m
               Maximal estimated size of functions produced while inlining functions called once.

           [1mmax-inline-insns-single[0m
               Several parameters control the tree inliner used in GCC.  This  number  sets  the  maximum  number  of
               instructions  (counted  in  GCC's  internal representation) in a single function that the tree inliner
               considers for inlining.  This only affects functions declared inline  and  methods  implemented  in  a
               class declaration (C++).

           [1mmax-inline-insns-auto[0m
               When  you  use  [1m-finline-functions  [22m(included  in [1m-O3[22m), a lot of functions that would otherwise not be
               considered for inlining by the compiler are investigated.   To  those  functions,  a  different  (more
               restrictive)  limit  compared  to  functions declared inline can be applied ([1m--param max-inline-insns-[0m
               [1mauto[22m).

           [1mmax-inline-insns-small[0m
               This is bound applied to calls which are considered relevant with [1m-finline-small-functions[22m.

           [1mmax-inline-insns-size[0m
               This is bound applied to calls which are  optimized  for  size.  Small  growth  may  be  desirable  to
               anticipate optimization oppurtunities exposed by inlining.

           [1muninlined-function-insns[0m
               Number  of  instructions  accounted  by  inliner  for  function overhead such as function prologue and
               epilogue.

           [1muninlined-function-time[0m
               Extra time accounted by inliner for function overhead such as time needed to execute function prologue
               and epilogue.

           [1minline-heuristics-hint-percent[0m
               The scale (in percents) applied to [1minline-insns-single[22m, [1minline-insns-single-O2[22m, [1minline-insns-auto [22mwhen
               inline heuristics hints that inlining is very profitable (will enable later optimizations).

           [1muninlined-thunk-insns[0m
           [1muninlined-thunk-time[0m
               Same as [1m--param uninlined-function-insns [22mand [1m--param uninlined-function-time [22mbut applied  to  function
               thunks.

           [1minline-min-speedup[0m
               When estimated performance improvement of caller + callee runtime exceeds this threshold (in percent),
               the  function  can  be  inlined regardless of the limit on [1m--param max-inline-insns-single [22mand [1m--param[0m
               [1mmax-inline-insns-auto[22m.

           [1mlarge-function-insns[0m
               The limit specifying really large functions.  For functions larger than  this  limit  after  inlining,
               inlining is constrained by [1m--param large-function-growth[22m.  This parameter is useful primarily to avoid
               extreme compilation time caused by non-linear algorithms used by the back end.

           [1mlarge-function-growth[0m
               Specifies  maximal  growth  of  large function caused by inlining in percents.  For example, parameter
               value 100 limits large function growth to 2.0 times the original size.

           [1mlarge-unit-insns[0m
               The limit specifying large translation unit.  Growth caused by inlining  of  units  larger  than  this
               limit  is  limited  by  [1m--param  inline-unit-growth[22m.   For  small  units this might be too tight.  For
               example, consider a unit consisting of function A that is inline and B that just calls A three  times.
               If B is small relative to A, the growth of unit is 300\% and yet such inlining is very sane.  For very
               large units consisting of small inlineable functions, however, the overall unit growth limit is needed
               to avoid exponential explosion of code size.  Thus for smaller units, the size is increased to [1m--param[0m
               [1mlarge-unit-insns [22mbefore applying [1m--param inline-unit-growth[22m.

           [1mlazy-modules[0m
               Maximum number of concurrently open C++ module files when lazy loading.

           [1minline-unit-growth[0m
               Specifies  maximal  overall growth of the compilation unit caused by inlining.  For example, parameter
               value 20 limits unit growth to 1.2 times the original size. Cold functions (either marked cold via  an
               attribute or by profile feedback) are not accounted into the unit size.

           [1mipa-cp-unit-growth[0m
               Specifies  maximal  overall  growth  of  the  compilation  unit  caused  by  interprocedural  constant
               propagation.  For example, parameter value 10 limits unit growth to 1.1 times the original size.

           [1mipa-cp-large-unit-insns[0m
               The size of translation unit that IPA-CP pass considers large.

           [1mlarge-stack-frame[0m
               The limit specifying large stack frames.  While inlining the algorithm is trying to not grow past this
               limit too much.

           [1mlarge-stack-frame-growth[0m
               Specifies maximal growth of large stack frames caused by inlining in percents.  For example, parameter
               value 1000 limits large stack frame growth to 11 times the original size.

           [1mmax-inline-insns-recursive[0m
           [1mmax-inline-insns-recursive-auto[0m
               Specifies the maximum number of instructions an out-of-line copy of a self-recursive  inline  function
               can grow into by performing recursive inlining.

               [1m--param  max-inline-insns-recursive  [22mapplies to functions declared inline.  For functions not declared
               inline, recursive inlining happens only when [1m-finline-functions [22m(included in [1m-O3[22m) is enabled;  [1m--param[0m
               [1mmax-inline-insns-recursive-auto [22mapplies instead.

           [1mmax-inline-recursive-depth[0m
           [1mmax-inline-recursive-depth-auto[0m
               Specifies the maximum recursion depth used for recursive inlining.

               [1m--param  max-inline-recursive-depth  [22mapplies to functions declared inline.  For functions not declared
               inline, recursive inlining happens only when [1m-finline-functions [22m(included in [1m-O3[22m) is enabled;  [1m--param[0m
               [1mmax-inline-recursive-depth-auto [22mapplies instead.

           [1mmin-inline-recursive-probability[0m
               Recursive  inlining  is profitable only for function having deep recursion in average and can hurt for
               function having little recursion depth by increasing the prologue size or complexity of function  body
               to other optimizers.

               When  profile feedback is available (see [1m-fprofile-generate[22m) the actual recursion depth can be guessed
               from the probability that function recurses via  a  given  call  expression.   This  parameter  limits
               inlining only to call expressions whose probability exceeds the given threshold (in percents).

           [1mearly-inlining-insns[0m
               Specify  growth  that  the  early inliner can make.  In effect it increases the amount of inlining for
               code having a large abstraction penalty.

           [1mmax-early-inliner-iterations[0m
               Limit of iterations of the early inliner.  This basically bounds the number of nested  indirect  calls
               the early inliner can resolve.  Deeper chains are still handled by late inlining.

           [1mcomdat-sharing-probability[0m
               Probability  (in  percent)  that C++ inline function with comdat visibility are shared across multiple
               compilation units.

           [1mmodref-max-bases[0m
           [1mmodref-max-refs[0m
           [1mmodref-max-accesses[0m
               Specifies the maximal number of base pointers, references and accesses stored for a single function by
               mod/ref analysis.

           [1mmodref-max-tests[0m
               Specifies the maxmal number of tests alias oracle can perform to disambiguate memory  locations  using
               the  mod/ref information.  This parameter ought to be bigger than [1m--param modref-max-bases [22mand [1m--param[0m
               [1mmodref-max-refs[22m.

           [1mmodref-max-depth[0m
               Specifies the maximum depth of DFS walk used by modref escape analysis.  Setting  to  0  disables  the
               analysis completely.

           [1mmodref-max-escape-points[0m
               Specifies the maximum number of escape points tracked by modref per SSA-name.

           [1mmodref-max-adjustments[0m
               Specifies the maximum number the access range is enlarged during modref dataflow analysis.

           [1mprofile-func-internal-id[0m
               A parameter to control whether to use function internal id in profile database lookup. If the value is
               0,  the  compiler  uses  an  id that is based on function assembler name and filename, which makes old
               profile data more tolerant to source changes such as function reordering etc.

           [1mmin-vect-loop-bound[0m
               The minimum number of iterations under which loops are not vectorized when [1m-ftree-vectorize  [22mis  used.
               The  number  of  iterations  after  vectorization needs to be greater than the value specified by this
               option to allow vectorization.

           [1mgcse-cost-distance-ratio[0m
               Scaling factor in calculation of maximum distance an expression can be moved  by  GCSE  optimizations.
               This is currently supported only in the code hoisting pass.  The bigger the ratio, the more aggressive
               code  hoisting  is  with  simple  expressions,  i.e.,  the  expressions that have cost less than [1mgcse-[0m
               [1munrestricted-cost[22m.  Specifying 0 disables hoisting of simple expressions.

           [1mgcse-unrestricted-cost[0m
               Cost, roughly  measured  as  the  cost  of  a  single  typical  machine  instruction,  at  which  GCSE
               optimizations  do  not  constrain  the distance an expression can travel.  This is currently supported
               only in the code hoisting  pass.   The  lesser  the  cost,  the  more  aggressive  code  hoisting  is.
               Specifying 0 allows all expressions to travel unrestricted distances.

           [1mmax-hoist-depth[0m
               The  depth  of search in the dominator tree for expressions to hoist.  This is used to avoid quadratic
               behavior in hoisting algorithm.  The value of 0 does not limit  on  the  search,  but  may  slow  down
               compilation of huge functions.

           [1mmax-tail-merge-comparisons[0m
               The  maximum  amount of similar bbs to compare a bb with.  This is used to avoid quadratic behavior in
               tree tail merging.

           [1mmax-tail-merge-iterations[0m
               The maximum amount of iterations of the pass over the function.  This is  used  to  limit  compilation
               time in tree tail merging.

           [1mstore-merging-allow-unaligned[0m
               Allow the store merging pass to introduce unaligned stores if it is legal to do so.

           [1mmax-stores-to-merge[0m
               The maximum number of stores to attempt to merge into wider stores in the store merging pass.

           [1mmax-store-chains-to-track[0m
               The  maximum  number of store chains to track at the same time in the attempt to merge them into wider
               stores in the store merging pass.

           [1mmax-stores-to-track[0m
               The maximum number of stores to track at the same time in the attemt  to  to  merge  them  into  wider
               stores in the store merging pass.

           [1mmax-unrolled-insns[0m
               The  maximum  number of instructions that a loop may have to be unrolled.  If a loop is unrolled, this
               parameter also determines how many times the loop code is unrolled.

           [1mmax-average-unrolled-insns[0m
               The maximum number of instructions biased by probabilities of their execution that a loop may have  to
               be  unrolled.   If  a loop is unrolled, this parameter also determines how many times the loop code is
               unrolled.

           [1mmax-unroll-times[0m
               The maximum number of unrollings of a single loop.

           [1mmax-peeled-insns[0m
               The maximum number of instructions that a loop may have to be peeled.   If  a  loop  is  peeled,  this
               parameter also determines how many times the loop code is peeled.

           [1mmax-peel-times[0m
               The maximum number of peelings of a single loop.

           [1mmax-peel-branches[0m
               The maximum number of branches on the hot path through the peeled sequence.

           [1mmax-completely-peeled-insns[0m
               The maximum number of insns of a completely peeled loop.

           [1mmax-completely-peel-times[0m
               The maximum number of iterations of a loop to be suitable for complete peeling.

           [1mmax-completely-peel-loop-nest-depth[0m
               The maximum depth of a loop nest suitable for complete peeling.

           [1mmax-unswitch-insns[0m
               The maximum number of insns of an unswitched loop.

           [1mmax-unswitch-depth[0m
               The maximum depth of a loop nest to be unswitched.

           [1mlim-expensive[0m
               The minimum cost of an expensive expression in the loop invariant motion.

           [1mmin-loop-cond-split-prob[0m
               When  FDO  profile  information is available, [1mmin-loop-cond-split-prob [22mspecifies minimum threshold for
               probability of semi-invariant condition statement to trigger loop split.

           [1miv-consider-all-candidates-bound[0m
               Bound on number of candidates for induction variables, below which all candidates are  considered  for
               each  use  in induction variable optimizations.  If there are more candidates than this, only the most
               relevant ones are considered to avoid quadratic time complexity.

           [1miv-max-considered-uses[0m
               The induction variable optimizations give up on loops that contain more induction variable uses.

           [1miv-always-prune-cand-set-bound[0m
               If the number of candidates in the set is smaller than this value, always try  to  remove  unnecessary
               ivs from the set when adding a new one.

           [1mavg-loop-niter[0m
               Average number of iterations of a loop.

           [1mdse-max-object-size[0m
               Maximum  size  (in  bytes)  of  objects tracked bytewise by dead store elimination.  Larger values may
               result in larger compilation times.

           [1mdse-max-alias-queries-per-store[0m
               Maximum number of queries into the alias oracle per store.  Larger values result in larger compilation
               times and may result in more removed dead stores.

           [1mscev-max-expr-size[0m
               Bound on size of expressions used in the scalar  evolutions  analyzer.   Large  expressions  slow  the
               analyzer.

           [1mscev-max-expr-complexity[0m
               Bound  on  the  complexity  of the expressions in the scalar evolutions analyzer.  Complex expressions
               slow the analyzer.

           [1mmax-tree-if-conversion-phi-args[0m
               Maximum number of arguments in a PHI supported by TREE if conversion unless the loop  is  marked  with
               simd pragma.

           [1mvect-max-layout-candidates[0m
               The  maximum  number of possible vector layouts (such as permutations) to consider when optimizing to-
               be-vectorized code.

           [1mvect-max-version-for-alignment-checks[0m
               The maximum number of run-time checks that can be performed when doing loop versioning  for  alignment
               in the vectorizer.

           [1mvect-max-version-for-alias-checks[0m
               The  maximum  number  of run-time checks that can be performed when doing loop versioning for alias in
               the vectorizer.

           [1mvect-max-peeling-for-alignment[0m
               The maximum number of loop peels to enhance access alignment for vectorizer. Value -1 means no limit.

           [1mmax-iterations-to-track[0m
               The maximum number of iterations of a loop the brute-force algorithm for analysis  of  the  number  of
               iterations of the loop tries to evaluate.

           [1mhot-bb-count-fraction[0m
               The  denominator  n  of  fraction  1/n  of  the maximal execution count of a basic block in the entire
               program that a basic block needs to at least have in order to  be  considered  hot.   The  default  is
               10000, which means that a basic block is considered hot if its execution count is greater than 1/10000
               of the maximal execution count.  0 means that it is never considered hot.  Used in non-LTO mode.

           [1mhot-bb-count-ws-permille[0m
               The number of most executed permilles, ranging from 0 to 1000, of the profiled execution of the entire
               program  to  which the execution count of a basic block must be part of in order to be considered hot.
               The default is 990, which means  that  a  basic  block  is  considered  hot  if  its  execution  count
               contributes  to the upper 990 permilles, or 99.0%, of the profiled execution of the entire program.  0
               means that it is never considered hot.  Used in LTO mode.

           [1mhot-bb-frequency-fraction[0m
               The denominator n of fraction 1/n of the execution frequency of the entry block of a function  that  a
               basic  block  of  this  function needs to at least have in order to be considered hot.  The default is
               1000, which means that a basic block is considered hot in a function if it is executed more frequently
               than 1/1000 of the frequency of the entry block of the function.  0 means that it is never  considered
               hot.

           [1munlikely-bb-count-fraction[0m
               The denominator n of fraction 1/n of the number of profiled runs of the entire program below which the
               execution  count  of  a  basic  block  must  be in order for the basic block to be considered unlikely
               executed.  The default is 20, which means that a basic block is considered unlikely executed if it  is
               executed  in fewer than 1/20, or 5%, of the runs of the program.  0 means that it is always considered
               unlikely executed.

           [1mmax-predicted-iterations[0m
               The maximum number of loop iterations we predict statically.  This is useful in cases where a function
               contains a single loop with known bound and another loop with unknown  bound.   The  known  number  of
               iterations is predicted correctly, while the unknown number of iterations average to roughly 10.  This
               means that the loop without bounds appears artificially cold relative to the other one.

           [1mbuiltin-expect-probability[0m
               Control  the  probability  of  the  expression  having  the  specified  value.  This parameter takes a
               percentage (i.e. 0 ... 100) as input.

           [1mbuiltin-string-cmp-inline-length[0m
               The maximum length of a constant string for a builtin string cmp call eligible for inlining.

           [1malign-threshold[0m
               Select fraction of the maximal frequency of executions of a basic block in a  function  to  align  the
               basic block.

           [1malign-loop-iterations[0m
               A loop expected to iterate at least the selected number of iterations is aligned.

           [1mtracer-dynamic-coverage[0m
           [1mtracer-dynamic-coverage-feedback[0m
               This value is used to limit superblock formation once the given percentage of executed instructions is
               covered.  This limits unnecessary code size expansion.

               The  [1mtracer-dynamic-coverage-feedback  [22mparameter is used only when profile feedback is available.  The
               real profiles (as opposed to statically estimated ones) are much less balanced allowing the  threshold
               to be larger value.

           [1mtracer-max-code-growth[0m
               Stop  tail  duplication  once  code  growth has reached given percentage.  This is a rather artificial
               limit, as most of the duplicates are eliminated later in cross jumping, so  it  may  be  set  to  much
               higher values than is the desired code growth.

           [1mtracer-min-branch-ratio[0m
               Stop  reverse  growth  when  the  reverse  probability  of  best  edge is less than this threshold (in
               percent).

           [1mtracer-min-branch-probability[0m
           [1mtracer-min-branch-probability-feedback[0m
               Stop forward growth if the best edge has probability lower than this threshold.

               Similarly to [1mtracer-dynamic-coverage  [22mtwo  parameters  are  provided.   [1mtracer-min-branch-probability-[0m
               [1mfeedback  [22mis  used for compilation with profile feedback and [1mtracer-min-branch-probability [22mcompilation
               without.  The value for compilation with profile feedback needs to be more  conservative  (higher)  in
               order to make tracer effective.

           [1mstack-clash-protection-guard-size[0m
               Specify the size of the operating system provided stack guard as 2 raised to [4mnum[24m bytes.  Higher values
               may  reduce the number of explicit probes, but a value larger than the operating system provided guard
               will leave code vulnerable to stack clash style attacks.

           [1mstack-clash-protection-probe-interval[0m
               Stack clash protection involves probing stack space as it  is  allocated.   This  param  controls  the
               maximum distance between probes into the stack as 2 raised to [4mnum[24m bytes.  Higher values may reduce the
               number of explicit probes, but a value larger than the operating system provided guard will leave code
               vulnerable to stack clash style attacks.

           [1mmax-cse-path-length[0m
               The maximum number of basic blocks on path that CSE considers.

           [1mmax-cse-insns[0m
               The maximum number of instructions CSE processes before flushing.

           [1mggc-min-expand[0m
               GCC  uses  a  garbage  collector  to  manage  its own memory allocation.  This parameter specifies the
               minimum percentage by which  the  garbage  collector's  heap  should  be  allowed  to  expand  between
               collections.  Tuning this may improve compilation speed; it has no effect on code generation.

               The  default  is 30% + 70% * (RAM/1GB) with an upper bound of 100% when RAM >= 1GB.  If "getrlimit" is
               available, the notion of "RAM" is the smallest of actual RAM and "RLIMIT_DATA" or "RLIMIT_AS".  If GCC
               is not able to calculate RAM on a particular platform, the lower bound of 30% is used.   Setting  this
               parameter  and  [1mggc-min-heapsize [22mto zero causes a full collection to occur at every opportunity.  This
               is extremely slow, but can be useful for debugging.

           [1mggc-min-heapsize[0m
               Minimum size of the garbage collector's heap before it begins bothering to collect garbage.  The first
               collection occurs after the heap expands by [1mggc-min-expand[22m% beyond  [1mggc-min-heapsize[22m.   Again,  tuning
               this may improve compilation speed, and has no effect on code generation.

               The  default  is the smaller of RAM/8, RLIMIT_RSS, or a limit that tries to ensure that RLIMIT_DATA or
               RLIMIT_AS are not exceeded, but with a lower bound of 4096 (four megabytes)  and  an  upper  bound  of
               131072 (128 megabytes).  If GCC is not able to calculate RAM on a particular platform, the lower bound
               is  used.   Setting  this  parameter very large effectively disables garbage collection.  Setting this
               parameter and [1mggc-min-expand [22mto zero causes a full collection to occur at every opportunity.

           [1mmax-reload-search-insns[0m
               The maximum number of instruction reload should look backward  for  equivalent  register.   Increasing
               values  mean more aggressive optimization, making the compilation time increase with probably slightly
               better performance.

           [1mmax-cselib-memory-locations[0m
               The maximum number of memory locations cselib should take into account.  Increasing values  mean  more
               aggressive   optimization,  making  the  compilation  time  increase  with  probably  slightly  better
               performance.

           [1mmax-sched-ready-insns[0m
               The maximum number of instructions ready to be issued the scheduler should consider at any given  time
               during  the  first  scheduling  pass.   Increasing  values  mean  more  thorough  searches, making the
               compilation time increase with probably little benefit.

           [1mmax-sched-region-blocks[0m
               The maximum number of blocks in a region to be considered for interblock scheduling.

           [1mmax-pipeline-region-blocks[0m
               The maximum number of blocks in a region to be considered for pipelining in the selective scheduler.

           [1mmax-sched-region-insns[0m
               The maximum number of insns in a region to be considered for interblock scheduling.

           [1mmax-pipeline-region-insns[0m
               The maximum number of insns in a region to be considered for pipelining in the selective scheduler.

           [1mmin-spec-prob[0m
               The minimum  probability  (in  percents)  of  reaching  a  source  block  for  interblock  speculative
               scheduling.

           [1mmax-sched-extend-regions-iters[0m
               The  maximum  number  of  iterations  through  CFG  to  extend  regions.  A value of 0 disables region
               extensions.

           [1mmax-sched-insn-conflict-delay[0m
               The maximum conflict delay for an insn to be considered for speculative motion.

           [1msched-spec-prob-cutoff[0m
               The minimal probability of speculation success (in percents), so that speculative insns are scheduled.

           [1msched-state-edge-prob-cutoff[0m
               The minimum probability an edge must have for the scheduler to save its state across it.

           [1msched-mem-true-dep-cost[0m
               Minimal distance (in CPU cycles) between store and load targeting same memory locations.

           [1mselsched-max-lookahead[0m
               The maximum size of the lookahead window of selective  scheduling.   It  is  a  depth  of  search  for
               available instructions.

           [1mselsched-max-sched-times[0m
               The maximum number of times that an instruction is scheduled during selective scheduling.  This is the
               limit on the number of iterations through which the instruction may be pipelined.

           [1mselsched-insns-to-rename[0m
               The  maximum  number  of  best  instructions in the ready list that are considered for renaming in the
               selective scheduler.

           [1msms-min-sc[0m
               The minimum value of stage count that swing modulo scheduler generates.

           [1mmax-last-value-rtl[0m
               The maximum size measured as number of RTLs that can be recorded in an expression in  combiner  for  a
               pseudo register as last known value of that register.

           [1mmax-combine-insns[0m
               The maximum number of instructions the RTL combiner tries to combine.

           [1minteger-share-limit[0m
               Small  integer  constants  can  use  a shared data structure, reducing the compiler's memory usage and
               increasing its speed.  This sets the maximum value of a shared integer constant.

           [1mssp-buffer-size[0m
               The  minimum  size  of  buffers  (i.e.  arrays)  that   receive   stack   smashing   protection   when
               [1m-fstack-protector [22mis used.

           [1mmin-size-for-stack-sharing[0m
               The minimum size of variables taking part in stack slot sharing when not optimizing.

           [1mmax-jump-thread-duplication-stmts[0m
               Maximum number of statements allowed in a block that needs to be duplicated when threading jumps.

           [1mmax-jump-thread-paths[0m
               The  maximum  number  of  paths  to  consider  when  searching for jump threading opportunities.  When
               arriving at a block, incoming edges are only considered if the number of paths to be searched  so  far
               multiplied  by  the number of incoming edges does not exhaust the specified maximum number of paths to
               consider.

           [1mmax-fields-for-field-sensitive[0m
               Maximum number of fields in a structure treated in a field sensitive manner during pointer analysis.

           [1mprefetch-latency[0m
               Estimate on average number of instructions that are executed before prefetch finishes.   The  distance
               prefetched  ahead  is  proportional  to  this  constant.  Increasing this number may also lead to less
               streams being prefetched (see [1msimultaneous-prefetches[22m).

           [1msimultaneous-prefetches[0m
               Maximum number of prefetches that can run at the same time.

           [1ml1-cache-line-size[0m
               The size of cache line in L1 data cache, in bytes.

           [1ml1-cache-size[0m
               The size of L1 data cache, in kilobytes.

           [1ml2-cache-size[0m
               The size of L2 data cache, in kilobytes.

           [1mprefetch-dynamic-strides[0m
               Whether the loop array prefetch pass should issue software prefetch hints for strides  that  are  non-
               constant.   In  some cases this may be beneficial, though the fact the stride is non-constant may make
               it hard to predict when there is clear benefit to issuing these hints.

               Set to 1 if the prefetch hints should be issued for non-constant strides.  Set to 0 if prefetch  hints
               should be issued only for strides that are known to be constant and below [1mprefetch-minimum-stride[22m.

           [1mprefetch-minimum-stride[0m
               Minimum constant stride, in bytes, to start using prefetch hints for.  If the stride is less than this
               threshold, prefetch hints will not be issued.

               This  setting  is  useful  for  processors  that have hardware prefetchers, in which case there may be
               conflicts between the hardware prefetchers and the software prefetchers.  If the hardware  prefetchers
               have  a  maximum  stride  they  can  handle,  it  should  be  used here to improve the use of software
               prefetchers.

               A value of -1 means we don't have a threshold and therefore prefetch  hints  can  be  issued  for  any
               constant stride.

               This setting is only useful for strides that are known and constant.

           [1mdestructive-interference-size[0m
           [1mconstructive-interference-size[0m
               The    values    for    the    C++17   variables   "std::hardware_destructive_interference_size"   and
               "std::hardware_constructive_interference_size".  The destructive  interference  size  is  the  minimum
               recommended   offset   between   two   independent  concurrently-accessed  objects;  the  constructive
               interference size is the maximum recommended size of contiguous memory accessed  together.   Typically
               both  will  be the size of an L1 cache line for the target, in bytes.  For a generic target covering a
               range of L1 cache line sizes, typically the constructive interference size will be the  small  end  of
               the range and the destructive size will be the large end.

               The  destructive  interference  size  is intended to be used for layout, and thus has ABI impact.  The
               default value is not expected to be stable, and on some targets varies with [1m-mtune[22m,  so  use  of  this
               variable  in a context where ABI stability is important, such as the public interface of a library, is
               strongly discouraged; if it is used in that context, users can stabilize the value using this option.

               The constructive interference size is less sensitive, as it is typically only used in a  [1mstatic_assert[0m
               to make sure that a type fits within a cache line.

               See also [1m-Winterference-size[22m.

           [1mloop-interchange-max-num-stmts[0m
               The maximum number of stmts in a loop to be interchanged.

           [1mloop-interchange-stride-ratio[0m
               The minimum ratio between stride of two loops for interchange to be profitable.

           [1mmin-insn-to-prefetch-ratio[0m
               The  minimum  ratio  between  the  number  of  instructions  and  the  number  of prefetches to enable
               prefetching in a loop.

           [1mprefetch-min-insn-to-mem-ratio[0m
               The minimum ratio between the number of instructions and the number of  memory  references  to  enable
               prefetching in a loop.

           [1muse-canonical-types[0m
               Whether  the  compiler  should use the "canonical" type system.  Should always be 1, which uses a more
               efficient internal mechanism for comparing types in C++ and Objective-C++.  However, if  bugs  in  the
               canonical  type  system  are  causing  compilation  failures, set this value to 0 to disable canonical
               types.

           [1mswitch-conversion-max-branch-ratio[0m
               Switch initialization conversion refuses to create arrays that are bigger than  [1mswitch-conversion-max-[0m
               [1mbranch-ratio [22mtimes the number of branches in the switch.

           [1mmax-partial-antic-length[0m
               Maximum  length  of  the  partial  antic  set  computed during the tree partial redundancy elimination
               optimization ([1m-ftree-pre[22m) when optimizing at [1m-O3 [22mand  above.   For  some  sorts  of  source  code  the
               enhanced  partial  redundancy  elimination  optimization  can  run  away,  consuming all of the memory
               available on the host machine.  This parameter sets a limit  on  the  length  of  the  sets  that  are
               computed,  which  prevents  the  runaway  behavior.  Setting a value of 0 for this parameter allows an
               unlimited set length.

           [1mrpo-vn-max-loop-depth[0m
               Maximum loop depth that is value-numbered optimistically.  When the limit hits the  innermost  [4mrpo-vn-[0m
               [4mmax-loop-depth[24m loops and the outermost loop in the loop nest are value-numbered optimistically and the
               remaining ones not.

           [1msccvn-max-alias-queries-per-access[0m
               Maximum  number of alias-oracle queries we perform when looking for redundancies for loads and stores.
               If this limit is hit the search is aborted and the load or store is  not  considered  redundant.   The
               number of queries is algorithmically limited to the number of stores on all paths from the load to the
               function entry.

           [1mira-max-loops-num[0m
               IRA  uses  regional register allocation by default.  If a function contains more loops than the number
               given by this parameter, only at most the given number of  the  most  frequently-executed  loops  form
               regions for regional register allocation.

           [1mira-max-conflict-table-size[0m
               Although  IRA  uses  a  sophisticated  algorithm  to  compress the conflict table, the table can still
               require excessive amounts of memory for huge functions.  If the conflict table for a function could be
               more than the size in MB given by this parameter,  the  register  allocator  instead  uses  a  faster,
               simpler, and lower-quality algorithm that does not require building a pseudo-register conflict table.

           [1mira-loop-reserved-regs[0m
               IRA  can  be  used  to  evaluate  more  accurate register pressure in loops for decisions to move loop
               invariants (see [1m-O3[22m).  The number of available registers reserved for some other purposes is given  by
               this parameter.  Default of the parameter is the best found from numerous experiments.

           [1mira-consider-dup-in-all-alts[0m
               Make  IRA  to  consider  matching  constraint  (duplicated  operand  number)  heavily in all available
               alternatives for preferred register class.  If it is set as zero,  it  means  IRA  only  respects  the
               matching  constraint  when  it's in the only available alternative with an appropriate register class.
               Otherwise, it means IRA will check all available alternatives for preferred register class even if  it
               has  found  some  choice  with  an appropriate register class and respect the found qualified matching
               constraint.

           [1mira-simple-lra-insn-threshold[0m
               Approximate function insn number in 1K units triggering simple local RA.

           [1mlra-inheritance-ebb-probability-cutoff[0m
               LRA tries to reuse values reloaded in registers in subsequent  insns.   This  optimization  is  called
               inheritance.   EBB is used as a region to do this optimization.  The parameter defines a minimal fall-
               through edge probability in percentage used to add BB to inheritance EBB in LRA.   The  default  value
               was chosen from numerous runs of SPEC2000 on x86-64.

           [1mloop-invariant-max-bbs-in-loop[0m
               Loop invariant motion can be very expensive, both in compilation time and in amount of needed compile-
               time  memory, with very large loops.  Loops with more basic blocks than this parameter won't have loop
               invariant motion optimization performed on them.

           [1mloop-max-datarefs-for-datadeps[0m
               Building data dependencies is expensive for very large loops.  This parameter  limits  the  number  of
               data  references  in loops that are considered for data dependence analysis.  These large loops are no
               handled by the optimizations using loop data dependencies.

           [1mmax-vartrack-size[0m
               Sets a maximum number of hash table slots to use during variable tracking  dataflow  analysis  of  any
               function.   If this limit is exceeded with variable tracking at assignments enabled, analysis for that
               function is retried without it, after removing all debug insns from the function.   If  the  limit  is
               exceeded  even  without  debug  insns,  var tracking analysis is completely disabled for the function.
               Setting the parameter to zero makes it unlimited.

           [1mmax-vartrack-expr-depth[0m
               Sets a maximum number of recursion levels when attempting to map variable names or  debug  temporaries
               to  value  expressions.  This trades compilation time for more complete debug information.  If this is
               set too low, value expressions that are available and could be represented in  debug  information  may
               end  up  not  being  used;  setting  this  higher  may  enable the compiler to find more complex debug
               expressions, but compile time and memory use may grow.

           [1mmax-debug-marker-count[0m
               Sets a threshold on the number of  debug  markers  (e.g.  begin  stmt  markers)  to  avoid  complexity
               explosion  at  inlining  or  expanding  to RTL.  If a function has more such gimple stmts than the set
               limit, such stmts will be dropped from the inlined copy of a function, and from its RTL expansion.

           [1mmin-nondebug-insn-uid[0m
               Use uids starting at this parameter for nondebug insns.  The range below  the  parameter  is  reserved
               exclusively  for  debug  insns  created  by  [1m-fvar-tracking-assignments[22m, but debug insns may get (non-
               overlapping) uids above it if the reserved range is exhausted.

           [1mipa-sra-deref-prob-threshold[0m
               IPA-SRA replaces a pointer which is known not be NULL with one or more new parameters  only  when  the
               probability  (in  percent,  relative  to  function entry) of it being dereferenced is higher than this
               parameter.

           [1mipa-sra-ptr-growth-factor[0m
               IPA-SRA replaces a pointer to an aggregate with one or more new parameters only when their  cumulative
               size is less or equal to [1mipa-sra-ptr-growth-factor [22mtimes the size of the original pointer parameter.

           [1mipa-sra-ptrwrap-growth-factor[0m
               Additional  maximum  allowed growth of total size of new parameters that ipa-sra replaces a pointer to
               an aggregate with, if it points to a local variable that the caller only writes to and passes it as an
               argument to other functions.

           [1mipa-sra-max-replacements[0m
               Maximum pieces of an aggregate that IPA-SRA tracks.  As a consequence, it is also the  maximum  number
               of replacements of a formal parameter.

           [1msra-max-scalarization-size-Ospeed[0m
           [1msra-max-scalarization-size-Osize[0m
               The  two  Scalar  Reduction  of  Aggregates  passes  (SRA  and IPA-SRA) aim to replace scalar parts of
               aggregates with uses of independent scalar variables.  These parameters control the maximum  size,  in
               storage  units,  of  aggregate  which is considered for replacement when compiling for speed ([1msra-max-[0m
               [1mscalarization-size-Ospeed[22m) or size ([1msra-max-scalarization-size-Osize[22m) respectively.

           [1msra-max-propagations[0m
               The maximum number of artificial accesses that Scalar Replacement of Aggregates (SRA) will track,  per
               one local variable, in order to facilitate copy propagation.

           [1mtm-max-aggregate-size[0m
               When  making  copies  of thread-local variables in a transaction, this parameter specifies the size in
               bytes after which variables are saved with the logging  functions  as  opposed  to  save/restore  code
               sequence pairs.  This option only applies when using [1m-fgnu-tm[22m.

           [1mgraphite-max-nb-scop-params[0m
               To  avoid  exponential  effects  in the Graphite loop transforms, the number of parameters in a Static
               Control Part (SCoP) is bounded.  A value of zero can be used to lift  the  bound.   A  variable  whose
               value is unknown at compilation time and defined outside a SCoP is a parameter of the SCoP.

           [1mloop-block-tile-size[0m
               Loop  blocking  or strip mining transforms, enabled with [1m-floop-block [22mor [1m-floop-strip-mine[22m, strip mine
               each loop in the loop nest by a given number of iterations.  The strip length can be changed using the
               [1mloop-block-tile-size [22mparameter.

           [1mipa-jump-function-lookups[0m
               Specifies number of statements visited during jump function offset discovery.

           [1mipa-cp-value-list-size[0m
               IPA-CP attempts to track all possible values and types passed to a function's parameter  in  order  to
               propagate  them  and perform devirtualization.  [1mipa-cp-value-list-size [22mis the maximum number of values
               and types it stores per one formal parameter of a function.

           [1mipa-cp-eval-threshold[0m
               IPA-CP calculates its own score  of  cloning  profitability  heuristics  and  performs  those  cloning
               opportunities with scores that exceed [1mipa-cp-eval-threshold[22m.

           [1mipa-cp-max-recursive-depth[0m
               Maximum depth of recursive cloning for self-recursive function.

           [1mipa-cp-min-recursive-probability[0m
               Recursive cloning only when the probability of call being executed exceeds the parameter.

           [1mipa-cp-profile-count-base[0m
               When  using  [1m-fprofile-use  [22moption,  IPA-CP will consider the measured execution count of a call graph
               edge at this percentage position in their histogram as the basis for its heuristics calculation.

           [1mipa-cp-recursive-freq-factor[0m
               The number of times interprocedural copy propagation expects recursive functions to call themselves.

           [1mipa-cp-recursion-penalty[0m
               Percentage penalty the recursive functions will receive when they are evaluated for cloning.

           [1mipa-cp-single-call-penalty[0m
               Percentage penalty functions containing a single call to another function will receive when  they  are
               evaluated for cloning.

           [1mipa-max-agg-items[0m
               IPA-CP  is  also  capable  to propagate a number of scalar values passed in an aggregate. [1mipa-max-agg-[0m
               [1mitems [22mcontrols the maximum number of such values per one parameter.

           [1mipa-cp-loop-hint-bonus[0m
               When IPA-CP determines that a cloning candidate would make the number of iterations of a  loop  known,
               it adds a bonus of [1mipa-cp-loop-hint-bonus [22mto the profitability score of the candidate.

           [1mipa-max-loop-predicates[0m
               The  maximum  number  of  different  predicates IPA will use to describe when loops in a function have
               known properties.

           [1mipa-max-aa-steps[0m
               During its analysis of function bodies, IPA-CP employs alias analysis in order to track values pointed
               to by function parameters.  In order not spend too much time analyzing huge functions, it gives up and
               consider all memory clobbered after examining [1mipa-max-aa-steps [22mstatements modifying memory.

           [1mipa-max-switch-predicate-bounds[0m
               Maximal number of boundary endpoints of case ranges of switch statement.  For  switch  exceeding  this
               limit,  IPA-CP  will  not construct cloning cost predicate, which is used to estimate cloning benefit,
               for default case of the switch statement.

           [1mipa-max-param-expr-ops[0m
               IPA-CP will analyze conditional statement that references some function parameter to estimate  benefit
               for  cloning  upon  certain  constant  value.   But  if number of operations in a parameter expression
               exceeds [1mipa-max-param-expr-ops[22m, the expression is treated as complicated one, and is  not  handled  by
               IPA analysis.

           [1mlto-partitions[0m
               Specify  desired  number  of  partitions  produced during WHOPR compilation.  The number of partitions
               should exceed the number of CPUs used for compilation.

           [1mlto-min-partition[0m
               Size of minimal partition for WHOPR (in estimated instructions).  This prevents expenses of  splitting
               very small programs into too many partitions.

           [1mlto-max-partition[0m
               Size of max partition for WHOPR (in estimated instructions).  to provide an upper bound for individual
               size of partition.  Meant to be used only with balanced partitioning.

           [1mlto-max-streaming-parallelism[0m
               Maximal number of parallel processes used for LTO streaming.

           [1mcxx-max-namespaces-for-diagnostic-help[0m
               The  maximum  number  of  namespaces  to  consult  for  suggestions  when C++ name lookup fails for an
               identifier.

           [1msink-frequency-threshold[0m
               The maximum relative execution frequency (in percents) of the target block relative to  a  statement's
               original  block  to  allow statement sinking of a statement.  Larger numbers result in more aggressive
               statement sinking.  A small positive adjustment is applied for  statements  with  memory  operands  as
               those are even more profitable so sink.

           [1mmax-stores-to-sink[0m
               The  maximum  number  of  conditional  store pairs that can be sunk.  Set to 0 if either vectorization
               ([1m-ftree-vectorize[22m) or if-conversion ([1m-ftree-loop-if-convert[22m) is disabled.

           [1mcase-values-threshold[0m
               The smallest number of different values for which it is best to use a jump-table instead of a tree  of
               conditional branches.  If the value is 0, use the default for the machine.

           [1mjump-table-max-growth-ratio-for-size[0m
               The  maximum  code  size growth ratio when expanding into a jump table (in percent).  The parameter is
               used when optimizing for size.

           [1mjump-table-max-growth-ratio-for-speed[0m
               The maximum code size growth ratio when expanding into a jump table (in percent).   The  parameter  is
               used when optimizing for speed.

           [1mtree-reassoc-width[0m
               Set  the  maximum  number  of  instructions  executed in parallel in reassociated tree. This parameter
               overrides target dependent heuristics used by default if has non zero value.

           [1msched-pressure-algorithm[0m
               Choose between the two available implementations of [1m-fsched-pressure[22m.  Algorithm  1  is  the  original
               implementation  and  is the more likely to prevent instructions from being reordered.  Algorithm 2 was
               designed to be a compromise between the relatively conservative approach taken by algorithm 1 and  the
               rather aggressive approach taken by the default scheduler.  It relies more heavily on having a regular
               register  file and accurate register pressure classes.  See [4mhaifa-sched.cc[24m in the GCC sources for more
               details.

               The default choice depends on the target.

           [1mmax-slsr-cand-scan[0m
               Set the maximum number of existing candidates that are considered when  seeking  a  basis  for  a  new
               straight-line strength reduction candidate.

           [1masan-globals[0m
               Enable buffer overflow detection for global objects.  This kind of protection is enabled by default if
               you   are  using  [1m-fsanitize=address  [22moption.   To  disable  global  objects  protection  use  [1m--param[0m
               [1masan-globals=0[22m.

           [1masan-stack[0m
               Enable buffer overflow detection for stack objects.  This kind of protection  is  enabled  by  default
               when using [1m-fsanitize=address[22m.  To disable stack protection use [1m--param asan-stack=0 [22moption.

           [1masan-instrument-reads[0m
               Enable buffer overflow detection for memory reads.  This kind of protection is enabled by default when
               using [1m-fsanitize=address[22m.  To disable memory reads protection use [1m--param asan-instrument-reads=0[22m.

           [1masan-instrument-writes[0m
               Enable  buffer  overflow  detection  for memory writes.  This kind of protection is enabled by default
               when   using   [1m-fsanitize=address[22m.    To   disable    memory    writes    protection    use    [1m--param[0m
               [1masan-instrument-writes=0 [22moption.

           [1masan-memintrin[0m
               Enable  detection  for  built-in  functions.  This kind of protection is enabled by default when using
               [1m-fsanitize=address[22m.  To disable built-in functions protection use [1m--param asan-memintrin=0[22m.

           [1masan-use-after-return[0m
               Enable detection of use-after-return.  This kind of protection is enabled by default  when  using  the
               [1m-fsanitize=address [22moption.  To disable it use [1m--param asan-use-after-return=0[22m.

               Note:    By    default    the    check    is    disabled   at   run   time.    To   enable   it,   add
               "detect_stack_use_after_return=1" to the environment variable [1mASAN_OPTIONS[22m.

           [1masan-instrumentation-with-call-threshold[0m
               If number of memory accesses in function being instrumented is greater or equal to  this  number,  use
               callbacks    instead    of    inline    checks.    E.g.   to   disable   inline   code   use   [1m--param[0m
               [1masan-instrumentation-with-call-threshold=0[22m.

           [1masan-kernel-mem-intrinsic-prefix[0m
               If nonzero,  prefix  calls  to  "memcpy",  "memset"  and  "memmove"  with  [1m__asan_  [22mor  [1m__hwasan_  [22mfor
               [1m-fsanitize=kernel-address [22mor [1m-fsanitize=kernel-hwaddress[22m, respectively.

           [1mhwasan-instrument-stack[0m
               Enable   hwasan   instrumentation  of  statically  sized  stack-allocated  variables.   This  kind  of
               instrumentation is enabled by default when using [1m-fsanitize=hwaddress [22mand  disabled  by  default  when
               using     [1m-fsanitize=kernel-hwaddress[22m.     To    disable    stack    instrumentation    use    [1m--param[0m
               [1mhwasan-instrument-stack=0[22m, and to enable it use [1m--param hwasan-instrument-stack=1[22m.

           [1mhwasan-random-frame-tag[0m
               When using stack instrumentation, decide tags for  stack  variables  using  a  deterministic  sequence
               beginning  at  a  random tag for each frame.  With this parameter unset tags are chosen using the same
               sequence but beginning from 1.  This is enabled by default for  [1m-fsanitize=hwaddress  [22mand  unavailable
               for [1m-fsanitize=kernel-hwaddress[22m.  To disable it use [1m--param hwasan-random-frame-tag=0[22m.

           [1mhwasan-instrument-allocas[0m
               Enable   hwasan  instrumentation  of  dynamically  sized  stack-allocated  variables.   This  kind  of
               instrumentation is enabled by default when using [1m-fsanitize=hwaddress [22mand  disabled  by  default  when
               using   [1m-fsanitize=kernel-hwaddress[22m.   To  disable  instrumentation  of  such  variables  use  [1m--param[0m
               [1mhwasan-instrument-allocas=0[22m, and to enable it use [1m--param hwasan-instrument-allocas=1[22m.

           [1mhwasan-instrument-reads[0m
               Enable hwasan checks on memory reads.  Instrumentation  of  reads  is  enabled  by  default  for  both
               [1m-fsanitize=hwaddress  [22mand  [1m-fsanitize=kernel-hwaddress[22m.   To disable checking memory reads use [1m--param[0m
               [1mhwasan-instrument-reads=0[22m.

           [1mhwasan-instrument-writes[0m
               Enable hwasan checks on memory writes.  Instrumentation of writes  is  enabled  by  default  for  both
               [1m-fsanitize=hwaddress  [22mand  [1m-fsanitize=kernel-hwaddress[22m.  To disable checking memory writes use [1m--param[0m
               [1mhwasan-instrument-writes=0[22m.

           [1mhwasan-instrument-mem-intrinsics[0m
               Enable hwasan instrumentation of builtin functions.  Instrumentation of  these  builtin  functions  is
               enabled  by  default  for  both  [1m-fsanitize=hwaddress  [22mand  [1m-fsanitize=kernel-hwaddress[22m.   To  disable
               instrumentation of builtin functions use [1m--param hwasan-instrument-mem-intrinsics=0[22m.

           [1muse-after-scope-direct-emission-threshold[0m
               If the size of a local variable in bytes is smaller or equal  to  this  number,  directly  poison  (or
               unpoison) shadow memory instead of using run-time callbacks.

           [1mtsan-distinguish-volatile[0m
               Emit special instrumentation for accesses to volatiles.

           [1mtsan-instrument-func-entry-exit[0m
               Emit instrumentation calls to _[1m_tsan_func_entry() [22mand _[1m_tsan_func_exit()[22m.

           [1mmax-fsm-thread-path-insns[0m
               Maximum number of instructions to copy when duplicating blocks on a finite state automaton jump thread
               path.

           [1mthreader-debug[0m
               threader-debug=[none|all] Enables verbose dumping of the threader solver.

           [1mparloops-chunk-size[0m
               Chunk size of omp schedule for loops parallelized by parloops.

           [1mparloops-schedule[0m
               Schedule  type  of  omp  schedule  for  loops parallelized by parloops (static, dynamic, guided, auto,
               runtime).

           [1mparloops-min-per-thread[0m
               The minimum number of  iterations  per  thread  of  an  innermost  parallelized  loop  for  which  the
               parallelized  variant  is  preferred  over the single threaded one.  Note that for a parallelized loop
               nest the minimum number of iterations of the outermost loop per thread is two.

           [1mmax-ssa-name-query-depth[0m
               Maximum depth of recursion when querying properties of SSA names in things like  fold  routines.   One
               level of recursion corresponds to following a use-def chain.

           [1mmax-speculative-devirt-maydefs[0m
               The  maximum  number of may-defs we analyze when looking for a must-def specifying the dynamic type of
               an object that invokes a virtual call we may be able to devirtualize speculatively.

           [1mevrp-sparse-threshold[0m
               Maximum number of basic blocks before EVRP uses a sparse cache.

           [1mranger-debug[0m
               Specifies the type of debug output to be issued for ranges.

           [1mevrp-switch-limit[0m
               Specifies the maximum number of switch cases before EVRP ignores a switch.

           [1munroll-jam-min-percent[0m
               The minimum percentage of memory references  that  must  be  optimized  away  for  the  unroll-and-jam
               transformation to be considered profitable.

           [1munroll-jam-max-unroll[0m
               The maximum number of times the outer loop should be unrolled by the unroll-and-jam transformation.

           [1mmax-rtl-if-conversion-unpredictable-cost[0m
               Maximum  permissible cost for the sequence that would be generated by the RTL if-conversion pass for a
               branch that is considered unpredictable.

           [1mmax-variable-expansions-in-unroller[0m
               If [1m-fvariable-expansion-in-unroller [22mis used, the maximum number of times that an  individual  variable
               will be expanded during loop unrolling.

           [1mpartial-inlining-entry-probability[0m
               Maximum  probability of the entry BB of split region (in percent relative to entry BB of the function)
               to make partial inlining happen.

           [1mmax-tracked-strlens[0m
               Maximum number of strings for which strlen optimization pass will track string lengths.

           [1mgcse-after-reload-partial-fraction[0m
               The threshold ratio for performing partial redundancy elimination after reload.

           [1mgcse-after-reload-critical-fraction[0m
               The threshold ratio of critical edges execution count that permit  performing  redundancy  elimination
               after reload.

           [1mmax-loop-header-insns[0m
               The maximum number of insns in loop header duplicated by the copy loop headers pass.

           [1mvect-epilogues-nomask[0m
               Enable loop epilogue vectorization using smaller vector size.

           [1mvect-partial-vector-usage[0m
               Controls when the loop vectorizer considers using partial vector loads and stores as an alternative to
               falling  back to scalar code.  0 stops the vectorizer from ever using partial vector loads and stores.
               1 allows partial vector loads and stores if vectorization removes the need for the code to iterate.  2
               allows partial vector loads and stores in all loops.  The parameter only has an effect on targets that
               support partial vector loads and stores.

           [1mvect-inner-loop-cost-factor[0m
               The maximum factor which the loop vectorizer applies to the  cost  of  statements  in  an  inner  loop
               relative  to  the loop being vectorized.  The factor applied is the maximum of the estimated number of
               iterations of the inner loop and this parameter.  The default value of this parameter is 50.

           [1mvect-induction-float[0m
               Enable loop vectorization of floating point inductions.

           [1mavoid-fma-max-bits[0m
               Maximum number of bits for which we avoid creating FMAs.

           [1msms-loop-average-count-threshold[0m
               A threshold on the average loop count considered by the swing modulo scheduler.

           [1msms-dfa-history[0m
               The number of cycles the swing modulo scheduler considers when checking conflicts using DFA.

           [1mgraphite-allow-codegen-errors[0m
               Whether codegen errors should be ICEs when [1m-fchecking[22m.

           [1msms-max-ii-factor[0m
               A factor for tuning the upper bound that swing modulo scheduler uses for scheduling a loop.

           [1mlra-max-considered-reload-pseudos[0m
               The max number of reload pseudos which are considered during spilling a non-reload pseudo.

           [1mmax-pow-sqrt-depth[0m
               Maximum depth of sqrt chains to use when synthesizing exponentiation by a real constant.

           [1mmax-dse-active-local-stores[0m
               Maximum number of active local stores in RTL dead store elimination.

           [1masan-instrument-allocas[0m
               Enable asan allocas/VLAs protection.

           [1mmax-iterations-computation-cost[0m
               Bound on the cost of an expression to compute the number of iterations.

           [1mmax-isl-operations[0m
               Maximum number of isl operations, 0 means unlimited.

           [1mgraphite-max-arrays-per-scop[0m
               Maximum number of arrays per scop.

           [1mmax-vartrack-reverse-op-size[0m
               Max. size of loc list for which reverse ops should be added.

           [1mfsm-scale-path-stmts[0m
               Scale factor to apply to the number of statements in a threading path crossing a  loop  backedge  when
               comparing to [1m--param=max-jump-thread-duplication-stmts[22m.

           [1muninit-control-dep-attempts[0m
               Maximum  number  of  nested  calls  to  search  for control dependencies during uninitialized variable
               analysis.

           [1msched-autopref-queue-depth[0m
               Hardware autoprefetcher scheduler model control flag.  Number of  lookahead  cycles  the  model  looks
               into; at ' ' only enable instruction sorting heuristic.

           [1mloop-versioning-max-inner-insns[0m
               The  maximum  number  of  instructions  that  an  inner  loop can have before the loop versioning pass
               considers it too big to copy.

           [1mloop-versioning-max-outer-insns[0m
               The maximum number of instructions that an outer  loop  can  have  before  the  loop  versioning  pass
               considers  it  too big to copy, discounting any instructions in inner loops that directly benefit from
               versioning.

           [1mssa-name-def-chain-limit[0m
               The maximum number of SSA_NAME assignments to follow in determining a property of a variable  such  as
               its  value.   This  limits  the  number  of iterations or recursive calls GCC performs when optimizing
               certain statements or when determining their validity prior to issuing diagnostics.

           [1mstore-merging-max-size[0m
               Maximum size of a single store merging region in bytes.

           [1mhash-table-verification-limit[0m
               The number of elements for which hash table verification is done for each searched element.

           [1mmax-find-base-term-values[0m
               Maximum number of VALUEs handled during a single find_base_term call.

           [1manalyzer-max-enodes-per-program-point[0m
               The maximum number of exploded nodes  per  program  point  within  the  analyzer,  before  terminating
               analysis of that point.

           [1manalyzer-max-constraints[0m
               The maximum number of constraints per state.

           [1manalyzer-min-snodes-for-call-summary[0m
               The  minimum  number  of  supernodes  within  a  function for the analyzer to consider summarizing its
               effects at call sites.

           [1manalyzer-max-enodes-for-full-dump[0m
               The maximum depth of exploded nodes that should appear in a  dot  dump  before  switching  to  a  less
               verbose format.

           [1manalyzer-max-recursion-depth[0m
               The  maximum  number  of  times  a  callsite  can  appear  in a call stack within the analyzer, before
               terminating analysis of a call that would recurse deeper.

           [1manalyzer-max-svalue-depth[0m
               The maximum depth of a symbolic value, before approximating the value as unknown.

           [1manalyzer-max-infeasible-edges[0m
               The maximum number of infeasible edges to reject before declaring a diagnostic as infeasible.

           [1mgimple-fe-computed-hot-bb-threshold[0m
               The number of executions of a basic block which is considered hot.  The  parameter  is  used  only  in
               GIMPLE FE.

           [1manalyzer-bb-explosion-factor[0m
               The  maximum  number  of  'after  supernode'  exploded nodes within the analyzer per supernode, before
               terminating analysis.

           [1mranger-logical-depth[0m
               Maximum depth of logical expression evaluation ranger will look through when evaluating outgoing  edge
               ranges.

           [1mranger-recompute-depth[0m
               Maximum depth of instruction chains to consider for recomputation in the outgoing range calculator.

           [1mrelation-block-limit[0m
               Maximum number of relations the oracle will register in a basic block.

           [1mmin-pagesize[0m
               Minimum page size for warning purposes.

           [1mopenacc-kernels[0m
               Specify  mode  of  OpenACC  ‘kernels'  constructs  handling.   With [1m--param=openacc-kernels=decompose[22m,
               OpenACC ‘kernels' constructs are decomposed into parts, a sequence of compute  constructs,  each  then
               handled  individually.   This  is  work  in  progress.  With [1m--param=openacc-kernels=parloops[22m, OpenACC
               ‘kernels' constructs are handled by the [1mparloops [22mpass, en bloc.  This is the current default.

           [1mopenacc-privatization[0m
               Control whether the [1m-fopt-info-omp-note [22mand  applicable  [1m-fdump-tree-*-details  [22moptions  emit  OpenACC
               privatization  diagnostics.   With  [1m--param=openacc-privatization=quiet[22m,  don't diagnose.  This is the
               current default.  With [1m--param=openacc-privatization=noisy[22m, do diagnose.

           The following choices of [4mname[24m are available on AArch64 targets:

           [1maarch64-sve-compare-costs[0m
               When vectorizing for SVE, consider using "unpacked" vectors for smaller  elements  and  use  the  cost
               model  to pick the cheapest approach.  Also use the cost model to choose between SVE and Advanced SIMD
               vectorization.

               Using unpacked vectors includes storing smaller elements in larger containers and  accessing  elements
               with extending loads and truncating stores.

           [1maarch64-float-recp-precision[0m
               The  number  of  Newton  iterations  for  calculating the reciprocal for float type.  The precision of
               division is proportional to this param when division approximation is enabled.  The default  value  is
               1.

           [1maarch64-double-recp-precision[0m
               The  number  of  Newton  iterations  for calculating the reciprocal for double type.  The precision of
               division is propotional to this param when division approximation is enabled.  The default value is 2.

           [1maarch64-autovec-preference[0m
               Force an ISA selection strategy for auto-vectorization.  Accepts values from 0 to 4, inclusive.

               [1m0   [22mUse the default heuristics.

               [1m1   [22mUse only Advanced SIMD for auto-vectorization.

               [1m2   [22mUse only SVE for auto-vectorization.

               [1m3   [22mUse both Advanced SIMD and SVE.  Prefer Advanced SIMD when the costs are deemed equal.

               [1m4   [22mUse both Advanced SIMD and SVE.  Prefer SVE when the costs are deemed equal.

               The default value is 0.

           [1maarch64-loop-vect-issue-rate-niters[0m
               The tuning for some AArch64 CPUs tries to take both  latencies  and  issue  rates  into  account  when
               deciding  whether  a  loop  should  be  vectorized  using  SVE, vectorized using Advanced SIMD, or not
               vectorized at all.  If this parameter is set to [4mn[24m, GCC will not use this heuristic for loops that  are
               known to execute in fewer than [4mn[24m Advanced SIMD iterations.

           [1maarch64-vect-unroll-limit[0m
               The  vectorizer  will  use available tuning information to determine whether it would be beneficial to
               unroll the main vectorized loop and by how much.  This parameter set's the upper bound of how much the
               vectorizer will unroll the main loop.  The default value is four.

           The following choices of [4mname[24m are available on i386 and x86_64 targets:

           [1mx86-stlf-window-ninsns[0m
               Instructions number above which STFL stall penalty can be compensated.

           [1mx86-stv-max-visits[0m
               The maximum number of use and def visits when discovering a STV chain before the discovery is aborted.

   [1mProgram Instrumentation Options[0m
       GCC supports a number of command-line options that control adding run-time  instrumentation  to  the  code  it
       normally  generates.   For  example, one purpose of instrumentation is collect profiling statistics for use in
       finding program hot spots, code coverage analysis, or profile-guided optimizations.  Another class of  program
       instrumentation  is adding run-time checking to detect programming errors like invalid pointer dereferences or
       out-of-bounds array accesses, as well as deliberately hostile attacks such as stack  smashing  or  C++  vtable
       hijacking.   There  is  also a general hook which can be used to implement other forms of tracing or function-
       level instrumentation for debug or program analysis purposes.

       [1m-p[0m
       [1m-pg [22mGenerate extra code to write profile information suitable for the analysis program [1mprof [22m(for [1m-p[22m) or  [1mgprof[0m
           (for  [1m-pg[22m).   You  must  use this option when compiling the source files you want data about, and you must
           also use it when linking.

           You can use the function attribute "no_instrument_function" to suppress profiling of individual  functions
           when compiling with these options.

       [1m-fprofile-arcs[0m
           Add  code so that program flow [4marcs[24m are instrumented.  During execution the program records how many times
           each branch and call is executed and how many times it is taken  or  returns.   On  targets  that  support
           constructors  with  priority  support,  profiling  properly  handles  constructors,  destructors  and  C++
           constructors (and destructors) of classes which are used as a type of a global variable.

           When the compiled program exits it saves this data to a file called [4mauxname.gcda[24m  for  each  source  file.
           The  data  may  be  used for profile-directed optimizations ([1m-fbranch-probabilities[22m), or for test coverage
           analysis ([1m-ftest-coverage[22m).  Each object file's [4mauxname[24m is generated from the name of the output file,  if
           explicitly  specified and it is not the final executable, otherwise it is the basename of the source file.
           In both cases any suffix is removed (e.g. [4mfoo.gcda[24m for input file [4mdir/foo.c[24m, or  [4mdir/foo.gcda[24m  for  output
           file specified as [1m-o dir/foo.o[22m).

           Note  that  if  a command line directly links source files, the corresponding [4m.gcda[24m files will be prefixed
           with the unsuffixed name of the output file.  E.g. "gcc a.c b.c -o binary"  would  generate  [4mbinary-a.gcda[0m
           and [4mbinary-b.gcda[24m files.

       [1m--coverage[0m
           This  option is used to compile and link code instrumented for coverage analysis.  The option is a synonym
           for [1m-fprofile-arcs -ftest-coverage [22m(when compiling) and [1m-lgcov [22m(when linking).  See the documentation  for
           those options for more details.

           *   Compile  the source files with [1m-fprofile-arcs [22mplus optimization and code generation options.  For test
               coverage analysis, use the additional [1m-ftest-coverage [22moption.  You do not need to profile every source
               file in a program.

           *   Compile the source files additionally with [1m-fprofile-abs-path [22mto create absolute  path  names  in  the
               [4m.gcno[24m  files.   This allows [1mgcov [22mto find the correct sources in projects where compilations occur with
               different working directories.

           *   Link your object files with [1m-lgcov [22mor [1m-fprofile-arcs [22m(the latter implies the former).

           *   Run the program on a representative workload to generate the arc profile  information.   This  may  be
               repeated any number of times.  You can run concurrent instances of your program, and provided that the
               file system supports locking, the data files will be correctly updated.  Unless a strict ISO C dialect
               option is in effect, "fork" calls are detected and correctly handled without double counting.

               Moreover,  an  object file can be recompiled multiple times and the corresponding [4m.gcda[24m file merges as
               long as the source file and the compiler options are unchanged.

           *   For profile-directed optimizations, compile the source files again with the same optimization and code
               generation options plus [1m-fbranch-probabilities[22m.

           *   For test coverage analysis, use [1mgcov [22mto produce human readable information from the  [4m.gcno[24m  and  [4m.gcda[0m
               files.  Refer to the [1mgcov [22mdocumentation for further information.

           With  [1m-fprofile-arcs[22m,  for  each  function  of your program GCC creates a program flow graph, then finds a
           spanning tree for the graph.  Only arcs that are not on the spanning tree have  to  be  instrumented:  the
           compiler  adds  code  to  count the number of times that these arcs are executed.  When an arc is the only
           exit or only entrance to a block, the instrumentation code can be added to the  block;  otherwise,  a  new
           basic block must be created to hold the instrumentation code.

       [1m-ftest-coverage[0m
           Produce  a  notes  file that the [1mgcov [22mcode-coverage utility can use to show program coverage.  Each source
           file's note file is called [4mauxname.gcno[24m.  Refer to the [1m-fprofile-arcs [22moption above for  a  description  of
           [4mauxname[24m  and  instructions  on how to generate test coverage data.  Coverage data matches the source files
           more closely if you do not optimize.

       [1m-fprofile-abs-path[0m
           Automatically convert relative source file names to absolute path names in the [4m.gcno[24m files.   This  allows
           [1mgcov [22mto find the correct sources in projects where compilations occur with different working directories.

       [1m-fprofile-dir=[4m[22mpath[0m
           Set  the  directory to search for the profile data files in to [4mpath[24m.  This option affects only the profile
           data generated by [1m-fprofile-generate[22m,  [1m-ftest-coverage[22m,  [1m-fprofile-arcs  [22mand  used  by  [1m-fprofile-use  [22mand
           [1m-fbranch-probabilities  [22mand  its  related  options.   Both  absolute  and  relative paths can be used.  By
           default, GCC uses the current directory as [4mpath[24m, thus the profile data file appears in the same  directory
           as  the  object  file.   In  order  to  prevent  the file name clashing, if the object file name is not an
           absolute path, we mangle the absolute path of the [4msourcename.gcda[24m file and use it as the file  name  of  a
           [4m.gcda[24m file.  See details about the file naming in [1m-fprofile-arcs[22m.  See similar option [1m-fprofile-note[22m.

           When  an  executable  is  run  in  a  massive  parallel  environment, it is recommended to save profile to
           different folders.  That can be done with variables in [4mpath[24m that are exported during run-time:

           [1m%p  [22mprocess ID.

           [1m%q{VAR}[0m
               value of environment variable [4mVAR[0m

       [1m-fprofile-generate[0m
       [1m-fprofile-generate=[4m[22mpath[0m
           Enable  options  usually  used  for  instrumenting  application  to  produce  profile  useful  for   later
           recompilation  with  profile  feedback  based  optimization.   You  must  use [1m-fprofile-generate [22mboth when
           compiling and when linking your program.

           The following options are enabled: [1m-fprofile-arcs[22m, [1m-fprofile-values[22m, [1m-finline-functions[22m, and [1m-fipa-bit-cp[22m.

           If [4mpath[24m is specified, GCC looks at the [4mpath[24m to find the profile feedback data files. See [1m-fprofile-dir[22m.

           To optimize the program based on the collected profile information, use [1m-fprofile-use[22m.

       [1m-fprofile-info-section[0m
       [1m-fprofile-info-section=[4m[22mname[0m
           Register the profile information in the specified section instead of using a constructor/destructor.   The
           section  name  is [4mname[24m if it is specified, otherwise the section name defaults to ".gcov_info".  A pointer
           to the profile information generated by [1m-fprofile-arcs  [22mis  placed  in  the  specified  section  for  each
           translation  unit.  This option disables the profile information registration through a constructor and it
           disables the profile information processing through a destructor.  This option is not intended to be  used
           in  hosted  environments  such  as  GNU/Linux.  It targets freestanding environments (for example embedded
           systems) with limited resources which do not support constructors/destructors or the C library file I/O.

           The linker could collect the input sections in a continuous memory block and define start and end symbols.
           A GNU linker script example which defines a linker output section follows:

                     .gcov_info      :
                     {
                       PROVIDE (__gcov_info_start = .);
                       KEEP (*(.gcov_info))
                       PROVIDE (__gcov_info_end = .);
                     }

           The program could dump the profiling information registered in this linker set for example like this:

                   #include <gcov.h>
                   #include <stdio.h>
                   #include <stdlib.h>

                   extern const struct gcov_info *const __gcov_info_start[];
                   extern const struct gcov_info *const __gcov_info_end[];

                   static void
                   dump (const void *d, unsigned n, void *arg)
                   {
                     const unsigned char *c = d;

                     for (unsigned i = 0; i < n; ++i)
                       printf ("%02x", c[i]);
                   }

                   static void
                   filename (const char *f, void *arg)
                   {
                     __gcov_filename_to_gcfn (f, dump, arg );
                   }

                   static void *
                   allocate (unsigned length, void *arg)
                   {
                     return malloc (length);
                   }

                   static void
                   dump_gcov_info (void)
                   {
                     const struct gcov_info *const *info = __gcov_info_start;
                     const struct gcov_info *const *end = __gcov_info_end;

                     /* Obfuscate variable to prevent compiler optimizations.  */
                     __asm__ ("" : "+r" (info));

                     while (info != end)
                     {
                       void *arg = NULL;
                       __gcov_info_to_gcda (*info, filename, dump, allocate, arg);
                       putchar ('\n');
                       ++info;
                     }
                   }

                   int
                   main (void)
                   {
                     dump_gcov_info ();
                     return 0;
                   }

           The [1mmerge-stream [22msubcommand of [1mgcov-tool [22mmay be used to deserialize  the  data  stream  generated  by  the
           "__gcov_filename_to_gcfn" and "__gcov_info_to_gcda" functions and merge the profile information into [4m.gcda[0m
           files on the host filesystem.

       [1m-fprofile-note=[4m[22mpath[0m
           If  [4mpath[24m  is  specified, GCC saves [4m.gcno[24m file into [4mpath[24m location.  If you combine the option with multiple
           source files, the [4m.gcno[24m file will be overwritten.

       [1m-fprofile-prefix-path=[4m[22mpath[0m
           This option can be used in combination with [1mprofile-generate=[4m[22mprofile_dir[24m  and  [1mprofile-use=[4m[22mprofile_dir[24m  to
           inform  GCC  where  is the base directory of built source tree.  By default [4mprofile_dir[24m will contain files
           with mangled absolute paths of all object files  in  the  built  project.   This  is  not  desirable  when
           directory  used  to  build  the  instrumented  binary  differs from the directory used to build the binary
           optimized with profile feedback because the profile data will not be found during the optimized build.  In
           such setups [1m-fprofile-prefix-path=[4m[22mpath[24m with [4mpath[24m pointing to the base directory of the build can  be  used
           to strip the irrelevant part of the path and keep all file names relative to the main build directory.

       [1m-fprofile-prefix-map=[4m[22mold[24m[1m=[4m[22mnew[0m
           When  compiling files residing in directory [4mold[24m, record profiling information (with [1m--coverage[22m) describing
           them as if the files resided in directory [4mnew[24m instead.  See also [1m-ffile-prefix-map [22mand [1m-fcanon-prefix-map[22m.

       [1m-fprofile-update=[4m[22mmethod[0m
           Alter the update method for an application instrumented for  profile  feedback  based  optimization.   The
           [4mmethod[24m  argument  should  be  one of [1msingle[22m, [1matomic [22mor [1mprefer-atomic[22m.  The first one is useful for single-
           threaded applications, while the second one prevents profile corruption by emitting thread-safe code.

           [1mWarning: [22mWhen an application does not properly join all threads (or creates an detached thread), a profile
           file can be still corrupted.

           Using [1mprefer-atomic [22mwould be transformed either to [1matomic[22m, when  supported  by  a  target,  or  to  [1msingle[0m
           otherwise.   The  GCC  driver  automatically selects [1mprefer-atomic [22mwhen [1m-pthread [22mis present in the command
           line.

       [1m-fprofile-filter-files=[4m[22mregex[0m
           Instrument only functions from files whose name matches any of the regular expressions (separated by semi-
           colons).

           For example, [1m-fprofile-filter-files=main\.c;module.*\.c [22mwill  instrument  only  [4mmain.c[24m  and  all  C  files
           starting with 'module'.

       [1m-fprofile-exclude-files=[4m[22mregex[0m
           Instrument  only  functions from files whose name does not match any of the regular expressions (separated
           by semi-colons).

           For example, [1m-fprofile-exclude-files=/usr/.* [22mwill prevent instrumentation of all files that are located in
           the [4m/usr/[24m folder.

       [1m-fprofile-reproducible=[22m[[1mmultithreaded[22m|[1mparallel-runs[22m|[1mserial[22m]
           Control level of reproducibility of profile gathered by "-fprofile-generate".  This makes it  possible  to
           rebuild program with same outcome which is useful, for example, for distribution packages.

           With [1m-fprofile-reproducible=serial [22mthe profile gathered by [1m-fprofile-generate [22mis reproducible provided the
           trained program behaves the same at each invocation of the train run, it is not multi-threaded and profile
           data  streaming  is  always  done  in  the  same order.  Note that profile streaming happens at the end of
           program run but also before "fork" function is invoked.

           Note that it is quite common that execution counts of some part  of  programs  depends,  for  example,  on
           length  of temporary file names or memory space randomization (that may affect hash-table collision rate).
           Such non-reproducible part of programs may be annotated by  "no_instrument_function"  function  attribute.
           [1mgcov-dump [22mwith [1m-l [22mcan be used to dump gathered data and verify that they are indeed reproducible.

           With  [1m-fprofile-reproducible=parallel-runs  [22mcollected  profile  stays reproducible regardless the order of
           streaming of the data into gcda files.  This setting makes  it  possible  to  run  multiple  instances  of
           instrumented  program  in  parallel  (such  as  with "make -j"). This reduces quality of gathered data, in
           particular of indirect call profiling.

       [1m-fsanitize=address[0m
           Enable AddressSanitizer, a fast memory error detector.  Memory access  instructions  are  instrumented  to
           detect out-of-bounds and use-after-free bugs.  The option enables [1m-fsanitize-address-use-after-scope[22m.  See
           <[1mhttps://github.com/google/sanitizers/wiki/AddressSanitizer[22m>  for more details.  The run-time behavior can
           be influenced using the [1mASAN_OPTIONS [22menvironment variable.  When set to "help=1",  the  available  options
           are        shown        at        startup        of       the       instrumented       program.        See
           <[1mhttps://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags[22m> for a list  of  supported
           options.   The  option  cannot  be combined with [1m-fsanitize=thread [22mor [1m-fsanitize=hwaddress[22m.  Note that the
           only target [1m-fsanitize=hwaddress [22mis currently supported on is AArch64.

           To get more accurate stack traces, it is possible to use options such as [1m-O0[22m,  [1m-O1[22m,  or  [1m-Og  [22m(which,  for
           instance,  prevent most function inlining), [1m-fno-optimize-sibling-calls [22m(which prevents optimizing sibling
           and tail recursive calls; this option is implicit for [1m-O0[22m, [1m-O1[22m, or [1m-Og[22m), or [1m-fno-ipa-icf  [22m(which  disables
           Identical  Code  Folding  for  functions).   Since  multiple runs of the program may yield backtraces with
           different addresses due to ASLR (Address Space Layout Randomization), it may be  desirable  to  turn  ASLR
           off.  On Linux, this can be achieved with [1msetarch ‘uname -m‘ -R ./prog[22m.

       [1m-fsanitize=kernel-address[0m
           Enable  AddressSanitizer  for  Linux  kernel.   See <[1mhttps://github.com/google/kernel-sanitizers[22m> for more
           details.

       [1m-fsanitize=hwaddress[0m
           Enable Hardware-assisted AddressSanitizer, which uses a hardware ability to  ignore  the  top  byte  of  a
           pointer  to  allow  the detection of memory errors with a low memory overhead.  Memory access instructions
           are   instrumented   to   detect   out-of-bounds   and   use-after-free   bugs.    The   option    enables
           [1m-fsanitize-address-use-after-scope[22m.                                                                    See
           <[1mhttps://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html[22m> for more details.  The  run-time
           behavior  can  be  influenced  using  the  [1mHWASAN_OPTIONS [22menvironment variable.  When set to "help=1", the
           available options are shown at startup of the instrumented program.  The option cannot  be  combined  with
           [1m-fsanitize=thread [22mor [1m-fsanitize=address[22m, and is currently only available on AArch64.

       [1m-fsanitize=kernel-hwaddress[0m
           Enable   Hardware-assisted   AddressSanitizer   for   compilation   of   the  Linux  kernel.   Similar  to
           [1m-fsanitize=kernel-address   [22mbut   using   an   alternate   instrumentation   method,   and   similar    to
           [1m-fsanitize=hwaddress [22mbut with instrumentation differences necessary for compiling the Linux kernel.  These
           differences are to avoid hwasan library initialization calls and to account for the stack pointer having a
           different value in its top byte.

           [4mNote:[24m  This option has different defaults to the [1m-fsanitize=hwaddress[22m.  Instrumenting the stack and alloca
           calls are not on by default but  are  still  possible  by  specifying  the  command-line  options  [1m--param[0m
           [1mhwasan-instrument-stack=1  [22mand  [1m--param hwasan-instrument-allocas=1 [22mrespectively. Using a random frame tag
           is not implemented for kernel instrumentation.

       [1m-fsanitize=pointer-compare[0m
           Instrument comparison operation (<, <=, >, >=) with pointer operands.  The option must  be  combined  with
           either   [1m-fsanitize=kernel-address   [22mor   [1m-fsanitize=address   [22mThe   option   cannot   be   combined  with
           [1m-fsanitize=thread[22m.   Note:  By  default  the  check  is  disabled  at  run  time.   To  enable   it,   add
           "detect_invalid_pointer_pairs=2"      to      the     environment     variable     [1mASAN_OPTIONS[22m.     Using
           "detect_invalid_pointer_pairs=1" detects invalid operation only when both pointers are non-null.

       [1m-fsanitize=pointer-subtract[0m
           Instrument  subtraction  with   pointer   operands.    The   option   must   be   combined   with   either
           [1m-fsanitize=kernel-address  [22mor  [1m-fsanitize=address  [22mThe  option  cannot be combined with [1m-fsanitize=thread[22m.
           Note: By default the check is disabled at run time.  To enable it, add "detect_invalid_pointer_pairs=2" to
           the environment variable [1mASAN_OPTIONS[22m. Using "detect_invalid_pointer_pairs=1"  detects  invalid  operation
           only when both pointers are non-null.

       [1m-fsanitize=shadow-call-stack[0m
           Enable  ShadowCallStack,  a security enhancement mechanism used to protect programs against return address
           overwrites (e.g. stack buffer overflows.)  It works by saving a function's return address to a  separately
           allocated shadow call stack in the function prologue and restoring the return address from the shadow call
           stack  in  the  function  epilogue.  Instrumentation only occurs in functions that need to save the return
           address to the stack.

           Currently it only supports the aarch64 platform.  It is  specifically  designed  for  linux  kernels  that
           enable the CONFIG_SHADOW_CALL_STACK option.  For the user space programs, runtime support is not currently
           provided  in  libc and libgcc.  Users who want to use this feature in user space need to provide their own
           support for the runtime.  It should be noted that this may cause the ABI rules to be broken.

           On aarch64, the instrumentation makes use of the platform register "x18".  This generally means  that  any
           code  that may run on the same thread as code compiled with ShadowCallStack must be compiled with the flag
           [1m-ffixed-x18[22m, otherwise functions compiled without [1m-ffixed-x18 [22mmight  clobber  "x18"  and  so  corrupt  the
           shadow stack pointer.

           Also,  because  there  is  no  userspace  runtime  support,  code compiled with ShadowCallStack cannot use
           exception handling.  Use [1m-fno-exceptions [22mto turn off exceptions.

           See <[1mhttps://clang.llvm.org/docs/ShadowCallStack.html[22m> for more details.

       [1m-fsanitize=thread[0m
           Enable ThreadSanitizer, a fast data race detector.  Memory access instructions are instrumented to  detect
           data  race  bugs.   See  <[1mhttps://github.com/google/sanitizers/wiki#threadsanitizer[22m> for more details. The
           run-time   behavior   can   be   influenced   using   the   [1mTSAN_OPTIONS   [22menvironment    variable;    see
           <[1mhttps://github.com/google/sanitizers/wiki/ThreadSanitizerFlags[22m>  for  a  list  of supported options.  The
           option cannot be combined with [1m-fsanitize=address[22m, [1m-fsanitize=leak[22m.

           Note that sanitized atomic builtins cannot throw exceptions when operating  on  invalid  memory  addresses
           with non-call exceptions ([1m-fnon-call-exceptions[22m).

       [1m-fsanitize=leak[0m
           Enable  LeakSanitizer,  a memory leak detector.  This option only matters for linking of executables.  The
           executable is linked against a library  that  overrides  "malloc"  and  other  allocator  functions.   See
           <[1mhttps://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer[22m>  for more details.  The run-time
           behavior can be influenced using the [1mLSAN_OPTIONS [22menvironment variable.  The  option  cannot  be  combined
           with [1m-fsanitize=thread[22m.

       [1m-fsanitize=undefined[0m
           Enable   UndefinedBehaviorSanitizer,  a  fast  undefined  behavior  detector.   Various  computations  are
           instrumented       to        detect        undefined        behavior        at        runtime.         See
           <[1mhttps://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html[22m>  for  more  details.   The run-time behavior
           can be influenced using the [1mUBSAN_OPTIONS [22menvironment variable.  Current suboptions are:

           [1m-fsanitize=shift[0m
               This option enables checking that the result of a shift operation is not undefined.   Note  that  what
               exactly  is  considered  undefined  differs slightly between C and C++, as well as between ISO C90 and
               C99, etc.  This option has two suboptions, [1m-fsanitize=shift-base [22mand [1m-fsanitize=shift-exponent[22m.

           [1m-fsanitize=shift-exponent[0m
               This option enables checking that the second argument of a shift operation  is  not  negative  and  is
               smaller than the precision of the promoted first argument.

           [1m-fsanitize=shift-base[0m
               If  the  second  argument  of  a  shift  operation  is  within range, check that the result of a shift
               operation is not undefined.  Note that what exactly is considered undefined differs slightly between C
               and C++, as well as between ISO C90 and C99, etc.

           [1m-fsanitize=integer-divide-by-zero[0m
               Detect integer division by zero.

           [1m-fsanitize=unreachable[0m
               With this option, the compiler turns the "__builtin_unreachable" call into a diagnostics message  call
               instead.  When reaching the "__builtin_unreachable" call, the behavior is undefined.

           [1m-fsanitize=vla-bound[0m
               This option instructs the compiler to check that the size of a variable length array is positive.

           [1m-fsanitize=null[0m
               This  option enables pointer checking.  Particularly, the application built with this option turned on
               will issue an error message when it tries to dereference a NULL pointer, or if a  reference  (possibly
               an  rvalue  reference) is bound to a NULL pointer, or if a method is invoked on an object pointed by a
               NULL pointer.

           [1m-fsanitize=return[0m
               This option enables return statement checking.  Programs built with this option turned on  will  issue
               an  error  message  when the end of a non-void function is reached without actually returning a value.
               This option works in C++ only.

           [1m-fsanitize=signed-integer-overflow[0m
               This option enables signed integer overflow checking.  We check that the result of "+", "*", and  both
               unary  and  binary  "-" does not overflow in the signed arithmetics.  This also detects "INT_MIN / -1"
               signed division.  Note, integer promotion rules must be taken into account.  That is, the following is
               not an overflow:

                       signed char a = SCHAR_MAX;
                       a++;

           [1m-fsanitize=bounds[0m
               This option enables instrumentation of array bounds.  Various out of  bounds  accesses  are  detected.
               Flexible  array  members, flexible array member-like arrays, and initializers of variables with static
               storage are not instrumented, with the exception  of  flexible  array  member-like  arrays  for  which
               "-fstrict-flex-arrays"  or  "-fstrict-flex-arrays=" options or "strict_flex_array" attributes say they
               shouldn't be treated like flexible array member-like arrays.

           [1m-fsanitize=bounds-strict[0m
               This option enables strict instrumentation of array bounds.  Most out of bounds accesses are detected,
               including flexible array member-like arrays.  Initializers of variables with static  storage  are  not
               instrumented.

           [1m-fsanitize=alignment[0m
               This  option enables checking of alignment of pointers when they are dereferenced, or when a reference
               is  bound  to  insufficiently  aligned  target,  or  when  a  method  or  constructor  is  invoked  on
               insufficiently aligned object.

           [1m-fsanitize=object-size[0m
               This  option  enables  instrumentation  of memory references using the "__builtin_dynamic_object_size"
               function.  Various out of bounds pointer accesses are detected.

           [1m-fsanitize=float-divide-by-zero[0m
               Detect floating-point division by zero.  Unlike other similar options, [1m-fsanitize=float-divide-by-zero[0m
               is not enabled by [1m-fsanitize=undefined[22m, since floating-point division by zero can be a legitimate  way
               of obtaining infinities and NaNs.

           [1m-fsanitize=float-cast-overflow[0m
               This  option  enables floating-point type to integer conversion checking.  We check that the result of
               the conversion does not overflow.  Unlike other similar options, [1m-fsanitize=float-cast-overflow [22mis not
               enabled by [1m-fsanitize=undefined[22m.  This option does not work well with "FE_INVALID" exceptions enabled.

           [1m-fsanitize=nonnull-attribute[0m
               This option enables instrumentation of calls, checking whether null values are not passed to arguments
               marked as requiring a non-null value by the "nonnull" function attribute.

           [1m-fsanitize=returns-nonnull-attribute[0m
               This option enables instrumentation of return statements in functions  marked  with  "returns_nonnull"
               function attribute, to detect returning of null values from such functions.

           [1m-fsanitize=bool[0m
               This  option  enables instrumentation of loads from bool.  If a value other than 0/1 is loaded, a run-
               time error is issued.

           [1m-fsanitize=enum[0m
               This option enables instrumentation of loads from an enum type.  If  a  value  outside  the  range  of
               values for the enum type is loaded, a run-time error is issued.

           [1m-fsanitize=vptr[0m
               This option enables instrumentation of C++ member function calls, member accesses and some conversions
               between  pointers to base and derived classes, to verify the referenced object has the correct dynamic
               type.

           [1m-fsanitize=pointer-overflow[0m
               This option enables instrumentation of pointer arithmetics.  If the pointer arithmetics  overflows,  a
               run-time error is issued.

           [1m-fsanitize=builtin[0m
               This  option  enables instrumentation of arguments to selected builtin functions.  If an invalid value
               is passed to such arguments, a  run-time  error  is  issued.   E.g.  passing  0  as  the  argument  to
               "__builtin_ctz" or "__builtin_clz" invokes undefined behavior and is diagnosed by this option.

           Note  that  sanitizers  tend  to  increase  the rate of false positive warnings, most notably those around
           [1m-Wmaybe-uninitialized[22m.  We recommend against combining [1m-Werror [22mand [the use of] sanitizers.

           While [1m-ftrapv [22mcauses traps for signed overflows to be emitted,  [1m-fsanitize=undefined  [22mgives  a  diagnostic
           message.  This currently works only for the C family of languages.

       [1m-fno-sanitize=all[0m
           This option disables all previously enabled sanitizers.  [1m-fsanitize=all [22mis not allowed, as some sanitizers
           cannot be used together.

       [1m-fasan-shadow-offset=[4m[22mnumber[0m
           This  option  forces  GCC  to  use  custom  shadow  offset  in  AddressSanitizer checks.  It is useful for
           experimenting with different shadow memory layouts in Kernel AddressSanitizer.

       [1m-fsanitize-sections=[4m[22ms1[24m[1m,[4m[22ms2[24m[1m,...[0m
           Sanitize global variables in selected user-defined sections.  [4msi[24m may contain wildcards.

       [1m-fsanitize-recover[22m[[1m=[4m[22mopts[24m]
           [1m-fsanitize-recover= [22mcontrols error recovery mode for sanitizers mentioned in comma-separated list of [4mopts[24m.
           Enabling this option for a sanitizer component causes it to attempt to continue running the program as  if
           no  error  happened.   This means multiple runtime errors can be reported in a single program run, and the
           exit  code  of  the  program  may  indicate  success  even  when   errors   have   been   reported.    The
           [1m-fno-sanitize-recover=  [22moption  can  be  used  to  alter  this  behavior: only the first detected error is
           reported and program then exits with a non-zero exit code.

           Currently  this  feature  only  works  for   [1m-fsanitize=undefined   [22m(and   its   suboptions   except   for
           [1m-fsanitize=unreachable           [22mand          [1m-fsanitize=return[22m),          [1m-fsanitize=float-cast-overflow[22m,
           [1m-fsanitize=float-divide-by-zero[22m,       [1m-fsanitize=bounds-strict[22m,       [1m-fsanitize=kernel-address       [22mand
           [1m-fsanitize=address[22m.    For   these   sanitizers   error   recovery   is   turned  on  by  default,  except
           [1m-fsanitize=address[22m,   for   which   this   feature   is    experimental.     [1m-fsanitize-recover=all    [22mand
           [1m-fno-sanitize-recover=all  [22mis  also  accepted, the former enables recovery for all sanitizers that support
           it, the latter disables recovery for all sanitizers that support it.

           Even if a recovery mode is turned on the compiler side, it needs to be also enabled on the runtime library
           side, otherwise the failures are still fatal.  The  runtime  library  defaults  to  "halt_on_error=0"  for
           ThreadSanitizer   and   UndefinedBehaviorSanitizer,   while   default   value   for   AddressSanitizer  is
           "halt_on_error=1". This can be overridden through setting the "halt_on_error" flag  in  the  corresponding
           environment variable.

           Syntax without an explicit [4mopts[24m parameter is deprecated.  It is equivalent to specifying an [4mopts[24m list of:

                   undefined,float-cast-overflow,float-divide-by-zero,bounds-strict

       [1m-fsanitize-address-use-after-scope[0m
           Enable  sanitization  of local variables to detect use-after-scope bugs.  The option sets [1m-fstack-reuse [22mto
           [1mnone[22m.

       [1m-fsanitize-trap[22m[[1m=[4m[22mopts[24m]
           The [1m-fsanitize-trap= [22moption instructs the compiler to report for sanitizers mentioned  in  comma-separated
           list  of [4mopts[24m undefined behavior using "__builtin_trap" rather than a "libubsan" library routine.  If this
           option is enabled for certain sanitizer, it  takes  precedence  over  the  [1m-fsanitizer-recover=  [22mfor  that
           sanitizer,  "__builtin_trap"  will  be  emitted  and be fatal regardless of whether recovery is enabled or
           disabled using [1m-fsanitize-recover=[22m.

           The advantage of this is that the "libubsan" library is not needed and is not linked in, so this is usable
           even in freestanding environments.

           Currently this feature works with [1m-fsanitize=undefined [22m(and its suboptions  except  for  [1m-fsanitize=vptr[22m),
           [1m-fsanitize=float-cast-overflow[22m,      [1m-fsanitize=float-divide-by-zero     [22mand     [1m-fsanitize=bounds-strict[22m.
           "-fsanitize-trap=all"  can  be  also   specified,   which   enables   it   for   "undefined"   suboptions,
           [1m-fsanitize=float-cast-overflow[22m,    [1m-fsanitize=float-divide-by-zero   [22mand   [1m-fsanitize=bounds-strict[22m.    If
           "-fsanitize-trap=undefined" or "-fsanitize-trap=all" is used  and  "-fsanitize=vptr"  is  enabled  on  the
           command  line,  the  instrumentation  is  silently  ignored as the instrumentation always needs "libubsan"
           support, [1m-fsanitize-trap=vptr [22mis not allowed.

       [1m-fsanitize-undefined-trap-on-error[0m
           The [1m-fsanitize-undefined-trap-on-error [22moption is deprecated equivalent of [1m-fsanitize-trap=all[22m.

       [1m-fsanitize-coverage=trace-pc[0m
           Enable coverage-guided fuzzing code instrumentation.  Inserts a call  to  "__sanitizer_cov_trace_pc"  into
           every basic block.

       [1m-fsanitize-coverage=trace-cmp[0m
           Enable  dataflow  guided  fuzzing  code  instrumentation.  Inserts a call to "__sanitizer_cov_trace_cmp1",
           "__sanitizer_cov_trace_cmp2", "__sanitizer_cov_trace_cmp4" or  "__sanitizer_cov_trace_cmp8"  for  integral
           comparison      with      both      operands      variable      or     "__sanitizer_cov_trace_const_cmp1",
           "__sanitizer_cov_trace_const_cmp2",                 "__sanitizer_cov_trace_const_cmp4"                  or
           "__sanitizer_cov_trace_const_cmp8"    for    integral    comparison    with    one    operand    constant,
           "__sanitizer_cov_trace_cmpf"  or  "__sanitizer_cov_trace_cmpd"  for  float  or  double   comparisons   and
           "__sanitizer_cov_trace_switch" for switch statements.

       [1m-fcf-protection=[22m[[1mfull[22m|[1mbranch[22m|[1mreturn[22m|[1mnone[22m|[1mcheck[22m]
           Enable code instrumentation of control-flow transfers to increase program security by checking that target
           addresses of control-flow transfer instructions (such as indirect function call, function return, indirect
           jump)  are  valid.  This prevents diverting the flow of control to an unexpected target.  This is intended
           to protect against such threats as Return-oriented  Programming  (ROP),  and  similarly  call/jmp-oriented
           programming (COP/JOP).

           The  value  "branch"  tells the compiler to implement checking of validity of control-flow transfer at the
           point of indirect branch instructions, i.e. call/jmp instructions.  The value "return" implements checking
           of validity at the point of returning from a function.  The value "full" is an alias for  specifying  both
           "branch" and "return". The value "none" turns off instrumentation.

           The value "check" is used for the final link with link-time optimization (LTO).  An error is issued if LTO
           object  files  are  compiled  with  different [1m-fcf-protection [22mvalues.  The value "check" is ignored at the
           compile time.

           The macro "__CET__" is defined when [1m-fcf-protection [22mis used.  The first bit of "__CET__" is set to  1  for
           the value "branch" and the second bit of "__CET__" is set to 1 for the "return".

           You  can  also use the "nocf_check" attribute to identify which functions and calls should be skipped from
           instrumentation.

           Currently the x86 GNU/Linux target provides an implementation  based  on  Intel  Control-flow  Enforcement
           Technology (CET) which works for i686 processor or newer.

       [1m-fharden-compares[0m
           For every logical test that survives gimple optimizations and is [4mnot[24m the condition in a conditional branch
           (for  example, conditions tested for conditional moves, or to store in boolean variables), emit extra code
           to compute and verify the reversed condition, and to call "__builtin_trap" if the results  do  not  match.
           Use with [1m-fharden-conditional-branches [22mto cover all conditionals.

       [1m-fharden-conditional-branches[0m
           For every non-vectorized conditional branch that survives gimple optimizations, emit extra code to compute
           and  verify  the  reversed  condition, and to call "__builtin_trap" if the result is unexpected.  Use with
           [1m-fharden-compares [22mto cover all conditionals.

       [1m-fstack-protector[0m
           Emit extra code to check for buffer overflows, such as stack smashing attacks.  This is done by  adding  a
           guard  variable  to  functions  with  vulnerable objects.  This includes functions that call "alloca", and
           functions with buffers larger than or equal to 8 bytes.  The guards are initialized  when  a  function  is
           entered and then checked when the function exits.  If a guard check fails, an error message is printed and
           the program exits.  Only variables that are actually allocated on the stack are considered, optimized away
           variables or variables allocated in registers don't count.

       [1m-fstack-protector-all[0m
           Like [1m-fstack-protector [22mexcept that all functions are protected.

       [1m-fstack-protector-strong[0m
           Like  [1m-fstack-protector  [22mbut includes additional functions to be protected --- those that have local array
           definitions, or have references to local frame addresses.  Only variables that are actually  allocated  on
           the stack are considered, optimized away variables or variables allocated in registers don't count.

       [1m-fstack-protector-explicit[0m
           Like [1m-fstack-protector [22mbut only protects those functions which have the "stack_protect" attribute.

       [1m-fstack-check[0m
           Generate code to verify that you do not go beyond the boundary of the stack.  You should specify this flag
           if  you  are  running in an environment with multiple threads, but you only rarely need to specify it in a
           single-threaded environment since stack overflow is automatically detected on nearly all systems if  there
           is only one stack.

           Note  that  this  switch does not actually cause checking to be done; the operating system or the language
           runtime must do that.  The switch causes generation of code to  ensure  that  they  see  the  stack  being
           extended.

           You can additionally specify a string parameter: [1mno [22mmeans no checking, [1mgeneric [22mmeans force the use of old-
           style checking, [1mspecific [22mmeans use the best checking method and is equivalent to bare [1m-fstack-check[22m.

           Old-style  checking  is  a  generic mechanism that requires no specific target support in the compiler but
           comes with the following drawbacks:

           1.  Modified allocation strategy for large objects: they are always allocated dynamically  if  their  size
               exceeds a fixed threshold.  Note this may change the semantics of some code.

           2.  Fixed  limit on the size of the static frame of functions: when it is topped by a particular function,
               stack checking is not reliable and a warning is issued by the compiler.

           3.  Inefficiency: because of both the modified allocation strategy and the  generic  implementation,  code
               performance is hampered.

           Note  that old-style stack checking is also the fallback method for [1mspecific [22mif no target support has been
           added in the compiler.

           [1m-fstack-check= [22mis designed for Ada's needs to detect infinite recursion and stack overflows.  [1mspecific  [22mis
           an  excellent  choice  when  compiling Ada code.  It is not generally sufficient to protect against stack-
           clash attacks.  To protect against those you want [1m-fstack-clash-protection[22m.

       [1m-fstack-clash-protection[0m
           Generate code to prevent stack clash style attacks.  When this option is enabled, the compiler  will  only
           allocate  one page of stack space at a time and each page is accessed immediately after allocation.  Thus,
           it prevents allocations from jumping over any stack guard page provided by the operating system.

           Most  targets  do   not   fully   support   stack   clash   protection.    However,   on   those   targets
           [1m-fstack-clash-protection  [22mwill  protect  dynamic  stack  allocations.   [1m-fstack-clash-protection  [22mmay also
           provide limited protection for static stack allocations if the target supports [1m-fstack-check=specific[22m.

       [1m-fstack-limit-register=[4m[22mreg[0m
       [1m-fstack-limit-symbol=[4m[22msym[0m
       [1m-fno-stack-limit[0m
           Generate code to ensure that the stack does not grow beyond  a  certain  value,  either  the  value  of  a
           register  or the address of a symbol.  If a larger stack is required, a signal is raised at run time.  For
           most targets, the signal is raised before the stack overruns the boundary, so it is possible to catch  the
           signal without taking special precautions.

           For  instance,  if  the  stack  starts at absolute address [1m0x80000000 [22mand grows downwards, you can use the
           flags [1m-fstack-limit-symbol=__stack_limit [22mand  [1m-Wl,--defsym,__stack_limit=0x7ffe0000  [22mto  enforce  a  stack
           limit of 128KB.  Note that this may only work with the GNU linker.

           You can locally override stack limit checking by using the "no_stack_limit" function attribute.

       [1m-fsplit-stack[0m
           Generate  code  to  automatically  split  the  stack  before  it  overflows.   The resulting program has a
           discontiguous stack which can only overflow if the program is unable to allocate any more memory.  This is
           most useful when running threaded programs, as it is no longer necessary to calculate a good stack size to
           use for each thread.  This is currently only implemented for the x86 targets running GNU/Linux.

           When code compiled with [1m-fsplit-stack [22mcalls code compiled without [1m-fsplit-stack[22m, there  may  not  be  much
           stack  space  available  for  the latter code to run.  If compiling all code, including library code, with
           [1m-fsplit-stack [22mis not an option, then the linker can fix up these calls so that the code  compiled  without
           [1m-fsplit-stack  [22malways  has  a  large  stack.   Support  for  this is implemented in the gold linker in GNU
           binutils release 2.21 and later.

       [1m-fvtable-verify=[22m[[1mstd[22m|[1mpreinit[22m|[1mnone[22m]
           This  option  is  only  available  when  compiling  C++  code.   It   turns   on   (or   off,   if   using
           [1m-fvtable-verify=none[22m)  the  security  feature  that verifies at run time, for every virtual call, that the
           vtable pointer through which the call is made is valid for the type  of  the  object,  and  has  not  been
           corrupted  or overwritten.  If an invalid vtable pointer is detected at run time, an error is reported and
           execution of the program is immediately halted.

           This option causes run-time data structures to be built at program startup, which are used  for  verifying
           the  vtable  pointers.   The  options [1mstd [22mand [1mpreinit [22mcontrol the timing of when these data structures are
           built.   In  both  cases  the  data  structures  are  built  before  execution  reaches   "main".    Using
           [1m-fvtable-verify=std  [22mcauses  the  data  structures to be built after shared libraries have been loaded and
           initialized.  [1m-fvtable-verify=preinit [22mcauses them to be built before shared libraries have been loaded and
           initialized.

           If this option appears multiple times in the command line with  different  values  specified,  [1mnone  [22mtakes
           highest priority over both [1mstd [22mand [1mpreinit[22m; [1mpreinit [22mtakes priority over [1mstd[22m.

       [1m-fvtv-debug[0m
           When used in conjunction with [1m-fvtable-verify=std [22mor [1m-fvtable-verify=preinit[22m, causes debug versions of the
           runtime functions for the vtable verification feature to be called.  This flag also causes the compiler to
           log  information  about  which  vtable pointers it finds for each class.  This information is written to a
           file named [4mvtv_set_ptr_data.log[24m in the directory named by the environment variable [1mVTV_LOGS_DIR [22mif that is
           defined or the current working directory otherwise.

           Note:  This feature [4mappends[24m data to the log file. If you want a fresh log file,  be  sure  to  delete  any
           existing one.

       [1m-fvtv-counts[0m
           This  is  a debugging flag.  When used in conjunction with [1m-fvtable-verify=std [22mor [1m-fvtable-verify=preinit[22m,
           this causes the compiler to keep track of the total number of virtual calls it encounters and  the  number
           of  verifications  it  inserts.   It also counts the number of calls to certain run-time library functions
           that it inserts and logs this information for each compilation unit.  The compiler writes this information
           to a file named [4mvtv_count_data.log[24m in the directory named by the environment variable [1mVTV_LOGS_DIR [22mif that
           is defined or the current working directory otherwise.  It also counts the size of the vtable pointer sets
           for each class, and writes this information to [4mvtv_class_set_sizes.log[24m in the same directory.

           Note:  This feature [4mappends[24m data to the log files.  To get fresh log files, be sure to delete any existing
           ones.

       [1m-finstrument-functions[0m
           Generate instrumentation calls for entry and exit to functions.  Just after function entry and just before
           function exit, the following profiling functions are called with the address of the current  function  and
           its  call site.  (On some platforms, "__builtin_return_address" does not work beyond the current function,
           so the call site information may not be available to the profiling functions otherwise.)

                   void __cyg_profile_func_enter (void *this_fn,
                                                  void *call_site);
                   void __cyg_profile_func_exit  (void *this_fn,
                                                  void *call_site);

           The first argument is the address of the start of the current function, which may be looked up exactly  in
           the symbol table.

           This  instrumentation  is also done for functions expanded inline in other functions.  The profiling calls
           indicate where, conceptually, the inline function is entered and  exited.   This  means  that  addressable
           versions  of  such  functions must be available.  If all your uses of a function are expanded inline, this
           may mean an additional expansion of code size.  If you use "extern inline" in your C code, an  addressable
           version  of  such functions must be provided.  (This is normally the case anyway, but if you get lucky and
           the optimizer always expands the functions inline, you might have gotten  away  without  providing  static
           copies.)

           A  function may be given the attribute "no_instrument_function", in which case this instrumentation is not
           done.  This can be used, for example, for the profiling functions listed  above,  high-priority  interrupt
           routines,  and  any  functions  from which the profiling functions cannot safely be called (perhaps signal
           handlers, if the profiling routines generate output or allocate memory).

       [1m-finstrument-functions-once[0m
           This is similar  to  [1m-finstrument-functions[22m,  but  the  profiling  functions  are  called  only  once  per
           instrumented  function,  i.e.  the  first  profiling  function  is  called  after the first entry into the
           instrumented function and the second profiling function is called before the exit  corresponding  to  this
           first entry.

           The  definition  of  "once" for the purpose of this option is a little vague because the implementation is
           not protected against data races.  As a result, the implementation  only  guarantees  that  the  profiling
           functions  are  called  at  [4mleast[24m  once  per process and at [4mmost[24m once per thread, but the calls are always
           paired, that is to say, if a thread calls the first function, then  it  will  call  the  second  function,
           unless it never reaches the exit of the instrumented function.

       [1m-finstrument-functions-exclude-file-list=[4m[22mfile[24m[1m,[4m[22mfile[24m[1m,...[0m
           Set   the   list   of   functions   that  are  excluded  from  instrumentation  (see  the  description  of
           [1m-finstrument-functions[22m).  If the file that contains a function definition matches with one of  [4mfile[24m,  then
           that  function is not instrumented.  The match is done on substrings: if the [4mfile[24m parameter is a substring
           of the file name, it is considered to be a match.

           For example:

                   -finstrument-functions-exclude-file-list=/bits/stl,include/sys

           excludes any inline function defined in files whose pathnames contain [4m/bits/stl[24m or [4minclude/sys[24m.

           If,  for  some  reason,  you  want  to  include  letter  [1m,  [22min  one  of  [4msym[24m,  write   [1m,[22m.   For   example,
           [1m-finstrument-functions-exclude-file-list=',,tmp' [22m(note the single quote surrounding the option).

       [1m-finstrument-functions-exclude-function-list=[4m[22msym[24m[1m,[4m[22msym[24m[1m,...[0m
           This  is  similar  to  [1m-finstrument-functions-exclude-file-list[22m, but this option sets the list of function
           names to be excluded from instrumentation.  The function name to be matched is its user-visible name, such
           as   "vector<int>   blah(const   vector<int>   &)",    not    the    internal    mangled    name    (e.g.,
           "_Z4blahRSt6vectorIiSaIiEE").  The match is done on substrings: if the [4msym[24m parameter is a substring of the
           function  name,  it  is considered to be a match.  For C99 and C++ extended identifiers, the function name
           must be given in UTF-8, not using universal character names.

       [1m-fpatchable-function-entry=[4m[22mN[24m[1m[,[4m[22mM[24m[1m][0m
           Generate [4mN[24m NOPs right at the beginning of each function, with the function entry point before the [4mM[24mth NOP.
           If [4mM[24m is omitted, it defaults to 0 so the function entry points to the address just at the first NOP.   The
           NOP  instructions  reserve  extra  space  which can be used to patch in any desired instrumentation at run
           time, provided that the code segment is writable.  The amount of space is controllable indirectly via  the
           number  of NOPs; the NOP instruction used corresponds to the instruction emitted by the internal GCC back-
           end interface "gen_nop".  This behavior is target-specific and may also depend on the architecture variant
           and/or other compilation options.

           For run-time identification, the starting addresses of these areas, which correspond to  their  respective
           function  entries minus [4mM[24m, are additionally collected in the "__patchable_function_entries" section of the
           resulting binary.

           Note that the value of "__attribute__ ((patchable_function_entry (N,M)))" takes precedence  over  command-
           line  option  [1m-fpatchable-function-entry=N,M[22m.   This can be used to increase the area size or to remove it
           completely on a single function.  If "N=0", no pad location is recorded.

           The NOP instructions are inserted at---and maybe before, depending on [4mM[24m---the function entry address, even
           before the prologue.  On PowerPC with the ELFv2 ABI, for a function with  dual  entry  points,  the  local
           entry point is this function entry address.

           The  maximum  value  of  [4mN[24m  and [4mM[24m is 65535.  On PowerPC with the ELFv2 ABI, for a function with dual entry
           points, the supported values for [4mM[24m are 0, 2, 6 and 14.

   [1mOptions Controlling the Preprocessor[0m
       These options control the C preprocessor, which is run on each C source file before actual compilation.

       If you use the [1m-E [22moption, nothing is done except  preprocessing.   Some  of  these  options  make  sense  only
       together with [1m-E [22mbecause they cause the preprocessor output to be unsuitable for actual compilation.

       In  addition  to  the  options  listed here, there are a number of options to control search paths for include
       files documented in [1mDirectory Options[22m.  Options to control preprocessor  diagnostics  are  listed  in  [1mWarning[0m
       [1mOptions[22m.

       [1m-D [4m[22mname[0m
           Predefine [4mname[24m as a macro, with definition 1.

       [1m-D [4m[22mname[24m[1m=[4m[22mdefinition[0m
           The  contents of [4mdefinition[24m are tokenized and processed as if they appeared during translation phase three
           in a [1m#define [22mdirective.  In particular, the definition is truncated by embedded newline characters.

           If you are invoking the preprocessor from a shell or shell-like program you may need to  use  the  shell's
           quoting syntax to protect characters such as spaces that have a meaning in the shell syntax.

           If  you wish to define a function-like macro on the command line, write its argument list with surrounding
           parentheses before the equals sign (if any).  Parentheses are meaningful to most  shells,  so  you  should
           quote the option.  With [1msh [22mand [1mcsh[22m, [1m-D'[4m[22mname[24m[1m([4m[22margs...[24m[1m)=[4m[22mdefinition[24m[1m' [22mworks.

           [1m-D  [22mand  [1m-U  [22moptions are processed in the order they are given on the command line.  All [1m-imacros [4m[22mfile[24m and
           [1m-include [4m[22mfile[24m options are processed after all [1m-D [22mand [1m-U [22moptions.

       [1m-U [4m[22mname[0m
           Cancel any previous definition of [4mname[24m, either built in or provided with a [1m-D [22moption.

       [1m-include [4m[22mfile[0m
           Process [4mfile[24m as if "#include "file"" appeared as the first line of the primary source file.  However,  the
           first  directory  searched  for  [4mfile[24m  is  the  preprocessor's  working directory [4minstead[24m [4mof[24m the directory
           containing the main source file.  If not found there, it is searched for in the remainder of the "#include
           "..."" search chain as normal.

           If multiple [1m-include [22moptions are given, the files are included in the order they  appear  on  the  command
           line.

       [1m-imacros [4m[22mfile[0m
           Exactly like [1m-include[22m, except that any output produced by scanning [4mfile[24m is thrown away.  Macros it defines
           remain  defined.   This  allows  you  to  acquire all the macros from a header without also processing its
           declarations.

           All files specified by [1m-imacros [22mare processed before all files specified by [1m-include[22m.

       [1m-undef[0m
           Do not predefine any system-specific or  GCC-specific  macros.   The  standard  predefined  macros  remain
           defined.

       [1m-pthread[0m
           Define  additional  macros  required  for  using  the  POSIX  threads library.  You should use this option
           consistently for both compilation and linking.  This option is supported on GNU/Linux targets, most  other
           Unix derivatives, and also on x86 Cygwin and MinGW targets.

       [1m-M  [22mInstead  of  outputting  the  result  of  preprocessing,  output  a  rule suitable for [1mmake [22mdescribing the
           dependencies of the main source file.  The preprocessor outputs one [1mmake [22mrule containing the  object  file
           name  for  that source file, a colon, and the names of all the included files, including those coming from
           [1m-include [22mor [1m-imacros [22mcommand-line options.

           Unless specified explicitly (with [1m-MT [22mor [1m-MQ[22m), the object file name consists of the  name  of  the  source
           file  with  any  suffix replaced with object file suffix and with any leading directory parts removed.  If
           there are many included files then the rule is split into several lines using [1m\[22m-newline.  The rule has  no
           commands.

           This  option  does  not suppress the preprocessor's debug output, such as [1m-dM[22m.  To avoid mixing such debug
           output with the dependency rules you should explicitly specify the dependency output file with [1m-MF[22m, or use
           an environment variable like [1mDEPENDENCIES_OUTPUT[22m.  Debug output is still sent to the regular output stream
           as normal.

           Passing [1m-M [22mto the driver implies [1m-E[22m, and suppresses warnings with an implicit [1m-w[22m.

       [1m-MM [22mLike [1m-M [22mbut do not mention header files that are found in system header directories, nor header files that
           are included, directly or indirectly, from such a header.

           This implies that the choice of angle brackets or double quotes in  an  [1m#include  [22mdirective  does  not  in
           itself determine whether that header appears in [1m-MM [22mdependency output.

       [1m-MF [4m[22mfile[0m
           When  used  with  [1m-M [22mor [1m-MM[22m, specifies a file to write the dependencies to.  If no [1m-MF [22mswitch is given the
           preprocessor sends the rules to the same place it would send preprocessed output.

           When used with the driver options [1m-MD [22mor [1m-MMD[22m, [1m-MF [22moverrides the default dependency output file.

           If [4mfile[24m is [4m-[24m, then the dependencies are written to [4mstdout[24m.

       [1m-MG [22mIn conjunction with an option such as [1m-M [22mrequesting dependency  generation,  [1m-MG  [22massumes  missing  header
           files  are  generated files and adds them to the dependency list without raising an error.  The dependency
           filename is taken directly from the "#include" directive without prepending any path.  [1m-MG [22malso suppresses
           preprocessed output, as a missing header file renders this useless.

           This feature is used in automatic updating of makefiles.

       [1m-Mno-modules[0m
           Disable dependency generation for compiled module interfaces.

       [1m-MP [22mThis option instructs CPP to add a phony target for each dependency other than the main file, causing each
           to depend on nothing.  These dummy rules work around errors [1mmake [22mgives if you remove header files  without
           updating the [4mMakefile[24m to match.

           This is typical output:

                   test.o: test.c test.h

                   test.h:

       [1m-MT [4m[22mtarget[0m
           Change the target of the rule emitted by dependency generation.  By default CPP takes the name of the main
           input  file,  deletes  any directory components and any file suffix such as [1m.c[22m, and appends the platform's
           usual object suffix.  The result is the target.

           An [1m-MT [22moption sets the target to be exactly the string you specify.  If you want multiple targets, you can
           specify them as a single argument to [1m-MT[22m, or use multiple [1m-MT [22moptions.

           For example, [1m-MT '$(objpfx)foo.o' [22mmight give

                   $(objpfx)foo.o: foo.c

       [1m-MQ [4m[22mtarget[0m
           Same as [1m-MT[22m, but it quotes any characters which are special to Make.  [1m-MQ '$(objpfx)foo.o' [22mgives

                   $$(objpfx)foo.o: foo.c

           The default target is automatically quoted, as if it were given with [1m-MQ[22m.

       [1m-MD -MD [22mis equivalent to [1m-M -MF [4m[22mfile[24m, except that [1m-E [22mis not implied.  The  driver  determines  [4mfile[24m  based  on
           whether  an [1m-o [22moption is given.  If it is, the driver uses its argument but with a suffix of [4m.d[24m, otherwise
           it takes the name of the input file, removes any directory components and suffix, and applies a [4m.d[24m suffix.

           If [1m-MD [22mis used in conjunction with [1m-E[22m, any [1m-o [22mswitch is understood to specify the dependency output  file,
           but if used without [1m-E[22m, each [1m-o [22mis understood to specify a target object file.

           Since  [1m-E  [22mis  not  implied,  [1m-MD [22mcan be used to generate a dependency output file as a side effect of the
           compilation process.

       [1m-MMD[0m
           Like [1m-MD [22mexcept mention only user header files, not system header files.

       [1m-fpreprocessed[0m
           Indicate to the preprocessor that the input file has already been preprocessed.   This  suppresses  things
           like  macro  expansion,  trigraph conversion, escaped newline splicing, and processing of most directives.
           The preprocessor still recognizes and removes comments, so that you can pass a file preprocessed  with  [1m-C[0m
           to  the  compiler  without  problems.   In  this  mode  the  integrated preprocessor is little more than a
           tokenizer for the front ends.

           [1m-fpreprocessed [22mis implicit if the input file has one of the extensions [1m.i[22m, [1m.ii  [22mor  [1m.mi[22m.   These  are  the
           extensions that GCC uses for preprocessed files created by [1m-save-temps[22m.

       [1m-fdirectives-only[0m
           When preprocessing, handle directives, but do not expand macros.

           The option's behavior depends on the [1m-E [22mand [1m-fpreprocessed [22moptions.

           With [1m-E[22m, preprocessing is limited to the handling of directives such as "#define", "#ifdef", and "#error".
           Other  preprocessor  operations,  such  as  macro expansion and trigraph conversion are not performed.  In
           addition, the [1m-dD [22moption is implicitly enabled.

           With [1m-fpreprocessed[22m, predefinition of command line and most builtin macros is disabled.   Macros  such  as
           "__LINE__",  which  are  contextually  dependent, are handled normally.  This enables compilation of files
           previously preprocessed with "-E -fdirectives-only".

           With both [1m-E [22mand [1m-fpreprocessed[22m,  the  rules  for  [1m-fpreprocessed  [22mtake  precedence.   This  enables  full
           preprocessing of files previously preprocessed with "-E -fdirectives-only".

       [1m-fdollars-in-identifiers[0m
           Accept [1m$ [22min identifiers.

       [1m-fextended-identifiers[0m
           Accept  universal  character  names  and  extended  characters  in identifiers.  This option is enabled by
           default for C99 (and later C standard versions) and C++.

       [1m-fno-canonical-system-headers[0m
           When preprocessing, do not shorten system header paths with canonicalization.

       [1m-fmax-include-depth=[4m[22mdepth[0m
           Set the maximum depth of the nested #include. The default is 200.

       [1m-ftabstop=[4m[22mwidth[0m
           Set the distance between tab stops.  This helps the preprocessor report correct column numbers in warnings
           or errors, even if tabs appear on the line.  If the value is less than 1 or greater than 100,  the  option
           is ignored.  The default is 8.

       [1m-ftrack-macro-expansion[22m[[1m=[4m[22mlevel[24m]
           Track  locations  of tokens across macro expansions. This allows the compiler to emit diagnostic about the
           current macro expansion stack when a compilation error occurs in a  macro  expansion.  Using  this  option
           makes the preprocessor and the compiler consume more memory. The [4mlevel[24m parameter can be used to choose the
           level of precision of token location tracking thus decreasing the memory consumption if necessary. Value [1m0[0m
           of  [4mlevel[24m  de-activates  this  option.  Value [1m1 [22mtracks tokens locations in a degraded mode for the sake of
           minimal memory overhead. In this mode all tokens  resulting  from  the  expansion  of  an  argument  of  a
           function-like  macro have the same location. Value [1m2 [22mtracks tokens locations completely. This value is the
           most memory hungry.  When this option is given no argument, the default parameter value is [1m2[22m.

           Note that "-ftrack-macro-expansion=2" is activated by default.

       [1m-fmacro-prefix-map=[4m[22mold[24m[1m=[4m[22mnew[0m
           When preprocessing files residing in directory [4mold[24m, expand the "__FILE__" and "__BASE_FILE__" macros as if
           the files resided in directory [4mnew[24m instead.  This can be used to change an absolute  path  to  a  relative
           path  by using [4m.[24m for [4mnew[24m which can result in more reproducible builds that are location independent.  This
           option  also  affects   "__builtin_FILE()"   during   compilation.    See   also   [1m-ffile-prefix-map   [22mand
           [1m-fcanon-prefix-map[22m.

       [1m-fexec-charset=[4m[22mcharset[0m
           Set  the execution character set, used for string and character constants.  The default is UTF-8.  [4mcharset[0m
           can be any encoding supported by the system's "iconv" library routine.

       [1m-fwide-exec-charset=[4m[22mcharset[0m
           Set the wide execution character set, used for wide string and character constants.  The default is one of
           UTF-32BE, UTF-32LE, UTF-16BE, or UTF-16LE, whichever corresponds to the width of "wchar_t"  and  the  big-
           endian or little-endian byte order being used for code generation.  As with [1m-fexec-charset[22m, [4mcharset[24m can be
           any  encoding  supported  by  the  system's  "iconv" library routine; however, you will have problems with
           encodings that do not fit exactly in "wchar_t".

       [1m-finput-charset=[4m[22mcharset[0m
           Set the input character set, used for translation from the character set of the input file to  the  source
           character  set  used  by GCC.  If the locale does not specify, or GCC cannot get this information from the
           locale, the default is UTF-8.  This can be overridden by either the locale or  this  command-line  option.
           Currently  the  command-line  option  takes precedence if there's a conflict.  [4mcharset[24m can be any encoding
           supported by the system's "iconv" library routine.

       [1m-fpch-deps[0m
           When using precompiled headers, this flag causes the dependency-output flags to also list the  files  from
           the  precompiled  header's dependencies.  If not specified, only the precompiled header are listed and not
           the files that were used to create it, because those files are not consulted when a precompiled header  is
           used.

       [1m-fpch-preprocess[0m
           This option allows use of a precompiled header together with [1m-E[22m.  It inserts a special "#pragma", "#pragma
           GCC pch_preprocess "[4mfilename[24m"" in the output to mark the place where the precompiled header was found, and
           its [4mfilename[24m.  When [1m-fpreprocessed [22mis in use, GCC recognizes this "#pragma" and loads the PCH.

           This  option is off by default, because the resulting preprocessed output is only really suitable as input
           to GCC.  It is switched on by [1m-save-temps[22m.

           You should not write this "#pragma" in your own code, but it is safe to edit the filename if the PCH  file
           is available in a different location.  The filename may be absolute or it may be relative to GCC's current
           directory.

       [1m-fworking-directory[0m
           Enable generation of linemarkers in the preprocessor output that let the compiler know the current working
           directory  at  the  time of preprocessing.  When this option is enabled, the preprocessor emits, after the
           initial linemarker, a second linemarker with the current working directory followed by two  slashes.   GCC
           uses  this directory, when it's present in the preprocessed input, as the directory emitted as the current
           working directory in some debugging information formats.  This option is implicitly enabled  if  debugging
           information is enabled, but this can be inhibited with the negated form [1m-fno-working-directory[22m.  If the [1m-P[0m
           flag  is  present  in the command line, this option has no effect, since no "#line" directives are emitted
           whatsoever.

       [1m-A [4m[22mpredicate[24m[1m=[4m[22manswer[0m
           Make an assertion with the predicate [4mpredicate[24m and answer [4manswer[24m.  This form is  preferred  to  the  older
           form [1m-A [4m[22mpredicate[24m[1m([4m[22manswer[24m[1m)[22m, which is still supported, because it does not use shell special characters.

       [1m-A -[4m[22mpredicate[24m[1m=[4m[22manswer[0m
           Cancel an assertion with the predicate [4mpredicate[24m and answer [4manswer[24m.

       [1m-C  [22mDo  not  discard  comments.   All  comments  are passed through to the output file, except for comments in
           processed directives, which are deleted along with the directive.

           You should be prepared for side effects when using [1m-C[22m; it causes the preprocessor  to  treat  comments  as
           tokens in their own right.  For example, comments appearing at the start of what would be a directive line
           have the effect of turning that line into an ordinary source line, since the first token on the line is no
           longer a [1m#[22m.

       [1m-CC [22mDo  not  discard  comments,  including  during  macro  expansion.   This  is like [1m-C[22m, except that comments
           contained within macros are also passed through to the output file where the macro is expanded.

           In addition to the side effects of the [1m-C [22moption, the [1m-CC [22moption causes all C++-style  comments  inside  a
           macro  to be converted to C-style comments.  This is to prevent later use of that macro from inadvertently
           commenting out the remainder of the source line.

           The [1m-CC [22moption is generally used to support lint comments.

       [1m-P  [22mInhibit generation of linemarkers in the output from the preprocessor.  This might be useful when  running
           the preprocessor on something that is not C code, and will be sent to a program which might be confused by
           the linemarkers.

       [1m-traditional[0m
       [1m-traditional-cpp[0m
           Try  to  imitate the behavior of pre-standard C preprocessors, as opposed to ISO C preprocessors.  See the
           GNU CPP manual for details.

           Note that GCC does not otherwise attempt to emulate a pre-standard C compiler, and these options are  only
           supported with the [1m-E [22mswitch, or when invoking CPP explicitly.

       [1m-trigraphs[0m
           Support  ISO  C trigraphs.  These are three-character sequences, all starting with [1m??[22m, that are defined by
           ISO C to stand for single characters.  For example, [1m??/ [22mstands for [1m\[22m, so [1m'??/n' [22mis  a  character  constant
           for a newline.

           The nine trigraphs and their replacements are

                   Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
                   Replacement:      [    ]    {    }    #    \    ^    |    ~

           By  default,  GCC  ignores trigraphs, but in standard-conforming modes it converts them.  See the [1m-std [22mand
           [1m-ansi [22moptions.

       [1m-remap[0m
           Enable special code to work around file systems which only permit very short file names, such as MS-DOS.

       [1m-H  [22mPrint the name of each header file used, in addition to other normal activities.  Each name is indented to
           show how deep in the [1m#include [22mstack it is.  Precompiled header files are also printed, even  if  they  are
           found to be invalid; an invalid precompiled header file is printed with [1m...x [22mand a valid one with [1m...! [22m.

       [1m-d[4m[22mletters[0m
           Says  to  make  debugging dumps during compilation as specified by [4mletters[24m.  The flags documented here are
           those relevant to the preprocessor.  Other [4mletters[24m are interpreted by the compiler proper, or reserved for
           future versions of GCC, and so are silently ignored.  If you specify [4mletters[24m whose behavior conflicts, the
           result is undefined.

           [1m-dM [22mInstead of the normal output, generate a list of [1m#define [22mdirectives for all the macros defined  during
               the  execution  of the preprocessor, including predefined macros.  This gives you a way of finding out
               what is predefined in your version of the preprocessor.  Assuming you have no file [4mfoo.h[24m, the command

                       touch foo.h; cpp -dM foo.h

               shows all the predefined macros.

               If you use [1m-dM [22mwithout the [1m-E [22moption, [1m-dM [22mis interpreted as a synonym for [1m-fdump-rtl-mach[22m.

           [1m-dD [22mLike [1m-dM [22mexcept in two respects: it does [4mnot[24m include the predefined macros, and it  outputs  [4mboth[24m  the
               [1m#define  [22mdirectives  and  the result of preprocessing.  Both kinds of output go to the standard output
               file.

           [1m-dN [22mLike [1m-dD[22m, but emit only the macro names, not their expansions.

           [1m-dI [22mOutput [1m#include [22mdirectives in addition to the result of preprocessing.

           [1m-dU [22mLike [1m-dD [22mexcept that only macros that are expanded, or whose definedness  is  tested  in  preprocessor
               directives,  are  output;  the  output  is  delayed  until  the  use  or test of the macro; and [1m#undef[0m
               directives are also output for macros tested but undefined at the time.

       [1m-fdebug-cpp[0m
           This option is only useful for debugging GCC.   When  used  from  CPP  or  with  [1m-E[22m,  it  dumps  debugging
           information  about  location  maps.   Every  token  in  the  output is preceded by the dump of the map its
           location belongs to.

           When used from GCC without [1m-E[22m, this option has no effect.

       [1m-Wp,[4m[22moption[0m
           You can use [1m-Wp,[4m[22moption[24m to bypass the compiler driver and pass [4moption[24m directly through to the preprocessor.
           If [4moption[24m contains commas, it is split into multiple options at the commas.   However,  many  options  are
           modified,  translated  or  interpreted by the compiler driver before being passed to the preprocessor, and
           [1m-Wp [22mforcibly bypasses this phase.  The preprocessor's direct interface  is  undocumented  and  subject  to
           change, so whenever possible you should avoid using [1m-Wp [22mand let the driver handle the options instead.

       [1m-Xpreprocessor [4m[22moption[0m
           Pass  [4moption[24m  as  an  option to the preprocessor.  You can use this to supply system-specific preprocessor
           options that GCC does not recognize.

           If you want to pass an option that takes an argument, you must use  [1m-Xpreprocessor  [22mtwice,  once  for  the
           option and once for the argument.

       [1m-no-integrated-cpp[0m
           Perform preprocessing as a separate pass before compilation.  By default, GCC performs preprocessing as an
           integrated  part  of input tokenization and parsing.  If this option is provided, the appropriate language
           front end ([1mcc1[22m, [1mcc1plus[22m, or [1mcc1obj [22mfor C, C++, and Objective-C, respectively) is  instead  invoked  twice,
           once for preprocessing only and once for actual compilation of the preprocessed input.  This option may be
           useful  in  conjunction  with  the  [1m-B [22mor [1m-wrapper [22moptions to specify an alternate preprocessor or perform
           additional processing of the program source between normal preprocessing and compilation.

       [1m-flarge-source-files[0m
           Adjust GCC to expect large source files, at the expense of slower compilation and higher memory usage.

           Specifically, GCC normally tracks both column numbers and line numbers within source files and it normally
           prints both of these numbers in diagnostics.  However, once it has processed a certain  number  of  source
           lines,  it  stops  tracking  column numbers and only tracks line numbers.  This means that diagnostics for
           later lines do not include column numbers.  It also means that options like [1m-Wmisleading-indentation [22mcease
           to work at that point, although the compiler prints a note if this happens.  Passing  [1m-flarge-source-files[0m
           significantly increases the number of source lines that GCC can process before it stops tracking columns.

   [1mPassing Options to the Assembler[0m
       You can pass options to the assembler.

       [1m-Wa,[4m[22moption[0m
           Pass  [4moption[24m  as an option to the assembler.  If [4moption[24m contains commas, it is split into multiple options
           at the commas.

       [1m-Xassembler [4m[22moption[0m
           Pass [4moption[24m as an option to the assembler.  You can use this to supply system-specific  assembler  options
           that GCC does not recognize.

           If  you want to pass an option that takes an argument, you must use [1m-Xassembler [22mtwice, once for the option
           and once for the argument.

   [1mOptions for Linking[0m
       These options come into play when the compiler links object files into an executable output  file.   They  are
       meaningless if the compiler is not doing a link step.

       [4mobject-file-name[0m
           A  file  name  that  does  not  end in a special recognized suffix is considered to name an object file or
           library.  (Object files are distinguished from libraries by the linker according to  the  file  contents.)
           If linking is done, these object files are used as input to the linker.

       [1m-c[0m
       [1m-S[0m
       [1m-E  [22mIf  any  of these options is used, then the linker is not run, and object file names should not be used as
           arguments.

       [1m-flinker-output=[4m[22mtype[0m
           This option controls code generation of  the  link-time  optimizer.   By  default  the  linker  output  is
           automatically determined by the linker plugin.  For debugging the compiler and if incremental linking with
           a non-LTO object file is desired, it may be useful to control the type manually.

           If [4mtype[24m is [1mexec[22m, code generation produces a static binary. In this case [1m-fpic [22mand [1m-fpie [22mare both disabled.

           If  [4mtype[24m is [1mdyn[22m, code generation produces a shared library.  In this case [1m-fpic [22mor [1m-fPIC [22mis preserved, but
           not enabled automatically.  This allows to build shared libraries  without  position-independent  code  on
           architectures where this is possible, i.e. on x86.

           If  [4mtype[24m  is  [1mpie[22m,  code generation produces an [1m-fpie [22mexecutable. This results in similar optimizations as
           [1mexec [22mexcept that [1m-fpie [22mis not disabled if specified at compilation time.

           If [4mtype[24m is [1mrel[22m,  the  compiler  assumes  that  incremental  linking  is  done.   The  sections  containing
           intermediate code for link-time optimization are merged, pre-optimized, and output to the resulting object
           file.  In addition, if [1m-ffat-lto-objects [22mis specified, binary code is produced for future non-LTO linking.
           The object file produced by incremental linking is smaller than a static library produced  from  the  same
           object  files.   At  link  time  the result of incremental linking also loads faster than a static library
           assuming that the majority of objects in the library are used.

           Finally [1mnolto-rel [22mconfigures the compiler for incremental linking where code generation is forced, a final
           binary is produced, and the intermediate code for later link-time optimization is stripped. When  multiple
           object  files are linked together the resulting code is better optimized than with link-time optimizations
           disabled (for example, cross-module inlining happens), but most of benefits of whole program optimizations
           are lost.

           During the incremental link (by [1m-r[22m) the linker plugin defaults to [1mrel[22m.  With  current  interfaces  to  GNU
           Binutils  it  is  however not possible to incrementally link LTO objects and non-LTO objects into a single
           mixed object file.  If any of object files in incremental link cannot be used for link-time  optimization,
           the  linker  plugin  issues  a  warning  and uses [1mnolto-rel[22m. To maintain whole program optimization, it is
           recommended to link such objects into static library instead. Alternatively it is  possible  to  use  H.J.
           Lu's binutils with support for mixed objects.

       [1m-fuse-ld=bfd[0m
           Use the [1mbfd [22mlinker instead of the default linker.

       [1m-fuse-ld=gold[0m
           Use the [1mgold [22mlinker instead of the default linker.

       [1m-fuse-ld=lld[0m
           Use the LLVM [1mlld [22mlinker instead of the default linker.

       [1m-fuse-ld=mold[0m
           Use the Modern Linker ([1mmold[22m) instead of the default linker.

       [1m-l[4m[22mlibrary[0m
       [1m-l [4m[22mlibrary[0m
           Search  the  library  named  [4mlibrary[24m when linking.  (The second alternative with the library as a separate
           argument is only for POSIX compliance and is not recommended.)

           The [1m-l [22moption is passed directly to the linker by GCC.  Refer  to  your  linker  documentation  for  exact
           details.  The general description below applies to the GNU linker.

           The  linker  searches  a  standard  list of directories for the library.  The directories searched include
           several standard system directories plus any that you specify with [1m-L[22m.

           Static libraries are archives of object files, and have file names like [4mliblibrary.a[24m.  Some  targets  also
           support  shared  libraries,  which  typically  have  names  like [4mliblibrary.so[24m.  If both static and shared
           libraries are found, the linker gives preference to linking with the shared  library  unless  the  [1m-static[0m
           option is used.

           It  makes  a  difference  where  in  the  command you write this option; the linker searches and processes
           libraries and object files in the order they are specified.  Thus, [1mfoo.o  -lz  bar.o  [22msearches  library  [1mz[0m
           after file [4mfoo.o[24m but before [4mbar.o[24m.  If [4mbar.o[24m refers to functions in [1mz[22m, those functions may not be loaded.

       [1m-lobjc[0m
           You need this special case of the [1m-l [22moption in order to link an Objective-C or Objective-C++ program.

       [1m-nostartfiles[0m
           Do  not  use  the  standard  system  startup  files  when linking.  The standard system libraries are used
           normally, unless [1m-nostdlib[22m, [1m-nolibc[22m, or [1m-nodefaultlibs [22mis used.

       [1m-nodefaultlibs[0m
           Do not use the standard system libraries when linking.  Only the libraries you specify are passed  to  the
           linker,  and options specifying linkage of the system libraries, such as [1m-static-libgcc [22mor [1m-shared-libgcc[22m,
           are ignored.  The standard startup files are used normally, unless [1m-nostartfiles [22mis used.

           The compiler may generate calls to "memcmp", "memset", "memcpy" and "memmove".  These entries are  usually
           resolved by entries in libc.  These entry points should be supplied through some other mechanism when this
           option is specified.

       [1m-nolibc[0m
           Do  not  use  the C library or system libraries tightly coupled with it when linking.  Still link with the
           startup files, [4mlibgcc[24m or toolchain provided language support libraries such  as  [4mlibgnat[24m,  [4mlibgfortran[24m  or
           [4mlibstdc++[24m unless options preventing their inclusion are used as well.  This typically removes [1m-lc [22mfrom the
           link  command  line,  as  well  as  system  libraries that normally go with it and become meaningless when
           absence of a C library is assumed, for example [1m-lpthread [22mor [1m-lm [22min some configurations.  This is  intended
           for bare-board targets when there is indeed no C library available.

       [1m-nostdlib[0m
           Do  not  use  the  standard system startup files or libraries when linking.  No startup files and only the
           libraries you specify are passed to the linker, and options specifying linkage of  the  system  libraries,
           such as [1m-static-libgcc [22mor [1m-shared-libgcc[22m, are ignored.

           The  compiler may generate calls to "memcmp", "memset", "memcpy" and "memmove".  These entries are usually
           resolved by entries in libc.  These entry points should be supplied through some other mechanism when this
           option is specified.

           One of the standard libraries bypassed by [1m-nostdlib [22mand [1m-nodefaultlibs [22mis [4mlibgcc.a[24m, a library of  internal
           subroutines  which  GCC  uses  to  overcome shortcomings of particular machines, or special needs for some
           languages.

           In most cases, you need [4mlibgcc.a[24m even when you want to avoid other standard libraries.   In  other  words,
           when  you specify [1m-nostdlib [22mor [1m-nodefaultlibs [22myou should usually specify [1m-lgcc [22mas well.  This ensures that
           you have no unresolved references to internal GCC library subroutines.  (An example of  such  an  internal
           subroutine is "__main", used to ensure C++ constructors are called.)

       [1m-nostdlib++[0m
           Do not implicitly link with standard C++ libraries.

       [1m-e [4m[22mentry[0m
       [1m--entry=[4m[22mentry[0m
           Specify  that the program entry point is [4mentry[24m.  The argument is interpreted by the linker; the GNU linker
           accepts either a symbol name or an address.

       [1m-pie[0m
           Produce a dynamically linked position independent executable on targets that support it.  For  predictable
           results,  you  must  also  specify  the  same  set of options used for compilation ([1m-fpie[22m, [1m-fPIE[22m, or model
           suboptions) when you specify this linker option.

       [1m-no-pie[0m
           Don't produce a dynamically linked position independent executable.

       [1m-static-pie[0m
           Produce a static  position  independent  executable  on  targets  that  support  it.   A  static  position
           independent  executable  is  similar  to  a  static executable, but can be loaded at any address without a
           dynamic linker.  For predictable results, you  must  also  specify  the  same  set  of  options  used  for
           compilation ([1m-fpie[22m, [1m-fPIE[22m, or model suboptions) when you specify this linker option.

       [1m-pthread[0m
           Link  with  the  POSIX  threads  library.   This option is supported on GNU/Linux targets, most other Unix
           derivatives, and also on x86 Cygwin and MinGW targets.  On some targets this option also  sets  flags  for
           the preprocessor, so it should be used consistently for both compilation and linking.

       [1m-r  [22mProduce a relocatable object as output.  This is also known as partial linking.

       [1m-rdynamic[0m
           Pass  the flag [1m-export-dynamic [22mto the ELF linker, on targets that support it. This instructs the linker to
           add all symbols, not only used ones, to the dynamic symbol table. This option is needed for some  uses  of
           "dlopen" or to allow obtaining backtraces from within a program.

       [1m-s  [22mRemove all symbol table and relocation information from the executable.

       [1m-static[0m
           On  systems  that  support  dynamic  linking,  this  overrides  [1m-pie  [22mand prevents linking with the shared
           libraries.  On other systems, this option has no effect.

       [1m-shared[0m
           Produce a shared object which can then be linked with other  objects  to  form  an  executable.   Not  all
           systems  support this option.  For predictable results, you must also specify the same set of options used
           for compilation ([1m-fpic[22m, [1m-fPIC[22m, or model suboptions) when you specify this linker option.[1]

       [1m-shared-libgcc[0m
       [1m-static-libgcc[0m
           On systems that provide [4mlibgcc[24m as a shared library, these options force the use of either  the  shared  or
           static  version, respectively.  If no shared version of [4mlibgcc[24m was built when the compiler was configured,
           these options have no effect.

           There are several situations in which an application should use the shared [4mlibgcc[24m instead  of  the  static
           version.   The  most  common  of these is when the application wishes to throw and catch exceptions across
           different shared libraries.  In that case, each of the libraries as well as the application itself  should
           use the shared [4mlibgcc[24m.

           Therefore,  the G++ driver automatically adds [1m-shared-libgcc [22mwhenever you build a shared library or a main
           executable, because C++ programs typically use exceptions, so this is the right thing to do.

           If, instead, you use the GCC driver to create shared libraries, you may find  that  they  are  not  always
           linked with the shared [4mlibgcc[24m.  If GCC finds, at its configuration time, that you have a non-GNU linker or
           a  GNU  linker  that  does  not  support option [1m--eh-frame-hdr[22m, it links the shared version of [4mlibgcc[24m into
           shared libraries by default.  Otherwise, it takes advantage of the linker and optimizes away  the  linking
           with  the  shared  version  of  [4mlibgcc[24m, linking with the static version of libgcc by default.  This allows
           exceptions to propagate through such shared libraries, without incurring relocation costs at library  load
           time.

           However,  if a library or main executable is supposed to throw or catch exceptions, you must link it using
           the G++ driver, or using the option [1m-shared-libgcc[22m, such that it is linked with the shared [4mlibgcc[24m.

       [1m-static-libasan[0m
           When the [1m-fsanitize=address [22moption is used to link a program, the GCC driver automatically  links  against
           [1mlibasan[22m.  If [4mlibasan[24m is available as a shared library, and the [1m-static [22moption is not used, then this links
           against  the shared version of [4mlibasan[24m.  The [1m-static-libasan [22moption directs the GCC driver to link [4mlibasan[0m
           statically, without necessarily linking other libraries statically.

       [1m-static-libtsan[0m
           When the [1m-fsanitize=thread [22moption is used to link a program, the GCC driver  automatically  links  against
           [1mlibtsan[22m.  If [4mlibtsan[24m is available as a shared library, and the [1m-static [22moption is not used, then this links
           against  the shared version of [4mlibtsan[24m.  The [1m-static-libtsan [22moption directs the GCC driver to link [4mlibtsan[0m
           statically, without necessarily linking other libraries statically.

       [1m-static-liblsan[0m
           When the [1m-fsanitize=leak [22moption is used to link a program, the  GCC  driver  automatically  links  against
           [1mliblsan[22m.  If [4mliblsan[24m is available as a shared library, and the [1m-static [22moption is not used, then this links
           against  the shared version of [4mliblsan[24m.  The [1m-static-liblsan [22moption directs the GCC driver to link [4mliblsan[0m
           statically, without necessarily linking other libraries statically.

       [1m-static-libubsan[0m
           When the [1m-fsanitize=undefined [22moption is used to link a program, the GCC driver automatically links against
           [1mlibubsan[22m.  If [4mlibubsan[24m is available as a shared library, and the [1m-static [22moption is  not  used,  then  this
           links  against the shared version of [4mlibubsan[24m.  The [1m-static-libubsan [22moption directs the GCC driver to link
           [4mlibubsan[24m statically, without necessarily linking other libraries statically.

       [1m-static-libstdc++[0m
           When the [1mg++ [22mprogram is used to link a C++ program, it normally automatically links against [1mlibstdc++[22m.  If
           [4mlibstdc++[24m is available as a shared library, and the [1m-static [22moption is not used, then  this  links  against
           the  shared  version  of [4mlibstdc++[24m.  That is normally fine.  However, it is sometimes useful to freeze the
           version of [4mlibstdc++[24m used by the program  without  going  all  the  way  to  a  fully  static  link.   The
           [1m-static-libstdc++  [22moption directs the [1mg++ [22mdriver to link [4mlibstdc++[24m statically, without necessarily linking
           other libraries statically.

       [1m-symbolic[0m
           Bind references to global symbols when building a shared object.  Warn  about  any  unresolved  references
           (unless  overridden by the link editor option [1m-Xlinker -z -Xlinker defs[22m).  Only a few systems support this
           option.

       [1m-T [4m[22mscript[0m
           Use [4mscript[24m as the linker script.  This option is supported by most systems using the GNU linker.  On  some
           targets,  such  as  bare-board  targets  without  an  operating system, the [1m-T [22moption may be required when
           linking to avoid references to undefined symbols.

       [1m-Xlinker [4m[22moption[0m
           Pass [4moption[24m as an option to the linker.  You can use this to supply system-specific  linker  options  that
           GCC does not recognize.

           If  you  want  to pass an option that takes a separate argument, you must use [1m-Xlinker [22mtwice, once for the
           option and once for the argument.  For example, to pass  [1m-assert  definitions[22m,  you  must  write  [1m-Xlinker[0m
           [1m-assert  -Xlinker  definitions[22m.   It  does  not work to write [1m-Xlinker "-assert definitions"[22m, because this
           passes the entire string as a single argument, which is not what the linker expects.

           When using the GNU linker, it is usually more convenient to pass arguments to  linker  options  using  the
           [4moption[24m[1m=[4m[22mvalue[24m  syntax  than  as  separate arguments.  For example, you can specify [1m-Xlinker -Map=output.map[0m
           rather than [1m-Xlinker -Map -Xlinker output.map[22m.  Other linkers may not support this syntax for command-line
           options.

       [1m-Wl,[4m[22moption[0m
           Pass [4moption[24m as an option to the linker.  If [4moption[24m contains commas, it is split into multiple  options  at
           the  commas.  You can use this syntax to pass an argument to the option.  For example, [1m-Wl,-Map,output.map[0m
           passes [1m-Map output.map [22mto the linker.  When using the GNU linker, you can also get the  same  effect  with
           [1m-Wl,-Map=output.map[22m.

       [1m-u [4m[22msymbol[0m
           Pretend  the symbol [4msymbol[24m is undefined, to force linking of library modules to define it.  You can use [1m-u[0m
           multiple times with different symbols to force loading of additional library modules.

       [1m-z [4m[22mkeyword[0m
           [1m-z [22mis passed directly on  to  the  linker  along  with  the  keyword  [4mkeyword[24m.  See  the  section  in  the
           documentation of your linker for permitted values and their meanings.

   [1mOptions for Directory Search[0m
       These options specify directories to search for header files, for libraries and for parts of the compiler:

       [1m-I [4m[22mdir[0m
       [1m-iquote [4m[22mdir[0m
       [1m-isystem [4m[22mdir[0m
       [1m-idirafter [4m[22mdir[0m
           Add the directory [4mdir[24m to the list of directories to be searched for header files during preprocessing.  If
           [4mdir[24m begins with [1m= [22mor $SYSROOT, then the [1m= [22mor $SYSROOT is replaced by the sysroot prefix; see [1m--sysroot [22mand
           [1m-isysroot[22m.

           Directories  specified  with  [1m-iquote  [22mapply  only  to the quote form of the directive, "#include "[4mfile[24m"".
           Directories specified with [1m-I[22m, [1m-isystem[22m, or [1m-idirafter [22mapply to lookup for both the "#include "[4mfile[24m""  and
           "#include <[4mfile[24m>" directives.

           You  can specify any number or combination of these options on the command line to search for header files
           in several directories.  The lookup order is as follows:

           1.  For the quote form of the include directive, the directory of the current file is searched first.

           2.  For the quote form of the include directive, the directories specified by [1m-iquote [22moptions are searched
               in left-to-right order, as they appear on the command line.

           3.  Directories specified with [1m-I [22moptions are scanned in left-to-right order.

           4.  Directories specified with [1m-isystem [22moptions are scanned in left-to-right order.

           5.  Standard system directories are scanned.

           6.  Directories specified with [1m-idirafter [22moptions are scanned in left-to-right order.

           You can use [1m-I [22mto override a system header file, substituting your own version,  since  these  directories
           are  searched before the standard system header file directories.  However, you should not use this option
           to add directories that contain vendor-supplied system header files; use [1m-isystem [22mfor that.

           The [1m-isystem [22mand [1m-idirafter [22moptions also mark the directory as a system directory, so  that  it  gets  the
           same special treatment that is applied to the standard system directories.

           If a standard system include directory, or a directory specified with [1m-isystem[22m, is also specified with [1m-I[22m,
           the  [1m-I  [22moption  is  ignored.   The  directory  is  still searched but as a system directory at its normal
           position in the system include chain.  This is to ensure that GCC's procedure to fix buggy system  headers
           and  the  ordering for the "#include_next" directive are not inadvertently changed.  If you really need to
           change the search order for system directories, use the [1m-nostdinc [22mand/or [1m-isystem [22moptions.

       [1m-I- [22mSplit the include path.  This option has been deprecated.  Please use [1m-iquote [22minstead for  [1m-I  [22mdirectories
           before the [1m-I- [22mand remove the [1m-I- [22moption.

           Any  directories  specified  with  [1m-I  [22moptions  before  [1m-I-  [22mare  searched only for headers requested with
           "#include "[4mfile[24m""; they are not searched for "#include <[4mfile[24m>".  If additional directories  are  specified
           with [1m-I [22moptions after the [1m-I-[22m, those directories are searched for all [1m#include [22mdirectives.

           In  addition,  [1m-I-  [22minhibits  the  use  of the directory of the current file directory as the first search
           directory for "#include "[4mfile[24m"".  There is no way to override this effect of [1m-I-[22m.

       [1m-iprefix [4m[22mprefix[0m
           Specify [4mprefix[24m as the prefix for subsequent [1m-iwithprefix [22moptions.  If the prefix represents  a  directory,
           you should include the final [1m/[22m.

       [1m-iwithprefix [4m[22mdir[0m
       [1m-iwithprefixbefore [4m[22mdir[0m
           Append  [4mdir[24m  to  the  prefix  specified  previously  with [1m-iprefix[22m, and add the resulting directory to the
           include search path.  [1m-iwithprefixbefore [22mputs it in the same place [1m-I [22mwould; [1m-iwithprefix  [22mputs  it  where
           [1m-idirafter [22mwould.

       [1m-isysroot [4m[22mdir[0m
           This  option  is  like  the [1m--sysroot [22moption, but applies only to header files (except for Darwin targets,
           where it applies to both header files and libraries).  See the [1m--sysroot [22moption for more information.

       [1m-imultilib [4m[22mdir[0m
           Use [4mdir[24m as a subdirectory of the directory containing target-specific C++ headers.

       [1m-nostdinc[0m
           Do not search the standard system directories for header files.  Only the directories explicitly specified
           with [1m-I[22m, [1m-iquote[22m, [1m-isystem[22m, and/or  [1m-idirafter  [22moptions  (and  the  directory  of  the  current  file,  if
           appropriate) are searched.

       [1m-nostdinc++[0m
           Do  not  search  for  header files in the C++-specific standard directories, but do still search the other
           standard directories.  (This option is used when building the C++ library.)

       [1m-iplugindir=[4m[22mdir[0m
           Set the directory to search for plugins that are passed by [1m-fplugin=[4m[22mname[24m instead of [1m-fplugin=[4m[22mpath[24m[1m/[4m[22mname[24m[1m.so[22m.
           This option is not meant to be used by the user, but only passed by the driver.

       [1m-L[4m[22mdir[0m
           Add directory [4mdir[24m to the list of directories to be searched for [1m-l[22m.

       [1m-B[4m[22mprefix[0m
           This option specifies where to find the executables, libraries, include  files,  and  data  files  of  the
           compiler itself.

           The compiler driver program runs one or more of the subprograms [1mcpp[22m, [1mcc1[22m, [1mas [22mand [1mld[22m.  It tries [4mprefix[24m as a
           prefix  for  each  program  it  tries to run, both with and without [4mmachine[24m[1m/[4m[22mversion[24m[1m/ [22mfor the corresponding
           target machine and compiler version.

           For each subprogram to be run, the compiler driver first tries the [1m-B [22mprefix, if any.  If that name is not
           found,  or  if  [1m-B  [22mis  not  specified,  the  driver  tries  two  standard  prefixes,  [4m/usr/lib/gcc/[24m   and
           [4m/usr/local/lib/gcc/[24m.   If  neither  of  those results in a file name that is found, the unmodified program
           name is searched for using the directories specified in your [1mPATH [22menvironment variable.

           The compiler checks to see if the path provided by [1m-B [22mrefers to a directory, and if necessary  it  adds  a
           directory separator character at the end of the path.

           [1m-B  [22mprefixes  that  effectively specify directory names also apply to libraries in the linker, because the
           compiler translates these options into [1m-L [22moptions for the linker.  They also apply to include files in the
           preprocessor, because the compiler translates these options into [1m-isystem [22moptions  for  the  preprocessor.
           In this case, the compiler appends [1minclude [22mto the prefix.

           The  runtime  support file [4mlibgcc.a[24m can also be searched for using the [1m-B [22mprefix, if needed.  If it is not
           found there, the two standard prefixes above are tried, and that is all.  The file is left out of the link
           if it is not found by those means.

           Another  way  to  specify  a  prefix  much  like  the  [1m-B  [22mprefix  is  to  use  the  environment  variable
           [1mGCC_EXEC_PREFIX[22m.

           As a special kludge, if the path provided by [1m-B [22mis [4m[dir/]stageN/[24m, where [4mN[24m is a number in the range 0 to 9,
           then it is replaced by [4m[dir/]include[24m.  This is to help with boot-strapping the compiler.

       [1m-no-canonical-prefixes[0m
           Do  not  expand  any  symbolic  links,  resolve  references to [1m/../ [22mor [1m/./[22m, or make the path absolute when
           generating a relative prefix.

       [1m--sysroot=[4m[22mdir[0m
           Use [4mdir[24m as the logical root directory for headers and libraries.  For example, if  the  compiler  normally
           searches  for  headers  in [4m/usr/include[24m and libraries in [4m/usr/lib[24m, it instead searches [4mdir/usr/include[24m and
           [4mdir/usr/lib[24m.

           If you use both this option and the [1m-isysroot [22moption, then the [1m--sysroot [22moption applies to libraries,  but
           the [1m-isysroot [22moption applies to header files.

           The  GNU  linker  (beginning with version 2.16) has the necessary support for this option.  If your linker
           does not support this option, the header file aspect of [1m--sysroot [22mstill works, but the library aspect does
           not.

       [1m--no-sysroot-suffix[0m
           For some targets, a suffix is added to the root directory specified with [1m--sysroot[22m, depending on the other
           options  used,  so  that  headers  may  for  example  be  found  in  [4mdir/suffix/usr/include[24m   instead   of
           [4mdir/usr/include[24m.  This option disables the addition of such a suffix.

   [1mOptions for Code Generation Conventions[0m
       These machine-independent options control the interface conventions used in code generation.

       Most  of  them  have  both  positive and negative forms; the negative form of [1m-ffoo [22mis [1m-fno-foo[22m.  In the table
       below, only one of the forms is listed---the one that is not the default.  You can figure out the  other  form
       by either removing [1mno- [22mor adding it.

       [1m-fstack-reuse=[4m[22mreuse-level[0m
           This  option  controls  stack  space  reuse  for user declared local/auto variables and compiler generated
           temporaries.  [4mreuse_level[24m can be [1mall[22m, [1mnamed_vars[22m, or [1mnone[22m. [1mall [22menables stack reuse for all local variables
           and temporaries, [1mnamed_vars [22menables the reuse only for user defined local variables with names,  and  [1mnone[0m
           disables  stack  reuse completely. The default value is [1mall[22m. The option is needed when the program extends
           the lifetime of a scoped local variable or a compiler generated temporary beyond the end point defined  by
           the  language.   When  a  lifetime of a variable ends, and if the variable lives in memory, the optimizing
           compiler has the freedom to reuse its stack space with other temporaries or scoped local  variables  whose
           live  range  does  not  overlap  with it. Legacy code extending local lifetime is likely to break with the
           stack reuse optimization.

           For example,

                      int *p;
                      {
                        int local1;

                        p = &local1;
                        local1 = 10;
                        ....
                      }
                      {
                         int local2;
                         local2 = 20;
                         ...
                      }

                      if (*p == 10)  // out of scope use of local1
                        {

                        }

           Another example:

                      struct A
                      {
                          A(int k) : i(k), j(k) { }
                          int i;
                          int j;
                      };

                      A *ap;

                      void foo(const A& ar)
                      {
                         ap = &ar;
                      }

                      void bar()
                      {
                         foo(A(10)); // temp object's lifetime ends when foo returns

                         {
                           A a(20);
                           ....
                         }
                         ap->i+= 10;  // ap references out of scope temp whose space
                                      // is reused with a. What is the value of ap->i?
                      }

           The lifetime of a compiler generated temporary is well defined by the C++ standard. When a lifetime  of  a
           temporary ends, and if the temporary lives in memory, the optimizing compiler has the freedom to reuse its
           stack  space  with  other temporaries or scoped local variables whose live range does not overlap with it.
           However some of the legacy code relies on the behavior of older  compilers  in  which  temporaries'  stack
           space is not reused, the aggressive stack reuse can lead to runtime errors. This option is used to control
           the temporary stack reuse optimization.

       [1m-ftrapv[0m
           This  option generates traps for signed overflow on addition, subtraction, multiplication operations.  The
           options [1m-ftrapv [22mand [1m-fwrapv [22moverride each other, so using [1m-ftrapv -fwrapv [22mon the command-line  results  in
           [1m-fwrapv  [22mbeing  effective.  Note that only active options override, so using [1m-ftrapv -fwrapv -fno-wrapv [22mon
           the command-line results in [1m-ftrapv [22mbeing effective.

       [1m-fwrapv[0m
           This option instructs the compiler to assume that signed arithmetic overflow of addition, subtraction  and
           multiplication  wraps  around  using twos-complement representation.  This flag enables some optimizations
           and disables others.  The options [1m-ftrapv [22mand [1m-fwrapv [22moverride each other, so using [1m-ftrapv -fwrapv [22mon the
           command-line results in [1m-fwrapv [22mbeing effective.  Note that only active options override, so using [1m-ftrapv[0m
           [1m-fwrapv -fno-wrapv [22mon the command-line results in [1m-ftrapv [22mbeing effective.

       [1m-fwrapv-pointer[0m
           This option instructs the compiler to assume that pointer arithmetic overflow on addition and  subtraction
           wraps  around  using  twos-complement  representation.  This flag disables some optimizations which assume
           pointer overflow is invalid.

       [1m-fstrict-overflow[0m
           This option implies [1m-fno-wrapv -fno-wrapv-pointer [22mand when negated implies [1m-fwrapv -fwrapv-pointer[22m.

       [1m-fexceptions[0m
           Enable exception handling.  Generates extra code needed to propagate exceptions.  For some  targets,  this
           implies  GCC generates frame unwind information for all functions, which can produce significant data size
           overhead, although it does not affect execution.  If you do not specify this option,  GCC  enables  it  by
           default  for  languages  like  C++ that normally require exception handling, and disables it for languages
           like C that do not normally require it.  However, you may need to enable this option when compiling C code
           that needs to interoperate properly with exception handlers written in C++.  You may also wish to  disable
           this option if you are compiling older C++ programs that don't use exception handling.

       [1m-fnon-call-exceptions[0m
           Generate  code  that  allows trapping instructions to throw exceptions.  Note that this requires platform-
           specific runtime support that does not exist everywhere.  Moreover, it only allows  [4mtrapping[24m  instructions
           to  throw exceptions, i.e. memory references or floating-point instructions.  It does not allow exceptions
           to be thrown from arbitrary signal handlers such as "SIGALRM".  This enables [1m-fexceptions[22m.

       [1m-fdelete-dead-exceptions[0m
           Consider that instructions that may throw exceptions but don't otherwise contribute to  the  execution  of
           the  program  can be optimized away.  This does not affect calls to functions except those with the "pure"
           or "const" attributes.  This option is enabled by default for the Ada and C++ compilers, as  permitted  by
           the  language  specifications.   Optimization  passes that cause dead exceptions to be removed are enabled
           independently at different optimization levels.

       [1m-funwind-tables[0m
           Similar to [1m-fexceptions[22m, except that it just generates any needed static data, but  does  not  affect  the
           generated  code  in  any  other  way.  You normally do not need to enable this option; instead, a language
           processor that needs this handling enables it on your behalf.

       [1m-fasynchronous-unwind-tables[0m
           Generate unwind table in DWARF format, if supported by  target  machine.   The  table  is  exact  at  each
           instruction  boundary, so it can be used for stack unwinding from asynchronous events (such as debugger or
           garbage collector).

       [1m-fno-gnu-unique[0m
           On systems with recent GNU assembler and C library, the C++ compiler uses the "STB_GNU_UNIQUE" binding  to
           make  sure that definitions of template static data members and static local variables in inline functions
           are unique even in the presence of "RTLD_LOCAL"; this is necessary to avoid problems with a  library  used
           by  two  different "RTLD_LOCAL" plugins depending on a definition in one of them and therefore disagreeing
           with the other one about the binding of the symbol.  But this causes "dlclose" to be ignored for  affected
           DSOs;  if  your  program  relies  on  reinitialization  of  a  DSO via "dlclose" and "dlopen", you can use
           [1m-fno-gnu-unique[22m.

       [1m-fpcc-struct-return[0m
           Return "short" "struct" and "union" values in memory like longer ones, rather  than  in  registers.   This
           convention  is  less efficient, but it has the advantage of allowing intercallability between GCC-compiled
           files and files compiled with other compilers, particularly the Portable C Compiler (pcc).

           The precise convention for returning structures in memory depends on the target configuration macros.

           Short structures and unions are those whose size and alignment match that of some integer type.

           [1mWarning: [22mcode compiled with the [1m-fpcc-struct-return [22mswitch is not binary  compatible  with  code  compiled
           with the [1m-freg-struct-return [22mswitch.  Use it to conform to a non-default application binary interface.

       [1m-freg-struct-return[0m
           Return  "struct"  and  "union"  values  in  registers  when  possible.   This  is more efficient for small
           structures than [1m-fpcc-struct-return[22m.

           If you specify neither [1m-fpcc-struct-return [22mnor [1m-freg-struct-return[22m, GCC defaults to  whichever  convention
           is  standard  for  the  target.   If there is no standard convention, GCC defaults to [1m-fpcc-struct-return[22m,
           except on targets where GCC is the principal compiler.  In those cases, we can choose the standard, and we
           chose the more efficient register return alternative.

           [1mWarning: [22mcode compiled with the [1m-freg-struct-return [22mswitch is not binary  compatible  with  code  compiled
           with the [1m-fpcc-struct-return [22mswitch.  Use it to conform to a non-default application binary interface.

       [1m-fshort-enums[0m
           Allocate  to  an  "enum"  type  only  as many bytes as it needs for the declared range of possible values.
           Specifically, the "enum" type is equivalent to the smallest integer type that has enough room.

           [1mWarning: [22mthe [1m-fshort-enums [22mswitch causes GCC to generate code that is  not  binary  compatible  with  code
           generated without that switch.  Use it to conform to a non-default application binary interface.

       [1m-fshort-wchar[0m
           Override  the  underlying  type  for  "wchar_t"  to be "short unsigned int" instead of the default for the
           target.  This option is useful for building programs to run under WINE.

           [1mWarning: [22mthe [1m-fshort-wchar [22mswitch causes GCC to generate code that is  not  binary  compatible  with  code
           generated without that switch.  Use it to conform to a non-default application binary interface.

       [1m-fcommon[0m
           In C code, this option controls the placement of global variables defined without an initializer, known as
           [4mtentative[24m  [4mdefinitions[24m  in  the  C  standard.   Tentative  definitions are distinct from declarations of a
           variable with the "extern" keyword, which do not allocate storage.

           The default is [1m-fno-common[22m, which specifies that the compiler places uninitialized global variables in the
           BSS section of the object file.  This inhibits the merging of tentative definitions by the linker  so  you
           get  a multiple-definition error if the same variable is accidentally defined in more than one compilation
           unit.

           The [1m-fcommon [22mplaces uninitialized global variables in a common block.  This allows the linker  to  resolve
           all  tentative definitions of the same variable in different compilation units to the same object, or to a
           non-tentative definition.  This behavior is inconsistent with C++, and on many targets implies a speed and
           code size penalty on global variable references.  It is mainly  useful  to  enable  legacy  code  to  link
           without errors.

       [1m-fno-ident[0m
           Ignore the "#ident" directive.

       [1m-finhibit-size-directive[0m
           Don't  output  a ".size" assembler directive, or anything else that would cause trouble if the function is
           split in the middle, and the two halves are placed at locations far apart in memory.  This option is  used
           when compiling [4mcrtstuff.c[24m; you should not need to use it for anything else.

       [1m-fverbose-asm[0m
           Put  extra commentary information in the generated assembly code to make it more readable.  This option is
           generally only of use to those who actually need to  read  the  generated  assembly  code  (perhaps  while
           debugging the compiler itself).

           [1m-fno-verbose-asm[22m, the default, causes the extra information to be omitted and is useful when comparing two
           assembler files.

           The added comments include:

           *   information on the compiler version and command-line options,

           *   the    source    code    lines    associated   with   the   assembly   instructions,   in   the   form
               FILENAME:LINENUMBER:CONTENT OF LINE,

           *   hints on which high-level expressions correspond to the various assembly instruction operands.

           For example, given this C source file:

                   int test (int n)
                   {
                     int i;
                     int total = 0;

                     for (i = 0; i < n; i++)
                       total += i * i;

                     return total;
                   }

           compiling to (x86_64) assembly via [1m-S [22mand emitting the result direct to stdout via [1m-o -[0m

                   gcc -S test.c -fverbose-asm -Os -o -

           gives output similar to this:

                           .file   "test.c"
                   # GNU C11 (GCC) version 7.0.0 20160809 (experimental) (x86_64-pc-linux-gnu)
                     [...snip...]
                   # options passed:
                     [...snip...]

                           .text
                           .globl  test
                           .type   test, @function
                   test:
                   .LFB0:
                           .cfi_startproc
                   # test.c:4:   int total = 0;
                           xorl    %eax, %eax      # <retval>
                   # test.c:6:   for (i = 0; i < n; i++)
                           xorl    %edx, %edx      # i
                   .L2:
                   # test.c:6:   for (i = 0; i < n; i++)
                           cmpl    %edi, %edx      # n, i
                           jge     .L5     #,
                   # test.c:7:     total += i * i;
                           movl    %edx, %ecx      # i, tmp92
                           imull   %edx, %ecx      # i, tmp92
                   # test.c:6:   for (i = 0; i < n; i++)
                           incl    %edx    # i
                   # test.c:7:     total += i * i;
                           addl    %ecx, %eax      # tmp92, <retval>
                           jmp     .L2     #
                   .L5:
                   # test.c:10: }
                           ret
                           .cfi_endproc
                   .LFE0:
                           .size   test, .-test
                           .ident  "GCC: (GNU) 7.0.0 20160809 (experimental)"
                           .section        .note.GNU-stack,"",@progbits

           The comments are intended for humans rather than machines and hence the precise format of the comments  is
           subject to change.

       [1m-frecord-gcc-switches[0m
           This  switch  causes the command line used to invoke the compiler to be recorded into the object file that
           is being created.  This switch is only implemented on some targets and the exact format of  the  recording
           is  target  and  binary file format dependent, but it usually takes the form of a section containing ASCII
           text.  This switch is related to the [1m-fverbose-asm [22mswitch, but that switch only records information in the
           assembler output file as comments, so it never reaches the object file.   See  also  [1m-grecord-gcc-switches[0m
           for another way of storing compiler options into the object file.

       [1m-fpic[0m
           Generate position-independent code (PIC) suitable for use in a shared library, if supported for the target
           machine.   Such  code  accesses  all  constant addresses through a global offset table (GOT).  The dynamic
           loader resolves the GOT entries when the program starts (the dynamic loader is not part of GCC; it is part
           of the operating system).  If the GOT size for the linked executable exceeds  a  machine-specific  maximum
           size,  you  get  an  error  message  from  the  linker  indicating that [1m-fpic [22mdoes not work; in that case,
           recompile with [1m-fPIC [22minstead.  (These maximums are 8k on the SPARC, 28k on AArch64 and 32k on the m68k and
           RS/6000.  The x86 has no such limit.)

           Position-independent code requires special support, and therefore works only on certain machines.  For the
           x86, GCC supports PIC for System V but not for the Sun 386i.  Code generated for the IBM RS/6000 is always
           position-independent.

           When this flag is set, the macros "__pic__" and "__PIC__" are defined to 1.

       [1m-fPIC[0m
           If supported for the target machine, emit position-independent code,  suitable  for  dynamic  linking  and
           avoiding  any  limit  on  the size of the global offset table.  This option makes a difference on AArch64,
           m68k, PowerPC and SPARC.

           Position-independent code requires special support, and therefore works only on certain machines.

           When this flag is set, the macros "__pic__" and "__PIC__" are defined to 2.

       [1m-fpie[0m
       [1m-fPIE[0m
           These options are similar to [1m-fpic [22mand [1m-fPIC[22m, but the generated  position-independent  code  can  be  only
           linked  into  executables.   Usually  these options are used to compile code that will be linked using the
           [1m-pie [22mGCC option.

           [1m-fpie [22mand [1m-fPIE [22mboth define the macros "__pie__" and "__PIE__".  The macros have the value 1 for [1m-fpie [22mand
           2 for [1m-fPIE[22m.

       [1m-fno-plt[0m
           Do not use the PLT for external function calls in position-independent code.   Instead,  load  the  callee
           address at call sites from the GOT and branch to it.  This leads to more efficient code by eliminating PLT
           stubs and exposing GOT loads to optimizations.  On architectures such as 32-bit x86 where PLT stubs expect
           the GOT pointer in a specific register, this gives more register allocation freedom to the compiler.  Lazy
           binding requires use of the PLT; with [1m-fno-plt [22mall external symbols are resolved at load time.

           Alternatively,  the  function  attribute  "noplt"  can be used to avoid calls through the PLT for specific
           external functions.

           In position-dependent code, a few targets also convert calls to functions that are marked to not  use  the
           PLT to use the GOT instead.

       [1m-fno-jump-tables[0m
           Do  not  use  jump  tables  for  switch  statements  even where it would be more efficient than other code
           generation strategies.  This option is of use in conjunction with [1m-fpic [22mor [1m-fPIC [22mfor  building  code  that
           forms  part  of  a dynamic linker and cannot reference the address of a jump table.  On some targets, jump
           tables do not require a GOT and this option is not needed.

       [1m-fno-bit-tests[0m
           Do not use bit tests for switch statements  even  where  it  would  be  more  efficient  than  other  code
           generation strategies.

       [1m-ffixed-[4m[22mreg[0m
           Treat  the register named [4mreg[24m as a fixed register; generated code should never refer to it (except perhaps
           as a stack pointer, frame pointer or in some other fixed role).

           [4mreg[24m must be the name of a register.  The register names accepted are machine-specific and are  defined  in
           the "REGISTER_NAMES" macro in the machine description macro file.

           This flag does not have a negative form, because it specifies a three-way choice.

       [1m-fcall-used-[4m[22mreg[0m
           Treat  the  register  named  [4mreg[24m  as an allocable register that is clobbered by function calls.  It may be
           allocated for temporaries or variables that do not live across a call.  Functions compiled this way do not
           save and restore the register [4mreg[24m.

           It is an error to use this flag with the frame pointer or stack pointer.   Use  of  this  flag  for  other
           registers that have fixed pervasive roles in the machine's execution model produces disastrous results.

           This flag does not have a negative form, because it specifies a three-way choice.

       [1m-fcall-saved-[4m[22mreg[0m
           Treat  the  register  named [4mreg[24m as an allocable register saved by functions.  It may be allocated even for
           temporaries or variables that live across a call.  Functions  compiled  this  way  save  and  restore  the
           register [4mreg[24m if they use it.

           It  is  an  error  to  use  this flag with the frame pointer or stack pointer.  Use of this flag for other
           registers that have fixed pervasive roles in the machine's execution model produces disastrous results.

           A different sort of disaster results from the use of this flag for a register in which function values may
           be returned.

           This flag does not have a negative form, because it specifies a three-way choice.

       [1m-fpack-struct[=[4m[22mn[24m[1m][0m
           Without a value specified, pack all structure members together without holes.  When a value  is  specified
           (which  must  be  a  small power of two), pack structure members according to this value, representing the
           maximum alignment (that is, objects with default  alignment  requirements  larger  than  this  are  output
           potentially unaligned at the next fitting location.

           [1mWarning:  [22mthe  [1m-fpack-struct  [22mswitch  causes  GCC to generate code that is not binary compatible with code
           generated without that switch.  Additionally, it makes the code suboptimal.  Use it to conform to  a  non-
           default application binary interface.

       [1m-fleading-underscore[0m
           This  option  and  its  counterpart,  [1m-fno-leading-underscore[22m,  forcibly  change  the  way  C  symbols are
           represented in the object file.  One use is to help link with legacy assembly code.

           [1mWarning: [22mthe [1m-fleading-underscore [22mswitch causes GCC to generate code that is not  binary  compatible  with
           code generated without that switch.  Use it to conform to a non-default application binary interface.  Not
           all targets provide complete support for this switch.

       [1m-ftls-model=[4m[22mmodel[0m
           Alter  the  thread-local  storage  model  to be used.  The [4mmodel[24m argument should be one of [1mglobal-dynamic[22m,
           [1mlocal-dynamic[22m, [1minitial-exec [22mor [1mlocal-exec[22m.  Note that the choice is subject to optimization: the  compiler
           may use a more efficient model for symbols not visible outside of the translation unit, or if [1m-fpic [22mis not
           given on the command line.

           The default without [1m-fpic [22mis [1minitial-exec[22m; with [1m-fpic [22mthe default is [1mglobal-dynamic[22m.

       [1m-ftrampolines[0m
           For  targets  that  normally  need trampolines for nested functions, always generate them instead of using
           descriptors.  Otherwise, for targets that do not need them, like for example HP-PA or IA-64, do nothing.

           A trampoline is a small piece of code that is created at run time on the  stack  when  the  address  of  a
           nested  function is taken, and is used to call the nested function indirectly.  Therefore, it requires the
           stack to be made executable in order for the program to work properly.

           [1m-fno-trampolines [22mis enabled by default on  a  language  by  language  basis  to  let  the  compiler  avoid
           generating  them,  if  it  computes that this is safe, and replace them with descriptors.  Descriptors are
           made up of data only, but the generated code must be prepared to deal with  them.   As  of  this  writing,
           [1m-fno-trampolines [22mis enabled by default only for Ada.

           Moreover,  code  compiled  with  [1m-ftrampolines  [22mand  code  compiled  with  [1m-fno-trampolines [22mare not binary
           compatible if nested functions are present.  This option must therefore be used on  a  program-wide  basis
           and be manipulated with extreme care.

           For languages other than Ada, the "-ftrampolines" and "-fno-trampolines" options currently have no effect,
           and trampolines are always generated on platforms that need them for nested functions.

       [1m-fvisibility=[22m[[1mdefault[22m|[1minternal[22m|[1mhidden[22m|[1mprotected[22m]
           Set  the  default  ELF  image symbol visibility to the specified option---all symbols are marked with this
           unless overridden within the code.  Using this feature can very substantially  improve  linking  and  load
           times of shared object libraries, produce more optimized code, provide near-perfect API export and prevent
           symbol clashes.  It is [1mstrongly [22mrecommended that you use this in any shared objects you distribute.

           Despite  the  nomenclature, [1mdefault [22malways means public; i.e., available to be linked against from outside
           the shared object.  [1mprotected [22mand [1minternal [22mare pretty useless  in  real-world  usage  so  the  only  other
           commonly  used option is [1mhidden[22m.  The default if [1m-fvisibility [22misn't specified is [1mdefault[22m, i.e., make every
           symbol public.

           A good explanation of the benefits offered by ensuring ELF symbols have the correct visibility is given by
           "How   To   Write    Shared    Libraries"    by    Ulrich    Drepper    (which    can    be    found    at
           <[1mhttps://www.akkadia.org/drepper/[22m>)---however  a superior solution made possible by this option to marking
           things hidden when the default is public is to make the default hidden and mark things  public.   This  is
           the  norm  with DLLs on Windows and with [1m-fvisibility=hidden [22mand "__attribute__ ((visibility("default")))"
           instead of "__declspec(dllexport)" you get almost identical semantics with identical syntax.   This  is  a
           great boon to those working with cross-platform projects.

           For  those adding visibility support to existing code, you may find "#pragma GCC visibility" of use.  This
           works by you enclosing the declarations you wish to set visibility for with  (for  example)  "#pragma  GCC
           visibility  push(hidden)" and "#pragma GCC visibility pop".  Bear in mind that symbol visibility should be
           viewed [1mas part of the API interface contract [22mand thus all new code should always specify  visibility  when
           it  is  not  the  default;  i.e.,  declarations  only for use within the local DSO should [1malways [22mbe marked
           explicitly as hidden as so to avoid PLT indirection overheads---making this  abundantly  clear  also  aids
           readability  and  self-documentation  of  the  code.  Note that due to ISO C++ specification requirements,
           "operator new" and "operator delete" must always be of default visibility.

           Be aware that headers from outside your project, in particular system headers and headers from  any  other
           library you use, may not be expecting to be compiled with visibility other than the default.  You may need
           to explicitly say "#pragma GCC visibility push(default)" before including any such headers.

           "extern"  declarations  are  not  affected  by  [1m-fvisibility[22m,  so  a  lot  of  code can be recompiled with
           [1m-fvisibility=hidden [22mwith no modifications.  However, this means that calls to "extern" functions  with  no
           explicit  visibility  use  the  PLT,  so  it  is more effective to use "__attribute ((visibility))" and/or
           "#pragma GCC visibility" to tell the compiler which "extern" declarations should be treated as hidden.

           Note that [1m-fvisibility [22mdoes affect C++ vague linkage entities. This means that, for instance, an exception
           class that is be thrown between DSOs must be  explicitly  marked  with  default  visibility  so  that  the
           [1mtype_info [22mnodes are unified between the DSOs.

           An    overview    of    these    techniques,    their    benefits    and   how   to   use   them   is   at
           <[1mhttps://gcc.gnu.org/wiki/Visibility[22m>.

       [1m-fstrict-volatile-bitfields[0m
           This option should be used if accesses to volatile bit-fields (or other  structure  fields,  although  the
           compiler  usually  honors those types anyway) should use a single access of the width of the field's type,
           aligned to a natural alignment if possible.  For example, targets with memory-mapped peripheral  registers
           might  require  all  such  accesses to be 16 bits wide; with this flag you can declare all peripheral bit-
           fields as "unsigned short" (assuming short is 16 bits on  these  targets)  to  force  GCC  to  use  16-bit
           accesses instead of, perhaps, a more efficient 32-bit access.

           If  this  option  is disabled, the compiler uses the most efficient instruction.  In the previous example,
           that might be a 32-bit load instruction, even though that accesses bytes that do not contain  any  portion
           of the bit-field, or memory-mapped registers unrelated to the one being updated.

           In some cases, such as when the "packed" attribute is applied to a structure field, it may not be possible
           to access the field with a single read or write that is correctly aligned for the target machine.  In this
           case  GCC  falls  back  to  generating  multiple accesses rather than code that will fault or truncate the
           result at run time.

           Note:  Due to restrictions of the C/C++11 memory model, write accesses are not allowed to touch  non  bit-
           field members.  It is therefore recommended to define all bits of the field's type as bit-field members.

           The  default  value  of  this  option  is  determined  by  the application binary interface for the target
           processor.

       [1m-fsync-libcalls[0m
           This option controls whether any out-of-line instance of the "__sync" family of functions may be  used  to
           implement the C++11 "__atomic" family of functions.

           The   default   value   of  this  option  is  enabled,  thus  the  only  useful  form  of  the  option  is
           [1m-fno-sync-libcalls[22m.  This option is used in the implementation of the [4mlibatomic[24m runtime library.

   [1mGCC Developer Options[0m
       This section describes command-line options that are  primarily  of  interest  to  GCC  developers,  including
       options  to support compiler testing and investigation of compiler bugs and compile-time performance problems.
       This includes options that produce debug dumps at various points in the  compilation;  that  print  statistics
       such  as memory use and execution time; and that print information about GCC's configuration, such as where it
       searches for libraries.  You should rarely need to use any of  these  options  for  ordinary  compilation  and
       linking tasks.

       Many  developer  options  that  cause  GCC to dump output to a file take an optional [1m=[4m[22mfilename[24m suffix. You can
       specify [1mstdout [22mor [1m- [22mto dump to standard output, and [1mstderr [22mfor standard error.

       If [1m=[4m[22mfilename[24m is omitted, a default dump file name is constructed by concatenating the base dump file  name,  a
       pass  number, phase letter, and pass name.  The base dump file name is the name of output file produced by the
       compiler if explicitly specified and not an executable; otherwise it is the source file name.  The pass number
       is determined by the order passes are registered with the compiler's pass manager.  This is generally the same
       as the order of execution, but passes registered by  plugins,  target-specific  passes,  or  passes  that  are
       otherwise  registered  late  are numbered higher than the pass named [1mfinal[22m, even if they are executed earlier.
       The phase letter is one of [1mi [22m(inter-procedural analysis), [1ml [22m(language-specific), [1mr [22m(RTL), or  [1mt  [22m(tree).   The
       files are created in the directory of the output file.

       [1m-fcallgraph-info[0m
       [1m-fcallgraph-info=[4m[22mMARKERS[0m
           Makes  the  compiler  output  callgraph  information  for  the  program,  on a per-object-file basis.  The
           information is generated in the common VCG format.  It can be decorated with additional,  per-node  and/or
           per-edge  information,  if  a  list  of  comma-separated markers is additionally specified.  When the "su"
           marker is specified, the callgraph is  decorated  with  stack  usage  information;  it  is  equivalent  to
           [1m-fstack-usage[22m.   When  the  "da"  marker  is  specified, the callgraph is decorated with information about
           dynamically allocated objects.

           When compiling with [1m-flto[22m, no callgraph information is output along with the object  file.   At  LTO  link
           time,  [1m-fcallgraph-info  [22mmay generate multiple callgraph information files next to intermediate LTO output
           files.

       [1m-d[4m[22mletters[0m
       [1m-fdump-rtl-[4m[22mpass[0m
       [1m-fdump-rtl-[4m[22mpass[24m[1m=[4m[22mfilename[0m
           Says to make debugging dumps during compilation at times specified by [4mletters[24m.  This is used for debugging
           the RTL-based passes of the compiler.

           Some [1m-d[4m[22mletters[24m switches have different meaning when [1m-E [22mis used for preprocessing.

           Debug dumps can be enabled with a [1m-fdump-rtl [22mswitch or some [1m-d [22moption  [4mletters[24m.   Here  are  the  possible
           letters for use in [4mpass[24m and [4mletters[24m, and their meanings:

           [1m-fdump-rtl-alignments[0m
               Dump after branch alignments have been computed.

           [1m-fdump-rtl-asmcons[0m
               Dump after fixing rtl statements that have unsatisfied in/out constraints.

           [1m-fdump-rtl-auto_inc_dec[0m
               Dump  after auto-inc-dec discovery.  This pass is only run on architectures that have auto inc or auto
               dec instructions.

           [1m-fdump-rtl-barriers[0m
               Dump after cleaning up the barrier instructions.

           [1m-fdump-rtl-bbpart[0m
               Dump after partitioning hot and cold basic blocks.

           [1m-fdump-rtl-bbro[0m
               Dump after block reordering.

           [1m-fdump-rtl-btl1[0m
           [1m-fdump-rtl-btl2[0m
               [1m-fdump-rtl-btl1 [22mand [1m-fdump-rtl-btl2 [22menable dumping after  the  two  branch  target  load  optimization
               passes.

           [1m-fdump-rtl-bypass[0m
               Dump after jump bypassing and control flow optimizations.

           [1m-fdump-rtl-combine[0m
               Dump after the RTL instruction combination pass.

           [1m-fdump-rtl-compgotos[0m
               Dump after duplicating the computed gotos.

           [1m-fdump-rtl-ce1[0m
           [1m-fdump-rtl-ce2[0m
           [1m-fdump-rtl-ce3[0m
               [1m-fdump-rtl-ce1[22m,  [1m-fdump-rtl-ce2[22m,  and  [1m-fdump-rtl-ce3  [22menable  dumping  after  the three if conversion
               passes.

           [1m-fdump-rtl-cprop_hardreg[0m
               Dump after hard register copy propagation.

           [1m-fdump-rtl-csa[0m
               Dump after combining stack adjustments.

           [1m-fdump-rtl-cse1[0m
           [1m-fdump-rtl-cse2[0m
               [1m-fdump-rtl-cse1 [22mand [1m-fdump-rtl-cse2 [22menable dumping after  the  two  common  subexpression  elimination
               passes.

           [1m-fdump-rtl-dce[0m
               Dump after the standalone dead code elimination passes.

           [1m-fdump-rtl-dbr[0m
               Dump after delayed branch scheduling.

           [1m-fdump-rtl-dce1[0m
           [1m-fdump-rtl-dce2[0m
               [1m-fdump-rtl-dce1 [22mand [1m-fdump-rtl-dce2 [22menable dumping after the two dead store elimination passes.

           [1m-fdump-rtl-eh[0m
               Dump after finalization of EH handling code.

           [1m-fdump-rtl-eh_ranges[0m
               Dump after conversion of EH handling range regions.

           [1m-fdump-rtl-expand[0m
               Dump after RTL generation.

           [1m-fdump-rtl-fwprop1[0m
           [1m-fdump-rtl-fwprop2[0m
               [1m-fdump-rtl-fwprop1 [22mand [1m-fdump-rtl-fwprop2 [22menable dumping after the two forward propagation passes.

           [1m-fdump-rtl-gcse1[0m
           [1m-fdump-rtl-gcse2[0m
               [1m-fdump-rtl-gcse1 [22mand [1m-fdump-rtl-gcse2 [22menable dumping after global common subexpression elimination.

           [1m-fdump-rtl-init-regs[0m
               Dump after the initialization of the registers.

           [1m-fdump-rtl-initvals[0m
               Dump after the computation of the initial value sets.

           [1m-fdump-rtl-into_cfglayout[0m
               Dump after converting to cfglayout mode.

           [1m-fdump-rtl-ira[0m
               Dump after iterated register allocation.

           [1m-fdump-rtl-jump[0m
               Dump after the second jump optimization.

           [1m-fdump-rtl-loop2[0m
               [1m-fdump-rtl-loop2 [22menables dumping after the rtl loop optimization passes.

           [1m-fdump-rtl-mach[0m
               Dump after performing the machine dependent reorganization pass, if that pass exists.

           [1m-fdump-rtl-mode_sw[0m
               Dump after removing redundant mode switches.

           [1m-fdump-rtl-rnreg[0m
               Dump after register renumbering.

           [1m-fdump-rtl-outof_cfglayout[0m
               Dump after converting from cfglayout mode.

           [1m-fdump-rtl-peephole2[0m
               Dump after the peephole pass.

           [1m-fdump-rtl-postreload[0m
               Dump after post-reload optimizations.

           [1m-fdump-rtl-pro_and_epilogue[0m
               Dump after generating the function prologues and epilogues.

           [1m-fdump-rtl-sched1[0m
           [1m-fdump-rtl-sched2[0m
               [1m-fdump-rtl-sched1 [22mand [1m-fdump-rtl-sched2 [22menable dumping after the basic block scheduling passes.

           [1m-fdump-rtl-ree[0m
               Dump after sign/zero extension elimination.

           [1m-fdump-rtl-seqabstr[0m
               Dump after common sequence discovery.

           [1m-fdump-rtl-shorten[0m
               Dump after shortening branches.

           [1m-fdump-rtl-sibling[0m
               Dump after sibling call optimizations.

           [1m-fdump-rtl-split1[0m
           [1m-fdump-rtl-split2[0m
           [1m-fdump-rtl-split3[0m
           [1m-fdump-rtl-split4[0m
           [1m-fdump-rtl-split5[0m
               These options enable dumping after five rounds of instruction splitting.

           [1m-fdump-rtl-sms[0m
               Dump after modulo scheduling.  This pass is only run on some architectures.

           [1m-fdump-rtl-stack[0m
               Dump  after  conversion  from  GCC's "flat register file" registers to the x87's stack-like registers.
               This pass is only run on x86 variants.

           [1m-fdump-rtl-subreg1[0m
           [1m-fdump-rtl-subreg2[0m
               [1m-fdump-rtl-subreg1 [22mand [1m-fdump-rtl-subreg2 [22menable dumping after the two subreg expansion passes.

           [1m-fdump-rtl-unshare[0m
               Dump after all rtl has been unshared.

           [1m-fdump-rtl-vartrack[0m
               Dump after variable tracking.

           [1m-fdump-rtl-vregs[0m
               Dump after converting virtual registers to hard registers.

           [1m-fdump-rtl-web[0m
               Dump after live range splitting.

           [1m-fdump-rtl-regclass[0m
           [1m-fdump-rtl-subregs_of_mode_init[0m
           [1m-fdump-rtl-subregs_of_mode_finish[0m
           [1m-fdump-rtl-dfinit[0m
           [1m-fdump-rtl-dfinish[0m
               These dumps are defined but always produce empty files.

           [1m-da[0m
           [1m-fdump-rtl-all[0m
               Produce all the dumps listed above.

           [1m-dA [22mAnnotate the assembler output with miscellaneous debugging information.

           [1m-dD [22mDump all macro definitions, at the end of preprocessing, in addition to normal output.

           [1m-dH [22mProduce a core dump whenever an error occurs.

           [1m-dp [22mAnnotate the assembler output with a comment indicating which pattern and alternative  is  used.   The
               length and cost of each instruction are also printed.

           [1m-dP [22mDump  the  RTL  in  the  assembler  output  as  a  comment before each instruction.  Also turns on [1m-dp[0m
               annotation.

           [1m-dx [22mJust generate RTL for a function instead of compiling it.  Usually used with [1m-fdump-rtl-expand[22m.

       [1m-fdump-debug[0m
           Dump debugging information generated during the debug generation phase.

       [1m-fdump-earlydebug[0m
           Dump debugging information generated during the early debug generation phase.

       [1m-fdump-noaddr[0m
           When doing debugging dumps, suppress address output.  This makes it more feasible to use diff on debugging
           dumps for compiler invocations with different compiler binaries and/or different text / bss / data /  heap
           / stack / dso start locations.

       [1m-freport-bug[0m
           Collect and dump debug information into a temporary file if an internal compiler error (ICE) occurs.

       [1m-fdump-unnumbered[0m
           When  doing debugging dumps, suppress instruction numbers and address output.  This makes it more feasible
           to use diff on debugging dumps for compiler invocations with different options,  in  particular  with  and
           without [1m-g[22m.

       [1m-fdump-unnumbered-links[0m
           When  doing  debugging  dumps  (see  [1m-d  [22moption  above), suppress instruction numbers for the links to the
           previous and next instructions in a sequence.

       [1m-fdump-ipa-[4m[22mswitch[0m
       [1m-fdump-ipa-[4m[22mswitch[24m[1m-[4m[22moptions[0m
           Control the dumping at various stages of inter-procedural analysis language tree to a file.  The file name
           is generated by appending a switch specific suffix to the source file name, and the file is created in the
           same directory as the output file.  The following dumps are possible:

           [1mall [22mEnables all inter-procedural analysis dumps.

           [1mcgraph[0m
               Dumps information about call-graph optimization, unused function removal, and inlining decisions.

           [1minline[0m
               Dump after function inlining.

           Additionally, the options [1m-optimized[22m, [1m-missed[22m, [1m-note[22m, and [1m-all [22mcan be provided, with the same  meaning  as
           for [1m-fopt-info[22m, defaulting to [1m-optimized[22m.

           For  example,  [1m-fdump-ipa-inline-optimized-missed  [22mwill  emit  information on callsites that were inlined,
           along with callsites that were not inlined.

           By default, the dump will contain messages  about  successful  optimizations  (equivalent  to  [1m-optimized[22m)
           together with low-level details about the analysis.

       [1m-fdump-lang[0m
           Dump language-specific information.  The file name is made by appending [4m.lang[24m to the source file name.

       [1m-fdump-lang-all[0m
       [1m-fdump-lang-[4m[22mswitch[0m
       [1m-fdump-lang-[4m[22mswitch[24m[1m-[4m[22moptions[0m
       [1m-fdump-lang-[4m[22mswitch[24m[1m-[4m[22moptions[24m[1m=[4m[22mfilename[0m
           Control  the  dumping  of  language-specific  information.   The  [4moptions[24m  and [4mfilename[24m portions behave as
           described in the [1m-fdump-tree [22moption.  The following [4mswitch[24m values are accepted:

           [1mall [22mEnable all language-specific dumps.

           [1mclass[0m
               Dump class hierarchy information.  Virtual table information is emitted unless  '[1mslim[22m'  is  specified.
               This option is applicable to C++ only.

           [1mmodule[0m
               Dump  module  information.   Options  [1mlineno [22m(locations), [1mgraph [22m(reachability), [1mblocks [22m(clusters), [1muid[0m
               (serialization), [1malias [22m(mergeable),  [1masmname  [22m(Elrond),  [1meh  [22m(mapper)  &  [1mvops  [22m(macros)  may  provide
               additional information.  This option is applicable to C++ only.

           [1mraw [22mDump the raw internal tree data.  This option is applicable to C++ only.

       [1m-fdump-passes[0m
           Print  on  [4mstderr[24m  the  list of optimization passes that are turned on and off by the current command-line
           options.

       [1m-fdump-statistics-[4m[22moption[0m
           Enable and control dumping of pass statistics in a separate file.  The file name is generated by appending
           a suffix ending in [1m.statistics [22mto the source file name, and the file is created in the same  directory  as
           the  output  file.   If  the  [1m-[4m[22moption[24m  form  is  used,  [1m-stats [22mcauses counters to be summed over the whole
           compilation unit while [1m-details [22mdumps every event as the passes generate them.  The default with no option
           is to sum counters for each function compiled.

       [1m-fdump-tree-all[0m
       [1m-fdump-tree-[4m[22mswitch[0m
       [1m-fdump-tree-[4m[22mswitch[24m[1m-[4m[22moptions[0m
       [1m-fdump-tree-[4m[22mswitch[24m[1m-[4m[22moptions[24m[1m=[4m[22mfilename[0m
           Control the dumping at various stages of processing the intermediate language tree  to  a  file.   If  the
           [1m-[4m[22moptions[24m  form  is  used,  [4moptions[24m is a list of [1m- [22mseparated options which control the details of the dump.
           Not all options are applicable to all dumps; those that are not meaningful  are  ignored.   The  following
           options are available

           [1maddress[0m
               Print  the  address  of  each  node.   Usually  this  is not meaningful as it changes according to the
               environment and source file.  Its primary use is for tying up a dump file with a debug environment.

           [1masmname[0m
               If "DECL_ASSEMBLER_NAME" has been set for a given decl, use that in the dump instead  of  "DECL_NAME".
               Its primary use is ease of use working backward from mangled names in the assembly file.

           [1mslim[0m
               When  dumping front-end intermediate representations, inhibit dumping of members of a scope or body of
               a function merely because that scope has been reached.  Only dump such items when  they  are  directly
               reachable by some other path.

               When dumping pretty-printed trees, this option inhibits dumping the bodies of control structures.

               When  dumping  RTL,  print  the  RTL  in  slim  (condensed)  form  instead  of  the  default LISP-like
               representation.

           [1mraw [22mPrint a raw representation  of  the  tree.   By  default,  trees  are  pretty-printed  into  a  C-like
               representation.

           [1mdetails[0m
               Enable  more  detailed  dumps  (not  honored  by every dump option). Also include information from the
               optimization passes.

           [1mstats[0m
               Enable dumping various statistics about the pass (not honored by every dump option).

           [1mblocks[0m
               Enable showing basic block boundaries (disabled in raw dumps).

           [1mgraph[0m
               For each of the other indicated dump files ([1m-fdump-rtl-[4m[22mpass[24m), dump a  representation  of  the  control
               flow  graph  suitable for viewing with GraphViz to [4mfile.passid.pass.dot[24m.  Each function in the file is
               pretty-printed as a subgraph, so that GraphViz can render them all in a single plot.

               This option currently only works for RTL dumps, and the RTL is always dumped in slim form.

           [1mvops[0m
               Enable showing virtual operands for every statement.

           [1mlineno[0m
               Enable showing line numbers for statements.

           [1muid [22mEnable showing the unique ID ("DECL_UID") for each variable.

           [1mverbose[0m
               Enable showing the tree dump for each statement.

           [1meh  [22mEnable showing the EH region number holding each statement.

           [1mscev[0m
               Enable showing scalar evolution analysis details.

           [1moptimized[0m
               Enable showing optimization information (only available in certain passes).

           [1mmissed[0m
               Enable showing missed optimization information (only available in certain passes).

           [1mnote[0m
               Enable other detailed optimization information (only available in certain passes).

           [1mall [22mTurn on all options, except [1mraw[22m, [1mslim[22m, [1mverbose [22mand [1mlineno[22m.

           [1moptall[0m
               Turn on all optimization options, i.e., [1moptimized[22m, [1mmissed[22m, and [1mnote[22m.

           To determine what tree dumps are available or find the dump for a pass of interest follow the steps below.

           1.  Invoke GCC with [1m-fdump-passes [22mand in the [4mstderr[24m output look for a code that corresponds  to  the  pass
               you are interested in.  For example, the codes "tree-evrp", "tree-vrp1", and "tree-vrp2" correspond to
               the three Value Range Propagation passes.  The number at the end distinguishes distinct invocations of
               the same pass.

           2.  To  enable the creation of the dump file, append the pass code to the [1m-fdump- [22moption prefix and invoke
               GCC with it.  For example, to enable the dump from the Early Value Range Propagation pass, invoke  GCC
               with  the  [1m-fdump-tree-evrp  [22moption.   Optionally,  you may specify the name of the dump file.  If you
               don't specify one, GCC creates as described below.

           3.  Find the pass dump in a file whose name is composed of three components separated  by  a  period:  the
               name  of  the  source  file  GCC  was  invoked to compile, a numeric suffix indicating the pass number
               followed by the letter [1mt [22mfor tree passes (and the letter [1mr [22mfor RTL passes), and finally the pass code.
               For example, the Early VRP pass dump might be in  a  file  named  [4mmyfile.c.038t.evrp[24m  in  the  current
               working  directory.  Note that the numeric codes are not stable and may change from one version of GCC
               to another.

       [1m-fopt-info[0m
       [1m-fopt-info-[4m[22moptions[0m
       [1m-fopt-info-[4m[22moptions[24m[1m=[4m[22mfilename[0m
           Controls optimization dumps from various optimization passes. If the [1m-[4m[22moptions[24m form is used, [4moptions[24m  is  a
           list of [1m- [22mseparated option keywords to select the dump details and optimizations.

           The [4moptions[24m can be divided into three groups:

           1.  options describing what kinds of messages should be emitted,

           2.  options describing the verbosity of the dump, and

           3.  options describing which optimizations should be included.

           The  options  from  each  group  can  be freely mixed as they are non-overlapping. However, in case of any
           conflicts, the later options override the earlier options on the command line.

           The following options control which kinds of messages should be emitted:

           [1moptimized[0m
               Print information when an optimization is successfully applied. It is up to a  pass  to  decide  which
               information  is  relevant. For example, the vectorizer passes print the source location of loops which
               are successfully vectorized.

           [1mmissed[0m
               Print information about missed optimizations. Individual passes control which information  to  include
               in the output.

           [1mnote[0m
               Print verbose information about optimizations, such as certain transformations, more detailed messages
               about decisions etc.

           [1mall [22mPrint detailed optimization information. This includes [1moptimized[22m, [1mmissed[22m, and [1mnote[22m.

           The following option controls the dump verbosity:

           [1minternals[0m
               By  default,  only  "high-level"  messages are emitted. This option enables additional, more detailed,
               messages, which are likely to only be of interest to GCC developers.

           One or more of the following option keywords can be used to describe a group of optimizations:

           [1mipa [22mEnable dumps from all interprocedural optimizations.

           [1mloop[0m
               Enable dumps from all loop optimizations.

           [1minline[0m
               Enable dumps from all inlining optimizations.

           [1momp [22mEnable dumps from all OMP (Offloading and Multi Processing) optimizations.

           [1mvec [22mEnable dumps from all vectorization optimizations.

           [1moptall[0m
               Enable dumps from all optimizations. This is a superset of the optimization groups listed above.

           If [4moptions[24m is omitted, it defaults to [1moptimized-optall[22m, which means  to  dump  messages  about  successful
           optimizations from all the passes, omitting messages that are treated as "internals".

           If  the  [4mfilename[24m  is provided, then the dumps from all the applicable optimizations are concatenated into
           the [4mfilename[24m.  Otherwise the dump is output onto [4mstderr[24m. Though multiple [1m-fopt-info [22moptions are  accepted,
           only  one  of  them  can  include  a [4mfilename[24m. If other filenames are provided then all but the first such
           option are ignored.

           Note that the output [4mfilename[24m is overwritten in case of multiple translation units. If a  combined  output
           from multiple translation units is desired, [4mstderr[24m should be used instead.

           In the following example, the optimization info is output to [4mstderr[24m:

                   gcc -O3 -fopt-info

           This example:

                   gcc -O3 -fopt-info-missed=missed.all

           outputs missed optimization report from all the passes into [4mmissed.all[24m, and this one:

                   gcc -O2 -ftree-vectorize -fopt-info-vec-missed

           prints information about missed optimization opportunities from vectorization passes on [4mstderr[24m.  Note that
           [1m-fopt-info-vec-missed  [22mis  equivalent to [1m-fopt-info-missed-vec[22m.  The order of the optimization group names
           and message types listed after [1m-fopt-info [22mdoes not matter.

           As another example,

                   gcc -O3 -fopt-info-inline-optimized-missed=inline.txt

           outputs information about missed optimizations as well as optimized locations from all the inlining passes
           into [4minline.txt[24m.

           Finally, consider:

                   gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt

           Here the two output filenames [4mvec.miss[24m and [4mloop.opt[24m are in conflict since only one output file is allowed.
           In this case, only the first option takes effect  and  the  subsequent  options  are  ignored.  Thus  only
           [4mvec.miss[24m is produced which contains dumps from the vectorizer about missed opportunities.

       [1m-fsave-optimization-record[0m
           Write   a   SRCFILE.opt-record.json.gz  file  detailing  what  optimizations  were  performed,  for  those
           optimizations that support [1m-fopt-info[22m.

           This option is experimental and the format of the data within the  compressed  JSON  file  is  subject  to
           change.

           It is roughly equivalent to a machine-readable version of [1m-fopt-info-all[22m, as a collection of messages with
           source file, line number and column number, with the following additional data for each message:

           *   the  execution  count  of  the  code  being optimized, along with metadata about whether this was from
               actual profile data, or just an estimate, allowing consumers to prioritize messages by code hotness,

           *   the function name of the code being optimized, where applicable,

           *   the "inlining chain" for the code being optimized, so that when a function  is  inlined  into  several
               different places (which might themselves be inlined), the reader can distinguish between the copies,

           *   objects  identifying  those parts of the message that refer to expressions, statements or symbol-table
               nodes, which of these categories they are, and, when available, their source code location,

           *   the GCC pass that emitted the message, and

           *   the location in GCC's own code from which the message was emitted

           Additionally, some messages are logically nested within other messages, reflecting implementation  details
           of the optimization passes.

       [1m-fsched-verbose=[4m[22mn[0m
           On  targets  that  use  instruction  scheduling,  this  option controls the amount of debugging output the
           scheduler prints to the dump files.

           For  [4mn[24m  greater  than  zero,  [1m-fsched-verbose  [22moutputs  the  same  information  as  [1m-fdump-rtl-sched1  [22mand
           [1m-fdump-rtl-sched2[22m.   For [4mn[24m greater than one, it also output basic block probabilities, detailed ready list
           information and unit/insn info.  For [4mn[24m greater than two, it includes RTL at abort point, control-flow  and
           regions info.  And for [4mn[24m over four, [1m-fsched-verbose [22malso includes dependence info.

       [1m-fenable-[4m[22mkind[24m[1m-[4m[22mpass[0m
       [1m-fdisable-[4m[22mkind[24m[1m-[4m[22mpass[24m[1m=[4m[22mrange-list[0m
           This  is  a  set of options that are used to explicitly disable/enable optimization passes.  These options
           are intended for use for debugging GCC.  Compiler users should use regular options for  enabling/disabling
           passes instead.

           [1m-fdisable-ipa-[4m[22mpass[0m
               Disable  IPA pass [4mpass[24m. [4mpass[24m is the pass name.  If the same pass is statically invoked in the compiler
               multiple times, the pass name should be appended with a sequential number starting from 1.

           [1m-fdisable-rtl-[4m[22mpass[0m
           [1m-fdisable-rtl-[4m[22mpass[24m[1m=[4m[22mrange-list[0m
               Disable RTL pass [4mpass[24m.  [4mpass[24m is the pass name.  If the same pass is statically invoked in the compiler
               multiple times, the pass name should be appended with a sequential number starting from 1.  [4mrange-list[0m
               is a comma-separated list of function ranges  or  assembler  names.   Each  range  is  a  number  pair
               separated  by a colon.  The range is inclusive in both ends.  If the range is trivial, the number pair
               can be simplified as a single number.  If the function's call graph node's [4muid[24m falls within one of the
               specified ranges, the [4mpass[24m is disabled for that function.  The [4muid[24m is shown in the function header  of
               a dump file, and the pass names can be dumped by using option [1m-fdump-passes[22m.

           [1m-fdisable-tree-[4m[22mpass[0m
           [1m-fdisable-tree-[4m[22mpass[24m[1m=[4m[22mrange-list[0m
               Disable tree pass [4mpass[24m.  See [1m-fdisable-rtl [22mfor the description of option arguments.

           [1m-fenable-ipa-[4m[22mpass[0m
               Enable  IPA pass [4mpass[24m.  [4mpass[24m is the pass name.  If the same pass is statically invoked in the compiler
               multiple times, the pass name should be appended with a sequential number starting from 1.

           [1m-fenable-rtl-[4m[22mpass[0m
           [1m-fenable-rtl-[4m[22mpass[24m[1m=[4m[22mrange-list[0m
               Enable RTL pass [4mpass[24m.  See [1m-fdisable-rtl [22mfor option argument description and examples.

           [1m-fenable-tree-[4m[22mpass[0m
           [1m-fenable-tree-[4m[22mpass[24m[1m=[4m[22mrange-list[0m
               Enable tree pass [4mpass[24m.  See [1m-fdisable-rtl [22mfor the description of option arguments.

           Here are some examples showing uses of these options.

                   # disable ccp1 for all functions
                      -fdisable-tree-ccp1
                   # disable complete unroll for function whose cgraph node uid is 1
                      -fenable-tree-cunroll=1
                   # disable gcse2 for functions at the following ranges [1,1],
                   # [300,400], and [400,1000]
                   # disable gcse2 for functions foo and foo2
                      -fdisable-rtl-gcse2=foo,foo2
                   # disable early inlining
                      -fdisable-tree-einline
                   # disable ipa inlining
                      -fdisable-ipa-inline
                   # enable tree full unroll
                      -fenable-tree-unroll

       [1m-fchecking[0m
       [1m-fchecking=[4m[22mn[0m
           Enable internal consistency checking.  The default depends on the  compiler  configuration.   [1m-fchecking=2[0m
           enables further internal consistency checking that might affect code generation.

       [1m-frandom-seed=[4m[22mstring[0m
           This  option  provides  a seed that GCC uses in place of random numbers in generating certain symbol names
           that have to be different in every compiled file.  It is also used to place unique stamps in coverage data
           files and the object  files  that  produce  them.   You  can  use  the  [1m-frandom-seed  [22moption  to  produce
           reproducibly identical object files.

           The  [4mstring[24m  can  either  be  a  number (decimal, octal or hex) or an arbitrary string (in which case it's
           converted to a number by computing CRC32).

           The [4mstring[24m should be different for every file you compile.

       [1m-save-temps[0m
           Store the usual "temporary" intermediate files permanently;  name  them  as  auxiliary  output  files,  as
           specified described under [1m-dumpbase [22mand [1m-dumpdir[22m.

           When  used  in  combination  with  the  [1m-x  [22mcommand-line  option,  [1m-save-temps [22mis sensible enough to avoid
           overwriting an input source file with the same extension  as  an  intermediate  file.   The  corresponding
           intermediate file may be obtained by renaming the source file before using [1m-save-temps[22m.

       [1m-save-temps=cwd[0m
           Equivalent to [1m-save-temps -dumpdir ./[22m.

       [1m-save-temps=obj[0m
           Equivalent  to  [1m-save-temps  -dumpdir [4moutdir/[24m[22m, where [4moutdir/[24m is the directory of the output file specified
           after  the  [1m-o  [22moption,  including  any  directory  separators.   If  the  [1m-o  [22moption  is  not  used,  the
           [1m-save-temps=obj [22mswitch behaves like [1m-save-temps=cwd[22m.

       [1m-time[22m[[1m=[4m[22mfile[24m]
           Report the CPU time taken by each subprocess in the compilation sequence.  For C source files, this is the
           compiler proper and assembler (plus the linker if linking is done).

           Without the specification of an output file, the output looks like this:

                   # cc1 0.12 0.01
                   # as 0.00 0.01

           The  first  number  on each line is the "user time", that is time spent executing the program itself.  The
           second number is "system time", time spent executing operating system routines on behalf of  the  program.
           Both numbers are in seconds.

           With  the  specification  of  an  output file, the output is appended to the named file, and it looks like
           this:

                   0.12 0.01 cc1 <options>
                   0.00 0.01 as <options>

           The "user time" and the "system time" are moved before the program name, and the  options  passed  to  the
           program are displayed, so that one can later tell what file was being compiled, and with which options.

       [1m-fdump-final-insns[22m[[1m=[4m[22mfile[24m]
           Dump  the final internal representation (RTL) to [4mfile[24m.  If the optional argument is omitted (or if [4mfile[24m is
           "."), the name of the dump file is determined by appending ".gkd" to the dump base name, see [1m-dumpbase[22m.

       [1m-fcompare-debug[22m[[1m=[4m[22mopts[24m]
           If  no  error  occurs  during  compilation,  run  the  compiler   a   second   time,   adding   [4mopts[24m   and
           [1m-fcompare-debug-second  [22mto  the  arguments  passed  to  the  second  compilation.  Dump the final internal
           representation in both compilations, and print an error if they differ.

           If the equal sign is omitted, the default [1m-gtoggle [22mis used.

           The environment  variable  [1mGCC_COMPARE_DEBUG[22m,  if  defined,  non-empty  and  nonzero,  implicitly  enables
           [1m-fcompare-debug[22m.   If  [1mGCC_COMPARE_DEBUG  [22mis defined to a string starting with a dash, then it is used for
           [4mopts[24m, otherwise the default [1m-gtoggle [22mis used.

           [1m-fcompare-debug=[22m, with the equal sign  but  without  [4mopts[24m,  is  equivalent  to  [1m-fno-compare-debug[22m,  which
           disables   the   dumping  of  the  final  representation  and  the  second  compilation,  preventing  even
           [1mGCC_COMPARE_DEBUG [22mfrom taking effect.

           To   verify   full   coverage   during   [1m-fcompare-debug   [22mtesting,   set   [1mGCC_COMPARE_DEBUG    [22mto    say
           [1m-fcompare-debug-not-overridden[22m,  which  GCC rejects as an invalid option in any actual compilation (rather
           than  preprocessing,  assembly  or  linking).   To  get  just  a  warning,  setting  [1mGCC_COMPARE_DEBUG  [22mto
           [1m-w%n-fcompare-debug not overridden [22mwill do.

       [1m-fcompare-debug-second[0m
           This  option is implicitly passed to the compiler for the second compilation requested by [1m-fcompare-debug[22m,
           along with options to silence warnings, and omitting other  options  that  would  cause  the  compiler  to
           produce  output to files or to standard output as a side effect.  Dump files and preserved temporary files
           are renamed so as to contain the ".gk" additional  extension  during  the  second  compilation,  to  avoid
           overwriting those generated by the first.

           When  this  option  is passed to the compiler driver, it causes the [4mfirst[24m compilation to be skipped, which
           makes it useful for little other than debugging the compiler proper.

       [1m-gtoggle[0m
           Turn off generation of debug info, if leaving out this option generates it, or  turn  it  on  at  level  2
           otherwise.   The  position of this argument in the command line does not matter; it takes effect after all
           other options are processed, and it does so only once, no matter how many times  it  is  given.   This  is
           mainly intended to be used with [1m-fcompare-debug[22m.

       [1m-fvar-tracking-assignments-toggle[0m
           Toggle [1m-fvar-tracking-assignments[22m, in the same way that [1m-gtoggle [22mtoggles [1m-g[22m.

       [1m-Q  [22mMakes  the  compiler  print out each function name as it is compiled, and print some statistics about each
           pass when it finishes.

       [1m-ftime-report[0m
           Makes the compiler print some statistics about the time consumed by each pass when it finishes.

       [1m-ftime-report-details[0m
           Record the time consumed by infrastructure parts separately for each pass.

       [1m-fira-verbose=[4m[22mn[0m
           Control the verbosity of the dump file for the integrated register allocator.  The default value is 5.  If
           the value [4mn[24m is greater or equal to 10, the dump output is sent to stderr using the same format as [4mn[24m  minus
           10.

       [1m-flto-report[0m
           Prints  a  report  with internal details on the workings of the link-time optimizer.  The contents of this
           report vary from version to version.  It is meant to be useful to GCC developers  when  processing  object
           files in LTO mode (via [1m-flto[22m).

           Disabled by default.

       [1m-flto-report-wpa[0m
           Like [1m-flto-report[22m, but only print for the WPA phase of link-time optimization.

       [1m-fmem-report[0m
           Makes the compiler print some statistics about permanent memory allocation when it finishes.

       [1m-fmem-report-wpa[0m
           Makes the compiler print some statistics about permanent memory allocation for the WPA phase only.

       [1m-fpre-ipa-mem-report[0m
       [1m-fpost-ipa-mem-report[0m
           Makes the compiler print some statistics about permanent memory allocation before or after interprocedural
           optimization.

       [1m-fmultiflags[0m
           This  option  enables  multilib-aware "TFLAGS" to be used to build target libraries with options different
           from those the compiler is configured to use by default, through the use of specs

           Like "TFLAGS", this allows the target libraries to be built for portable baseline environments, while  the
           compiler  defaults  to  more demanding ones.  That's useful because users can easily override the defaults
           the compiler is configured to use to build their own programs, if the defaults are  not  ideal  for  their
           target environment, whereas rebuilding the runtime libraries is usually not as easy or desirable.

           Unlike "TFLAGS", the use of specs enables different flags to be selected for different multilibs.  The way
           to    accomplish    that    is    to    build    with    [1mmake   TFLAGS=-fmultiflags[22m,   after   configuring
           [1m--with-specs=%{fmultiflags:...}[22m.

           This option is discarded by the driver once it's done processing driver self spec.

           It is also useful to check that "TFLAGS" are being used to build all target libraries,  by  configuring  a
           non-bootstrap  compiler  [1m--with-specs='%{!fmultiflags:%emissing  TFLAGS}'  [22mand  building  the compiler and
           target libraries.

       [1m-fprofile-report[0m
           Makes the compiler print some statistics about consistency  of  the  (estimated)  profile  and  effect  of
           individual passes.

       [1m-fstack-usage[0m
           Makes  the compiler output stack usage information for the program, on a per-function basis.  The filename
           for the dump is made by appending [4m.su[24m to the [4mauxname[24m.  [4mauxname[24m is generated from the name  of  the  output
           file,  if  explicitly  specified  and  it is not an executable, otherwise it is the basename of the source
           file.  An entry is made up of three fields:

           *   The name of the function.

           *   A number of bytes.

           *   One or more qualifiers: "static", "dynamic", "bounded".

           The qualifier "static" means that the function manipulates the stack statically: a fixed number  of  bytes
           are  allocated  for  the  frame  on function entry and released on function exit; no stack adjustments are
           otherwise made in the function.  The second field is this fixed number of bytes.

           The qualifier "dynamic" means that the function manipulates the stack  dynamically:  in  addition  to  the
           static  allocation described above, stack adjustments are made in the body of the function, for example to
           push/pop arguments around function calls.  If the qualifier "bounded" is also present, the amount of these
           adjustments is bounded at compile time and the second field is an upper bound of the total amount of stack
           used by the function.  If it is not present, the amount of these adjustments is  not  bounded  at  compile
           time and the second field only represents the bounded part.

       [1m-fstats[0m
           Emit  statistics  about front-end processing at the end of the compilation.  This option is supported only
           by the C++ front end, and the information is generally only useful to the G++ development team.

       [1m-fdbg-cnt-list[0m
           Print the name and the counter upper bound for all debug counters.

       [1m-fdbg-cnt=[4m[22mcounter-value-list[0m
           Set the internal debug counter lower and upper bound.  [4mcounter-value-list[24m is  a  comma-separated  list  of
           [4mname[24m:[4mlower_bound1[24m-[4mupper_bound1[24m  [:[4mlower_bound2[24m-[4mupper_bound2[24m...]  tuples which sets the name of the counter
           and list of closed intervals.  The [4mlower_bound[24m is optional and  is  zero  initialized  if  not  set.   For
           example,  with  [1m-fdbg-cnt=dce:2-4:10-11,tail_call:10[22m,  dbg_cnt(dce)  returns  true only for second, third,
           fourth, tenth and eleventh invocation.  For dbg_cnt(tail_call) true is returned for first 10 invocations.

       [1m-print-file-name=[4m[22mlibrary[0m
           Print the full absolute name of the library file [4mlibrary[24m that would be used when  linking---and  don't  do
           anything else.  With this option, GCC does not compile or link anything; it just prints the file name.

       [1m-print-multi-directory[0m
           Print  the  directory  name  corresponding  to  the multilib selected by any other switches present in the
           command line.  This directory is supposed to exist in [1mGCC_EXEC_PREFIX[22m.

       [1m-print-multi-lib[0m
           Print the mapping from multilib directory names to compiler switches that enable them.  The directory name
           is separated from the switches by [1m;[22m, and each switch starts with an [1m@ [22minstead of  the  [1m-[22m,  without  spaces
           between multiple switches.  This is supposed to ease shell processing.

       [1m-print-multi-os-directory[0m
           Print  the  path  to  OS  libraries  for  the selected multilib, relative to some [4mlib[24m subdirectory.  If OS
           libraries are present in the [4mlib[24m subdirectory and no multilibs are used, this is usually  just  [4m.[24m,  if  OS
           libraries  are  present in [4mlibsuffix[24m sibling directories this prints e.g. [4m../lib64[24m, [4m../lib[24m or [4m../lib32[24m, or
           if OS libraries are present in [4mlib/subdir[24m subdirectories it prints e.g. [4mamd64[24m, [4msparcv9[24m or [4mev6[24m.

       [1m-print-multiarch[0m
           Print the path to OS libraries for the selected multiarch, relative to some [4mlib[24m subdirectory.

       [1m-print-prog-name=[4m[22mprogram[0m
           Like [1m-print-file-name[22m, but searches for a program such as [1mcpp[22m.

       [1m-print-libgcc-file-name[0m
           Same as [1m-print-file-name=libgcc.a[22m.

           This is useful when you use [1m-nostdlib [22mor [1m-nodefaultlibs [22mbut you do want to link with  [4mlibgcc.a[24m.   You  can
           do:

                   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`

       [1m-print-search-dirs[0m
           Print  the name of the configured installation directory and a list of program and library directories [1mgcc[0m
           searches---and don't do anything else.

           This is useful when [1mgcc [22mprints the error message [1minstallation problem, cannot exec cpp0: No such  file  or[0m
           [1mdirectory[22m.   To  resolve  this  you  either  need  to put [4mcpp0[24m and the other compiler components where [1mgcc[0m
           expects to find them, or you can set the environment variable [1mGCC_EXEC_PREFIX [22mto the directory  where  you
           installed them.  Don't forget the trailing [1m/[22m.

       [1m-print-sysroot[0m
           Print  the target sysroot directory that is used during compilation.  This is the target sysroot specified
           either at configure time or using the [1m--sysroot [22moption, possibly with an  extra  suffix  that  depends  on
           compilation options.  If no target sysroot is specified, the option prints nothing.

       [1m-print-sysroot-headers-suffix[0m
           Print  the suffix added to the target sysroot when searching for headers, or give an error if the compiler
           is not configured with such a suffix---and don't do anything else.

       [1m-dumpmachine[0m
           Print the compiler's target machine (for example, [1mi686-pc-linux-gnu[22m)---and don't do anything else.

       [1m-dumpversion[0m
           Print the compiler version (for example, 3.0, 6.3.0 or 7)---and don't  do  anything  else.   This  is  the
           compiler  version used in filesystem paths and specs. Depending on how the compiler has been configured it
           can be just a single number (major version), two numbers separated by a dot (major and minor  version)  or
           three numbers separated by dots (major, minor and patchlevel version).

       [1m-dumpfullversion[0m
           Print the full compiler version---and don't do anything else. The output is always three numbers separated
           by dots, major, minor and patchlevel version.

       [1m-dumpspecs[0m
           Print  the compiler's built-in specs---and don't do anything else.  (This is used when GCC itself is being
           built.)

   [1mMachine-Dependent Options[0m
       Each target machine supported by GCC can have its own options---for example, to allow you  to  compile  for  a
       particular processor variant or ABI, or to control optimizations specific to that machine.  By convention, the
       names of machine-specific options start with [1m-m[22m.

       Some configurations of the compiler also support additional target-specific options, usually for compatibility
       with other compilers on the same platform.

       [4mAArch64[24m [4mOptions[0m

       These options are defined for AArch64 implementations:

       [1m-mabi=[4m[22mname[0m
           Generate  code  for the specified data model.  Permissible values are [1milp32 [22mfor SysV-like data model where
           int, long int and pointers are 32 bits, and [1mlp64 [22mfor SysV-like data model where int is 32 bits,  but  long
           int and pointers are 64 bits.

           The default depends on the specific target configuration.  Note that the LP64 and ILP32 ABIs are not link-
           compatible;  you  must  compile  your  entire program with the same ABI, and link with a compatible set of
           libraries.

       [1m-mbig-endian[0m
           Generate big-endian code.  This is the default when GCC is configured for an [1maarch64_be-*-* [22mtarget.

       [1m-mgeneral-regs-only[0m
           Generate code which uses only the general-purpose registers.  This will prevent the  compiler  from  using
           floating-point and Advanced SIMD registers but will not impose any restrictions on the assembler.

       [1m-mlittle-endian[0m
           Generate  little-endian  code.   This  is the default when GCC is configured for an [1maarch64-*-* [22mbut not an
           [1maarch64_be-*-* [22mtarget.

       [1m-mcmodel=tiny[0m
           Generate code for the tiny code model.  The program and its statically defined symbols must be within  1MB
           of each other.  Programs can be statically or dynamically linked.

       [1m-mcmodel=small[0m
           Generate code for the small code model.  The program and its statically defined symbols must be within 4GB
           of each other.  Programs can be statically or dynamically linked.  This is the default code model.

       [1m-mcmodel=large[0m
           Generate  code for the large code model.  This makes no assumptions about addresses and sizes of sections.
           Programs can be statically linked only.  The [1m-mcmodel=large [22moption is incompatible with [1m-mabi=ilp32[22m, [1m-fpic[0m
           and [1m-fPIC[22m.

       [1m-mstrict-align[0m
       [1m-mno-strict-align[0m
           Avoid or allow generating memory accesses that may  not  be  aligned  on  a  natural  object  boundary  as
           described in the architecture specification.

       [1m-momit-leaf-frame-pointer[0m
       [1m-mno-omit-leaf-frame-pointer[0m
           Omit or keep the frame pointer in leaf functions.  The former behavior is the default.

       [1m-mstack-protector-guard=[4m[22mguard[0m
       [1m-mstack-protector-guard-reg=[4m[22mreg[0m
       [1m-mstack-protector-guard-offset=[4m[22moffset[0m
           Generate  stack protection code using canary at [4mguard[24m.  Supported locations are [1mglobal [22mfor a global canary
           or [1msysreg [22mfor a canary in an appropriate system register.

           With      the      latter      choice      the      options      [1m-mstack-protector-guard-reg=[4m[22mreg[24m       and
           [1m-mstack-protector-guard-offset=[4m[22moffset[24m  furthermore  specify  which system register to use as base register
           for reading the canary, and from what offset from that base register. There  is  no  default  register  or
           offset as this is entirely for use within the Linux kernel.

       [1m-mtls-dialect=desc[0m
           Use  TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables.  This is
           the default.

       [1m-mtls-dialect=traditional[0m
           Use traditional TLS as the thread-local storage mechanism for dynamic accesses of TLS variables.

       [1m-mtls-size=[4m[22msize[0m
           Specify bit size of immediate TLS offsets.  Valid values  are  12,  24,  32,  48.   This  option  requires
           binutils 2.26 or newer.

       [1m-mfix-cortex-a53-835769[0m
       [1m-mno-fix-cortex-a53-835769[0m
           Enable  or disable the workaround for the ARM Cortex-A53 erratum number 835769.  This involves inserting a
           NOP instruction between memory instructions and 64-bit integer multiply-accumulate instructions.

       [1m-mfix-cortex-a53-843419[0m
       [1m-mno-fix-cortex-a53-843419[0m
           Enable or disable the workaround for the ARM Cortex-A53 erratum number 843419.  This erratum workaround is
           made at link time and this will only pass the corresponding flag to the linker.

       [1m-mlow-precision-recip-sqrt[0m
       [1m-mno-low-precision-recip-sqrt[0m
           Enable or disable the reciprocal square root approximation.  This option only has an effect if [1m-ffast-math[0m
           or [1m-funsafe-math-optimizations [22mis used as well.  Enabling this reduces precision of reciprocal square root
           results to about 16 bits for single precision and to 32 bits for double precision.

       [1m-mlow-precision-sqrt[0m
       [1m-mno-low-precision-sqrt[0m
           Enable or disable the square root approximation.  This  option  only  has  an  effect  if  [1m-ffast-math  [22mor
           [1m-funsafe-math-optimizations  [22mis  used  as well.  Enabling this reduces precision of square root results to
           about 16 bits for single precision  and  to  32  bits  for  double  precision.   If  enabled,  it  implies
           [1m-mlow-precision-recip-sqrt[22m.

       [1m-mlow-precision-div[0m
       [1m-mno-low-precision-div[0m
           Enable  or  disable  the  division  approximation.   This  option  only  has  an  effect if [1m-ffast-math [22mor
           [1m-funsafe-math-optimizations [22mis used as well.  Enabling this reduces precision of division results to about
           16 bits for single precision and to 32 bits for double precision.

       [1m-mtrack-speculation[0m
       [1m-mno-track-speculation[0m
           Enable or disable generation of  additional  code  to  track  speculative  execution  through  conditional
           branches.    The   tracking   state   can   then   be  used  by  the  compiler  when  expanding  calls  to
           "__builtin_speculation_safe_copy" to permit a more efficient code sequence to be generated.

       [1m-moutline-atomics[0m
       [1m-mno-outline-atomics[0m
           Enable or disable calls to out-of-line helpers to implement atomic operations.   These  helpers  will,  at
           runtime,  determine  if  the  LSE  instructions  from  ARMv8.1-A  can  be  used; if not, they will use the
           load/store-exclusive instructions that are present in the base ARMv8.0 ISA.

           This option is only applicable when compiling for the base ARMv8.0 instruction  set.   If  using  a  later
           revision,  e.g.  [1m-march=armv8.1-a  [22mor  [1m-march=armv8-a+lse[22m,  the  ARMv8.1-Atomics instructions will be used
           directly.  The same applies when using [1m-mcpu= [22mwhen the selected cpu supports the [1mlse [22mfeature.  This option
           is on by default.

       [1m-march=[4m[22mname[0m
           Specify the name of the target architecture and, optionally, one or more feature modifiers.   This  option
           has the form [1m-march=[4m[22march[24m{[1m+[22m[[1mno[22m][4mfeature[24m}*.

           The table below summarizes the permissible values for [4march[24m and the features that they enable by default:

           [4march[24m [4mvalue[24m : [4mArchitecture[24m : [4mIncludes[24m [4mby[24m [4mdefault[0m
           [1marmv8-a [22m: Armv8-A : [1m+fp[22m, [1m+simd[0m
           [1marmv8.1-a [22m: Armv8.1-A : [1marmv8-a[22m, [1m+crc[22m, [1m+lse[22m, [1m+rdma[0m
           [1marmv8.2-a [22m: Armv8.2-A : [1marmv8.1-a[0m
           [1marmv8.3-a [22m: Armv8.3-A : [1marmv8.2-a[22m, [1m+pauth[0m
           [1marmv8.4-a [22m: Armv8.4-A : [1marmv8.3-a[22m, [1m+flagm[22m, [1m+fp16fml[22m, [1m+dotprod[0m
           [1marmv8.5-a [22m: Armv8.5-A : [1marmv8.4-a[22m, [1m+sb[22m, [1m+ssbs[22m, [1m+predres[0m
           [1marmv8.6-a [22m: Armv8.6-A : [1marmv8.5-a[22m, [1m+bf16[22m, [1m+i8mm[0m
           [1marmv8.7-a [22m: Armv8.7-A : [1marmv8.6-a[22m, [1m+ls64[0m
           [1marmv8.8-a [22m: Armv8.8-a : [1marmv8.7-a[22m, [1m+mops[0m
           [1marmv9-a [22m: Armv9-A : [1marmv8.5-a[22m, [1m+sve[22m, [1m+sve2[0m
           [1marmv9.1-a [22m: Armv9.1-A : [1marmv9-a[22m, [1m+bf16[22m, [1m+i8mm[0m
           [1marmv9.2-a [22m: Armv9.2-A : [1marmv9.1-a[22m, [1m+ls64[0m
           [1marmv9.3-a [22m: Armv9.3-A : [1marmv9.2-a[22m, [1m+mops[0m
           [1marmv8-r [22m: Armv8-R : [1marmv8-r[0m

           The value [1mnative [22mis available on native AArch64 GNU/Linux and causes the compiler to pick the architecture
           of  the host system.  This option has no effect if the compiler is unable to recognize the architecture of
           the host system,

           The permissible values for [4mfeature[24m are listed in the sub-section on [1maarch64-feature-modifiers,,-march  and[0m
           [1m-mcpu  Feature  Modifiers[22m.   Where  conflicting feature modifiers are specified, the right-most feature is
           used.

           GCC uses [4mname[24m to determine what kind of instructions it can emit when generating assembly code.  If [1m-march[0m
           is specified without either of [1m-mtune [22mor [1m-mcpu [22malso being specified, the code is  tuned  to  perform  well
           across a range of target processors implementing the target architecture.

       [1m-mtune=[4m[22mname[0m
           Specify  the  name  of  the  target  processor  for  which  GCC  should  tune the performance of the code.
           Permissible  values  for  this  option  are:  [1mgeneric[22m,  [1mcortex-a35[22m,  [1mcortex-a53[22m,  [1mcortex-a55[22m,  [1mcortex-a57[22m,
           [1mcortex-a72[22m,  [1mcortex-a73[22m,  [1mcortex-a75[22m,  [1mcortex-a76[22m,  [1mcortex-a76ae[22m,  [1mcortex-a77[22m,  [1mcortex-a65[22m,  [1mcortex-a65ae[22m,
           [1mcortex-a34[22m,  [1mcortex-a78[22m,  [1mcortex-a78ae[22m,  [1mcortex-a78c[22m,  [1mares[22m,  [1mexynos-m1[22m,  [1memag[22m,  [1mfalkor[22m,  [1mneoverse-512tvb[22m,
           [1mneoverse-e1[22m, [1mneoverse-n1[22m, [1mneoverse-n2[22m, [1mneoverse-v1[22m, [1mneoverse-v2[22m, [1mqdf24xx[22m, [1msaphira[22m, [1mphecda[22m, [1mxgene1[22m, [1mvulcan[22m,
           [1mocteontx[22m,  [1mocteontx81[22m,   [1mocteontx83[22m,  [1mocteontx2[22m,  [1mocteontx2t98[22m,  [1mocteontx2t96  octeontx2t93[22m, [1mocteontx2f95[22m,
           [1mocteontx2f95n[22m,  [1mocteontx2f95mm[22m,  [1ma64fx[22m,  [1mthunderx[22m,  [1mthunderxt88[22m,   [1mthunderxt88p1[22m,   [1mthunderxt81[22m,   [1mtsv110[22m,
           [1mthunderxt83[22m,    [1mthunderx2t99[22m,    [1mthunderx3t110[22m,    [1mzeus[22m,   [1mcortex-a57.cortex-a53[22m,   [1mcortex-a72.cortex-a53[22m,
           [1mcortex-a73.cortex-a35[22m, [1mcortex-a73.cortex-a53[22m,  [1mcortex-a75.cortex-a55[22m,  [1mcortex-a76.cortex-a55[22m,  [1mcortex-r82[22m,
           [1mcortex-x1[22m, [1mcortex-x1c[22m, [1mcortex-x2[22m, [1mcortex-x3[22m, [1mcortex-a510[22m, [1mcortex-a710[22m, [1mcortex-a715[22m, [1mampere1[22m, [1mampere1a[22m, and
           [1mnative[22m.

           The  values  [1mcortex-a57.cortex-a53[22m,  [1mcortex-a72.cortex-a53[22m,  [1mcortex-a73.cortex-a35[22m, [1mcortex-a73.cortex-a53[22m,
           [1mcortex-a75.cortex-a55[22m, [1mcortex-a76.cortex-a55 [22mspecify that GCC should tune for a big.LITTLE system.

           The value [1mneoverse-512tvb [22mspecifies that GCC should tune for Neoverse cores that (a) implement SVE and (b)
           have a total vector bandwidth of 512 bits per cycle.  In other words, the option tells  GCC  to  tune  for
           Neoverse  cores  that  can  execute  4  128-bit Advanced SIMD arithmetic instructions a cycle and that can
           execute an equivalent number of SVE arithmetic instructions per cycle (2 for 256-bit SVE,  4  for  128-bit
           SVE).  This is more general than tuning for a specific core like Neoverse V1 but is more specific than the
           default tuning described below.

           Additionally  on  native  AArch64 GNU/Linux systems the value [1mnative [22mtunes performance to the host system.
           This option has no effect if the compiler is unable to recognize the processor of the host system.

           Where none of [1m-mtune=[22m, [1m-mcpu= [22mor [1m-march= [22mare specified, the code is tuned to perform well across  a  range
           of target processors.

           This option cannot be suffixed by feature modifiers.

       [1m-mcpu=[4m[22mname[0m
           Specify  the  name  of  the  target processor, optionally suffixed by one or more feature modifiers.  This
           option has the form [1m-mcpu=[4m[22mcpu[24m{[1m+[22m[[1mno[22m][4mfeature[24m}*, where the permissible values for [4mcpu[24m are the same  as  those
           available  for  [1m-mtune[22m.   The  permissible  values  for  [4mfeature[24m  are  documented  in  the  sub-section on
           [1maarch64-feature-modifiers,,-march and -mcpu Feature Modifiers[22m.  Where conflicting  feature  modifiers  are
           specified, the right-most feature is used.

           GCC  uses  [4mname[24m to determine what kind of instructions it can emit when generating assembly code (as if by
           [1m-march[22m) and to determine the target processor for which to tune for performance (as if by [1m-mtune[22m).   Where
           this  option  is  used  in  conjunction  with  [1m-march  [22mor  [1m-mtune[22m,  those options take precedence over the
           appropriate part of this option.

           [1m-mcpu=neoverse-512tvb [22mis special in that it does not refer to a specific core, but instead refers  to  all
           Neoverse  cores  that (a) implement SVE and (b) have a total vector bandwidth of 512 bits a cycle.  Unless
           overridden by [1m-march[22m, [1m-mcpu=neoverse-512tvb [22mgenerates code that can run  on  a  Neoverse  V1  core,  since
           Neoverse   V1   is  the  first  Neoverse  core  with  these  properties.   Unless  overridden  by  [1m-mtune[22m,
           [1m-mcpu=neoverse-512tvb [22mtunes code in the same way as for [1m-mtune=neoverse-512tvb[22m.

       [1m-moverride=[4m[22mstring[0m
           Override tuning decisions made by the back-end in response to a [1m-mtune= [22mswitch.   The  syntax,  semantics,
           and accepted values for [4mstring[24m in this option are not guaranteed to be consistent across releases.

           This option is only intended to be useful when developing GCC.

       [1m-mverbose-cost-dump[0m
           Enable  verbose  cost model dumping in the debug dump files.  This option is provided for use in debugging
           the compiler.

       [1m-mpc-relative-literal-loads[0m
       [1m-mno-pc-relative-literal-loads[0m
           Enable or disable PC-relative literal loads.  With this option literal pools are accessed using  a  single
           instruction  and  emitted after each function.  This limits the maximum size of functions to 1MB.  This is
           enabled by default for [1m-mcmodel=tiny[22m.

       [1m-msign-return-address=[4m[22mscope[0m
           Select the function scope on which return address signing will be applied.  Permissible values  are  [1mnone[22m,
           which disables return address signing, [1mnon-leaf[22m, which enables pointer signing for functions which are not
           leaf functions, and [1mall[22m, which enables pointer signing for all functions.  The default value is [1mnone[22m. This
           option has been deprecated by -mbranch-protection.

       [1m-mbranch-protection=[4m[22mnone[24m[1m|[4m[22mstandard[24m[1m|[4m[22mpac-ret[24m[1m[+[4m[22mleaf[24m[1m+[4m[22mb-key[24m[1m]|[4m[22mbti[0m
           Select  the  branch  protection  features  to  use.  [1mnone [22mis the default and turns off all types of branch
           protection.  [1mstandard [22mturns on all types of branch protection  features.   If  a  feature  has  additional
           tuning  options,  then  [1mstandard  [22msets  it  to its standard level.  [1mpac-ret[+[4m[22mleaf[24m[1m] [22mturns on return address
           signing to its standard level: signing  functions  that  save  the  return  address  to  memory  (non-leaf
           functions  will  practically  always  do this) using the a-key.  The optional argument [1mleaf [22mcan be used to
           extend the signing to include leaf functions.  The optional  argument  [1mb-key  [22mcan  be  used  to  sign  the
           functions with the B-key instead of the A-key.  [1mbti [22mturns on branch target identification mechanism.

       [1m-mharden-sls=[4m[22mopts[0m
           Enable  compiler hardening against straight line speculation (SLS).  [4mopts[24m is a comma-separated list of the
           following options:

           [1mretbr[0m
           [1mblr[0m

           In addition,  [1m-mharden-sls=all  [22menables  all  SLS  hardening  while  [1m-mharden-sls=none  [22mdisables  all  SLS
           hardening.

       [1m-msve-vector-bits=[4m[22mbits[0m
           Specify the number of bits in an SVE vector register.  This option only has an effect when SVE is enabled.

           GCC supports two forms of SVE code generation: "vector-length agnostic" output that works with any size of
           vector  register  and "vector-length specific" output that allows GCC to make assumptions about the vector
           length when it is useful for optimization reasons.  The possible values of [1mbits [22mare: [1mscalable[22m,  [1m128[22m,  [1m256[22m,
           [1m512[22m,   [1m1024   [22mand   [1m2048[22m.    Specifying  [1mscalable  [22mselects  vector-length  agnostic  output.   At  present
           [1m-msve-vector-bits=128 [22malso generates vector-length agnostic output  for  big-endian  targets.   All  other
           values  generate  vector-length specific code.  The behavior of these values may change in future releases
           and no value except [1mscalable [22mshould be relied on for producing code  that  is  portable  across  different
           hardware SVE vector lengths.

           The default is [1m-msve-vector-bits=scalable[22m, which produces vector-length agnostic code.

       [1m-march [22mand [1m-mcpu [22mFeature Modifiers

       Feature modifiers used with [1m-march [22mand [1m-mcpu [22mcan be any of the following and their inverses [1mno[4m[22mfeature[24m:

       [1mcrc [22mEnable CRC extension.  This is on by default for [1m-march=armv8.1-a[22m.

       [1mcrypto[0m
           Enable Crypto extension.  This also enables Advanced SIMD and floating-point instructions.

       [1mfp  [22mEnable  floating-point instructions.  This is on by default for all possible values for options [1m-march [22mand
           [1m-mcpu[22m.

       [1msimd[0m
           Enable Advanced SIMD instructions.  This also enables floating-point instructions.  This is on by  default
           for all possible values for options [1m-march [22mand [1m-mcpu[22m.

       [1msve [22mEnable  Scalable  Vector  Extension  instructions.   This  also  enables  Advanced SIMD and floating-point
           instructions.

       [1mlse [22mEnable Large System Extension instructions.  This is on by default for [1m-march=armv8.1-a[22m.

       [1mrdma[0m
           Enable Round Double Multiply Accumulate instructions.  This is on by default for [1m-march=armv8.1-a[22m.

       [1mfp16[0m
           Enable FP16 extension.  This also enables floating-point instructions.

       [1mfp16fml[0m
           Enable FP16 fmla extension.  This also enables  FP16  extensions  and  floating-point  instructions.  This
           option  is  enabled  by  default  for  [1m-march=armv8.4-a[22m.  Use  of  this option with architectures prior to
           Armv8.2-A is not supported.

       [1mrcpc[0m
           Enable the RCpc extension.  This enables the  use  of  the  LDAPR  instructions  for  load-acquire  atomic
           semantics,  and passes it on to the assembler, enabling inline asm statements to use instructions from the
           RCpc extension.

       [1mdotprod[0m
           Enable the Dot Product extension.  This also enables Advanced SIMD instructions.

       [1maes [22mEnable the Armv8-a aes and pmull crypto extension.  This also enables Advanced SIMD instructions.

       [1msha2[0m
           Enable the Armv8-a sha2 crypto extension.  This also enables Advanced SIMD instructions.

       [1msha3[0m
           Enable the sha512 and sha3 crypto extension.  This also enables Advanced SIMD instructions.  Use  of  this
           option with architectures prior to Armv8.2-A is not supported.

       [1msm4 [22mEnable  the  sm3  and  sm4  crypto  extension.  This also enables Advanced SIMD instructions.  Use of this
           option with architectures prior to Armv8.2-A is not supported.

       [1mprofile[0m
           Enable the Statistical Profiling extension.  This option is only to enable the extension at the  assembler
           level and does not affect code generation.

       [1mrng [22mEnable  the  Armv8.5-a  Random  Number  instructions.   This option is only to enable the extension at the
           assembler level and does not affect code generation.

       [1mmemtag[0m
           Enable the Armv8.5-a Memory Tagging Extensions.  Use of this option with architectures prior to  Armv8.5-A
           is not supported.

       [1msb  [22mEnable  the  Armv8-a  Speculation Barrier instruction.  This option is only to enable the extension at the
           assembler  level  and  does  not  affect  code  generation.   This  option  is  enabled  by  default   for
           [1m-march=armv8.5-a[22m.

       [1mssbs[0m
           Enable the Armv8-a Speculative Store Bypass Safe instruction.  This option is only to enable the extension
           at  the  assembler  level  and  does  not  affect  code generation.  This option is enabled by default for
           [1m-march=armv8.5-a[22m.

       [1mpredres[0m
           Enable the Armv8-a Execution and Data Prediction Restriction instructions.  This option is only to  enable
           the  extension  at  the  assembler  level  and does not affect code generation.  This option is enabled by
           default for [1m-march=armv8.5-a[22m.

       [1msve2[0m
           Enable the Armv8-a Scalable Vector Extension 2.  This also enables SVE instructions.

       [1msve2-bitperm[0m
           Enable SVE2 bitperm instructions.  This also enables SVE2 instructions.

       [1msve2-sm4[0m
           Enable SVE2 sm4 instructions.  This also enables SVE2 instructions.

       [1msve2-aes[0m
           Enable SVE2 aes instructions.  This also enables SVE2 instructions.

       [1msve2-sha3[0m
           Enable SVE2 sha3 instructions.  This also enables SVE2 instructions.

       [1mtme [22mEnable the Transactional Memory Extension.

       [1mi8mm[0m
           Enable 8-bit Integer Matrix Multiply instructions.  This also enables  Advanced  SIMD  and  floating-point
           instructions.   This  option  is  enabled  by  default  for  [1m-march=armv8.6-a[22m.   Use  of  this option with
           architectures prior to Armv8.2-A is not supported.

       [1mf32mm[0m
           Enable 32-bit Floating point Matrix Multiply instructions.  This also enables SVE  instructions.   Use  of
           this option with architectures prior to Armv8.2-A is not supported.

       [1mf64mm[0m
           Enable  64-bit  Floating  point Matrix Multiply instructions.  This also enables SVE instructions.  Use of
           this option with architectures prior to Armv8.2-A is not supported.

       [1mbf16[0m
           Enable brain half-precision floating-point instructions.  This also enables Advanced  SIMD  and  floating-
           point  instructions.   This  option  is  enabled by default for [1m-march=armv8.6-a[22m.  Use of this option with
           architectures prior to Armv8.2-A is not supported.

       [1mls64[0m
           Enable the 64-byte atomic load and store instructions for accelerators.  This option is enabled by default
           for [1m-march=armv8.7-a[22m.

       [1mmops[0m
           Enable the instructions to accelerate memory operations like "memcpy", "memmove", "memset".   This  option
           is enabled by default for [1m-march=armv8.8-a[0m

       [1mflagm[0m
           Enable the Flag Manipulation instructions Extension.

       [1mpauth[0m
           Enable the Pointer Authentication Extension.

       [1mcssc[0m
           Enable the Common Short Sequence Compression instructions.

       Feature  [1mcrypto [22mimplies [1maes[22m, [1msha2[22m, and [1msimd[22m, which implies [1mfp[22m.  Conversely, [1mnofp [22mimplies [1mnosimd[22m, which implies
       [1mnocrypto[22m, [1mnoaes [22mand [1mnosha2[22m.

       [4mAdapteva[24m [4mEpiphany[24m [4mOptions[0m

       These [1m-m [22moptions are defined for Adapteva Epiphany:

       [1m-mhalf-reg-file[0m
           Don't allocate any register in the range "r32"..."r63".  That allows code to run on hardware variants that
           lack these registers.

       [1m-mprefer-short-insn-regs[0m
           Preferentially allocate registers that allow short instruction generation.  This can result  in  increased
           instruction count, so this may either reduce or increase overall code size.

       [1m-mbranch-cost=[4m[22mnum[0m
           Set  the  cost of branches to roughly [4mnum[24m "simple" instructions.  This cost is only a heuristic and is not
           guaranteed to produce consistent results across releases.

       [1m-mcmove[0m
           Enable the generation of conditional moves.

       [1m-mnops=[4m[22mnum[0m
           Emit [4mnum[24m NOPs before every other generated instruction.

       [1m-mno-soft-cmpsf[0m
           For single-precision floating-point comparisons, emit an "fsub" instruction and test the flags.   This  is
           faster  than  a  software  comparison,  but can get incorrect results in the presence of NaNs, or when two
           different small numbers are compared such that their difference is calculated as  zero.   The  default  is
           [1m-msoft-cmpsf[22m, which uses slower, but IEEE-compliant, software comparisons.

       [1m-mstack-offset=[4m[22mnum[0m
           Set  the  offset  between  the  top of the stack and the stack pointer.  E.g., a value of 8 means that the
           eight bytes in the range "sp+0...sp+7" can be used by leaf functions  without  stack  allocation.   Values
           other  than  [1m8  [22mor  [1m16  [22mare  untested  and  unlikely to work.  Note also that this option changes the ABI;
           compiling a program with a different stack offset than the libraries have  been  compiled  with  generally
           does  not  work.  This option can be useful if you want to evaluate if a different stack offset would give
           you better code, but to actually use a different stack offset to build working programs, it is recommended
           to configure the toolchain with the appropriate [1m--with-stack-offset=[4m[22mnum[24m option.

       [1m-mno-round-nearest[0m
           Make the  scheduler  assume  that  the  rounding  mode  has  been  set  to  truncating.   The  default  is
           [1m-mround-nearest[22m.

       [1m-mlong-calls[0m
           If not otherwise specified by an attribute, assume all calls might be beyond the offset range of the "b" /
           "bl"  instructions, and therefore load the function address into a register before performing a (otherwise
           direct) call.  This is the default.

       [1m-mshort-calls[0m
           If not otherwise specified by an attribute, assume all direct calls are in the range of  the  "b"  /  "bl"
           instructions, so use these instructions for direct calls.  The default is [1m-mlong-calls[22m.

       [1m-msmall16[0m
           Assume  addresses  can be loaded as 16-bit unsigned values.  This does not apply to function addresses for
           which [1m-mlong-calls [22msemantics are in effect.

       [1m-mfp-mode=[4m[22mmode[0m
           Set the prevailing mode of the floating-point unit.  This  determines  the  floating-point  mode  that  is
           provided and expected at function call and return time.  Making this mode match the mode you predominantly
           need at function start can make your programs smaller and faster by avoiding unnecessary mode switches.

           [4mmode[24m can be set to one the following values:

           [1mcaller[0m
               Any  mode  at function entry is valid, and retained or restored when the function returns, and when it
               calls other functions.  This mode is useful for compiling libraries or  other  compilation  units  you
               might  want  to  incorporate  into  different  programs  with  different prevailing FPU modes, and the
               convenience of being able to use a single object file outweighs the size and speed  overhead  for  any
               extra  mode  switching  that  might be needed, compared with what would be needed with a more specific
               choice of prevailing FPU mode.

           [1mtruncate[0m
               This is the mode used for floating-point  calculations  with  truncating  (i.e.  round  towards  zero)
               rounding mode.  That includes conversion from floating point to integer.

           [1mround-nearest[0m
               This is the mode used for floating-point calculations with round-to-nearest-or-even rounding mode.

           [1mint [22mThis  is  the mode used to perform integer calculations in the FPU, e.g.  integer multiply, or integer
               multiply-and-accumulate.

           The default is [1m-mfp-mode=caller[0m

       [1m-mno-split-lohi[0m
       [1m-mno-postinc[0m
       [1m-mno-postmodify[0m
           Code generation tweaks that disable, respectively, splitting of 32-bit loads, generation of post-increment
           addresses, and generation of  post-modify  addresses.   The  defaults  are  [1mmsplit-lohi[22m,  [1m-mpost-inc[22m,  and
           [1m-mpost-modify[22m.

       [1m-mnovect-double[0m
           Change  the  preferred  SIMD mode to SImode.  The default is [1m-mvect-double[22m, which uses DImode as preferred
           SIMD mode.

       [1m-max-vect-align=[4m[22mnum[0m
           The maximum alignment for SIMD vector mode types.  [4mnum[24m may be 4 or 8.  The default is 8.  Note  that  this
           is  an  ABI  change,  even  though  many library function interfaces are unaffected if they don't use SIMD
           vector modes in places that affect size and/or alignment of relevant types.

       [1m-msplit-vecmove-early[0m
           Split vector moves into single word moves  before  reload.   In  theory  this  can  give  better  register
           allocation, but so far the reverse seems to be generally the case.

       [1m-m1reg-[4m[22mreg[0m
           Specify  a  register  to  hold  the  constant -1, which makes loading small negative constants and certain
           bitmasks faster.  Allowable values for [4mreg[24m are [1mr43 [22mand [1mr63[22m, which specify use of that register as a  fixed
           register, and [1mnone[22m, which means that no register is used for this purpose.  The default is [1m-m1reg-none[22m.

       [4mAMD[24m [4mGCN[24m [4mOptions[0m

       These options are defined specifically for the AMD GCN port.

       [1m-march=[4m[22mgpu[0m
       [1m-mtune=[4m[22mgpu[0m
           Set architecture type or tuning for [4mgpu[24m. Supported values for [4mgpu[24m are

           [1mfiji[0m
               Compile for GCN3 Fiji devices (gfx803).

           [1mgfx900[0m
               Compile for GCN5 Vega 10 devices (gfx900).

           [1mgfx906[0m
               Compile for GCN5 Vega 20 devices (gfx906).

           [1mgfx908[0m
               Compile for CDNA1 Instinct MI100 series devices (gfx908).

           [1mgfx90a[0m
               Compile for CDNA2 Instinct MI200 series devices (gfx90a).

       [1m-msram-ecc=on[0m
       [1m-msram-ecc=off[0m
       [1m-msram-ecc=any[0m
           Compile  binaries  suitable for devices with the SRAM-ECC feature enabled, disabled, or either mode.  This
           feature can be enabled per-process on some devices.  The compiled code must match  the  device  mode.  The
           default is [1many[22m, for devices that support it.

       [1m-mstack-size=[4m[22mbytes[0m
           Specify  how  many  [4mbytes[24m  of stack space will be requested for each GPU thread (wave-front).  Beware that
           there may be many threads and limited memory available.  The size of the stack allocation may also have an
           impact on run-time performance.  The default is 32KB when using OpenACC or OpenMP, and 1MB otherwise.

       [1m-mxnack[0m
           Compile binaries suitable for devices with the XNACK feature enabled.  Some devices always  require  XNACK
           and some allow the user to configure XNACK.  The compiled code must match the device mode.  The default is
           [1m-mno-xnack[22m.  At present this option is a placeholder for support that is not yet implemented.

       [4mARC[24m [4mOptions[0m

       The following options control the architecture variant for which code is being compiled:

       [1m-mbarrel-shifter[0m
           Generate instructions supported by barrel shifter.  This is the default unless [1m-mcpu=ARC601 [22mor [1m-mcpu=ARCEM[0m
           is in effect.

       [1m-mjli-always[0m
           Force to call a function using jli_s instruction.  This option is valid only for ARCv2 architecture.

       [1m-mcpu=[4m[22mcpu[0m
           Set  architecture  type,  register  usage,  and instruction scheduling parameters for [4mcpu[24m.  There are also
           shortcut alias options available for backward compatibility and convenience.  Supported values for [4mcpu[24m are

           [1marc600[0m
               Compile for ARC600.  Aliases: [1m-mA6[22m, [1m-mARC600[22m.

           [1marc601[0m
               Compile for ARC601.  Alias: [1m-mARC601[22m.

           [1marc700[0m
               Compile  for  ARC700.   Aliases:  [1m-mA7[22m,  [1m-mARC700[22m.   This  is  the  default   when   configured   with
               [1m--with-cpu=arc700[22m.

           [1marcem[0m
               Compile for ARC EM.

           [1marchs[0m
               Compile for ARC HS.

           [1mem  [22mCompile for ARC EM CPU with no hardware extensions.

           [1mem4 [22mCompile for ARC EM4 CPU.

           [1mem4_dmips[0m
               Compile for ARC EM4 DMIPS CPU.

           [1mem4_fpus[0m
               Compile for ARC EM4 DMIPS CPU with the single-precision floating-point extension.

           [1mem4_fpuda[0m
               Compile for ARC EM4 DMIPS CPU with single-precision floating-point and double assist instructions.

           [1mhs  [22mCompile for ARC HS CPU with no hardware extensions except the atomic instructions.

           [1mhs34[0m
               Compile for ARC HS34 CPU.

           [1mhs38[0m
               Compile for ARC HS38 CPU.

           [1mhs38_linux[0m
               Compile for ARC HS38 CPU with all hardware extensions on.

           [1mhs4x[0m
               Compile for ARC HS4x CPU.

           [1mhs4xd[0m
               Compile for ARC HS4xD CPU.

           [1mhs4x_rel31[0m
               Compile for ARC HS4x CPU release 3.10a.

           [1marc600_norm[0m
               Compile for ARC 600 CPU with "norm" instructions enabled.

           [1marc600_mul32x16[0m
               Compile for ARC 600 CPU with "norm" and 32x16-bit multiply instructions enabled.

           [1marc600_mul64[0m
               Compile for ARC 600 CPU with "norm" and "mul64"-family instructions enabled.

           [1marc601_norm[0m
               Compile for ARC 601 CPU with "norm" instructions enabled.

           [1marc601_mul32x16[0m
               Compile for ARC 601 CPU with "norm" and 32x16-bit multiply instructions enabled.

           [1marc601_mul64[0m
               Compile for ARC 601 CPU with "norm" and "mul64"-family instructions enabled.

           [1mnps400[0m
               Compile for ARC 700 on NPS400 chip.

           [1mem_mini[0m
               Compile for ARC EM minimalist configuration featuring reduced register set.

       [1m-mdpfp[0m
       [1m-mdpfp-compact[0m
           Generate double-precision FPX instructions, tuned for the compact implementation.

       [1m-mdpfp-fast[0m
           Generate double-precision FPX instructions, tuned for the fast implementation.

       [1m-mno-dpfp-lrsr[0m
           Disable "lr" and "sr" instructions from using FPX extension aux registers.

       [1m-mea[0m
           Generate  extended  arithmetic  instructions.   Currently  only  "divaw",  "adds", "subs", and "sat16" are
           supported.  Only valid for [1m-mcpu=ARC700[22m.

       [1m-mno-mpy[0m
           Do not generate "mpy"-family instructions for ARC700.  This option is deprecated.

       [1m-mmul32x16[0m
           Generate 32x16-bit multiply and multiply-accumulate instructions.

       [1m-mmul64[0m
           Generate "mul64" and "mulu64" instructions.  Only valid for [1m-mcpu=ARC600[22m.

       [1m-mnorm[0m
           Generate "norm" instructions.  This is the default if [1m-mcpu=ARC700 [22mis in effect.

       [1m-mspfp[0m
       [1m-mspfp-compact[0m
           Generate single-precision FPX instructions, tuned for the compact implementation.

       [1m-mspfp-fast[0m
           Generate single-precision FPX instructions, tuned for the fast implementation.

       [1m-msimd[0m
           Enable generation of ARC SIMD instructions via target-specific builtins.  Only valid for [1m-mcpu=ARC700[22m.

       [1m-msoft-float[0m
           This option ignored; it is provided for compatibility purposes  only.   Software  floating-point  code  is
           emitted by default, and this default can overridden by FPX options; [1m-mspfp[22m, [1m-mspfp-compact[22m, or [1m-mspfp-fast[0m
           for single precision, and [1m-mdpfp[22m, [1m-mdpfp-compact[22m, or [1m-mdpfp-fast [22mfor double precision.

       [1m-mswap[0m
           Generate "swap" instructions.

       [1m-matomic[0m
           This  enables  use  of  the  locked  load/store  conditional extension to implement atomic memory built-in
           functions.  Not available for ARC 6xx or ARC EM cores.

       [1m-mdiv-rem[0m
           Enable "div" and "rem" instructions for ARCv2 cores.

       [1m-mcode-density[0m
           Enable code density instructions for ARC EM.  This option is on by default for ARC HS.

       [1m-mll64[0m
           Enable double load/store operations for ARC HS cores.

       [1m-mtp-regno=[4m[22mregno[0m
           Specify thread pointer register number.

       [1m-mmpy-option=[4m[22mmulto[0m
           Compile ARCv2 code with a multiplier design option.  You can specify the option using either a  string  or
           numeric value for [4mmulto[24m.  [1mwlh1 [22mis the default value.  The recognized values are:

           [1m0[0m
           [1mnone[0m
               No multiplier available.

           [1m1[0m
           [1mw   [22m16x16 multiplier, fully pipelined.  The following instructions are enabled: "mpyw" and "mpyuw".

           [1m2[0m
           [1mwlh1[0m
               32x32  multiplier,  fully  pipelined  (1 stage).  The following instructions are additionally enabled:
               "mpy", "mpyu", "mpym", "mpymu", and "mpy_s".

           [1m3[0m
           [1mwlh2[0m
               32x32 multiplier, fully pipelined (2 stages).  The following instructions  are  additionally  enabled:
               "mpy", "mpyu", "mpym", "mpymu", and "mpy_s".

           [1m4[0m
           [1mwlh3[0m
               Two  16x16  multipliers,  blocking,  sequential.  The following instructions are additionally enabled:
               "mpy", "mpyu", "mpym", "mpymu", and "mpy_s".

           [1m5[0m
           [1mwlh4[0m
               One 16x16 multiplier, blocking, sequential.  The  following  instructions  are  additionally  enabled:
               "mpy", "mpyu", "mpym", "mpymu", and "mpy_s".

           [1m6[0m
           [1mwlh5[0m
               One  32x4  multiplier,  blocking,  sequential.   The  following instructions are additionally enabled:
               "mpy", "mpyu", "mpym", "mpymu", and "mpy_s".

           [1m7[0m
           [1mplus_dmpy[0m
               ARC HS SIMD support.

           [1m8[0m
           [1mplus_macd[0m
               ARC HS SIMD support.

           [1m9[0m
           [1mplus_qmacw[0m
               ARC HS SIMD support.

           This option is only available for ARCv2 cores.

       [1m-mfpu=[4m[22mfpu[0m
           Enables support for specific floating-point hardware extensions for ARCv2 cores.  Supported values for [4mfpu[0m
           are:

           [1mfpus[0m
               Enables support for single-precision floating-point hardware extensions.

           [1mfpud[0m
               Enables  support  for  double-precision  floating-point  hardware  extensions.   The  single-precision
               floating-point extension is also enabled.  Not available for ARC EM.

           [1mfpuda[0m
               Enables  support for double-precision floating-point hardware extensions using double-precision assist
               instructions.  The single-precision floating-point extension is also enabled.   This  option  is  only
               available for ARC EM.

           [1mfpuda_div[0m
               Enables  support for double-precision floating-point hardware extensions using double-precision assist
               instructions.  The single-precision  floating-point,  square-root,  and  divide  extensions  are  also
               enabled.  This option is only available for ARC EM.

           [1mfpuda_fma[0m
               Enables  support for double-precision floating-point hardware extensions using double-precision assist
               instructions.  The single-precision floating-point and fused multiply and add hardware extensions  are
               also enabled.  This option is only available for ARC EM.

           [1mfpuda_all[0m
               Enables  support for double-precision floating-point hardware extensions using double-precision assist
               instructions.  All single-precision floating-point hardware extensions are also enabled.  This  option
               is only available for ARC EM.

           [1mfpus_div[0m
               Enables support for single-precision floating-point, square-root and divide hardware extensions.

           [1mfpud_div[0m
               Enables support for double-precision floating-point, square-root and divide hardware extensions.  This
               option includes option [1mfpus_div[22m. Not available for ARC EM.

           [1mfpus_fma[0m
               Enables support for single-precision floating-point and fused multiply and add hardware extensions.

           [1mfpud_fma[0m
               Enables  support  for  double-precision floating-point and fused multiply and add hardware extensions.
               This option includes option [1mfpus_fma[22m.  Not available for ARC EM.

           [1mfpus_all[0m
               Enables support for all single-precision floating-point hardware extensions.

           [1mfpud_all[0m
               Enables support  for  all  single-  and  double-precision  floating-point  hardware  extensions.   Not
               available for ARC EM.

       [1m-mirq-ctrl-saved=[4m[22mregister-range[24m[1m, [4m[22mblink[24m[1m, [4m[22mlp_count[0m
           Specifies  general-purposes  registers  that the processor automatically saves/restores on interrupt entry
           and exit.  [4mregister-range[24m is specified as two registers separated by a dash.  The  register  range  always
           starts with "r0", the upper limit is "fp" register.  [4mblink[24m and [4mlp_count[24m are optional.  This option is only
           valid for ARC EM and ARC HS cores.

       [1m-mrgf-banked-regs=[4m[22mnumber[0m
           Specifies  the  number  of  registers replicated in second register bank on entry to fast interrupt.  Fast
           interrupts are interrupts with the highest priority level P0.  These interrupts save only PC and  STATUS32
           registers  to  avoid  memory transactions during interrupt entry and exit sequences.  Use this option when
           you are using fast interrupts in an ARC V2 family processor.  Permitted values are 4, 8, 16, and 32.

       [1m-mlpc-width=[4m[22mwidth[0m
           Specify the width of the "lp_count" register.  Valid values for [4mwidth[24m are 8, 16, 20, 24, 28 and  32  bits.
           The  default  width  is  fixed to 32 bits.  If the width is less than 32, the compiler does not attempt to
           transform loops in your program to use  the  zero-delay  loop  mechanism  unless  it  is  known  that  the
           "lp_count"  register  can  hold  the  required  loop-counter value.  Depending on the width specified, the
           compiler and run-time library might continue to use the loop mechanism for  various  needs.   This  option
           defines macro "__ARC_LPC_WIDTH__" with the value of [4mwidth[24m.

       [1m-mrf16[0m
           This option instructs the compiler to generate code for a 16-entry register file.  This option defines the
           "__ARC_RF16__" preprocessor macro.

       [1m-mbranch-index[0m
           Enable use of "bi" or "bih" instructions to implement jump tables.

       The following options are passed through to the assembler, and also define preprocessor macro symbols.

       [1m-mdsp-packa[0m
           Passed  down  to  the  assembler  to  enable the DSP Pack A extensions.  Also sets the preprocessor symbol
           "__Xdsp_packa".  This option is deprecated.

       [1m-mdvbf[0m
           Passed down to the assembler to enable the dual Viterbi butterfly extension.  Also sets  the  preprocessor
           symbol "__Xdvbf".  This option is deprecated.

       [1m-mlock[0m
           Passed  down  to  the  assembler  to  enable  the  locked load/store conditional extension.  Also sets the
           preprocessor symbol "__Xlock".

       [1m-mmac-d16[0m
           Passed down to  the  assembler.   Also  sets  the  preprocessor  symbol  "__Xxmac_d16".   This  option  is
           deprecated.

       [1m-mmac-24[0m
           Passed down to the assembler.  Also sets the preprocessor symbol "__Xxmac_24".  This option is deprecated.

       [1m-mrtsc[0m
           Passed down to the assembler to enable the 64-bit time-stamp counter extension instruction.  Also sets the
           preprocessor symbol "__Xrtsc".  This option is deprecated.

       [1m-mswape[0m
           Passed  down  to  the  assembler  to  enable  the swap byte ordering extension instruction.  Also sets the
           preprocessor symbol "__Xswape".

       [1m-mtelephony[0m
           Passed down to the assembler to enable dual- and single-operand instructions for telephony.  Also sets the
           preprocessor symbol "__Xtelephony".  This option is deprecated.

       [1m-mxy[0m
           Passed down to the assembler to enable the  XY  memory  extension.   Also  sets  the  preprocessor  symbol
           "__Xxy".

       The following options control how the assembly code is annotated:

       [1m-misize[0m
           Annotate assembler instructions with estimated addresses.

       [1m-mannotate-align[0m
           Explain what alignment considerations lead to the decision to make an instruction short or long.

       The following options are passed through to the linker:

       [1m-marclinux[0m
           Passed  through  to  the  linker,  to  specify use of the "arclinux" emulation.  This option is enabled by
           default in tool chains built for "arc-linux-uclibc" and "arceb-linux-uclibc" targets when profiling is not
           requested.

       [1m-marclinux_prof[0m
           Passed through to the linker, to specify use of the "arclinux_prof" emulation.  This option is enabled  by
           default  in  tool  chains  built for "arc-linux-uclibc" and "arceb-linux-uclibc" targets when profiling is
           requested.

       The following options control the semantics of generated code:

       [1m-mlong-calls[0m
           Generate calls as register indirect calls, thus providing access to the full 32-bit address range.

       [1m-mmedium-calls[0m
           Don't use less than 25-bit addressing range for calls, which is the offset available for an  unconditional
           branch-and-link  instruction.   Conditional execution of function calls is suppressed, to allow use of the
           25-bit range, rather than the 21-bit range with conditional branch-and-link.  This is the default for tool
           chains built for "arc-linux-uclibc" and "arceb-linux-uclibc" targets.

       [1m-G [4m[22mnum[0m
           Put definitions of externally-visible data in a small data section if that data  is  no  bigger  than  [4mnum[0m
           bytes.   The  default  value  of  [4mnum[24m  is 4 for any ARC configuration, or 8 when we have double load/store
           operations.

       [1m-mno-sdata[0m
           Do not generate sdata references.  This is the default for tool chains built  for  "arc-linux-uclibc"  and
           "arceb-linux-uclibc" targets.

       [1m-mvolatile-cache[0m
           Use ordinarily cached memory accesses for volatile references.  This is the default.

       [1m-mno-volatile-cache[0m
           Enable cache bypass for volatile references.

       The following options fine tune code generation:

       [1m-malign-call[0m
           Does nothing.  Preserved for backward compatibility.

       [1m-mauto-modify-reg[0m
           Enable the use of pre/post modify with register displacement.

       [1m-mbbit-peephole[0m
           Enable bbit peephole2.

       [1m-mno-brcc[0m
           This  option  disables  a  target-specific  pass  in  [4marc_reorg[24m  to  generate  compare-and-branch ("br[4mcc[24m")
           instructions.  It has no effect on generation of these instructions driven by the combiner pass.

       [1m-mcase-vector-pcrel[0m
           Use PC-relative switch case tables to enable case table shortening.  This is the default for [1m-Os[22m.

       [1m-mcompact-casesi[0m
           Enable compact "casesi" pattern.  This is the default for [1m-Os[22m, and only available for ARCv1  cores.   This
           option is deprecated.

       [1m-mno-cond-exec[0m
           Disable the ARCompact-specific pass to generate conditional execution instructions.

           Due to delay slot scheduling and interactions between operand numbers, literal sizes, instruction lengths,
           and  the  support for conditional execution, the target-independent pass to generate conditional execution
           is often lacking, so the ARC port has kept a special pass around  that  tries  to  find  more  conditional
           execution generation opportunities after register allocation, branch shortening, and delay slot scheduling
           have  been  done.  This pass generally, but not always, improves performance and code size, at the cost of
           extra compilation time, which is why there is an option to switch it off.  If you have a problem with call
           instructions exceeding their allowable offset range because they are conditionalized, you should  consider
           using [1m-mmedium-calls [22minstead.

       [1m-mearly-cbranchsi[0m
           Enable pre-reload use of the "cbranchsi" pattern.

       [1m-mexpand-adddi[0m
           Expand "adddi3" and "subdi3" at RTL generation time into "add.f", "adc" etc.  This option is deprecated.

       [1m-mindexed-loads[0m
           Enable the use of indexed loads.  This can be problematic because some optimizers then assume that indexed
           stores exist, which is not the case.

       [1m-mlra[0m
           Enable  Local  Register  Allocation.   This is still experimental for ARC, so by default the compiler uses
           standard reload (i.e. [1m-mno-lra[22m).

       [1m-mlra-priority-none[0m
           Don't indicate any priority for target registers.

       [1m-mlra-priority-compact[0m
           Indicate target register priority for r0..r3 / r12..r15.

       [1m-mlra-priority-noncompact[0m
           Reduce target register priority for r0..r3 / r12..r15.

       [1m-mmillicode[0m
           When optimizing for size (using [1m-Os[22m), prologues and epilogues that have to save or restore a large  number
           of  registers  are often shortened by using call to a special function in libgcc; this is referred to as a
           [4mmillicode[24m call.  As these calls can pose performance issues, and/or cause linking issues when linking in a
           nonstandard way, this option is provided to turn on or off millicode call generation.

       [1m-mcode-density-frame[0m
           This option enable the compiler to emit "enter" and "leave" instructions.   These  instructions  are  only
           valid for CPUs with code-density feature.

       [1m-mmixed-code[0m
           Does nothing.  Preserved for backward compatibility.

       [1m-mq-class[0m
           Ths option is deprecated.  Enable [1mq [22minstruction alternatives.  This is the default for [1m-Os[22m.

       [1m-mRcq[0m
           Does nothing.  Preserved for backward compatibility.

       [1m-mRcw[0m
           Does nothing.  Preserved for backward compatibility.

       [1m-msize-level=[4m[22mlevel[0m
           Fine-tune  size optimization with regards to instruction lengths and alignment.  The recognized values for
           [4mlevel[24m are:

           [1m0   [22mNo size optimization.  This level is deprecated and treated like [1m1[22m.

           [1m1   [22mShort instructions are used opportunistically.

           [1m2   [22mIn addition, alignment of loops and of code after barriers are dropped.

           [1m3   [22mIn addition, optional data alignment is dropped, and the option [1mOs [22mis enabled.

           This defaults to [1m3 [22mwhen [1m-Os [22mis in effect.  Otherwise, the behavior when this is not set is  equivalent  to
           level [1m1[22m.

       [1m-mtune=[4m[22mcpu[0m
           Set instruction scheduling parameters for [4mcpu[24m, overriding any implied by [1m-mcpu=[22m.

           Supported values for [4mcpu[24m are

           [1mARC600[0m
               Tune for ARC600 CPU.

           [1mARC601[0m
               Tune for ARC601 CPU.

           [1mARC700[0m
               Tune for ARC700 CPU with standard multiplier block.

           [1mARC700-xmac[0m
               Tune for ARC700 CPU with XMAC block.

           [1mARC725D[0m
               Tune for ARC725D CPU.

           [1mARC750D[0m
               Tune for ARC750D CPU.

           [1mcore3[0m
               Tune for ARCv2 core3 type CPU.  This option enable usage of "dbnz" instruction.

           [1mrelease31a[0m
               Tune for ARC4x release 3.10a.

       [1m-mmultcost=[4m[22mnum[0m
           Cost to assume for a multiply instruction, with [1m4 [22mbeing equal to a normal instruction.

       [1m-munalign-prob-threshold=[4m[22mprobability[0m
           Does nothing.  Preserved for backward compatibility.

       The following options are maintained for backward compatibility, but are now deprecated and will be removed in
       a future release:

       [1m-margonaut[0m
           Obsolete FPX.

       [1m-mbig-endian[0m
       [1m-EB [22mCompile  code  for  big-endian  targets.   Use  of  these  options  is now deprecated.  Big-endian code is
           supported by configuring GCC to build "arceb-elf32" and "arceb-linux-uclibc" targets, for which big endian
           is the default.

       [1m-mlittle-endian[0m
       [1m-EL [22mCompile code for little-endian targets.  Use of these options is now deprecated.   Little-endian  code  is
           supported  by configuring GCC to build "arc-elf32" and "arc-linux-uclibc" targets, for which little endian
           is the default.

       [1m-mbarrel_shifter[0m
           Replaced by [1m-mbarrel-shifter[22m.

       [1m-mdpfp_compact[0m
           Replaced by [1m-mdpfp-compact[22m.

       [1m-mdpfp_fast[0m
           Replaced by [1m-mdpfp-fast[22m.

       [1m-mdsp_packa[0m
           Replaced by [1m-mdsp-packa[22m.

       [1m-mEA[0m
           Replaced by [1m-mea[22m.

       [1m-mmac_24[0m
           Replaced by [1m-mmac-24[22m.

       [1m-mmac_d16[0m
           Replaced by [1m-mmac-d16[22m.

       [1m-mspfp_compact[0m
           Replaced by [1m-mspfp-compact[22m.

       [1m-mspfp_fast[0m
           Replaced by [1m-mspfp-fast[22m.

       [1m-mtune=[4m[22mcpu[0m
           Values [1marc600[22m, [1marc601[22m, [1marc700 [22mand  [1marc700-xmac  [22mfor  [4mcpu[24m  are  replaced  by  [1mARC600[22m,  [1mARC601[22m,  [1mARC700  [22mand
           [1mARC700-xmac [22mrespectively.

       [1m-multcost=[4m[22mnum[0m
           Replaced by [1m-mmultcost[22m.

       [4mARM[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the ARM port:

       [1m-mabi=[4m[22mname[0m
           Generate  code  for  the  specified  ABI.  Permissible values are: [1mapcs-gnu[22m, [1matpcs[22m, [1maapcs[22m, [1maapcs-linux [22mand
           [1miwmmxt[22m.

       [1m-mapcs-frame[0m
           Generate a stack frame that is compliant with the ARM Procedure Call Standard for all functions,  even  if
           this  is  not  strictly necessary for correct execution of the code.  Specifying [1m-fomit-frame-pointer [22mwith
           this  option  causes  the  stack  frames  not  to  be  generated  for  leaf  functions.   The  default  is
           [1m-mno-apcs-frame[22m.  This option is deprecated.

       [1m-mapcs[0m
           This is a synonym for [1m-mapcs-frame [22mand is deprecated.

       [1m-mthumb-interwork[0m
           Generate  code  that supports calling between the ARM and Thumb instruction sets.  Without this option, on
           pre-v5 architectures, the two instruction sets cannot be reliably used inside one program.  The default is
           [1m-mno-thumb-interwork[22m, since slightly larger code is generated when  [1m-mthumb-interwork  [22mis  specified.   In
           AAPCS configurations this option is meaningless.

       [1m-mno-sched-prolog[0m
           Prevent  the reordering of instructions in the function prologue, or the merging of those instruction with
           the instructions in the function's body.  This means that all functions start with a recognizable  set  of
           instructions  (or  in  fact  one  of  a choice from a small set of different function prologues), and this
           information can be used to locate the start of functions inside an executable piece of code.  The  default
           is [1m-msched-prolog[22m.

       [1m-mfloat-abi=[4m[22mname[0m
           Specifies which floating-point ABI to use.  Permissible values are: [1msoft[22m, [1msoftfp [22mand [1mhard[22m.

           Specifying  [1msoft  [22mcauses  GCC  to  generate output containing library calls for floating-point operations.
           [1msoftfp [22mallows the generation of code using hardware floating-point instructions, but still uses the  soft-
           float  calling  conventions.   [1mhard [22mallows generation of floating-point instructions and uses FPU-specific
           calling conventions.

           The default depends on the specific target configuration.  Note that the hard-float  and  soft-float  ABIs
           are  not  link-compatible;  you  must  compile  your  entire  program  with  the same ABI, and link with a
           compatible set of libraries.

       [1m-mgeneral-regs-only[0m
           Generate code which uses only the general-purpose registers.  This will prevent the  compiler  from  using
           floating-point and Advanced SIMD registers but will not impose any restrictions on the assembler.

       [1m-mlittle-endian[0m
           Generate  code  for  a  processor  running  in  little-endian  mode.  This is the default for all standard
           configurations.

       [1m-mbig-endian[0m
           Generate code for a processor running in big-endian mode; the default is to compile  code  for  a  little-
           endian processor.

       [1m-mbe8[0m
       [1m-mbe32[0m
           When linking a big-endian image select between BE8 and BE32 formats.  The option has no effect for little-
           endian  images  and  is ignored.  The default is dependent on the selected target architecture.  For ARMv6
           and later architectures the default is BE8, for older architectures the default is BE32.  BE32 format  has
           been deprecated by ARM.

       [1m-march=[4m[22mname[24m[[1m+extension...[22m]
           This  specifies  the  name  of  the target ARM architecture.  GCC uses this name to determine what kind of
           instructions it can emit when generating assembly code.  This option can be used in  conjunction  with  or
           instead of the [1m-mcpu= [22moption.

           Permissible  names are: [1marmv4t[22m, [1marmv5t[22m, [1marmv5te[22m, [1marmv6[22m, [1marmv6j[22m, [1marmv6k[22m, [1marmv6kz[22m, [1marmv6t2[22m, [1marmv6z[22m, [1marmv6zk[22m,
           [1marmv7[22m, [1marmv7-a[22m, [1marmv7ve[22m,  [1marmv8-a[22m,  [1marmv8.1-a[22m,  [1marmv8.2-a[22m,  [1marmv8.3-a[22m,  [1marmv8.4-a[22m,  [1marmv8.5-a[22m,  [1marmv8.6-a[22m,
           [1marmv9-a[22m,   [1marmv7-r[22m,   [1marmv8-r[22m,   [1marmv6-m[22m,   [1marmv6s-m[22m,   [1marmv7-m[22m,   [1marmv7e-m[22m,  [1marmv8-m.base[22m,  [1marmv8-m.main[22m,
           [1marmv8.1-m.main[22m, [1marmv9-a[22m, [1miwmmxt [22mand [1miwmmxt2[22m.

           Additionally, the following  architectures,  which  lack  support  for  the  Thumb  execution  state,  are
           recognized but support is deprecated: [1marmv4[22m.

           Many  of  the  architectures  support  extensions.   These  can  be  added  by appending [1m+[4m[22mextension[24m to the
           architecture name.  Extension options are processed in order and capabilities  accumulate.   An  extension
           will  also enable any necessary base extensions upon which it depends.  For example, the [1m+crypto [22mextension
           will always enable the [1m+simd [22mextension.  The exception to the additive construction is for extensions that
           are prefixed with [1m+no...[22m: these extensions disable the specified option and any other extensions that  may
           depend on the presence of that extension.

           For  example, [1m-march=armv7-a+simd+nofp+vfpv4 [22mis equivalent to writing [1m-march=armv7-a+vfpv4 [22msince the [1m+simd[0m
           option is entirely disabled by the [1m+nofp [22moption that follows it.

           Most extension names are generically named, but have an effect that is dependent upon the architecture  to
           which  it  is  applied.   For  example,  the  [1m+simd  [22moption  can  be  applied  to both [1marmv7-a [22mand [1marmv8-a[0m
           architectures, but will enable the original ARMv7-A Advanced SIMD (Neon) extensions for  [1marmv7-a  [22mand  the
           ARMv8-A variant for [1marmv8-a[22m.

           The  table below lists the supported extensions for each architecture.  Architectures not mentioned do not
           support any extensions.

           [1marmv5te[0m
           [1marmv6[0m
           [1marmv6j[0m
           [1marmv6k[0m
           [1marmv6kz[0m
           [1marmv6t2[0m
           [1marmv6z[0m
           [1marmv6zk[0m
               [1m+fp [22mThe VFPv2 floating-point instructions.  The extension [1m+vfpv2 [22mcan be used  as  an  alias  for  this
                   extension.

               [1m+nofp[0m
                   Disable the floating-point instructions.

           [1marmv7[0m
               The common subset of the ARMv7-A, ARMv7-R and ARMv7-M architectures.

               [1m+fp [22mThe  VFPv3  floating-point  instructions,  with  16  double-precision  registers.   The  extension
                   [1m+vfpv3-d16 [22mcan be used as an alias for this extension.  Note that floating-point is not  supported
                   by  the  base  ARMv7-M  architecture,  but  is  compatible  with  both  the  ARMv7-A  and  ARMv7-R
                   architectures.

               [1m+nofp[0m
                   Disable the floating-point instructions.

           [1marmv7-a[0m
               [1m+mp [22mThe multiprocessing extension.

               [1m+sec[0m
                   The security extension.

               [1m+fp [22mThe  VFPv3  floating-point  instructions,  with  16  double-precision  registers.   The  extension
                   [1m+vfpv3-d16 [22mcan be used as an alias for this extension.

               [1m+simd[0m
                   The  Advanced  SIMD (Neon) v1 and the VFPv3 floating-point instructions.  The extensions [1m+neon [22mand
                   [1m+neon-vfpv3 [22mcan be used as aliases for this extension.

               [1m+vfpv3[0m
                   The VFPv3 floating-point instructions, with 32 double-precision registers.

               [1m+vfpv3-d16-fp16[0m
                   The VFPv3 floating-point instructions, with 16 double-precision registers and  the  half-precision
                   floating-point conversion operations.

               [1m+vfpv3-fp16[0m
                   The  VFPv3  floating-point instructions, with 32 double-precision registers and the half-precision
                   floating-point conversion operations.

               [1m+vfpv4-d16[0m
                   The VFPv4 floating-point instructions, with 16 double-precision registers.

               [1m+vfpv4[0m
                   The VFPv4 floating-point instructions, with 32 double-precision registers.

               [1m+neon-fp16[0m
                   The Advanced SIMD (Neon) v1 and the VFPv3 floating-point  instructions,  with  the  half-precision
                   floating-point conversion operations.

               [1m+neon-vfpv4[0m
                   The Advanced SIMD (Neon) v2 and the VFPv4 floating-point instructions.

               [1m+nosimd[0m
                   Disable the Advanced SIMD instructions (does not disable floating point).

               [1m+nofp[0m
                   Disable the floating-point and Advanced SIMD instructions.

           [1marmv7ve[0m
               The extended version of the ARMv7-A architecture with support for virtualization.

               [1m+fp [22mThe  VFPv4  floating-point  instructions,  with  16  double-precision  registers.   The  extension
                   [1m+vfpv4-d16 [22mcan be used as an alias for this extension.

               [1m+simd[0m
                   The Advanced SIMD (Neon) v2 and the VFPv4 floating-point instructions.  The extension  [1m+neon-vfpv4[0m
                   can be used as an alias for this extension.

               [1m+vfpv3-d16[0m
                   The VFPv3 floating-point instructions, with 16 double-precision registers.

               [1m+vfpv3[0m
                   The VFPv3 floating-point instructions, with 32 double-precision registers.

               [1m+vfpv3-d16-fp16[0m
                   The  VFPv3  floating-point instructions, with 16 double-precision registers and the half-precision
                   floating-point conversion operations.

               [1m+vfpv3-fp16[0m
                   The VFPv3 floating-point instructions, with 32 double-precision registers and  the  half-precision
                   floating-point conversion operations.

               [1m+vfpv4-d16[0m
                   The VFPv4 floating-point instructions, with 16 double-precision registers.

               [1m+vfpv4[0m
                   The VFPv4 floating-point instructions, with 32 double-precision registers.

               [1m+neon[0m
                   The  Advanced SIMD (Neon) v1 and the VFPv3 floating-point instructions.  The extension [1m+neon-vfpv3[0m
                   can be used as an alias for this extension.

               [1m+neon-fp16[0m
                   The Advanced SIMD (Neon) v1 and the VFPv3 floating-point  instructions,  with  the  half-precision
                   floating-point conversion operations.

               [1m+nosimd[0m
                   Disable the Advanced SIMD instructions (does not disable floating point).

               [1m+nofp[0m
                   Disable the floating-point and Advanced SIMD instructions.

           [1marmv8-a[0m
               [1m+crc[0m
                   The Cyclic Redundancy Check (CRC) instructions.

               [1m+simd[0m
                   The ARMv8-A Advanced SIMD and floating-point instructions.

               [1m+crypto[0m
                   The cryptographic instructions.

               [1m+nocrypto[0m
                   Disable the cryptographic instructions.

               [1m+nofp[0m
                   Disable the floating-point, Advanced SIMD and cryptographic instructions.

               [1m+sb [22mSpeculation Barrier Instruction.

               [1m+predres[0m
                   Execution and Data Prediction Restriction Instructions.

           [1marmv8.1-a[0m
               [1m+simd[0m
                   The ARMv8.1-A Advanced SIMD and floating-point instructions.

               [1m+crypto[0m
                   The   cryptographic  instructions.   This  also  enables  the  Advanced  SIMD  and  floating-point
                   instructions.

               [1m+nocrypto[0m
                   Disable the cryptographic instructions.

               [1m+nofp[0m
                   Disable the floating-point, Advanced SIMD and cryptographic instructions.

               [1m+sb [22mSpeculation Barrier Instruction.

               [1m+predres[0m
                   Execution and Data Prediction Restriction Instructions.

           [1marmv8.2-a[0m
           [1marmv8.3-a[0m
               [1m+fp16[0m
                   The half-precision floating-point data processing instructions.  This also  enables  the  Advanced
                   SIMD and floating-point instructions.

               [1m+fp16fml[0m
                   The  half-precision floating-point fmla extension.  This also enables the half-precision floating-
                   point extension and Advanced SIMD and floating-point instructions.

               [1m+simd[0m
                   The ARMv8.1-A Advanced SIMD and floating-point instructions.

               [1m+crypto[0m
                   The  cryptographic  instructions.   This  also  enables  the  Advanced  SIMD  and   floating-point
                   instructions.

               [1m+dotprod[0m
                   Enable the Dot Product extension.  This also enables Advanced SIMD instructions.

               [1m+nocrypto[0m
                   Disable the cryptographic extension.

               [1m+nofp[0m
                   Disable the floating-point, Advanced SIMD and cryptographic instructions.

               [1m+sb [22mSpeculation Barrier Instruction.

               [1m+predres[0m
                   Execution and Data Prediction Restriction Instructions.

               [1m+i8mm[0m
                   8-bit  Integer  Matrix  Multiply instructions.  This also enables Advanced SIMD and floating-point
                   instructions.

               [1m+bf16[0m
                   Brain half-precision floating-point instructions.  This also enables Advanced SIMD  and  floating-
                   point instructions.

           [1marmv8.4-a[0m
               [1m+fp16[0m
                   The  half-precision  floating-point  data processing instructions.  This also enables the Advanced
                   SIMD and floating-point instructions as well as the Dot Product extension and  the  half-precision
                   floating-point fmla extension.

               [1m+simd[0m
                   The ARMv8.3-A Advanced SIMD and floating-point instructions as well as the Dot Product extension.

               [1m+crypto[0m
                   The   cryptographic  instructions.   This  also  enables  the  Advanced  SIMD  and  floating-point
                   instructions as well as the Dot Product extension.

               [1m+nocrypto[0m
                   Disable the cryptographic extension.

               [1m+nofp[0m
                   Disable the floating-point, Advanced SIMD and cryptographic instructions.

               [1m+sb [22mSpeculation Barrier Instruction.

               [1m+predres[0m
                   Execution and Data Prediction Restriction Instructions.

               [1m+i8mm[0m
                   8-bit Integer Matrix Multiply instructions.  This also enables Advanced  SIMD  and  floating-point
                   instructions.

               [1m+bf16[0m
                   Brain  half-precision  floating-point instructions.  This also enables Advanced SIMD and floating-
                   point instructions.

           [1marmv8.5-a[0m
               [1m+fp16[0m
                   The half-precision floating-point data processing instructions.  This also  enables  the  Advanced
                   SIMD  and  floating-point instructions as well as the Dot Product extension and the half-precision
                   floating-point fmla extension.

               [1m+simd[0m
                   The ARMv8.3-A Advanced SIMD and floating-point instructions as well as the Dot Product extension.

               [1m+crypto[0m
                   The  cryptographic  instructions.   This  also  enables  the  Advanced  SIMD  and   floating-point
                   instructions as well as the Dot Product extension.

               [1m+nocrypto[0m
                   Disable the cryptographic extension.

               [1m+nofp[0m
                   Disable the floating-point, Advanced SIMD and cryptographic instructions.

               [1m+i8mm[0m
                   8-bit  Integer  Matrix  Multiply instructions.  This also enables Advanced SIMD and floating-point
                   instructions.

               [1m+bf16[0m
                   Brain half-precision floating-point instructions.  This also enables Advanced SIMD  and  floating-
                   point instructions.

           [1marmv8.6-a[0m
               [1m+fp16[0m
                   The  half-precision  floating-point  data processing instructions.  This also enables the Advanced
                   SIMD and floating-point instructions as well as the Dot Product extension and  the  half-precision
                   floating-point fmla extension.

               [1m+simd[0m
                   The ARMv8.3-A Advanced SIMD and floating-point instructions as well as the Dot Product extension.

               [1m+crypto[0m
                   The   cryptographic  instructions.   This  also  enables  the  Advanced  SIMD  and  floating-point
                   instructions as well as the Dot Product extension.

               [1m+nocrypto[0m
                   Disable the cryptographic extension.

               [1m+nofp[0m
                   Disable the floating-point, Advanced SIMD and cryptographic instructions.

               [1m+i8mm[0m
                   8-bit Integer Matrix Multiply instructions.  This also enables Advanced  SIMD  and  floating-point
                   instructions.

               [1m+bf16[0m
                   Brain  half-precision  floating-point instructions.  This also enables Advanced SIMD and floating-
                   point instructions.

           [1marmv7-r[0m
               [1m+fp.sp[0m
                   The single-precision VFPv3 floating-point instructions.  The extension [1m+vfpv3xd [22mcan be used as  an
                   alias for this extension.

               [1m+fp [22mThe   VFPv3  floating-point  instructions  with  16  double-precision  registers.   The  extension
                   +vfpv3-d16 can be used as an alias for this extension.

               [1m+vfpv3xd-d16-fp16[0m
                   The single-precision VFPv3 floating-point instructions with 16 double-precision registers and  the
                   half-precision floating-point conversion operations.

               [1m+vfpv3-d16-fp16[0m
                   The  VFPv3  floating-point  instructions with 16 double-precision registers and the half-precision
                   floating-point conversion operations.

               [1m+nofp[0m
                   Disable the floating-point extension.

               [1m+idiv[0m
                   The ARM-state integer division instructions.

               [1m+noidiv[0m
                   Disable the ARM-state integer division extension.

           [1marmv7e-m[0m
               [1m+fp [22mThe single-precision VFPv4 floating-point instructions.

               [1m+fpv5[0m
                   The single-precision FPv5 floating-point instructions.

               [1m+fp.dp[0m
                   The single- and double-precision FPv5 floating-point instructions.

               [1m+nofp[0m
                   Disable the floating-point extensions.

           [1marmv8.1-m.main[0m
               [1m+dsp[0m
                   The DSP instructions.

               [1m+mve[0m
                   The M-Profile Vector Extension (MVE) integer instructions.

               [1m+mve.fp[0m
                   The M-Profile Vector Extension (MVE) integer and single precision floating-point instructions.

               [1m+fp [22mThe single-precision floating-point instructions.

               [1m+fp.dp[0m
                   The single- and double-precision floating-point instructions.

               [1m+nofp[0m
                   Disable the floating-point extension.

               [1m+cdecp0, +cdecp1, ... , +cdecp7[0m
                   Enable the Custom Datapath Extension (CDE) on selected coprocessors according to the numbers given
                   in the options in the range 0 to 7.

               [1m+pacbti[0m
                   Enable the Pointer Authentication and Branch Target Identification Extension.

           [1marmv8-m.main[0m
               [1m+dsp[0m
                   The DSP instructions.

               [1m+nodsp[0m
                   Disable the DSP extension.

               [1m+fp [22mThe single-precision floating-point instructions.

               [1m+fp.dp[0m
                   The single- and double-precision floating-point instructions.

               [1m+nofp[0m
                   Disable the floating-point extension.

               [1m+cdecp0, +cdecp1, ... , +cdecp7[0m
                   Enable the Custom Datapath Extension (CDE) on selected coprocessors according to the numbers given
                   in the options in the range 0 to 7.

           [1marmv8-r[0m
               [1m+crc[0m
                   The Cyclic Redundancy Check (CRC) instructions.

               [1m+fp.sp[0m
                   The single-precision FPv5 floating-point instructions.

               [1m+simd[0m
                   The ARMv8-A Advanced SIMD and floating-point instructions.

               [1m+crypto[0m
                   The cryptographic instructions.

               [1m+nocrypto[0m
                   Disable the cryptographic instructions.

               [1m+nofp[0m
                   Disable the floating-point, Advanced SIMD and cryptographic instructions.

           [1m-march=native [22mcauses the compiler to auto-detect the architecture of the build computer.  At present, this
           feature is only supported on GNU/Linux, and not all architectures are recognized.  If the  auto-detect  is
           unsuccessful the option has no effect.

       [1m-mtune=[4m[22mname[0m
           This  option  specifies  the name of the target ARM processor for which GCC should tune the performance of
           the code.  For some ARM  implementations  better  performance  can  be  obtained  by  using  this  option.
           Permissible   names  are:  [1marm7tdmi[22m,  [1marm7tdmi-s[22m,  [1marm710t[22m,  [1marm720t[22m,  [1marm740t[22m,  [1mstrongarm[22m,  [1mstrongarm110[22m,
           [1mstrongarm1100[22m, [1mstrongarm1110[22m, [1marm8[22m, [1marm810[22m, [1marm9[22m, [1marm9e[22m, [1marm920[22m, [1marm920t[22m, [1marm922t[22m,  [1marm946e-s[22m,  [1marm966e-s[22m,
           [1marm968e-s[22m,  [1marm926ej-s[22m,  [1marm940t[22m,  [1marm9tdmi[22m, [1marm10tdmi[22m, [1marm1020t[22m, [1marm1026ej-s[22m, [1marm10e[22m, [1marm1020e[22m, [1marm1022e[22m,
           [1marm1136j-s[22m,  [1marm1136jf-s[22m,  [1mmpcore[22m,  [1mmpcorenovfp[22m,  [1marm1156t2-s[22m,  [1marm1156t2f-s[22m,  [1marm1176jz-s[22m,  [1marm1176jzf-s[22m,
           [1mgeneric-armv7-a[22m,   [1mcortex-a5[22m,   [1mcortex-a7[22m,   [1mcortex-a8[22m,  [1mcortex-a9[22m,  [1mcortex-a12[22m,  [1mcortex-a15[22m,  [1mcortex-a17[22m,
           [1mcortex-a32[22m,  [1mcortex-a35[22m,  [1mcortex-a53[22m,  [1mcortex-a55[22m,   [1mcortex-a57[22m,   [1mcortex-a72[22m,   [1mcortex-a73[22m,   [1mcortex-a75[22m,
           [1mcortex-a76[22m, [1mcortex-a76ae[22m, [1mcortex-a77[22m, [1mcortex-a78[22m, [1mcortex-a78ae[22m, [1mcortex-a78c[22m, [1mcortex-a710[22m, [1mares[22m, [1mcortex-r4[22m,
           [1mcortex-r4f[22m,   [1mcortex-r5[22m,  [1mcortex-r7[22m,  [1mcortex-r8[22m,  [1mcortex-r52[22m,  [1mcortex-r52plus[22m,  [1mcortex-m0[22m,  [1mcortex-m0plus[22m,
           [1mcortex-m1[22m, [1mcortex-m3[22m, [1mcortex-m4[22m, [1mcortex-m7[22m, [1mcortex-m23[22m, [1mcortex-m33[22m, [1mcortex-m35p[22m,  [1mcortex-m55[22m,  [1mcortex-m85[22m,
           [1mcortex-x1[22m,  [1mcortex-x1c[22m,  [1mcortex-m1.small-multiply[22m, [1mcortex-m0.small-multiply[22m, [1mcortex-m0plus.small-multiply[22m,
           [1mexynos-m1[22m, [1mmarvell-pj4[22m, [1mneoverse-n1[22m, [1mneoverse-n2[22m, [1mneoverse-v1[22m, [1mxscale[22m,  [1miwmmxt[22m,  [1miwmmxt2[22m,  [1mep9312[22m,  [1mfa526[22m,
           [1mfa626[22m, [1mfa606te[22m, [1mfa626te[22m, [1mfmp626[22m, [1mfa726te[22m, [1mstar-mc1[22m, [1mxgene1[22m.

           Additionally,  this  option  can specify that GCC should tune the performance of the code for a big.LITTLE
           system.   Permissible  names  are:  [1mcortex-a15.cortex-a7[22m,   [1mcortex-a17.cortex-a7[22m,   [1mcortex-a57.cortex-a53[22m,
           [1mcortex-a72.cortex-a53[22m,      [1mcortex-a72.cortex-a35[22m,      [1mcortex-a73.cortex-a53[22m,      [1mcortex-a75.cortex-a55[22m,
           [1mcortex-a76.cortex-a55[22m.

           [1m-mtune=generic-[4m[22march[24m specifies that GCC should tune the  performance  for  a  blend  of  processors  within
           architecture  [4march[24m.   The  aim  is  to generate code that run well on the current most popular processors,
           balancing between optimizations that benefit some CPUs in the range, and avoiding performance pitfalls  of
           other CPUs.  The effects of this option may change in future GCC versions as CPU models come and go.

           [1m-mtune  [22mpermits the same extension options as [1m-mcpu[22m, but the extension options do not affect the tuning of
           the generated code.

           [1m-mtune=native [22mcauses the compiler to auto-detect the CPU of the build computer.  At present, this  feature
           is  only  supported  on  GNU/Linux,  and  not  all  architectures  are  recognized.  If the auto-detect is
           unsuccessful the option has no effect.

       [1m-mcpu=[4m[22mname[24m[[1m+extension...[22m]
           This specifies the name of the target ARM processor.  GCC uses this name to derive the name of the  target
           ARM  architecture (as if specified by [1m-march[22m) and the ARM processor type for which to tune for performance
           (as if specified by [1m-mtune[22m).  Where this option is used  in  conjunction  with  [1m-march  [22mor  [1m-mtune[22m,  those
           options take precedence over the appropriate part of this option.

           Many  of  the  supported  CPUs  implement  optional  architectural  extensions.   Where  this  is  so  the
           architectural extensions are normally enabled by default.  If  implementations  that  lack  the  extension
           exist,  then  the  extension  syntax  can be used to disable those extensions that have been omitted.  For
           floating-point and Advanced SIMD (Neon) instructions, the settings of the options  [1m-mfloat-abi  [22mand  [1m-mfpu[0m
           must also be considered: floating-point and Advanced SIMD instructions will only be used if [1m-mfloat-abi [22mis
           not  set  to [1msoft[22m; and any setting of [1m-mfpu [22mother than [1mauto [22mwill override the available floating-point and
           SIMD extension instructions.

           For example, [1mcortex-a9 [22mcan be found in three major configurations: integer only,  with  just  a  floating-
           point  unit  or with floating-point and Advanced SIMD.  The default is to enable all the instructions, but
           the extensions [1m+nosimd [22mand [1m+nofp [22mcan be used to disable just the SIMD or both the SIMD and  floating-point
           instructions respectively.

           Permissible names for this option are the same as those for [1m-mtune[22m.

           The following extension options are common to the listed CPUs:

           [1m+nodsp[0m
               Disable  the  DSP instructions on [1mcortex-m33[22m, [1mcortex-m35p[22m, [1mcortex-m55 [22mand [1mcortex-m85[22m. Also disable the
               M-Profile  Vector  Extension  (MVE)  integer  and  single  precision  floating-point  instructions  on
               [1mcortex-m55 [22mand [1mcortex-m85[22m.

           [1m+nopacbti[0m
               Disable the Pointer Authentication and Branch Target Identification Extension on [1mcortex-m85[22m.

           [1m+nomve[0m
               Disable  the M-Profile Vector Extension (MVE) integer and single precision floating-point instructions
               on [1mcortex-m55 [22mand [1mcortex-m85[22m.

           [1m+nomve.fp[0m
               Disable  the  M-Profile  Vector  Extension  (MVE)  single  precision  floating-point  instructions  on
               [1mcortex-m55 [22mand [1mcortex-m85[22m.

           [1m+cdecp0, +cdecp1, ... , +cdecp7[0m
               Enable  the Custom Datapath Extension (CDE) on selected coprocessors according to the numbers given in
               the options in the range 0 to 7 on [1mcortex-m55[22m.

           [1m+nofp[0m
               Disables the floating-point instructions on [1marm9e[22m, [1marm946e-s[22m, [1marm966e-s[22m, [1marm968e-s[22m, [1marm10e[22m,  [1marm1020e[22m,
               [1marm1022e[22m,  [1marm926ej-s[22m, [1marm1026ej-s[22m, [1mcortex-r5[22m, [1mcortex-r7[22m, [1mcortex-r8[22m, [1mcortex-m4[22m, [1mcortex-m7[22m, [1mcortex-m33[22m,
               [1mcortex-m35p cortex-m4[22m, [1mcortex-m7[22m, [1mcortex-m33[22m, [1mcortex-m35p[22m, [1mcortex-m55 [22mand  [1mcortex-m85[22m.   Disables  the
               floating-point  and  SIMD instructions on [1mgeneric-armv7-a[22m, [1mcortex-a5[22m, [1mcortex-a7[22m, [1mcortex-a8[22m, [1mcortex-a9[22m,
               [1mcortex-a12[22m,   [1mcortex-a15[22m,   [1mcortex-a17[22m,   [1mcortex-a15.cortex-a7[22m,   [1mcortex-a17.cortex-a7[22m,    [1mcortex-a32[22m,
               [1mcortex-a35[22m, [1mcortex-a53 [22mand [1mcortex-a55[22m.

           [1m+nofp.dp[0m
               Disables  the  double-precision  component of the floating-point instructions on [1mcortex-r5[22m, [1mcortex-r7[22m,
               [1mcortex-r8[22m, [1mcortex-r52[22m, [1mcortex-r52plus [22mand [1mcortex-m7[22m.

           [1m+nosimd[0m
               Disables the SIMD (but not floating-point) instructions on [1mgeneric-armv7-a[22m, [1mcortex-a5[22m,  [1mcortex-a7  [22mand
               [1mcortex-a9[22m.

           [1m+crypto[0m
               Enables  the cryptographic instructions on [1mcortex-a32[22m, [1mcortex-a35[22m, [1mcortex-a53[22m, [1mcortex-a55[22m, [1mcortex-a57[22m,
               [1mcortex-a72[22m, [1mcortex-a73[22m, [1mcortex-a75[22m, [1mexynos-m1[22m, [1mxgene1[22m,  [1mcortex-a57.cortex-a53[22m,  [1mcortex-a72.cortex-a53[22m,
               [1mcortex-a73.cortex-a35[22m, [1mcortex-a73.cortex-a53 [22mand [1mcortex-a75.cortex-a55[22m.

           Additionally  the  [1mgeneric-armv7-a [22mpseudo target defaults to VFPv3 with 16 double-precision registers.  It
           supports  the  following  extension  options:  [1mmp[22m,  [1msec[22m,  [1mvfpv3-d16[22m,  [1mvfpv3[22m,  [1mvfpv3-d16-fp16[22m,  [1mvfpv3-fp16[22m,
           [1mvfpv4-d16[22m,  [1mvfpv4[22m,  [1mneon[22m,  [1mneon-vfpv3[22m,  [1mneon-fp16[22m,  [1mneon-vfpv4[22m.   The  meanings  are  the  same as for the
           extensions to [1m-march=armv7-a[22m.

           [1m-mcpu=generic-[4m[22march[24m is also permissible, and is equivalent to [1m-march=[4m[22march[24m [1m-mtune=generic-[4m[22march[24m.  See  [1m-mtune[0m
           for more information.

           [1m-mcpu=native  [22mcauses  the compiler to auto-detect the CPU of the build computer.  At present, this feature
           is only supported on GNU/Linux,  and  not  all  architectures  are  recognized.   If  the  auto-detect  is
           unsuccessful the option has no effect.

       [1m-mfpu=[4m[22mname[0m
           This  specifies  what  floating-point  hardware  (or  hardware  emulation)  is  available  on  the target.
           Permissible names are: [1mauto[22m, [1mvfpv2[22m, [1mvfpv3[22m, [1mvfpv3-fp16[22m, [1mvfpv3-d16[22m, [1mvfpv3-d16-fp16[22m,  [1mvfpv3xd[22m,  [1mvfpv3xd-fp16[22m,
           [1mneon-vfpv3[22m,  [1mneon-fp16[22m,  [1mvfpv4[22m,  [1mvfpv4-d16[22m,  [1mfpv4-sp-d16[22m,  [1mneon-vfpv4[22m,  [1mfpv5-d16[22m,  [1mfpv5-sp-d16[22m,  [1mfp-armv8[22m,
           [1mneon-fp-armv8 [22mand [1mcrypto-neon-fp-armv8[22m.  Note that [1mneon [22mis an alias for [1mneon-vfpv3 [22mand [1mvfp [22mis an alias for
           [1mvfpv2[22m.

           The setting [1mauto [22mis the default and is special.  It causes the compiler to select the  floating-point  and
           Advanced SIMD instructions based on the settings of [1m-mcpu [22mand [1m-march[22m.

           If the selected floating-point hardware includes the NEON extension (e.g. [1m-mfpu=neon[22m), note that floating-
           point  operations are not generated by GCC's auto-vectorization pass unless [1m-funsafe-math-optimizations [22mis
           also specified.  This is because NEON hardware  does  not  fully  implement  the  IEEE  754  standard  for
           floating-point  arithmetic  (in  particular  denormal  values  are  treated  as  zero), so the use of NEON
           instructions may lead to a loss of precision.

           You can also set the fpu name at function  level  by  using  the  target("fpu=")  function  attributes  or
           pragmas.

       [1m-mfp16-format=[4m[22mname[0m
           Specify  the format of the "__fp16" half-precision floating-point type.  Permissible names are [1mnone[22m, [1mieee[22m,
           and [1malternative[22m; the default is [1mnone[22m, in which case the "__fp16" type is not defined.

       [1m-mstructure-size-boundary=[4m[22mn[0m
           The sizes of all structures and unions are rounded up to a multiple of the number  of  bits  set  by  this
           option.  Permissible values are 8, 32 and 64.  The default value varies for different toolchains.  For the
           COFF  targeted  toolchain  the  default  value  is 8.  A value of 64 is only allowed if the underlying ABI
           supports it.

           Specifying a larger number can produce faster, more efficient code, but can also increase the size of  the
           program.   Different values are potentially incompatible.  Code compiled with one value cannot necessarily
           expect to work with code or libraries compiled with another value,  if  they  exchange  information  using
           structures or unions.

           This option is deprecated.

       [1m-mabort-on-noreturn[0m
           Generate  a  call  to  the  function  "abort"  at the end of a "noreturn" function.  It is executed if the
           function tries to return.

       [1m-mlong-calls[0m
       [1m-mno-long-calls[0m
           Tells the compiler to perform function calls by first loading the address of the function into a  register
           and then performing a subroutine call on this register.  This switch is needed if the target function lies
           outside of the 64-megabyte addressing range of the offset-based version of subroutine call instruction.

           Even  if this switch is enabled, not all function calls are turned into long calls.  The heuristic is that
           static functions, functions that have the "short_call" attribute, functions that are inside the scope of a
           "#pragma no_long_calls" directive, and functions whose definitions have already been compiled  within  the
           current  compilation  unit  are  not  turned  into  long calls.  The exceptions to this rule are that weak
           function definitions, functions with the "long_call" attribute or the "section" attribute,  and  functions
           that are within the scope of a "#pragma long_calls" directive are always turned into long calls.

           This feature is not enabled by default.  Specifying [1m-mno-long-calls [22mrestores the default behavior, as does
           placing  the function calls within the scope of a "#pragma long_calls_off" directive.  Note these switches
           have no effect on how the compiler generates code to handle function calls via function pointers.

       [1m-msingle-pic-base[0m
           Treat the register used for PIC addressing as read-only, rather than loading it in the prologue  for  each
           function.   The  runtime  system  is  responsible for initializing this register with an appropriate value
           before execution begins.

       [1m-mpic-register=[4m[22mreg[0m
           Specify the register to be used for PIC addressing.  For standard  PIC  base  case,  the  default  is  any
           suitable  register  determined by compiler.  For single PIC base case, the default is [1mR9 [22mif target is EABI
           based or stack-checking is enabled, otherwise the default is [1mR10[22m.

       [1m-mpic-data-is-text-relative[0m
           Assume that the displacement between the text and data segments  is  fixed  at  static  link  time.   This
           permits  using PC-relative addressing operations to access data known to be in the data segment.  For non-
           VxWorks RTP targets, this option is enabled by default.  When disabled on such  targets,  it  will  enable
           [1m-msingle-pic-base [22mby default.

       [1m-mpoke-function-name[0m
           Write  the  name  of  each  function into the text section, directly preceding the function prologue.  The
           generated code is similar to this:

                        t0
                            .ascii "arm_poke_function_name", 0
                            .align
                        t1
                            .word 0xff000000 + (t1 - t0)
                        arm_poke_function_name
                            mov     ip, sp
                            stmfd   sp!, {fp, ip, lr, pc}
                            sub     fp, ip, #4

           When performing a stack backtrace, code can inspect the value of "pc" stored at "fp + 0".   If  the  trace
           function  then  looks  at  location  "pc  -  12"  and the top 8 bits are set, then we know that there is a
           function name embedded immediately preceding this location and has length "((pc[-3]) & 0xff000000)".

       [1m-mthumb[0m
       [1m-marm[0m
           Select between generating code that executes in ARM and Thumb states.  The default for most configurations
           is to generate code that executes in ARM state, but the default can be changed by configuring GCC with the
           [1m--with-mode=[4m[22mstate[24m configure option.

           You can also override the ARM  and  Thumb  mode  for  each  function  by  using  the  target("thumb")  and
           target("arm") function attributes or pragmas.

       [1m-mflip-thumb[0m
           Switch  ARM/Thumb modes on alternating functions.  This option is provided for regression testing of mixed
           Thumb/ARM code generation, and is not intended for ordinary use in compiling code.

       [1m-mtpcs-frame[0m
           Generate a stack frame that is  compliant  with  the  Thumb  Procedure  Call  Standard  for  all  non-leaf
           functions.   (A  leaf  function  is  one  that  does  not  call  any  other  functions.)   The  default is
           [1m-mno-tpcs-frame[22m.

       [1m-mtpcs-leaf-frame[0m
           Generate a stack frame that is compliant with the Thumb Procedure Call Standard for  all  leaf  functions.
           (A leaf function is one that does not call any other functions.)  The default is [1m-mno-apcs-leaf-frame[22m.

       [1m-mcallee-super-interworking[0m
           Gives  all  externally  visible  functions  in the file being compiled an ARM instruction set header which
           switches to Thumb mode before executing the rest of the function.   This  allows  these  functions  to  be
           called  from non-interworking code.  This option is not valid in AAPCS configurations because interworking
           is enabled by default.

       [1m-mcaller-super-interworking[0m
           Allows calls via function pointers (including  virtual  functions)  to  execute  correctly  regardless  of
           whether  the target code has been compiled for interworking or not.  There is a small overhead in the cost
           of executing a function  pointer  if  this  option  is  enabled.   This  option  is  not  valid  in  AAPCS
           configurations because interworking is enabled by default.

       [1m-mtp=[4m[22mname[0m
           Specify the access model for the thread local storage pointer.  The valid models are [1msoft[22m, which generates
           calls  to "__aeabi_read_tp", [1mcp15[22m, which fetches the thread pointer from "cp15" directly (supported in the
           arm6k architecture), and [1mauto[22m, which uses the best available  method  for  the  selected  processor.   The
           default setting is [1mauto[22m.

       [1m-mtls-dialect=[4m[22mdialect[0m
           Specify the dialect to use for accessing thread local storage.  Two [4mdialect[24ms are supported---[1mgnu [22mand [1mgnu2[22m.
           The  [1mgnu  [22mdialect selects the original GNU scheme for supporting local and global dynamic TLS models.  The
           [1mgnu2 [22mdialect selects the GNU descriptor scheme, which provides better performance  for  shared  libraries.
           The  GNU  descriptor scheme is compatible with the original scheme, but does require new assembler, linker
           and library support.  Initial and local exec TLS models are unaffected by this option and always  use  the
           original scheme.

       [1m-mword-relocations[0m
           Only generate absolute relocations on word-sized values (i.e. R_ARM_ABS32).  This is enabled by default on
           targets (uClinux, SymbianOS) where the runtime loader imposes this restriction, and when [1m-fpic [22mor [1m-fPIC [22mis
           specified. This option conflicts with [1m-mslow-flash-data[22m.

       [1m-mfix-cortex-m3-ldrd[0m
           Some  Cortex-M3  cores can cause data corruption when "ldrd" instructions with overlapping destination and
           base registers are used.  This option avoids generating these instructions.  This  option  is  enabled  by
           default when [1m-mcpu=cortex-m3 [22mis specified.

       [1m-mfix-cortex-a57-aes-1742098[0m
       [1m-mno-fix-cortex-a57-aes-1742098[0m
       [1m-mfix-cortex-a72-aes-1655431[0m
       [1m-mno-fix-cortex-a72-aes-1655431[0m
           Enable (disable) mitigation for an erratum on Cortex-A57 and Cortex-A72 that affects the AES cryptographic
           instructions.   This  option  is  enabled  by  default when either [1m-mcpu=cortex-a57 [22mor [1m-mcpu=cortex-a72 [22mis
           specified.

       [1m-munaligned-access[0m
       [1m-mno-unaligned-access[0m
           Enables (or disables) reading and writing of 16- and 32- bit values from addresses that are not 16- or 32-
           bit aligned.  By default unaligned access is disabled for all  pre-ARMv6,  all  ARMv6-M  and  for  ARMv8-M
           Baseline  architectures, and enabled for all other architectures.  If unaligned access is not enabled then
           words in packed data structures are accessed a byte at a time.

           The ARM attribute "Tag_CPU_unaligned_access" is set in the generated object file to either true or  false,
           depending  upon  the  setting of this option.  If unaligned access is enabled then the preprocessor symbol
           "__ARM_FEATURE_UNALIGNED" is also defined.

       [1m-mneon-for-64bits[0m
           This option is deprecated and has no effect.

       [1m-mslow-flash-data[0m
           Assume loading data from flash is slower than fetching instruction.  Therefore literal load  is  minimized
           for  better  performance.   This  option  is  only supported when compiling for ARMv7 M-profile and off by
           default. It conflicts with [1m-mword-relocations[22m.

       [1m-masm-syntax-unified[0m
           Assume inline assembler is using unified asm syntax.  The default is currently off which  implies  divided
           syntax.  This option has no impact on Thumb2. However, this may change in future releases of GCC.  Divided
           syntax should be considered deprecated.

       [1m-mrestrict-it[0m
           Restricts generation of IT blocks to conform to the rules of ARMv8-A.  IT blocks can only contain a single
           16-bit instruction from a select set of instructions. This option is on by default for ARMv8-A Thumb mode.

       [1m-mprint-tune-info[0m
           Print  CPU  tuning  information  as comment in assembler file.  This is an option used only for regression
           testing of the compiler and not intended for ordinary use in compiling code.  This option is  disabled  by
           default.

       [1m-mverbose-cost-dump[0m
           Enable  verbose  cost model dumping in the debug dump files.  This option is provided for use in debugging
           the compiler.

       [1m-mpure-code[0m
           Do not allow constant data to be placed in code sections.  Additionally, when  compiling  for  ELF  object
           format  give  all  text  sections  the  ELF processor-specific section attribute "SHF_ARM_PURECODE".  This
           option is only available when generating non-pic code for M-profile targets.

       [1m-mcmse[0m
           Generate secure  code  as  per  the  "ARMv8-M  Security  Extensions:  Requirements  on  Development  Tools
           Engineering           Specification",           which           can          be          found          on
           <[1mhttps://developer.arm.com/documentation/ecm0359818/latest/[22m>.

       [1m-mfix-cmse-cve-2021-35465[0m
           Mitigate against a potential security issue with the "VLLDM" instruction in some  M-profile  devices  when
           using  CMSE  (CVE-2021-365465).   This  option  is  enabled by default when the option [1m-mcpu= [22mis used with
           "cortex-m33",    "cortex-m35p",    "cortex-m55",    "cortex-m85"     or     "star-mc1".     The     option
           [1m-mno-fix-cmse-cve-2021-35465 [22mcan be used to disable the mitigation.

       [1m-mstack-protector-guard=[4m[22mguard[0m
       [1m-mstack-protector-guard-offset=[4m[22moffset[0m
           Generate  stack protection code using canary at [4mguard[24m.  Supported locations are [1mglobal [22mfor a global canary
           or [1mtls [22mfor a canary accessible via the TLS register. The option [1m-mstack-protector-guard-offset= [22mis for use
           with [1m-fstack-protector-guard=tls [22mand not for use in user-land code.

       [1m-mfdpic[0m
       [1m-mno-fdpic[0m
           Select the FDPIC ABI, which uses 64-bit function descriptors to represent pointers to functions.  When the
           compiler is configured for "arm-*-uclinuxfdpiceabi" targets, this option is  on  by  default  and  implies
           [1m-fPIE  [22mif  none  of the PIC/PIE-related options is provided.  On other targets, it only enables the FDPIC-
           specific code generation features, and the user should explicitly provide the PIC/PIE-related  options  as
           needed.

           Note  that  static  linking  is  not  supported because it would still involve the dynamic linker when the
           program self-relocates.  If such behavior is acceptable, use -static and -Wl,-dynamic-linker options.

           The opposite [1m-mno-fdpic [22moption is useful  (and  required)  to  build  the  Linux  kernel  using  the  same
           ("arm-*-uclinuxfdpiceabi") toolchain as the one used to build the userland programs.

       [1m-mbranch-protection=[4m[22mnone[24m[1m|[4m[22mstandard[24m[1m|[4m[22mpac-ret[24m[1m[+[4m[22mleaf[24m[1m][+[4m[22mbti[24m[1m]|[4m[22mbti[24m[1m[+[4m[22mpac-ret[24m[1m[+[4m[22mleaf[24m[1m]][0m
           Enable  branch protection features (armv8.1-m.main only).  [1mnone [22mgenerate code without branch protection or
           return address signing.  [1mstandard[+[4m[22mleaf[24m[1m] [22mgenerate code with all  branch  protection  features  enabled  at
           their standard level.  [1mpac-ret[+[4m[22mleaf[24m[1m] [22mgenerate code with return address signing set to its standard level,
           which  is  to sign all functions that save the return address to memory.  [1mleaf [22mWhen return address signing
           is enabled, also sign leaf functions even if they do not write the return address  to  memory.   +[1mbti  [22mAdd
           landing-pad instructions at the permitted targets of indirect branch instructions.

           If  the  [1m+pacbti  [22marchitecture  extension  is  not  enabled, then all branch protection and return address
           signing operations are constrained to use only the instructions defined in  the  architectural-NOP  space.
           The  generated  code  will  remain backwards-compatible with earlier versions of the architecture, but the
           additional security can be enabled at run time on processors that support the [1mPACBTI [22mextension.

           Branch target enforcement using BTI can only be enabled at runtime if all code in the application has been
           compiled with at least [1m-mbranch-protection=bti[22m.

           Any setting other than [1mnone [22mis supported only on armv8-m.main or later.

           The default is to generate code without branch protection or return address signing.

       [4mAVR[24m [4mOptions[0m

       These options are defined for AVR implementations:

       [1m-mmcu=[4m[22mmcu[0m
           Specify Atmel AVR instruction set architectures (ISA) or MCU type.

           The default for this option is [1mavr2[22m.

           GCC supports the following AVR devices and ISAs:

           "avr2"
               "Classic" devices with up to 8 KiB of program memory.   [4mmcu[24m  =  "attiny22",  "attiny26",  "at90s2313",
               "at90s2323",   "at90s2333",   "at90s2343",   "at90s4414",   "at90s4433",   "at90s4434",   "at90c8534",
               "at90s8515", "at90s8535".

           "avr25"
               "Classic" devices with up to 8 KiB  of  program  memory  and  with  the  "MOVW"  instruction.   [4mmcu[24m  =
               "attiny13", "attiny13a", "attiny24", "attiny24a", "attiny25", "attiny261", "attiny261a", "attiny2313",
               "attiny2313a", "attiny43u", "attiny44", "attiny44a", "attiny45", "attiny48", "attiny441", "attiny461",
               "attiny461a",  "attiny4313", "attiny84", "attiny84a", "attiny85", "attiny87", "attiny88", "attiny828",
               "attiny841", "attiny861", "attiny861a", "ata5272", "ata6616c", "at86rf401".

           "avr3"
               "Classic" devices with 16 KiB up to 64 KiB of program memory.  [4mmcu[24m = "at76c711", "at43usb355".

           "avr31"
               "Classic" devices with 128 KiB of program memory.  [4mmcu[24m = "atmega103", "at43usb320".

           "avr35"
               "Classic" devices with 16 KiB up to 64 KiB of program memory and with the "MOVW" instruction.   [4mmcu[24m  =
               "attiny167",   "attiny1634",   "atmega8u2",   "atmega16u2",   "atmega32u2",   "ata5505",   "ata6617c",
               "ata664251", "at90usb82", "at90usb162".

           "avr4"
               "Enhanced" devices with up to 8 KiB of program memory.  [4mmcu[24m =  "atmega48",  "atmega48a",  "atmega48p",
               "atmega48pa", "atmega48pb", "atmega8", "atmega8a", "atmega8hva", "atmega88", "atmega88a", "atmega88p",
               "atmega88pa",  "atmega88pb",  "atmega8515", "atmega8535", "ata6285", "ata6286", "ata6289", "ata6612c",
               "at90pwm1", "at90pwm2", "at90pwm2b", "at90pwm3", "at90pwm3b", "at90pwm81".

           "avr5"
               "Enhanced" devices with 16 KiB up to 64  KiB  of  program  memory.   [4mmcu[24m  =  "atmega16",  "atmega16a",
               "atmega16hva",   "atmega16hva2",   "atmega16hvb",   "atmega16hvbrevb",   "atmega16m1",   "atmega16u4",
               "atmega161",  "atmega162",  "atmega163",  "atmega164a",  "atmega164p",   "atmega164pa",   "atmega165",
               "atmega165a",  "atmega165p",  "atmega165pa",  "atmega168",  "atmega168a", "atmega168p", "atmega168pa",
               "atmega168pb",  "atmega169",  "atmega169a",  "atmega169p",  "atmega169pa",  "atmega32",   "atmega32a",
               "atmega32c1", "atmega32hvb", "atmega32hvbrevb", "atmega32m1", "atmega32u4", "atmega32u6", "atmega323",
               "atmega324a",  "atmega324p",  "atmega324pa",  "atmega324pb",  "atmega325", "atmega325a", "atmega325p",
               "atmega325pa", "atmega328",  "atmega328p",  "atmega328pb",  "atmega329",  "atmega329a",  "atmega329p",
               "atmega329pa",    "atmega3250",    "atmega3250a",    "atmega3250p",    "atmega3250pa",   "atmega3290",
               "atmega3290a", "atmega3290p",  "atmega3290pa",  "atmega406",  "atmega64",  "atmega64a",  "atmega64c1",
               "atmega64hve",  "atmega64hve2",  "atmega64m1", "atmega64rfr2", "atmega640", "atmega644", "atmega644a",
               "atmega644p", "atmega644pa", "atmega644rfr2", "atmega645",  "atmega645a",  "atmega645p",  "atmega649",
               "atmega649a",  "atmega649p",  "atmega6450", "atmega6450a", "atmega6450p", "atmega6490", "atmega6490a",
               "atmega6490p",  "ata5795",  "ata5790",  "ata5790n",  "ata5791",  "ata6613c",  "ata6614q",   "ata5782",
               "ata5831", "ata8210", "ata8510", "ata5702m322", "at90pwm161", "at90pwm216", "at90pwm316", "at90can32",
               "at90can64", "at90scr100", "at90usb646", "at90usb647", "at94k", "m3000".

           "avr51"
               "Enhanced"  devices with 128 KiB of program memory.  [4mmcu[24m = "atmega128", "atmega128a", "atmega128rfa1",
               "atmega128rfr2",   "atmega1280",   "atmega1281",   "atmega1284",   "atmega1284p",    "atmega1284rfr2",
               "at90can128", "at90usb1286", "at90usb1287".

           "avr6"
               "Enhanced"  devices  with  3-byte  PC,  i.e.  with  more  than  128  KiB  of  program  memory.   [4mmcu[24m =
               "atmega256rfr2", "atmega2560", "atmega2561", "atmega2564rfr2".

           "avrxmega2"
               "XMEGA" devices with more than 8 KiB and up  to  64  KiB  of  program  memory.   [4mmcu[24m  =  "atxmega8e5",
               "atxmega16a4",    "atxmega16a4u",    "atxmega16c4",   "atxmega16d4",   "atxmega16e5",   "atxmega32a4",
               "atxmega32a4u",   "atxmega32c3",   "atxmega32c4",   "atxmega32d3",    "atxmega32d4",    "atxmega32e5",
               "avr64da28",   "avr64da32",   "avr64da48",   "avr64da64",   "avr64db28",   "avr64db32",   "avr64db48",
               "avr64db64".

           "avrxmega3"
               "XMEGA" devices with up to 64 KiB of combined program memory and RAM, and with program memory  visible
               in  the  RAM  address  space.   [4mmcu[24m = "attiny202", "attiny204", "attiny212", "attiny214", "attiny402",
               "attiny404",   "attiny406",   "attiny412",   "attiny414",   "attiny416",   "attiny417",   "attiny804",
               "attiny806",   "attiny807",   "attiny814",   "attiny816",   "attiny817",  "attiny1604",  "attiny1606",
               "attiny1607", "attiny1614",  "attiny1616",  "attiny1617",  "attiny3214",  "attiny3216",  "attiny3217",
               "atmega808",   "atmega809",  "atmega1608",  "atmega1609",  "atmega3208",  "atmega3209",  "atmega4808",
               "atmega4809", "avr32da28", "avr32da32", "avr32da48", "avr32db28", "avr32db32", "avr32db48".

           "avrxmega4"
               "XMEGA" devices with more than 64 KiB and up to 128 KiB  of  program  memory.   [4mmcu[24m  =  "atxmega64a3",
               "atxmega64a3u",    "atxmega64a4u",   "atxmega64b1",   "atxmega64b3",   "atxmega64c3",   "atxmega64d3",
               "atxmega64d4", "avr128da28", "avr128da32",  "avr128da48",  "avr128da64",  "avr128db28",  "avr128db32",
               "avr128db48", "avr128db64".

           "avrxmega5"
               "XMEGA" devices with more than 64 KiB and up to 128 KiB of program memory and more than 64 KiB of RAM.
               [4mmcu[24m = "atxmega64a1", "atxmega64a1u".

           "avrxmega6"
               "XMEGA"  devices  with  more  than  128 KiB of program memory.  [4mmcu[24m = "atxmega128a3", "atxmega128a3u",
               "atxmega128b1",  "atxmega128b3",  "atxmega128c3",  "atxmega128d3",   "atxmega128d4",   "atxmega192a3",
               "atxmega192a3u",  "atxmega192c3",  "atxmega192d3",  "atxmega256a3", "atxmega256a3b", "atxmega256a3bu",
               "atxmega256a3u", "atxmega256c3", "atxmega256d3", "atxmega384c3", "atxmega384d3".

           "avrxmega7"
               "XMEGA" devices with more than 128 KiB of program  memory  and  more  than  64  KiB  of  RAM.   [4mmcu[24m  =
               "atxmega128a1", "atxmega128a1u", "atxmega128a4u".

           "avrtiny"
               "TINY"  Tiny  core  devices  with  512  B  up to 4 KiB of program memory.  [4mmcu[24m = "attiny4", "attiny5",
               "attiny9", "attiny10", "attiny20", "attiny40".

           "avr1"
               This ISA is implemented by the minimal AVR core and supported for assembler only.  [4mmcu[24m  =  "attiny11",
               "attiny12", "attiny15", "attiny28", "at90s1200".

       [1m-mabsdata[0m
           Assume that all data in static storage can be accessed by LDS / STS instructions.  This option has only an
           effect  on  reduced  Tiny  devices like ATtiny40.  See also the "absdata" [1mAVR Variable Attributes,variable[0m
           [1mattribute[22m.

       [1m-maccumulate-args[0m
           Accumulate outgoing function arguments and acquire/release the needed stack space  for  outgoing  function
           arguments  once  in function prologue/epilogue.  Without this option, outgoing arguments are pushed before
           calling a function and popped afterwards.

           Popping the arguments after the function call can be expensive on AVR so that accumulating the stack space
           might lead to smaller executables because arguments need not be  removed  from  the  stack  after  such  a
           function call.

           This  option  can lead to reduced code size for functions that perform several calls to functions that get
           their arguments on the stack like calls to printf-like functions.

       [1m-mbranch-cost=[4m[22mcost[0m
           Set the branch costs for conditional branch instructions to [4mcost[24m.  Reasonable values for [4mcost[24m  are  small,
           non-negative integers. The default branch cost is 0.

       [1m-mcall-prologues[0m
           Functions prologues/epilogues are expanded as calls to appropriate subroutines.  Code size is smaller.

       [1m-mdouble=[4m[22mbits[0m
       [1m-mlong-double=[4m[22mbits[0m
           Set  the size (in bits) of the "double" or "long double" type, respectively.  Possible values for [4mbits[24m are
           32 and 64.  Whether or not a specific value for [4mbits[24m  is  allowed  depends  on  the  "--with-double="  and
           "--with-long-double="  configure options  ("https://gcc.gnu.org/install/configure.html#avr"), and the same
           applies for the default values of the options.

       [1m-mgas-isr-prologues[0m
           Interrupt service routines (ISRs) may use the "__gcc_isr" pseudo instruction supported  by  GNU  Binutils.
           If  this  option is on, the feature can still be disabled for individual ISRs by means of the [1mAVR Function[0m
           [1mAttributes,,"no_gccisr" [22mfunction attribute.  This feature is activated per default if optimization  is  on
           (but    not    with    [1m-Og[22m,   @pxref{Optimize   Options}),   and   if   GNU   Binutils   support   PR21683
           ("https://sourceware.org/PR21683").

       [1m-mint8[0m
           Assume "int" to be 8-bit integer.  This affects the sizes of all types: a "char" is 1 byte, an "int" is  1
           byte,  a  "long" is 2 bytes, and "long long" is 4 bytes.  Please note that this option does not conform to
           the C standards, but it results in smaller code size.

       [1m-mmain-is-OS_task[0m
           Do not save registers  in  "main".   The  effect  is  the  same  like  attaching  attribute  [1mAVR  Function[0m
           [1mAttributes,,"OS_task" [22mto "main". It is activated per default if optimization is on.

       [1m-mn-flash=[4m[22mnum[0m
           Assume that the flash memory has a size of [4mnum[24m times 64 KiB.

       [1m-mno-interrupts[0m
           Generated code is not compatible with hardware interrupts.  Code size is smaller.

       [1m-mrelax[0m
           Try  to  replace  "CALL"  resp.  "JMP"  instruction  by  the  shorter  "RCALL" resp. "RJMP" instruction if
           applicable.  Setting [1m-mrelax [22mjust adds the [1m--mlink-relax [22moption to the assembler's command  line  and  the
           [1m--relax [22moption to the linker's command line.

           Jump  relaxing  is  performed  by  the  linker  because jump offsets are not known before code is located.
           Therefore, the assembler code generated by  the  compiler  is  the  same,  but  the  instructions  in  the
           executable may differ from instructions in the assembler code.

           Relaxing must be turned on if linker stubs are needed, see the section on "EIND" and linker stubs below.

       [1m-mrmw[0m
           Assume that the device supports the Read-Modify-Write instructions "XCH", "LAC", "LAS" and "LAT".

       [1m-mshort-calls[0m
           Assume that "RJMP" and "RCALL" can target the whole program memory.

           This  option  is  used internally for multilib selection.  It is not an optimization option, and you don't
           need to set it by hand.

       [1m-msp8[0m
           Treat the stack pointer register as an 8-bit register, i.e. assume the high byte of the stack  pointer  is
           zero.  In general, you don't need to set this option by hand.

           This  option is used internally by the compiler to select and build multilibs for architectures "avr2" and
           "avr25".  These architectures mix devices with and without "SPH".  For any setting other  than  [1m-mmcu=avr2[0m
           or  [1m-mmcu=avr25  [22mthe  compiler driver adds or removes this option from the compiler proper's command line,
           because the compiler then knows if the device or architecture has an 8-bit stack pointer and thus no "SPH"
           register or not.

       [1m-mstrict-X[0m
           Use address register "X" in a way proposed by the hardware.  This means that "X" is only used in indirect,
           post-increment or pre-decrement addressing.

           Without this option, the "X" register may be used in the same way as "Y" or "Z" which then is emulated  by
           additional instructions.  For example, loading a value with "X+const" addressing with a small non-negative
           "const < 64" to a register [4mRn[24m is performed as

                   adiw r26, const   ; X += const
                   ld   <Rn>, X        ; <Rn> = *X
                   sbiw r26, const   ; X -= const

       [1m-mtiny-stack[0m
           Only change the lower 8 bits of the stack pointer.

       [1m-mfract-convert-truncate[0m
           Allow to use truncation instead of rounding towards zero for fractional fixed-point types.

       [1m-nodevicelib[0m
           Don't link against AVR-LibC's device specific library "lib<mcu>.a".

       [1m-nodevicespecs[0m
           Don't   add  [1m-specs=device-specs/specs-[4m[22mmcu[24m  to  the  compiler  driver's  command  line.   The  user  takes
           responsibility for supplying the sub-processes like compiler proper, assembler and linker with appropriate
           command line options.  This means that the user has to supply her private device specs file  by  means  of
           [1m-specs=[4m[22mpath-to-specs-file[24m.  There is no more need for option [1m-mmcu=[4m[22mmcu[24m.

           This option can also serve as a replacement for the older way of specifying custom device-specs files that
           needed  [1m-B [4m[22msome-path[24m to point to a directory which contains a folder named "device-specs" which contains a
           specs file named "specs-[4mmcu[24m", where [4mmcu[24m was specified by [1m-mmcu=[4m[22mmcu[24m.

       [1m-Waddr-space-convert[0m
           Warn about conversions between address spaces in the  case  where  the  resulting  address  space  is  not
           contained in the incoming address space.

       [1m-Wmisspelled-isr[0m
           Warn if the ISR is misspelled, i.e. without __vector prefix.  Enabled by default.

       "EIND" and Devices with More Than 128 Ki Bytes of Flash

       Pointers  in  the  implementation are 16 bits wide.  The address of a function or label is represented as word
       address so that indirect jumps and calls can target any code address in the range of 64 Ki words.

       In order to facilitate indirect jump on devices with more than 128 Ki bytes of program memory space, there  is
       a  special  function  register  called  "EIND" that serves as most significant part of the target address when
       "EICALL" or "EIJMP" instructions are used.

       Indirect jumps and calls on these devices are handled as follows by the  compiler  and  are  subject  to  some
       limitations:

       *   The compiler never sets "EIND".

       *   The  compiler  uses  "EIND"  implicitly  in "EICALL"/"EIJMP" instructions or might read "EIND" directly in
           order to emulate an indirect call/jump by means of a "RET" instruction.

       *   The compiler assumes that "EIND" never changes during the startup  code  or  during  the  application.  In
           particular, "EIND" is not saved/restored in function or interrupt service routine prologue/epilogue.

       *   For  indirect  calls  to  functions  and  computed  goto,  the linker generates [4mstubs[24m. Stubs are jump pads
           sometimes also called [4mtrampolines[24m. Thus, the indirect call/jump jumps to such a stub.  The stub contains a
           direct jump to the desired address.

       *   Linker relaxation must be turned on so that the linker generates the stubs correctly  in  all  situations.
           See the compiler option [1m-mrelax [22mand the linker option [1m--relax[22m.  There are corner cases where the linker is
           supposed to generate stubs but aborts without relaxation and without a helpful error message.

       *   The  default  linker script is arranged for code with "EIND = 0".  If code is supposed to work for a setup
           with "EIND != 0", a custom linker script has to be used in order to place the sections  whose  name  start
           with ".trampolines" into the segment where "EIND" points to.

       *   The  startup  code from libgcc never sets "EIND".  Notice that startup code is a blend of code from libgcc
           and   AVR-LibC.    For   the   impact   of   AVR-LibC   on   "EIND",    see    the    AVR-LibC user manual
           ("https://www.nongnu.org/avr-libc/user-manual/").

       *   It  is  legitimate  for  user-specific  startup  code  to  set  up  "EIND"  early, for example by means of
           initialization code located in section ".init3". Such  code  runs  prior  to  general  startup  code  that
           initializes  RAM  and calls constructors, but after the bit of startup code from AVR-LibC that sets "EIND"
           to the segment where the vector table is located.

                   #include <avr/io.h>

                   static void
                   __attribute__((section(".init3"),naked,used,no_instrument_function))
                   init3_set_eind (void)
                   {
                     __asm volatile ("ldi r24,pm_hh8(__trampolines_start)\n\t"
                                     "out %i0,r24" :: "n" (&EIND) : "r24","memory");
                   }

           The "__trampolines_start" symbol is defined in the linker script.

       *   Stubs are generated automatically by the linker if the following two conditions are met:

           -<The address of a label is taken by means of the "gs" modifier>
               (short for [4mgenerate[24m [4mstubs[24m) like so:

                       LDI r24, lo8(gs(<func>))
                       LDI r25, hi8(gs(<func>))

           -<The final location of that label is in a code segment>
               [4moutside[24m the segment where the stubs are located.

       *   The compiler emits such "gs" modifiers for code labels in the following situations:

           -<Taking address of a function or code label.>
           -<Computed goto.>
           -<If prologue-save function is used, see [1m-mcall-prologues[22m>
               command-line option.

           -<Switch/case dispatch tables. If you do not want such dispatch>
               tables you can specify the [1m-fno-jump-tables [22mcommand-line option.

           -<C and C++ constructors/destructors called during startup/shutdown.>
           -<If the tools hit a gs() modifier explained above.>
       *   Jumping to non-symbolic addresses like so is [4mnot[24m supported:

                   int main (void)
                   {
                       /* Call function at word address 0x2 */
                       return ((int(*)(void)) 0x2)();
                   }

           Instead, a stub has to be set up, i.e. the function has to be called through a  symbol  ("func_4"  in  the
           example):

                   int main (void)
                   {
                       extern int func_4 (void);

                       /* Call function at byte address 0x4 */
                       return func_4();
                   }

           and the application be linked with [1m-Wl,--defsym,func_4=0x4[22m.  Alternatively, "func_4" can be defined in the
           linker script.

       Handling of the "RAMPD", "RAMPX", "RAMPY" and "RAMPZ" Special Function Registers

       Some  AVR devices support memories larger than the 64 KiB range that can be accessed with 16-bit pointers.  To
       access memory locations outside this 64 KiB range, the content of a "RAMP" register is used as  high  part  of
       the  address:  The  "X",  "Y", "Z" address register is concatenated with the "RAMPX", "RAMPY", "RAMPZ" special
       function register, respectively, to get a wide address.  Similarly,  "RAMPD"  is  used  together  with  direct
       addressing.

       *   The startup code initializes the "RAMP" special function registers with zero.

       *   If a [1mAVR Named Address Spaces,named address space [22mother than generic or "__flash" is used, then "RAMPZ" is
           set as needed before the operation.

       *   If  the  device  supports RAM larger than 64 KiB and the compiler needs to change "RAMPZ" to accomplish an
           operation, "RAMPZ" is reset to zero after the operation.

       *   If the device comes with a specific "RAMP" register, the ISR prologue/epilogue saves/restores that SFR and
           initializes it with zero in case the ISR code might (implicitly) use it.

       *   RAM larger than 64 KiB is not supported by GCC for AVR targets.  If you use inline assembler to read  from
           locations  outside  the  16-bit address range and change one of the "RAMP" registers, you must reset it to
           zero after the access.

       AVR Built-in Macros

       GCC defines several built-in macros so that the user code can test for the presence or  absence  of  features.
       Almost  any  of  the  following built-in macros are deduced from device capabilities and thus triggered by the
       [1m-mmcu= [22mcommand-line option.

       For even more AVR-specific built-in macros see [1mAVR Named Address Spaces [22mand [1mAVR Built-in Functions[22m.

       "__AVR_ARCH__"
           Build-in macro that resolves to a decimal number that identifies  the  architecture  and  depends  on  the
           [1m-mmcu=[4m[22mmcu[24m option.  Possible values are:

           2, 25, 3, 31, 35, 4, 5, 51, 6

           for [4mmcu[24m="avr2", "avr25", "avr3", "avr31", "avr35", "avr4", "avr5", "avr51", "avr6",

           respectively and

           100, 102, 103, 104, 105, 106, 107

           for   [4mmcu[24m="avrtiny",   "avrxmega2",   "avrxmega3",  "avrxmega4",  "avrxmega5",  "avrxmega6",  "avrxmega7",
           respectively.  If [4mmcu[24m specifies a device, this built-in  macro  is  set  accordingly.  For  example,  with
           [1m-mmcu=atmega8 [22mthe macro is defined to 4.

       "__AVR_[4mDevice[24m__"
           Setting  [1m-mmcu=[4m[22mdevice[24m  defines  this  built-in  macro  which  reflects  the  device's  name.  For example,
           [1m-mmcu=atmega8 [22mdefines the built-in macro "__AVR_ATmega8__", [1m-mmcu=attiny261a [22mdefines "__AVR_ATtiny261A__",
           etc.

           The built-in macros' names follow the scheme "__AVR_[4mDevice[24m__" where [4mDevice[24m is the device name as from  the
           AVR  user  manual.  The difference between [4mDevice[24m in the built-in macro and [4mdevice[24m in [1m-mmcu=[4m[22mdevice[24m is that
           the latter is always lowercase.

           If [4mdevice[24m is not a device but only a core architecture like [1mavr51[22m, this macro is not defined.

       "__AVR_DEVICE_NAME__"
           Setting [1m-mmcu=[4m[22mdevice[24m defines this built-in macro to the device's name. For example, with [1m-mmcu=atmega8 [22mthe
           macro is defined to "atmega8".

           If [4mdevice[24m is not a device but only a core architecture like [1mavr51[22m, this macro is not defined.

       "__AVR_XMEGA__"
           The device / architecture belongs to the XMEGA family of devices.

       "__AVR_HAVE_ELPM__"
           The device has the "ELPM" instruction.

       "__AVR_HAVE_ELPMX__"
           The device has the "ELPM R[4mn[24m,Z" and "ELPM R[4mn[24m,Z+" instructions.

       "__AVR_HAVE_MOVW__"
           The device has the "MOVW" instruction to perform 16-bit register-register moves.

       "__AVR_HAVE_LPMX__"
           The device has the "LPM R[4mn[24m,Z" and "LPM R[4mn[24m,Z+" instructions.

       "__AVR_HAVE_MUL__"
           The device has a hardware multiplier.

       "__AVR_HAVE_JMP_CALL__"
           The device has the "JMP" and "CALL" instructions.  This is the case for devices with more than  8  KiB  of
           program memory.

       "__AVR_HAVE_EIJMP_EICALL__"
       "__AVR_3_BYTE_PC__"
           The device has the "EIJMP" and "EICALL" instructions.  This is the case for devices with more than 128 KiB
           of program memory.  This also means that the program counter (PC) is 3 bytes wide.

       "__AVR_2_BYTE_PC__"
           The  program  counter  (PC)  is  2  bytes wide. This is the case for devices with up to 128 KiB of program
           memory.

       "__AVR_HAVE_8BIT_SP__"
       "__AVR_HAVE_16BIT_SP__"
           The stack pointer (SP) register is treated as 8-bit respectively 16-bit register  by  the  compiler.   The
           definition of these macros is affected by [1m-mtiny-stack[22m.

       "__AVR_HAVE_SPH__"
       "__AVR_SP8__"
           The  device  has  the  SPH  (high  part  of stack pointer) special function register or has an 8-bit stack
           pointer, respectively.  The definition of these  macros  is  affected  by  [1m-mmcu=  [22mand  in  the  cases  of
           [1m-mmcu=avr2 [22mand [1m-mmcu=avr25 [22malso by [1m-msp8[22m.

       "__AVR_HAVE_RAMPD__"
       "__AVR_HAVE_RAMPX__"
       "__AVR_HAVE_RAMPY__"
       "__AVR_HAVE_RAMPZ__"
           The device has the "RAMPD", "RAMPX", "RAMPY", "RAMPZ" special function register, respectively.

       "__NO_INTERRUPTS__"
           This macro reflects the [1m-mno-interrupts [22mcommand-line option.

       "__AVR_ERRATA_SKIP__"
       "__AVR_ERRATA_SKIP_JMP_CALL__"
           Some  AVR  devices (AT90S8515, ATmega103) must not skip 32-bit instructions because of a hardware erratum.
           Skip instructions are "SBRS", "SBRC", "SBIS", "SBIC" and "CPSE".  The second  macro  is  only  defined  if
           "__AVR_HAVE_JMP_CALL__" is also set.

       "__AVR_ISA_RMW__"
           The device has Read-Modify-Write instructions (XCH, LAC, LAS and LAT).

       "__AVR_SFR_OFFSET__=[4moffset[24m"
           Instructions  that  can  address I/O special function registers directly like "IN", "OUT", "SBI", etc. may
           use a different address as if addressed by an instruction to access RAM like "LD" or  "STS".  This  offset
           depends  on  the  device  architecture  and  has to be subtracted from the RAM address in order to get the
           respective I/O address.

       "__AVR_SHORT_CALLS__"
           The [1m-mshort-calls [22mcommand line option is set.

       "__AVR_PM_BASE_ADDRESS__=[4maddr[24m"
           Some devices support reading from flash memory by means of "LD*" instructions.  The flash memory  is  seen
           in  the  data address space at an offset of "__AVR_PM_BASE_ADDRESS__".  If this macro is not defined, this
           feature is not available.  If defined, the address space is linear and there is no need to  put  ".rodata"
           into  RAM.   This  is  handled  by  the  default  linker  description file, and is currently available for
           "avrtiny" and "avrxmega3".  Even more convenient, there is no need to use address spaces like "__flash" or
           features like attribute "progmem" and "pgm_read_*".

       "__WITH_AVRLIBC__"
           The compiler is configured to be used together with AVR-Libc.  See the [1m--with-avrlibc [22mconfigure option.

       "__HAVE_DOUBLE_MULTILIB__"
           Defined if [1m-mdouble= [22macts as a multilib option.

       "__HAVE_DOUBLE32__"
       "__HAVE_DOUBLE64__"
           Defined if the compiler supports 32-bit double resp. 64-bit double.  The actual  layout  is  specified  by
           option [1m-mdouble=[22m.

       "__DEFAULT_DOUBLE__"
           The  size  in  bits of "double" if [1m-mdouble= [22mis not set.  To test the layout of "double" in a program, use
           the built-in macro "__SIZEOF_DOUBLE__".

       "__HAVE_LONG_DOUBLE32__"
       "__HAVE_LONG_DOUBLE64__"
       "__HAVE_LONG_DOUBLE_MULTILIB__"
       "__DEFAULT_LONG_DOUBLE__"
           Same as above, but for "long double" instead of "double".

       "__WITH_DOUBLE_COMPARISON__"
           Reflects          the          "--with-double-comparison={tristate|bool|libf7}"           configure option
           ("https://gcc.gnu.org/install/configure.html#avr") and is defined to 2 or 3.

       "__WITH_LIBF7_LIBGCC__"
       "__WITH_LIBF7_MATH__"
       "__WITH_LIBF7_MATH_SYMBOLS__"
           Reflects             the             "--with-libf7={libgcc|math|math-symbols}"            configure option
           ("https://gcc.gnu.org/install/configure.html#avr").

       [4mBlackfin[24m [4mOptions[0m

       [1m-mcpu=[4m[22mcpu[24m[[1m-[4m[22msirevision[24m]
           Specifies the name of the target Blackfin processor.  Currently, [4mcpu[24m can be one of  [1mbf512[22m,  [1mbf514[22m,  [1mbf516[22m,
           [1mbf518[22m,  [1mbf522[22m,  [1mbf523[22m, [1mbf524[22m, [1mbf525[22m, [1mbf526[22m, [1mbf527[22m, [1mbf531[22m, [1mbf532[22m, [1mbf533[22m, [1mbf534[22m, [1mbf536[22m, [1mbf537[22m, [1mbf538[22m, [1mbf539[22m,
           [1mbf542[22m, [1mbf544[22m, [1mbf547[22m, [1mbf548[22m, [1mbf549[22m, [1mbf542m[22m, [1mbf544m[22m, [1mbf547m[22m, [1mbf548m[22m, [1mbf549m[22m, [1mbf561[22m, [1mbf592[22m.

           The optional [4msirevision[24m specifies the silicon revision of the target Blackfin processor.  Any  workarounds
           available  for  the  targeted  silicon  revision  are  enabled.  If [4msirevision[24m is [1mnone[22m, no workarounds are
           enabled.   If  [4msirevision[24m  is  [1many[22m,  all  workarounds  for  the  targeted  processor  are  enabled.    The
           "__SILICON_REVISION__" macro is defined to two hexadecimal digits representing the major and minor numbers
           in the silicon revision.  If [4msirevision[24m is [1mnone[22m, the "__SILICON_REVISION__" is not defined.  If [4msirevision[0m
           is  [1many[22m, the "__SILICON_REVISION__" is defined to be 0xffff.  If this optional [4msirevision[24m is not used, GCC
           assumes the latest known silicon revision of the targeted Blackfin processor.

           GCC defines a preprocessor macro for the specified [4mcpu[24m.  For the [1mbfin-elf [22mtoolchain,  this  option  causes
           the hardware BSP provided by libgloss to be linked in if [1m-msim [22mis not given.

           Without this option, [1mbf532 [22mis used as the processor by default.

           Note that support for [1mbf561 [22mis incomplete.  For [1mbf561[22m, only the preprocessor macro is defined.

       [1m-msim[0m
           Specifies  that  the  program  will  be  run  on the simulator.  This causes the simulator BSP provided by
           libgloss to be linked in.  This option has effect only for [1mbfin-elf  [22mtoolchain.   Certain  other  options,
           such as [1m-mid-shared-library [22mand [1m-mfdpic[22m, imply [1m-msim[22m.

       [1m-momit-leaf-frame-pointer[0m
           Don't  keep the frame pointer in a register for leaf functions.  This avoids the instructions to save, set
           up and restore frame pointers and makes an extra register available in leaf functions.

       [1m-mspecld-anomaly[0m
           When enabled, the compiler ensures that the generated code does not contain speculative loads  after  jump
           instructions. If this option is used, "__WORKAROUND_SPECULATIVE_LOADS" is defined.

       [1m-mno-specld-anomaly[0m
           Don't generate extra code to prevent speculative loads from occurring.

       [1m-mcsync-anomaly[0m
           When  enabled,  the  compiler ensures that the generated code does not contain CSYNC or SSYNC instructions
           too soon after conditional branches.  If this option is used, "__WORKAROUND_SPECULATIVE_SYNCS" is defined.

       [1m-mno-csync-anomaly[0m
           Don't generate extra code to prevent  CSYNC  or  SSYNC  instructions  from  occurring  too  soon  after  a
           conditional branch.

       [1m-mlow64k[0m
           When  enabled,  the  compiler is free to take advantage of the knowledge that the entire program fits into
           the low 64k of memory.

       [1m-mno-low64k[0m
           Assume that the program is arbitrarily large.  This is the default.

       [1m-mstack-check-l1[0m
           Do stack checking using information placed into L1 scratchpad memory by the uClinux kernel.

       [1m-mid-shared-library[0m
           Generate code that supports shared libraries via the library ID method.  This allows for execute in  place
           and  shared  libraries  in  an  environment without virtual memory management.  This option implies [1m-fPIC[22m.
           With a [1mbfin-elf [22mtarget, this option implies [1m-msim[22m.

       [1m-mno-id-shared-library[0m
           Generate code that doesn't assume ID-based shared libraries are being used.  This is the default.

       [1m-mleaf-id-shared-library[0m
           Generate code that supports shared libraries via the library ID method, but assumes that this  library  or
           executable  won't link against any other ID shared libraries.  That allows the compiler to use faster code
           for jumps and calls.

       [1m-mno-leaf-id-shared-library[0m
           Do not assume that the code being compiled won't link against any ID shared  libraries.   Slower  code  is
           generated for jump and call insns.

       [1m-mshared-library-id=n[0m
           Specifies  the identification number of the ID-based shared library being compiled.  Specifying a value of
           0 generates more compact code; specifying other values forces the allocation of that number to the current
           library but is no more space- or time-efficient than omitting this option.

       [1m-msep-data[0m
           Generate code that allows the data segment to be located in a different  area  of  memory  from  the  text
           segment.   This  allows  for  execute  in  place  in  an  environment without virtual memory management by
           eliminating relocations against the text section.

       [1m-mno-sep-data[0m
           Generate code that assumes that the data segment follows the text segment.  This is the default.

       [1m-mlong-calls[0m
       [1m-mno-long-calls[0m
           Tells the compiler to perform function calls by first loading the address of the function into a  register
           and then performing a subroutine call on this register.  This switch is needed if the target function lies
           outside of the 24-bit addressing range of the offset-based version of subroutine call instruction.

           This  feature  is not enabled by default.  Specifying [1m-mno-long-calls [22mrestores the default behavior.  Note
           these switches have no effect on how the compiler generates code to handle  function  calls  via  function
           pointers.

       [1m-mfast-fp[0m
           Link with the fast floating-point library. This library relaxes some of the IEEE floating-point standard's
           rules for checking inputs against Not-a-Number (NAN), in the interest of performance.

       [1m-minline-plt[0m
           Enable  inlining of PLT entries in function calls to functions that are not known to bind locally.  It has
           no effect without [1m-mfdpic[22m.

       [1m-mmulticore[0m
           Build a standalone application for multicore Blackfin processors.  This option causes proper  start  files
           and  link  scripts supporting multicore to be used, and defines the macro "__BFIN_MULTICORE".  It can only
           be used with [1m-mcpu=bf561[22m[[1m-[4m[22msirevision[24m].

           This option can be used with [1m-mcorea [22mor [1m-mcoreb[22m, which selects  the  one-application-per-core  programming
           model.   Without  [1m-mcorea  [22mor [1m-mcoreb[22m, the single-application/dual-core programming model is used. In this
           model, the main function of Core B should be named as "coreb_main".

           If this option is not used, the single-core application programming model is used.

       [1m-mcorea[0m
           Build a standalone application for Core A of BF561 when  using  the  one-application-per-core  programming
           model.  Proper  start  files  and link scripts are used to support Core A, and the macro "__BFIN_COREA" is
           defined.  This option can only be used in conjunction with [1m-mmulticore[22m.

       [1m-mcoreb[0m
           Build a standalone application for Core B of BF561 when  using  the  one-application-per-core  programming
           model.  Proper  start  files  and link scripts are used to support Core B, and the macro "__BFIN_COREB" is
           defined. When this option is used, "coreb_main" should be used instead of "main".  This option can only be
           used in conjunction with [1m-mmulticore[22m.

       [1m-msdram[0m
           Build a standalone application for SDRAM. Proper start  files  and  link  scripts  are  used  to  put  the
           application  into  SDRAM,  and  the  macro  "__BFIN_SDRAM" is defined.  The loader should initialize SDRAM
           before loading the application.

       [1m-micplb[0m
           Assume that ICPLBs are enabled at run time.  This has an effect on certain anomaly workarounds.  For Linux
           targets, the default is to assume ICPLBs are enabled; for standalone applications the default is off.

       [4mC6X[24m [4mOptions[0m

       [1m-march=[4m[22mname[0m
           This specifies the name of the target architecture.   GCC  uses  this  name  to  determine  what  kind  of
           instructions  it  can emit when generating assembly code.  Permissible names are: [1mc62x[22m, [1mc64x[22m, [1mc64x+[22m, [1mc67x[22m,
           [1mc67x+[22m, [1mc674x[22m.

       [1m-mbig-endian[0m
           Generate code for a big-endian target.

       [1m-mlittle-endian[0m
           Generate code for a little-endian target.  This is the default.

       [1m-msim[0m
           Choose startup files and linker script suitable for the simulator.

       [1m-msdata=default[0m
           Put small global and static data in the ".neardata" section, which is pointed to by register  "B14".   Put
           small  uninitialized  global  and  static data in the ".bss" section, which is adjacent to the ".neardata"
           section.  Put small read-only data into the ".rodata" section.  The corresponding sections used for  large
           pieces of data are ".fardata", ".far" and ".const".

       [1m-msdata=all[0m
           Put  all  data,  not  just  small  objects,  into the sections reserved for small data, and use addressing
           relative to the "B14" register to access them.

       [1m-msdata=none[0m
           Make no use of the sections reserved for small data, and use absolute addresses to access all  data.   Put
           all initialized global and static data in the ".fardata" section, and all uninitialized data in the ".far"
           section.  Put all constant data into the ".const" section.

       [4mCRIS[24m [4mOptions[0m

       These options are defined specifically for the CRIS ports.

       [1m-march=[4m[22marchitecture-type[0m
       [1m-mcpu=[4m[22marchitecture-type[0m
           Generate  code  for  the specified architecture.  The choices for [4marchitecture-type[24m are [1mv3[22m, [1mv8 [22mand [1mv10 [22mfor
           respectively ETRAX 4, ETRAX 100, and ETRAX 100 LX.  Default is [1mv0[22m.

       [1m-mtune=[4m[22marchitecture-type[0m
           Tune to [4marchitecture-type[24m everything applicable about the generated code, except for the ABI and  the  set
           of  available  instructions.   The  choices for [4marchitecture-type[24m are the same as for [1m-march=[4m[22marchitecture-[0m
           [4mtype[24m.

       [1m-mmax-stack-frame=[4m[22mn[0m
           Warn when the stack frame of a function exceeds [4mn[24m bytes.

       [1m-metrax4[0m
       [1m-metrax100[0m
           The options [1m-metrax4 [22mand [1m-metrax100 [22mare synonyms for [1m-march=v3 [22mand [1m-march=v8 [22mrespectively.

       [1m-mmul-bug-workaround[0m
       [1m-mno-mul-bug-workaround[0m
           Work around a bug in the "muls" and "mulu" instructions for CPU models where it applies.  This  option  is
           disabled by default.

       [1m-mpdebug[0m
           Enable  CRIS-specific  verbose  debug-related  information in the assembly code.  This option also has the
           effect of turning off the [1m#NO_APP [22mformatted-code indicator to  the  assembler  at  the  beginning  of  the
           assembly file.

       [1m-mcc-init[0m
           Do  not  use  condition-code  results from previous instruction; always emit compare and test instructions
           before use of condition codes.

       [1m-mno-side-effects[0m
           Do not emit instructions with side effects in addressing modes other than post-increment.

       [1m-mstack-align[0m
       [1m-mno-stack-align[0m
       [1m-mdata-align[0m
       [1m-mno-data-align[0m
       [1m-mconst-align[0m
       [1m-mno-const-align[0m
           These options ([1mno- [22moptions) arrange (eliminate arrangements) for the  stack  frame,  individual  data  and
           constants  to be aligned for the maximum single data access size for the chosen CPU model.  The default is
           to arrange for 32-bit alignment.  ABI details such as structure layout are not affected by these options.

       [1m-m32-bit[0m
       [1m-m16-bit[0m
       [1m-m8-bit[0m
           Similar to the stack- data- and const-align options above, these options arrange for stack frame, writable
           data and constants to all be 32-bit, 16-bit or 8-bit aligned.  The default is 32-bit alignment.

       [1m-mno-prologue-epilogue[0m
       [1m-mprologue-epilogue[0m
           With [1m-mno-prologue-epilogue[22m, the normal function prologue and epilogue which set up the  stack  frame  are
           omitted  and  no  return instructions or return sequences are generated in the code.  Use this option only
           together with visual inspection of the compiled code: no warnings or errors are generated when  call-saved
           registers must be saved, or storage for local variables needs to be allocated.

       [1m-melf[0m
           Legacy no-op option.

       [1m-sim[0m
           This option arranges to link with input-output functions from a simulator library.  Code, initialized data
           and zero-initialized data are allocated consecutively.

       [1m-sim2[0m
           Like  [1m-sim[22m,  but pass linker options to locate initialized data at 0x40000000 and zero-initialized data at
           0x80000000.

       [4mC-SKY[24m [4mOptions[0m

       GCC supports these options when compiling for C-SKY V2 processors.

       [1m-march=[4m[22march[0m
           Specify the C-SKY target architecture.  Valid values for [4march[24m are: [1mck801[22m, [1mck802[22m, [1mck803[22m, [1mck807[22m, and  [1mck810[22m.
           The default is [1mck810[22m.

       [1m-mcpu=[4m[22mcpu[0m
           Specify  the  C-SKY  target  processor.   Valid  values for [4mcpu[24m are: [1mck801[22m, [1mck801t[22m, [1mck802[22m, [1mck802t[22m, [1mck802j[22m,
           [1mck803[22m, [1mck803h[22m, [1mck803t[22m, [1mck803ht[22m, [1mck803f[22m, [1mck803fh[22m, [1mck803e[22m, [1mck803eh[22m, [1mck803et[22m,  [1mck803eht[22m,  [1mck803ef[22m,  [1mck803efh[22m,
           [1mck803ft[22m,  [1mck803eft[22m,  [1mck803efht[22m,  [1mck803r1[22m,  [1mck803hr1[22m,  [1mck803tr1[22m,  [1mck803htr1[22m, [1mck803fr1[22m, [1mck803fhr1[22m, [1mck803er1[22m,
           [1mck803ehr1[22m, [1mck803etr1[22m, [1mck803ehtr1[22m,  [1mck803efr1[22m,  [1mck803efhr1[22m,  [1mck803ftr1[22m,  [1mck803eftr1[22m,  [1mck803efhtr1[22m,  [1mck803s[22m,
           [1mck803st[22m,  [1mck803se[22m, [1mck803sf[22m, [1mck803sef[22m, [1mck803seft[22m, [1mck807e[22m, [1mck807ef[22m, [1mck807[22m, [1mck807f[22m, [1mck810e[22m, [1mck810et[22m, [1mck810ef[22m,
           [1mck810eft[22m, [1mck810[22m, [1mck810v[22m, [1mck810f[22m, [1mck810t[22m, [1mck810fv[22m, [1mck810tv[22m, [1mck810ft[22m, and [1mck810ftv[22m.

       [1m-mbig-endian[0m
       [1m-EB[0m
       [1m-mlittle-endian[0m
       [1m-EL [22mSelect big- or little-endian code.  The default is little-endian.

       [1m-mfloat-abi=[4m[22mname[0m
           Specifies which floating-point ABI to use.  Permissible values are: [1msoft[22m, [1msoftfp [22mand [1mhard[22m.

           Specifying [1msoft [22mcauses GCC to generate output containing  library  calls  for  floating-point  operations.
           [1msoftfp  [22mallows the generation of code using hardware floating-point instructions, but still uses the soft-
           float calling conventions.  [1mhard [22mallows generation of floating-point instructions  and  uses  FPU-specific
           calling conventions.

           The  default  depends  on the specific target configuration.  Note that the hard-float and soft-float ABIs
           are not link-compatible; you must compile your  entire  program  with  the  same  ABI,  and  link  with  a
           compatible set of libraries.

       [1m-mhard-float[0m
       [1m-msoft-float[0m
           Select hardware or software floating-point implementations.  The default is soft float.

       [1m-mdouble-float[0m
       [1m-mno-double-float[0m
           When  [1m-mhard-float  [22mis  in  effect, enable generation of double-precision float instructions.  This is the
           default except when compiling for CK803.

       [1m-mfdivdu[0m
       [1m-mno-fdivdu[0m
           When [1m-mhard-float [22mis in effect, enable generation of "frecipd", "fsqrtd", and "fdivd" instructions.   This
           is the default except when compiling for CK803.

       [1m-mfpu=[4m[22mfpu[0m
           Select  the floating-point processor.  This option can only be used with [1m-mhard-float[22m.  Values for [4mfpu[24m are
           [1mfpv2_sf [22m(equivalent to [1m-mno-double-float -mno-fdivdu[22m), [1mfpv2  [22m([1m-mdouble-float  -mno-divdu[22m),  and  [1mfpv2_divd[0m
           ([1m-mdouble-float -mdivdu[22m).

       [1m-melrw[0m
       [1m-mno-elrw[0m
           Enable the extended "lrw" instruction.  This option defaults to on for CK801 and off otherwise.

       [1m-mistack[0m
       [1m-mno-istack[0m
           Enable interrupt stack instructions; the default is off.

           The [1m-mistack [22moption is required to handle the "interrupt" and "isr" function attributes.

       [1m-mmp[0m
           Enable multiprocessor instructions; the default is off.

       [1m-mcp[0m
           Enable coprocessor instructions; the default is off.

       [1m-mcache[0m
           Enable coprocessor instructions; the default is off.

       [1m-msecurity[0m
           Enable C-SKY security instructions; the default is off.

       [1m-mtrust[0m
           Enable C-SKY trust instructions; the default is off.

       [1m-mdsp[0m
       [1m-medsp[0m
       [1m-mvdsp[0m
           Enable C-SKY DSP, Enhanced DSP, or Vector DSP instructions, respectively.  All of these options default to
           off.

       [1m-mdiv[0m
       [1m-mno-div[0m
           Generate divide instructions.  Default is off.

       [1m-msmart[0m
       [1m-mno-smart[0m
           Generate code for Smart Mode, using only registers numbered 0-7 to allow use of 16-bit instructions.  This
           option  is  ignored  for  CK801 where this is the required behavior, and it defaults to on for CK802.  For
           other targets, the default is off.

       [1m-mhigh-registers[0m
       [1m-mno-high-registers[0m
           Generate code using the high registers numbered 16-31.  This option is not supported on CK801,  CK802,  or
           CK803, and is enabled by default for other processors.

       [1m-manchor[0m
       [1m-mno-anchor[0m
           Generate code using global anchor symbol addresses.

       [1m-mpushpop[0m
       [1m-mno-pushpop[0m
           Generate code using "push" and "pop" instructions.  This option defaults to on.

       [1m-mmultiple-stld[0m
       [1m-mstm[0m
       [1m-mno-multiple-stld[0m
       [1m-mno-stm[0m
           Generate  code using "stm" and "ldm" instructions.  This option isn't supported on CK801 but is enabled by
           default on other processors.

       [1m-mconstpool[0m
       [1m-mno-constpool[0m
           Create constant pools in the compiler instead of deferring it  to  the  assembler.   This  option  is  the
           default and required for correct code generation on CK801 and CK802, and is optional on other processors.

       [1m-mstack-size[0m
       [1m-mno-stack-size[0m
           Emit ".stack_size" directives for each function in the assembly output.  This option defaults to off.

       [1m-mccrt[0m
       [1m-mno-ccrt[0m
           Generate code for the C-SKY compiler runtime instead of libgcc.  This option defaults to off.

       [1m-mbranch-cost=[4m[22mn[0m
           Set the branch costs to roughly "n" instructions.  The default is 1.

       [1m-msched-prolog[0m
       [1m-mno-sched-prolog[0m
           Permit  scheduling of function prologue and epilogue sequences.  Using this option can result in code that
           is not compliant with the C-SKY V2 ABI prologue requirements and that cannot be  debugged  or  backtraced.
           It is disabled by default.

       [1m-msim[0m
           Links the library libsemi.a which is in compatible with simulator. Applicable to ELF compiler only.

       [4mDarwin[24m [4mOptions[0m

       These options are defined for all architectures running the Darwin operating system.

       FSF  GCC  on  Darwin does not create "fat" object files; it creates an object file for the single architecture
       that GCC was built to target.  Apple's GCC on Darwin does create "fat" files if  multiple  [1m-arch  [22moptions  are
       used; it does so by running the compiler or linker multiple times and joining the results together with [4mlipo[24m.

       The  subtype  of the file created (like [1mppc7400 [22mor [1mppc970 [22mor [1mi686[22m) is determined by the flags that specify the
       ISA that GCC is targeting, like [1m-mcpu [22mor [1m-march[22m.  The [1m-force_cpusubtype_ALL [22moption can  be  used  to  override
       this.

       The  Darwin tools vary in their behavior when presented with an ISA mismatch.  The assembler, [4mas[24m, only permits
       instructions to be used that are valid for the subtype of the file it is generating, so you cannot put  64-bit
       instructions  in a [1mppc750 [22mobject file.  The linker for shared libraries, [4m/usr/bin/libtool[24m, fails and prints an
       error if asked to create a shared library with a less restrictive subtype than its input files (for  instance,
       trying  to  put a [1mppc970 [22mobject file in a [1mppc7400 [22mlibrary).  The linker for executables, [1mld[22m, quietly gives the
       executable the most restrictive subtype of any of its input files.

       [1m-F[4m[22mdir[0m
           Add the framework directory [4mdir[24m to the head of the list of directories to be searched  for  header  files.
           These  directories  are  interleaved with those specified by [1m-I [22moptions and are scanned in a left-to-right
           order.

           A framework directory is a directory with frameworks in it.  A framework is a  directory  with  a  [4mHeaders[0m
           and/or [4mPrivateHeaders[24m directory contained directly in it that ends in [4m.framework[24m.  The name of a framework
           is  the  name of this directory excluding the [4m.framework[24m.  Headers associated with the framework are found
           in one of those two directories, with [4mHeaders[24m  being  searched  first.   A  subframework  is  a  framework
           directory that is in a framework's [4mFrameworks[24m directory.  Includes of subframework headers can only appear
           in  a  header  of  a  framework  that contains the subframework, or in a sibling subframework header.  Two
           subframeworks are siblings if they occur in the same framework.  A subframework should not have  the  same
           name  as  a  framework;  a  warning  is  issued if this is violated.  Currently a subframework cannot have
           subframeworks; in the future, the mechanism may be extended to support this.  The standard frameworks  can
           be  found  in [4m/System/Library/Frameworks[24m and [4m/Library/Frameworks[24m.  An example include looks like "#include
           <Framework/header.h>", where [4mFramework[24m denotes the name of the framework and  [4mheader.h[24m  is  found  in  the
           [4mPrivateHeaders[24m or [4mHeaders[24m directory.

       [1m-iframework[4m[22mdir[0m
           Like  [1m-F  [22mexcept  the  directory  is  a  treated  as a system directory.  The main difference between this
           [1m-iframework [22mand [1m-F [22mis that with [1m-iframework [22mthe compiler does not warn about constructs  contained  within
           header files found via [4mdir[24m.  This option is valid only for the C family of languages.

       [1m-gused[0m
           Emit  debugging  information  for  symbols  that  are  used.   For  stabs  debugging  format, this enables
           [1m-feliminate-unused-debug-symbols[22m.  This is by default ON.

       [1m-gfull[0m
           Emit debugging information for all symbols and types.

       [1m-fconstant-cfstrings[0m
           The [1m-fconstant-cfstrings [22mis an alias for [1m-mconstant-cfstrings[22m.

       [1m-mconstant-cfstrings[0m
           When the NeXT runtime is being used (the default on these systems), override  any  [1m-fconstant-string-class[0m
           setting and cause "@"...""  literals to be laid out as constant CoreFoundation strings.

       [1m-mmacosx-version-min=[4m[22mversion[0m
           The earliest version of MacOS X that this executable will run on is [4mversion[24m.  Typical values supported for
           [4mversion[24m include 12, 10.12, and 10.5.8.

           If  the compiler was built to use the system's headers by default, then the default for this option is the
           system version on which the compiler is running, otherwise  the  default  is  to  make  choices  that  are
           compatible with as many systems and code bases as possible.

       [1m-mkernel[0m
           Enable  kernel  development  mode.   The  [1m-mkernel  [22moption sets [1m-static[22m, [1m-fno-common[22m, [1m-fno-use-cxa-atexit[22m,
           [1m-fno-exceptions[22m, [1m-fno-non-call-exceptions[22m, [1m-fapple-kext[22m, [1m-fno-weak [22mand [1m-fno-rtti [22mwhere  applicable.   This
           mode also sets [1m-mno-altivec[22m, [1m-msoft-float[22m, [1m-fno-builtin [22mand [1m-mlong-branch [22mfor PowerPC targets.

       [1m-mone-byte-bool[0m
           Override  the  defaults for "bool" so that "sizeof(bool)==1".  By default sizeof(bool) is 4 when compiling
           for Darwin/PowerPC and 1 when compiling for Darwin/x86, so this option has no effect on x86.

           [1mWarning: [22mThe [1m-mone-byte-bool [22mswitch causes GCC to generate code that is not binary  compatible  with  code
           generated  without that switch.  Using this switch may require recompiling all other modules in a program,
           including system libraries.  Use this switch to conform to a non-default data model.

       [1m-mfix-and-continue[0m
       [1m-ffix-and-continue[0m
       [1m-findirect-data[0m
           Generate code suitable for fast turnaround development, such as to allow GDB to dynamically load [4m.o[24m  files
           into  already-running  programs.   [1m-findirect-data  [22mand  [1m-ffix-and-continue  [22mare  provided  for  backwards
           compatibility.

       [1m-all_load[0m
           Loads all members of static archive libraries.  See man [1mld[22m(1) for more information.

       [1m-arch_errors_fatal[0m
           Cause the errors having to do with files that have the wrong architecture to be fatal.

       [1m-bind_at_load[0m
           Causes the output file to be marked such that the dynamic linker will bind all undefined  references  when
           the file is loaded or launched.

       [1m-bundle[0m
           Produce a Mach-o bundle format file.  See man [1mld[22m(1) for more information.

       [1m-bundle_loader [4m[22mexecutable[0m
           This option specifies the [4mexecutable[24m that will load the build output file being linked.  See man [1mld[22m(1) for
           more information.

       [1m-dynamiclib[0m
           When  passed  this option, GCC produces a dynamic library instead of an executable when linking, using the
           Darwin [4mlibtool[24m command.

       [1m-force_cpusubtype_ALL[0m
           This causes GCC's output file to have the [1mALL [22msubtype, instead of one controlled by the  [1m-mcpu  [22mor  [1m-march[0m
           option.

       [1m-allowable_client  [4m[22mclient_name[0m
       [1m-client_name[0m
       [1m-compatibility_version[0m
       [1m-current_version[0m
       [1m-dead_strip[0m
       [1m-dependency-file[0m
       [1m-dylib_file[0m
       [1m-dylinker_install_name[0m
       [1m-dynamic[0m
       [1m-exported_symbols_list[0m
       [1m-filelist[0m
       [1m-flat_namespace[0m
       [1m-force_flat_namespace[0m
       [1m-headerpad_max_install_names[0m
       [1m-image_base[0m
       [1m-init[0m
       [1m-install_name[0m
       [1m-keep_private_externs[0m
       [1m-multi_module[0m
       [1m-multiply_defined[0m
       [1m-multiply_defined_unused[0m
       [1m-noall_load[0m
       [1m-no_dead_strip_inits_and_terms[0m
       [1m-nofixprebinding[0m
       [1m-nomultidefs[0m
       [1m-noprebind[0m
       [1m-noseglinkedit[0m
       [1m-pagezero_size[0m
       [1m-prebind[0m
       [1m-prebind_all_twolevel_modules[0m
       [1m-private_bundle[0m
       [1m-read_only_relocs[0m
       [1m-sectalign[0m
       [1m-sectobjectsymbols[0m
       [1m-whyload[0m
       [1m-seg1addr[0m
       [1m-sectcreate[0m
       [1m-sectobjectsymbols[0m
       [1m-sectorder[0m
       [1m-segaddr[0m
       [1m-segs_read_only_addr[0m
       [1m-segs_read_write_addr[0m
       [1m-seg_addr_table[0m
       [1m-seg_addr_table_filename[0m
       [1m-seglinkedit[0m
       [1m-segprot[0m
       [1m-segs_read_only_addr[0m
       [1m-segs_read_write_addr[0m
       [1m-single_module[0m
       [1m-static[0m
       [1m-sub_library[0m
       [1m-sub_umbrella[0m
       [1m-twolevel_namespace[0m
       [1m-umbrella[0m
       [1m-undefined[0m
       [1m-unexported_symbols_list[0m
       [1m-weak_reference_mismatches[0m
       [1m-whatsloaded[0m
           These options are passed to the Darwin linker.  The Darwin linker man page describes them in detail.

       [4mDEC[24m [4mAlpha[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the DEC Alpha implementations:

       [1m-mno-soft-float[0m
       [1m-msoft-float[0m
           Use   (do  not  use)  the  hardware  floating-point  instructions  for  floating-point  operations.   When
           [1m-msoft-float [22mis specified, functions in [4mlibgcc.a[24m are used to perform  floating-point  operations.   Unless
           they  are replaced by routines that emulate the floating-point operations, or compiled in such a way as to
           call such emulations routines, these routines issue floating-point operations.   If you are compiling  for
           an  Alpha  without  floating-point operations, you must ensure that the library is built so as not to call
           them.

           Note that Alpha implementations without floating-point operations  are  required  to  have  floating-point
           registers.

       [1m-mfp-reg[0m
       [1m-mno-fp-regs[0m
           Generate   code  that  uses  (does  not  use)  the  floating-point  register  set.   [1m-mno-fp-regs  [22mimplies
           [1m-msoft-float[22m.  If the floating-point register set is not  used,  floating-point  operands  are  passed  in
           integer  registers  as  if  they were integers and floating-point results are passed in $0 instead of $f0.
           This is a non-standard calling sequence, so any function with a floating-point argument  or  return  value
           called by code compiled with [1m-mno-fp-regs [22mmust also be compiled with that option.

           A  typical use of this option is building a kernel that does not use, and hence need not save and restore,
           any floating-point registers.

       [1m-mieee[0m
           The Alpha architecture implements floating-point hardware optimized for maximum performance.  It is mostly
           compliant with the IEEE floating-point standard.  However, for full  compliance,  software  assistance  is
           required.   This  option  generates  code  fully  IEEE-compliant  code [4mexcept[24m that the [4minexact-flag[24m is not
           maintained (see below).  If this option is turned on, the preprocessor macro "_IEEE_FP" is defined  during
           compilation.   The  resulting code is less efficient but is able to correctly support denormalized numbers
           and exceptional IEEE values such as not-a-number and plus/minus infinity.  Other Alpha compilers call this
           option [1m-ieee_with_no_inexact[22m.

       [1m-mieee-with-inexact[0m
           This is like [1m-mieee [22mexcept the generated code also maintains  the  IEEE  [4minexact-flag[24m.   Turning  on  this
           option  causes  the  generated  code  to  implement fully-compliant IEEE math.  In addition to "_IEEE_FP",
           "_IEEE_FP_EXACT" is defined as a preprocessor macro.  On some Alpha implementations the resulting code may
           execute significantly slower than the code generated by default.  Since there is  very  little  code  that
           depends on the [4minexact-flag[24m, you should normally not specify this option.  Other Alpha compilers call this
           option [1m-ieee_with_inexact[22m.

       [1m-mfp-trap-mode=[4m[22mtrap-mode[0m
           This  option  controls  what  floating-point  related  traps are enabled.  Other Alpha compilers call this
           option [1m-fptm [4m[22mtrap-mode[24m.  The trap mode can be set to one of four values:

           [1mn   [22mThis is the default (normal) setting.  The only traps that are enabled are the  ones  that  cannot  be
               disabled in software (e.g., division by zero trap).

           [1mu   [22mIn addition to the traps enabled by [1mn[22m, underflow traps are enabled as well.

           [1msu  [22mLike  [1mu[22m,  but  the  instructions are marked to be safe for software completion (see Alpha architecture
               manual for details).

           [1msui [22mLike [1msu[22m, but inexact traps are enabled as well.

       [1m-mfp-rounding-mode=[4m[22mrounding-mode[0m
           Selects the IEEE rounding mode.   Other  Alpha  compilers  call  this  option  [1m-fprm  [4m[22mrounding-mode[24m.   The
           [4mrounding-mode[24m can be one of:

           [1mn   [22mNormal  IEEE  rounding mode.  Floating-point numbers are rounded towards the nearest machine number or
               towards the even machine number in case of a tie.

           [1mm   [22mRound towards minus infinity.

           [1mc   [22mChopped rounding mode.  Floating-point numbers are rounded towards zero.

           [1md   [22mDynamic rounding mode.  A field in the floating-point control register ([4mfpcr[24m, see  Alpha  architecture
               reference  manual)  controls the rounding mode in effect.  The C library initializes this register for
               rounding towards plus infinity.  Thus, unless your program modifies the [4mfpcr[24m, [1md [22mcorresponds  to  round
               towards plus infinity.

       [1m-mtrap-precision=[4m[22mtrap-precision[0m
           In  the Alpha architecture, floating-point traps are imprecise.  This means without software assistance it
           is impossible to recover from a floating trap and program execution normally needs to be terminated.   GCC
           can  generate  code  that can assist operating system trap handlers in determining the exact location that
           caused a floating-point trap.  Depending on the  requirements  of  an  application,  different  levels  of
           precisions can be selected:

           [1mp   [22mProgram  precision.   This  option  is  the  default  and means a trap handler can only identify which
               program caused a floating-point exception.

           [1mf   [22mFunction precision.  The trap  handler  can  determine  the  function  that  caused  a  floating-point
               exception.

           [1mi   [22mInstruction  precision.   The trap handler can determine the exact instruction that caused a floating-
               point exception.

           Other Alpha compilers provide the equivalent options called [1m-scope_safe [22mand [1m-resumption_safe[22m.

       [1m-mieee-conformant[0m
           This option marks the generated code as IEEE conformant.  You must not use this  option  unless  you  also
           specify [1m-mtrap-precision=i [22mand either [1m-mfp-trap-mode=su [22mor [1m-mfp-trap-mode=sui[22m.  Its only effect is to emit
           the line [1m.eflag 48 [22min the function prologue of the generated assembly file.

       [1m-mbuild-constants[0m
           Normally  GCC  examines  a  32-  or  64-bit  integer  constant  to see if it can construct it from smaller
           constants in two or three instructions.  If it cannot, it outputs the constant as a literal and  generates
           code to load it from the data segment at run time.

           Use  this  option  to  require  GCC  to  construct [4mall[24m integer constants using code, even if it takes more
           instructions (the maximum is six).

           You typically use this option to build a shared library dynamic loader.  Itself a shared library, it  must
           relocate itself in memory before it can find the variables and constants in its own data segment.

       [1m-mbwx[0m
       [1m-mno-bwx[0m
       [1m-mcix[0m
       [1m-mno-cix[0m
       [1m-mfix[0m
       [1m-mno-fix[0m
       [1m-mmax[0m
       [1m-mno-max[0m
           Indicate whether GCC should generate code to use the optional BWX, CIX, FIX and MAX instruction sets.  The
           default  is  to  use the instruction sets supported by the CPU type specified via [1m-mcpu= [22moption or that of
           the CPU on which GCC was built if none is specified.

       [1m-mfloat-vax[0m
       [1m-mfloat-ieee[0m
           Generate code that uses (does not use) VAX F and G floating-point arithmetic instead of  IEEE  single  and
           double precision.

       [1m-mexplicit-relocs[0m
       [1m-mno-explicit-relocs[0m
           Older Alpha assemblers provided no way to generate symbol relocations except via assembler macros.  Use of
           these  macros  does  not allow optimal instruction scheduling.  GNU binutils as of version 2.12 supports a
           new syntax that  allows  the  compiler  to  explicitly  mark  which  relocations  should  apply  to  which
           instructions.   This  option  is  mostly  useful  for  debugging,  as  GCC detects the capabilities of the
           assembler when it is built and sets the default accordingly.

       [1m-msmall-data[0m
       [1m-mlarge-data[0m
           When [1m-mexplicit-relocs  [22mis  in  effect,  static  data  is  accessed  via  [4mgp-relative[24m  relocations.   When
           [1m-msmall-data  [22mis  used,  objects 8 bytes long or smaller are placed in a [4msmall[24m [4mdata[24m [4marea[24m (the ".sdata" and
           ".sbss" sections) and are accessed via 16-bit relocations off of the $gp register.  This limits  the  size
           of the small data area to 64KB, but allows the variables to be directly accessed via a single instruction.

           The  default is [1m-mlarge-data[22m.  With this option the data area is limited to just below 2GB.  Programs that
           require more than 2GB of data must use "malloc" or "mmap" to allocate the data in the heap instead  of  in
           the program's data segment.

           When generating code for shared libraries, [1m-fpic [22mimplies [1m-msmall-data [22mand [1m-fPIC [22mimplies [1m-mlarge-data[22m.

       [1m-msmall-text[0m
       [1m-mlarge-text[0m
           When  [1m-msmall-text  [22mis  used, the compiler assumes that the code of the entire program (or shared library)
           fits in 4MB, and is thus reachable with a branch instruction.  When [1m-msmall-data [22mis used, the compiler can
           assume that all local symbols share the same $gp  value,  and  thus  reduce  the  number  of  instructions
           required for a function call from 4 to 1.

           The default is [1m-mlarge-text[22m.

       [1m-mcpu=[4m[22mcpu_type[0m
           Set  the instruction set and instruction scheduling parameters for machine type [4mcpu_type[24m.  You can specify
           either the [1mEV [22mstyle name or the corresponding chip number.  GCC supports  scheduling  parameters  for  the
           EV4,  EV5  and  EV6  family  of processors and chooses the default values for the instruction set from the
           processor you specify.  If you do not specify a processor type, GCC defaults to the processor on which the
           compiler was built.

           Supported values for [4mcpu_type[24m are

           [1mev4[0m
           [1mev45[0m
           [1m21064[0m
               Schedules as an EV4 and has no instruction set extensions.

           [1mev5[0m
           [1m21164[0m
               Schedules as an EV5 and has no instruction set extensions.

           [1mev56[0m
           [1m21164a[0m
               Schedules as an EV5 and supports the BWX extension.

           [1mpca56[0m
           [1m21164pc[0m
           [1m21164PC[0m
               Schedules as an EV5 and supports the BWX and MAX extensions.

           [1mev6[0m
           [1m21264[0m
               Schedules as an EV6 and supports the BWX, FIX, and MAX extensions.

           [1mev67[0m
           [1m21264a[0m
               Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX extensions.

           Native toolchains also support the value [1mnative[22m, which selects the best architecture option for  the  host
           processor.  [1m-mcpu=native [22mhas no effect if GCC does not recognize the processor.

       [1m-mtune=[4m[22mcpu_type[0m
           Set  only  the  instruction  scheduling  parameters for machine type [4mcpu_type[24m.  The instruction set is not
           changed.

           Native toolchains also support the value [1mnative[22m, which selects the best architecture option for  the  host
           processor.  [1m-mtune=native [22mhas no effect if GCC does not recognize the processor.

       [1m-mmemory-latency=[4m[22mtime[0m
           Sets  the  latency  the  scheduler should assume for typical memory references as seen by the application.
           This number is highly dependent on the memory access patterns used by the application and the size of  the
           external cache on the machine.

           Valid options for [4mtime[24m are

           [4mnumber[0m
               A decimal number representing clock cycles.

           [1mL1[0m
           [1mL2[0m
           [1mL3[0m
           [1mmain[0m
               The compiler contains estimates of the number of clock cycles for "typical" EV4 & EV5 hardware for the
               Level  1, 2 & 3 caches (also called Dcache, Scache, and Bcache), as well as to main memory.  Note that
               L3 is only valid for EV5.

       [4meBPF[24m [4mOptions[0m

       [1m-mframe-limit=[4m[22mbytes[0m
           This specifies the hard limit for frame sizes, in bytes.  Currently,  the  value  that  can  be  specified
           should  be less than or equal to [1m32767[22m.  Defaults to whatever limit is imposed by the version of the Linux
           kernel targeted.

       [1m-mkernel=[4m[22mversion[0m
           This specifies the minimum version of the kernel that will  run  the  compiled  program.   GCC  uses  this
           version to determine which instructions to use, what kernel helpers to allow, etc.  Currently, [4mversion[24m can
           be  one  of  [1m4.0[22m,  [1m4.1[22m,  [1m4.2[22m, [1m4.3[22m, [1m4.4[22m, [1m4.5[22m, [1m4.6[22m, [1m4.7[22m, [1m4.8[22m, [1m4.9[22m, [1m4.10[22m, [1m4.11[22m, [1m4.12[22m, [1m4.13[22m, [1m4.14[22m, [1m4.15[22m, [1m4.16[22m,
           [1m4.17[22m, [1m4.18[22m, [1m4.19[22m, [1m4.20[22m, [1m5.0[22m, [1m5.1[22m, [1m5.2[22m, [1mlatest [22mand [1mnative[22m.

       [1m-mbig-endian[0m
           Generate code for a big-endian target.

       [1m-mlittle-endian[0m
           Generate code for a little-endian target.  This is the default.

       [1m-mjmpext[0m
           Enable generation of extra conditional-branch instructions.  Enabled for CPU v2 and above.

       [1m-mjmp32[0m
           Enable 32-bit jump instructions. Enabled for CPU v3 and above.

       [1m-malu32[0m
           Enable 32-bit ALU instructions. Enabled for CPU v3 and above.

       [1m-mcpu=[4m[22mversion[0m
           This specifies which version of the eBPF ISA to target.  Newer  versions  may  not  be  supported  by  all
           kernels. The default is [1mv3[22m.

           Supported values for [4mversion[24m are:

           [1mv1  [22mThe first stable eBPF ISA with no special features or extensions.

           [1mv2  [22mSupports the jump extensions, as in [1m-mjmpext[22m.

           [1mv3  [22mAll features of v2, plus:

               -<32-bit jump operations, as in [1m-mjmp32[22m>
               -<32-bit ALU operations, as in [1m-malu32[22m>
       [1m-mco-re[0m
           Enable BPF Compile Once - Run Everywhere (CO-RE) support. Requires and is implied by [1m-gbtf[22m.

       [1m-mno-co-re[0m
           Disable  BPF  Compile  Once - Run Everywhere (CO-RE) support. BPF CO-RE support is enabled by default when
           generating BTF debug information for the BPF target.

       [1m-mxbpf[0m
           Generate code for an expanded version of BPF, which relaxes some of the restrictions imposed  by  the  BPF
           architecture:

           -<Save and restore callee-saved registers at function entry and>
               exit, respectively.

       [4mFR30[24m [4mOptions[0m

       These options are defined specifically for the FR30 port.

       [1m-msmall-model[0m
           Use  the  small  address space model.  This can produce smaller code, but it does assume that all symbolic
           values and addresses fit into a 20-bit range.

       [1m-mno-lsim[0m
           Assume that runtime support has been provided and so there is no need to  include  the  simulator  library
           ([4mlibsim.a[24m) on the linker command line.

       [4mFT32[24m [4mOptions[0m

       These options are defined specifically for the FT32 port.

       [1m-msim[0m
           Specifies  that  the  program  will be run on the simulator.  This causes an alternate runtime startup and
           library to be linked.  You must not use this option  when  generating  programs  that  will  run  on  real
           hardware; you must provide your own runtime library for whatever I/O functions are needed.

       [1m-mlra[0m
           Enable  Local  Register  Allocation.  This is still experimental for FT32, so by default the compiler uses
           standard reload.

       [1m-mnodiv[0m
           Do not use div and mod instructions.

       [1m-mft32b[0m
           Enable use of the extended instructions of the FT32B processor.

       [1m-mcompress[0m
           Compress all code using the Ft32B code compression scheme.

       [1m-mnopm[0m
           Do not generate code that reads program memory.

       [4mFRV[24m [4mOptions[0m

       [1m-mgpr-32[0m
           Only use the first 32 general-purpose registers.

       [1m-mgpr-64[0m
           Use all 64 general-purpose registers.

       [1m-mfpr-32[0m
           Use only the first 32 floating-point registers.

       [1m-mfpr-64[0m
           Use all 64 floating-point registers.

       [1m-mhard-float[0m
           Use hardware instructions for floating-point operations.

       [1m-msoft-float[0m
           Use library routines for floating-point operations.

       [1m-malloc-cc[0m
           Dynamically allocate condition code registers.

       [1m-mfixed-cc[0m
           Do not try to dynamically allocate condition code registers, only use "icc0" and "fcc0".

       [1m-mdword[0m
           Change ABI to use double word insns.

       [1m-mno-dword[0m
           Do not use double word instructions.

       [1m-mdouble[0m
           Use floating-point double instructions.

       [1m-mno-double[0m
           Do not use floating-point double instructions.

       [1m-mmedia[0m
           Use media instructions.

       [1m-mno-media[0m
           Do not use media instructions.

       [1m-mmuladd[0m
           Use multiply and add/subtract instructions.

       [1m-mno-muladd[0m
           Do not use multiply and add/subtract instructions.

       [1m-mfdpic[0m
           Select the FDPIC ABI, which uses function descriptors to represent pointers  to  functions.   Without  any
           PIC/PIE-related options, it implies [1m-fPIE[22m.  With [1m-fpic [22mor [1m-fpie[22m, it assumes GOT entries and small data are
           within  a  12-bit  range  from the GOT base address; with [1m-fPIC [22mor [1m-fPIE[22m, GOT offsets are computed with 32
           bits.  With a [1mbfin-elf [22mtarget, this option implies [1m-msim[22m.

       [1m-minline-plt[0m
           Enable inlining of PLT entries in function calls to functions that are not known to bind locally.  It  has
           no  effect  without  [1m-mfdpic[22m.   It's  enabled  by default if optimizing for speed and compiling for shared
           libraries (i.e., [1m-fPIC [22mor [1m-fpic[22m), or when an optimization option such as [1m-O3 [22mor above is  present  in  the
           command line.

       [1m-mTLS[0m
           Assume a large TLS segment when generating thread-local code.

       [1m-mtls[0m
           Do not assume a large TLS segment when generating thread-local code.

       [1m-mgprel-ro[0m
           Enable the use of "GPREL" relocations in the FDPIC ABI for data that is known to be in read-only sections.
           It's  enabled  by default, except for [1m-fpic [22mor [1m-fpie[22m: even though it may help make the global offset table
           smaller, it trades 1 instruction for 4.  With [1m-fPIC [22mor [1m-fPIE[22m, it trades 3 instructions for 4, one of which
           may be shared by multiple symbols, and it avoids the need for a GOT entry for the  referenced  symbol,  so
           it's more likely to be a win.  If it is not, [1m-mno-gprel-ro [22mcan be used to disable it.

       [1m-multilib-library-pic[0m
           Link  with  the  (library,  not FD) pic libraries.  It's implied by [1m-mlibrary-pic[22m, as well as by [1m-fPIC [22mand
           [1m-fpic [22mwithout [1m-mfdpic[22m.  You should never have to use it explicitly.

       [1m-mlinked-fp[0m
           Follow the EABI requirement of always creating a frame pointer whenever a stack frame is allocated.   This
           option is enabled by default and can be disabled with [1m-mno-linked-fp[22m.

       [1m-mlong-calls[0m
           Use indirect addressing to call functions outside the current compilation unit.  This allows the functions
           to be placed anywhere within the 32-bit address space.

       [1m-malign-labels[0m
           Try  to  align  labels to an 8-byte boundary by inserting NOPs into the previous packet.  This option only
           has an effect when VLIW packing is enabled.  It doesn't  create  new  packets;  it  merely  adds  NOPs  to
           existing ones.

       [1m-mlibrary-pic[0m
           Generate position-independent EABI code.

       [1m-macc-4[0m
           Use only the first four media accumulator registers.

       [1m-macc-8[0m
           Use all eight media accumulator registers.

       [1m-mpack[0m
           Pack VLIW instructions.

       [1m-mno-pack[0m
           Do not pack VLIW instructions.

       [1m-mno-eflags[0m
           Do not mark ABI switches in e_flags.

       [1m-mcond-move[0m
           Enable the use of conditional-move instructions (default).

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mno-cond-move[0m
           Disable the use of conditional-move instructions.

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mscc[0m
           Enable the use of conditional set instructions (default).

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mno-scc[0m
           Disable the use of conditional set instructions.

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mcond-exec[0m
           Enable the use of conditional execution (default).

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mno-cond-exec[0m
           Disable the use of conditional execution.

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mvliw-branch[0m
           Run a pass to pack branches into VLIW instructions (default).

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mno-vliw-branch[0m
           Do not run a pass to pack branches into VLIW instructions.

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mmulti-cond-exec[0m
           Enable optimization of "&&" and "||" in conditional execution (default).

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mno-multi-cond-exec[0m
           Disable optimization of "&&" and "||" in conditional execution.

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mnested-cond-exec[0m
           Enable nested conditional execution optimizations (default).

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-mno-nested-cond-exec[0m
           Disable nested conditional execution optimizations.

           This switch is mainly for debugging the compiler and will likely be removed in a future version.

       [1m-moptimize-membar[0m
           This  switch  removes  redundant "membar" instructions from the compiler-generated code.  It is enabled by
           default.

       [1m-mno-optimize-membar[0m
           This switch disables the automatic removal of redundant "membar" instructions from the generated code.

       [1m-mtomcat-stats[0m
           Cause gas to print out tomcat statistics.

       [1m-mcpu=[4m[22mcpu[0m
           Select the processor type for which to generate code.  Possible values  are  [1mfrv[22m,  [1mfr550[22m,  [1mtomcat[22m,  [1mfr500[22m,
           [1mfr450[22m, [1mfr405[22m, [1mfr400[22m, [1mfr300 [22mand [1msimple[22m.

       [4mGNU/Linux[24m [4mOptions[0m

       These [1m-m [22moptions are defined for GNU/Linux targets:

       [1m-mglibc[0m
           Use  the  GNU  C  library.   This  is  the  default  except  on  [1m*-*-linux-*uclibc*[22m,  [1m*-*-linux-*musl* [22mand
           [1m*-*-linux-*android* [22mtargets.

       [1m-muclibc[0m
           Use uClibc C library.  This is the default on [1m*-*-linux-*uclibc* [22mtargets.

       [1m-mmusl[0m
           Use the musl C library.  This is the default on [1m*-*-linux-*musl* [22mtargets.

       [1m-mbionic[0m
           Use Bionic C library.  This is the default on [1m*-*-linux-*android* [22mtargets.

       [1m-mandroid[0m
           Compile code compatible with Android platform.  This is the default on [1m*-*-linux-*android* [22mtargets.

           When compiling, this option enables [1m-mbionic[22m, [1m-fPIC[22m,  [1m-fno-exceptions  [22mand  [1m-fno-rtti  [22mby  default.   When
           linking,  this  option  makes  the  GCC driver pass Android-specific options to the linker.  Finally, this
           option causes the preprocessor macro "__ANDROID__" to be defined.

       [1m-tno-android-cc[0m
           Disable compilation effects of [1m-mandroid[22m,  i.e.,  do  not  enable  [1m-mbionic[22m,  [1m-fPIC[22m,  [1m-fno-exceptions  [22mand
           [1m-fno-rtti [22mby default.

       [1m-tno-android-ld[0m
           Disable linking effects of [1m-mandroid[22m, i.e., pass standard Linux linking options to the linker.

       [4mH8/300[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the H8/300 implementations:

       [1m-mrelax[0m
           Shorten some address references at link time, when possible; uses the linker option [1m-relax[22m.

       [1m-mh [22mGenerate code for the H8/300H.

       [1m-ms [22mGenerate code for the H8S.

       [1m-mn [22mGenerate  code  for  the  H8S and H8/300H in the normal mode.  This switch must be used either with [1m-mh [22mor
           [1m-ms[22m.

       [1m-ms2600[0m
           Generate code for the H8S/2600.  This switch must be used with [1m-ms[22m.

       [1m-mexr[0m
           Extended registers are stored on stack before execution of function with monitor attribute. Default option
           is [1m-mexr[22m.  This option is valid only for H8S targets.

       [1m-mno-exr[0m
           Extended registers are not stored on stack before execution of function with  monitor  attribute.  Default
           option is [1m-mno-exr[22m.  This option is valid only for H8S targets.

       [1m-mint32[0m
           Make "int" data 32 bits by default.

       [1m-malign-300[0m
           On  the  H8/300H and H8S, use the same alignment rules as for the H8/300.  The default for the H8/300H and
           H8S is to align longs and floats on 4-byte boundaries.  [1m-malign-300 [22mcauses them to be  aligned  on  2-byte
           boundaries.  This option has no effect on the H8/300.

       [4mHPPA[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the HPPA family of computers:

       [1m-march=[4m[22marchitecture-type[0m
           Generate  code  for the specified architecture.  The choices for [4marchitecture-type[24m are [1m1.0 [22mfor PA 1.0, [1m1.1[0m
           for PA 1.1, and [1m2.0 [22mfor PA 2.0 processors.  Refer to [4m/usr/lib/sched.models[24m on an HP-UX system to determine
           the proper architecture option for your machine.  Code compiled for lower numbered architectures  runs  on
           higher numbered architectures, but not the other way around.

       [1m-mpa-risc-1-0[0m
       [1m-mpa-risc-1-1[0m
       [1m-mpa-risc-2-0[0m
           Synonyms for [1m-march=1.0[22m, [1m-march=1.1[22m, and [1m-march=2.0 [22mrespectively.

       [1m-matomic-libcalls[0m
           Generate  libcalls for atomic loads and stores when sync libcalls are disabled.  This option is enabled by
           default.  It only affects the generation of atomic libcalls by the HPPA backend.

           Both the sync and [4mlibatomic[24m libcall implementations use locking.  As a result, processor  stores  are  not
           atomic  with  respect to other atomic operations.  Processor loads up to DImode are atomic with respect to
           other atomic operations provided they are implemented as a single access.

           The PA-RISC architecture does not support  any  atomic  operations  in  hardware  except  for  the  "ldcw"
           instruction.   Thus,  all  atomic  support  is  implemented  using sync and atomic libcalls.  Sync libcall
           support is in [4mlibgcc.a[24m.  Atomic libcall support is in [4mlibatomic[24m.

           This option generates "__atomic_exchange" calls for atomic stores.  It also provides special handling  for
           atomic DImode accesses on 32-bit targets.

       [1m-mbig-switch[0m
           Does nothing.  Preserved for backward compatibility.

       [1m-mcaller-copies[0m
           The  caller copies function arguments passed by hidden reference.  This option should be used with care as
           it is not compatible with the default 32-bit runtime.  However, only aggregates larger  than  eight  bytes
           are passed by hidden reference and the option provides better compatibility with OpenMP.

       [1m-mcoherent-ldcw[0m
           Use ldcw/ldcd coherent cache-control hint.

       [1m-mdisable-fpregs[0m
           Disable floating-point registers.  Equivalent to "-msoft-float".

       [1m-mdisable-indexing[0m
           Prevent  the  compiler  from  using indexing address modes.  This avoids some rather obscure problems when
           compiling MIG generated code under MACH.

       [1m-mfast-indirect-calls[0m
           Generate code that assumes calls never cross space boundaries.  This allows GCC to emit code that performs
           faster indirect calls.

           This option does not work in the presence of shared libraries or nested functions.

       [1m-mfixed-range=[4m[22mregister-range[0m
           Generate code treating the given register range as fixed registers.  A fixed  register  is  one  that  the
           register  allocator cannot use.  This is useful when compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple register ranges can be specified separated by a comma.

       [1m-mgas[0m
           Enable the use of assembler directives only GAS understands.

       [1m-mgnu-ld[0m
           Use options specific to GNU [1mld[22m.  This passes [1m-shared [22mto [1mld [22mwhen building a  shared  library.   It  is  the
           default  when  GCC  is  configured,  explicitly  or implicitly, with the GNU linker.  This option does not
           affect which [1mld [22mis called; it only changes what parameters are passed to that [1mld[22m.  The [1mld [22mthat  is  called
           is  determined  by  the  [1m--with-ld  [22mconfigure option, GCC's program search path, and finally by the user's
           [1mPATH[22m.  The linker used by GCC can be printed using [1mwhich ‘gcc -print-prog-name=ld‘[22m.  This option  is  only
           available on the 64-bit HP-UX GCC, i.e. configured with [1mhppa*64*-*-hpux*[22m.

       [1m-mhp-ld[0m
           Use  options  specific  to  HP [1mld[22m.  This passes [1m-b [22mto [1mld [22mwhen building a shared library and passes [1m+Accept[0m
           [1mTypeMismatch [22mto [1mld [22mon all links.  It is the default when GCC is configured, explicitly or implicitly, with
           the HP linker.  This option does not affect which [1mld [22mis called; it only changes what parameters are passed
           to that [1mld[22m.  The [1mld [22mthat is called is determined by the [1m--with-ld [22mconfigure option, GCC's  program  search
           path,  and  finally  by  the  user's  [1mPATH[22m.   The  linker  used  by  GCC  can  be printed using [1mwhich ‘gcc[0m
           [1m-print-prog-name=ld‘[22m.  This option is only available  on  the  64-bit  HP-UX  GCC,  i.e.  configured  with
           [1mhppa*64*-*-hpux*[22m.

       [1m-mlinker-opt[0m
           Enable the optimization pass in the HP-UX linker.  Note this makes symbolic debugging impossible.  It also
           triggers  a  bug  in  the HP-UX 8 and HP-UX 9 linkers in which they give bogus error messages when linking
           some programs.

       [1m-mlong-calls[0m
           Generate code that uses long call sequences.  This ensures that a call is  always  able  to  reach  linker
           generated  stubs.   The default is to generate long calls only when the distance from the call site to the
           beginning of the function or translation unit, as the case may be, exceeds a predefined limit set  by  the
           branch type being used.  The limits for normal calls are 7,600,000 and 240,000 bytes, respectively for the
           PA 2.0 and PA 1.X architectures.  Sibcalls are always limited at 240,000 bytes.

           Distances  are measured from the beginning of functions when using the [1m-ffunction-sections [22moption, or when
           using the [1m-mgas [22mand [1m-mno-portable-runtime [22moptions together under HP-UX with the SOM linker.

           It is normally not desirable to use this option as it degrades performance.  However, it may be useful  in
           large applications, particularly when partial linking is used to build the application.

           The types of long calls used depends on the capabilities of the assembler and linker, and the type of code
           being  generated.   The impact on systems that support long absolute calls, and long pic symbol-difference
           or pc-relative calls should be relatively small.  However, an indirect call is used on 32-bit ELF  systems
           in pic code and it is quite long.

       [1m-mlong-load-store[0m
           Generate  3-instruction  load  and  store sequences as sometimes required by the HP-UX 10 linker.  This is
           equivalent to the [1m+k [22moption to the HP compilers.

       [1m-mjump-in-delay[0m
           This option is ignored and provided for compatibility purposes only.

       [1m-mno-space-regs[0m
           Generate code that assumes the target has no space registers.  This allows GCC to generate faster indirect
           calls and use unscaled index address modes.

           Such code is suitable for level 0 PA systems and kernels.

       [1m-mordered[0m
           Assume memory references are ordered and barriers are not needed.

       [1m-mportable-runtime[0m
           Use the portable calling conventions proposed by HP for ELF systems.

       [1m-mschedule=[4m[22mcpu-type[0m
           Schedule code according to the constraints for the machine type [4mcpu-type[24m.  The choices  for  [4mcpu-type[24m  are
           [1m700 7100[22m, [1m7100LC[22m, [1m7200[22m, [1m7300 [22mand [1m8000[22m.  Refer to [4m/usr/lib/sched.models[24m on an HP-UX system to determine the
           proper scheduling option for your machine.  The default scheduling is [1m8000[22m.

       [1m-msio[0m
           Generate  the  predefine,  "_SIO",  for server IO.  The default is [1m-mwsio[22m.  This generates the predefines,
           "__hp9000s700", "__hp9000s700__" and "_WSIO", for workstation IO.  These options are available under HP-UX
           and HI-UX.

       [1m-msoft-float[0m
           Generate output containing library calls for floating point.  [1mWarning: [22mthe  requisite  libraries  are  not
           available  for  all HPPA targets.  Normally the facilities of the machine's usual C compiler are used, but
           this cannot be done directly in cross-compilation.   You  must  make  your  own  arrangements  to  provide
           suitable library functions for cross-compilation.

           [1m-msoft-float  [22mchanges  the  calling  convention  in  the  output file; therefore, it is only useful if you
           compile [4mall[24m of a program with this option.  In particular, you need to compile [4mlibgcc.a[24m, the library  that
           comes with GCC, with [1m-msoft-float [22min order for this to work.

       [1m-msoft-mult[0m
           Use software integer multiplication.

           This disables the use of the "xmpyu" instruction.

       [1m-munix=[4m[22munix-std[0m
           Generate  compiler  predefines  and  select  a startfile for the specified UNIX standard.  The choices for
           [4munix-std[24m are [1m93[22m, [1m95 [22mand [1m98[22m.  [1m93 [22mis supported on all HP-UX versions.  [1m95 [22mis available on  HP-UX  10.10  and
           later.  [1m98 [22mis available on HP-UX 11.11 and later.  The default values are [1m93 [22mfor HP-UX 10.00, [1m95 [22mfor HP-UX
           10.10 though to 11.00, and [1m98 [22mfor HP-UX 11.11 and later.

           [1m-munix=93  [22mprovides  the same predefines as GCC 3.3 and 3.4.  [1m-munix=95 [22mprovides additional predefines for
           "XOPEN_UNIX" and "_XOPEN_SOURCE_EXTENDED", and the  startfile  [4munix95.o[24m.   [1m-munix=98  [22mprovides  additional
           predefines     for     "_XOPEN_UNIX",     "_XOPEN_SOURCE_EXTENDED",     "_INCLUDE__STDC_A1_SOURCE"     and
           "_INCLUDE_XOPEN_SOURCE_500", and the startfile [4munix98.o[24m.

           It is [4mimportant[24m to note that this option changes the interfaces for various  library  routines.   It  also
           affects the operational behavior of the C library.  Thus, [4mextreme[24m care is needed in using this option.

           Library  code  that is intended to operate with more than one UNIX standard must test, set and restore the
           variable "__xpg4_extended_mask" as appropriate.  Most GNU software doesn't provide this capability.

       [1m-nolibdld[0m
           Suppress the generation of link options to search libdld.sl when the [1m-static [22moption is specified on  HP-UX
           10 and later.

       [1m-static[0m
           The  HP-UX  implementation  of  setlocale  in  libc has a dependency on libdld.sl.  There isn't an archive
           version of libdld.sl.  Thus, when the [1m-static [22moption is specified, special  link  options  are  needed  to
           resolve this dependency.

           On  HP-UX  10 and later, the GCC driver adds the necessary options to link with libdld.sl when the [1m-static[0m
           option is specified.  This causes the resulting binary to be dynamic.  On the  64-bit  port,  the  linkers
           generate  dynamic  binaries  by  default in any case.  The [1m-nolibdld [22moption can be used to prevent the GCC
           driver from adding these link options.

       [1m-threads[0m
           Add support for multithreading with the [4mdce[24m [4mthread[24m library under HP-UX.  This option sets flags  for  both
           the preprocessor and linker.

       [4mIA-64[24m [4mOptions[0m

       These are the [1m-m [22moptions defined for the Intel IA-64 architecture.

       [1m-mbig-endian[0m
           Generate code for a big-endian target.  This is the default for HP-UX.

       [1m-mlittle-endian[0m
           Generate code for a little-endian target.  This is the default for AIX5 and GNU/Linux.

       [1m-mgnu-as[0m
       [1m-mno-gnu-as[0m
           Generate (or don't) code for the GNU assembler.  This is the default.

       [1m-mgnu-ld[0m
       [1m-mno-gnu-ld[0m
           Generate (or don't) code for the GNU linker.  This is the default.

       [1m-mno-pic[0m
           Generate  code  that does not use a global pointer register.  The result is not position independent code,
           and violates the IA-64 ABI.

       [1m-mvolatile-asm-stop[0m
       [1m-mno-volatile-asm-stop[0m
           Generate (or don't) a stop bit immediately before and after volatile asm statements.

       [1m-mregister-names[0m
       [1m-mno-register-names[0m
           Generate (or don't) [1min[22m, [1mloc[22m, and [1mout [22mregister names for the stacked registers.  This  may  make  assembler
           output more readable.

       [1m-mno-sdata[0m
       [1m-msdata[0m
           Disable  (or enable) optimizations that use the small data section.  This may be useful for working around
           optimizer bugs.

       [1m-mconstant-gp[0m
           Generate code that uses a single constant global pointer value.  This  is  useful  when  compiling  kernel
           code.

       [1m-mauto-pic[0m
           Generate  code  that  is  self-relocatable.   This  implies  [1m-mconstant-gp[22m.  This is useful when compiling
           firmware code.

       [1m-minline-float-divide-min-latency[0m
           Generate code for inline divides of floating-point values using the minimum latency algorithm.

       [1m-minline-float-divide-max-throughput[0m
           Generate code for inline divides of floating-point values using the maximum throughput algorithm.

       [1m-mno-inline-float-divide[0m
           Do not generate inline code for divides of floating-point values.

       [1m-minline-int-divide-min-latency[0m
           Generate code for inline divides of integer values using the minimum latency algorithm.

       [1m-minline-int-divide-max-throughput[0m
           Generate code for inline divides of integer values using the maximum throughput algorithm.

       [1m-mno-inline-int-divide[0m
           Do not generate inline code for divides of integer values.

       [1m-minline-sqrt-min-latency[0m
           Generate code for inline square roots using the minimum latency algorithm.

       [1m-minline-sqrt-max-throughput[0m
           Generate code for inline square roots using the maximum throughput algorithm.

       [1m-mno-inline-sqrt[0m
           Do not generate inline code for "sqrt".

       [1m-mfused-madd[0m
       [1m-mno-fused-madd[0m
           Do (don't) generate code that uses the fused multiply/add or multiply/subtract instructions.  The  default
           is to use these instructions.

       [1m-mno-dwarf2-asm[0m
       [1m-mdwarf2-asm[0m
           Don't  (or  do) generate assembler code for the DWARF line number debugging info.  This may be useful when
           not using the GNU assembler.

       [1m-mearly-stop-bits[0m
       [1m-mno-early-stop-bits[0m
           Allow stop bits to be placed earlier than immediately preceding the instruction that  triggered  the  stop
           bit.  This can improve instruction scheduling, but does not always do so.

       [1m-mfixed-range=[4m[22mregister-range[0m
           Generate  code  treating  the  given  register range as fixed registers.  A fixed register is one that the
           register allocator cannot use.  This is useful when compiling kernel code.  A register range is  specified
           as two registers separated by a dash.  Multiple register ranges can be specified separated by a comma.

       [1m-mtls-size=[4m[22mtls-size[0m
           Specify bit size of immediate TLS offsets.  Valid values are 14, 22, and 64.

       [1m-mtune=[4m[22mcpu-type[0m
           Tune  the  instruction  scheduling  for  a  particular  CPU,  Valid  values are [1mitanium[22m, [1mitanium1[22m, [1mmerced[22m,
           [1mitanium2[22m, and [1mmckinley[22m.

       [1m-milp32[0m
       [1m-mlp64[0m
           Generate code for a 32-bit or 64-bit environment.  The 32-bit environment sets int, long and pointer to 32
           bits.  The 64-bit environment sets int to 32 bits and long and  pointer  to  64  bits.   These  are  HP-UX
           specific flags.

       [1m-mno-sched-br-data-spec[0m
       [1m-msched-br-data-spec[0m
           (Dis/En)able data speculative scheduling before reload.  This results in generation of "ld.a" instructions
           and the corresponding check instructions ("ld.c" / "chk.a").  The default setting is disabled.

       [1m-msched-ar-data-spec[0m
       [1m-mno-sched-ar-data-spec[0m
           (En/Dis)able  data speculative scheduling after reload.  This results in generation of "ld.a" instructions
           and the corresponding check instructions ("ld.c" / "chk.a").  The default setting is enabled.

       [1m-mno-sched-control-spec[0m
       [1m-msched-control-spec[0m
           (Dis/En)able control speculative scheduling.  This feature is  available  only  during  region  scheduling
           (i.e.  before  reload).  This results in generation of the "ld.s" instructions and the corresponding check
           instructions "chk.s".  The default setting is disabled.

       [1m-msched-br-in-data-spec[0m
       [1m-mno-sched-br-in-data-spec[0m
           (En/Dis)able speculative scheduling of the instructions that are dependent on the data  speculative  loads
           before reload.  This is effective only with [1m-msched-br-data-spec [22menabled.  The default setting is enabled.

       [1m-msched-ar-in-data-spec[0m
       [1m-mno-sched-ar-in-data-spec[0m
           (En/Dis)able  speculative  scheduling of the instructions that are dependent on the data speculative loads
           after reload.  This is effective only with [1m-msched-ar-data-spec [22menabled.  The default setting is enabled.

       [1m-msched-in-control-spec[0m
       [1m-mno-sched-in-control-spec[0m
           (En/Dis)able speculative scheduling of the instructions that are  dependent  on  the  control  speculative
           loads.  This is effective only with [1m-msched-control-spec [22menabled.  The default setting is enabled.

       [1m-mno-sched-prefer-non-data-spec-insns[0m
       [1m-msched-prefer-non-data-spec-insns[0m
           If  enabled,  data-speculative  instructions are chosen for schedule only if there are no other choices at
           the moment.  This makes the use of the data speculation much more conservative.  The  default  setting  is
           disabled.

       [1m-mno-sched-prefer-non-control-spec-insns[0m
       [1m-msched-prefer-non-control-spec-insns[0m
           If enabled, control-speculative instructions are chosen for schedule only if there are no other choices at
           the moment.  This makes the use of the control speculation much more conservative.  The default setting is
           disabled.

       [1m-mno-sched-count-spec-in-critical-path[0m
       [1m-msched-count-spec-in-critical-path[0m
           If  enabled,  speculative  dependencies  are considered during computation of the instructions priorities.
           This makes the use of the speculation a bit more conservative.  The default setting is disabled.

       [1m-msched-spec-ldc[0m
           Use a simple data speculation check.  This option is on by default.

       [1m-msched-control-spec-ldc[0m
           Use a simple check for control speculation.  This option is on by default.

       [1m-msched-stop-bits-after-every-cycle[0m
           Place a stop bit after every cycle when scheduling.  This option is on by default.

       [1m-msched-fp-mem-deps-zero-cost[0m
           Assume that floating-point stores and loads are not likely to cause a conflict when placed into  the  same
           instruction group.  This option is disabled by default.

       [1m-msel-sched-dont-check-control-spec[0m
           Generate checks for control speculation in selective scheduling.  This flag is disabled by default.

       [1m-msched-max-memory-insns=[4m[22mmax-insns[0m
           Limit  on  the  number  of  memory insns per instruction group, giving lower priority to subsequent memory
           insns attempting to schedule in the same instruction  group.  Frequently  useful  to  prevent  cache  bank
           conflicts.  The default value is 1.

       [1m-msched-max-memory-insns-hard-limit[0m
           Makes the limit specified by [1mmsched-max-memory-insns [22ma hard limit, disallowing more than that number in an
           instruction  group.  Otherwise, the limit is "soft", meaning that non-memory operations are preferred when
           the limit is reached, but memory operations may still be scheduled.

       [4mLM32[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the LatticeMico32 architecture:

       [1m-mbarrel-shift-enabled[0m
           Enable barrel-shift instructions.

       [1m-mdivide-enabled[0m
           Enable divide and modulus instructions.

       [1m-mmultiply-enabled[0m
           Enable multiply instructions.

       [1m-msign-extend-enabled[0m
           Enable sign extend instructions.

       [1m-muser-enabled[0m
           Enable user-defined instructions.

       [4mLoongArch[24m [4mOptions[0m

       These command-line options are defined for LoongArch targets:

       [1m-march=[4m[22mcpu-type[0m
           Generate instructions for the machine type [4mcpu-type[24m.  In contrast to [1m-mtune=[4m[22mcpu-type[24m, which  merely  tunes
           the  generated  code  for the specified [4mcpu-type[24m, [1m-march=[4m[22mcpu-type[24m allows GCC to generate code that may not
           run at all on processors other than the one indicated.   Specifying  [1m-march=[4m[22mcpu-type[24m  implies  [1m-mtune=[4m[22mcpu-[0m
           [4mtype[24m, except where noted otherwise.

           The choices for [4mcpu-type[24m are:

           [1mnative[0m
               This selects the CPU to generate code for at compilation time by determining the processor type of the
               compiling machine.  Using [1m-march=native [22menables all instruction subsets supported by the local machine
               (hence  the  result might not run on different machines).  Using [1m-mtune=native [22mproduces code optimized
               for the local machine under the constraints of the selected instruction set.

           [1mloongarch64[0m
               A generic CPU with 64-bit extensions.

           [1mla464[0m
               LoongArch LA464 CPU with LBT, LSX, LASX, LVZ.

       [1m-mtune=[4m[22mcpu-type[0m
           Optimize the output for the given processor, specified by microarchitecture name.

       [1m-mabi=[4m[22mbase-abi-type[0m
           Generate code for the specified calling convention.  [4mbase-abi-type[24m can be one of:

           [1mlp64d[0m
               Uses 64-bit general purpose registers and 32/64-bit floating-point registers  for  parameter  passing.
               Data model is LP64, where [1mint [22mis 32 bits, while [1mlong int [22mand pointers are 64 bits.

           [1mlp64f[0m
               Uses 64-bit general purpose registers and 32-bit floating-point registers for parameter passing.  Data
               model is LP64, where [1mint [22mis 32 bits, while [1mlong int [22mand pointers are 64 bits.

           [1mlp64s[0m
               Uses  64-bit  general  purpose  registers and no floating-point registers for parameter passing.  Data
               model is LP64, where [1mint [22mis 32 bits, while [1mlong int [22mand pointers are 64 bits.

       [1m-mfpu=[4m[22mfpu-type[0m
           Generate code for the specified FPU type, which can be one of:

           [1m64  [22mAllow the use of hardware floating-point instructions for 32-bit and 64-bit operations.

           [1m32  [22mAllow the use of hardware floating-point instructions for 32-bit operations.

           [1mnone[0m
           [1m0   [22mPrevent the use of hardware floating-point instructions.

       [1m-msoft-float[0m
           Force [1m-mfpu=none [22mand prevents the use of floating-point registers for parameter passing.  This option  may
           change the target ABI.

       [1m-msingle-float[0m
           Force  [1m-mfpu=32  [22mand  allow the use of 32-bit floating-point registers for parameter passing.  This option
           may change the target ABI.

       [1m-mdouble-float[0m
           Force [1m-mfpu=64 [22mand allow the use of 32/64-bit floating-point registers for parameter passing.  This option
           may change the target ABI.

       [1m-mbranch-cost=[4m[22mn[0m
           Set the cost of branches to roughly [4mn[24m instructions.

       [1m-mcheck-zero-division[0m
       [1m-mno-check-zero-divison[0m
           Trap (do not trap) on integer division by zero.  The default is [1m-mcheck-zero-division [22mfor [1m-O0 [22mor [1m-Og[22m,  and
           [1m-mno-check-zero-division [22mfor other optimization levels.

       [1m-mcond-move-int[0m
       [1m-mno-cond-move-int[0m
           Conditional  moves  for integral data in general-purpose registers are enabled (disabled).  The default is
           [1m-mcond-move-int[22m.

       [1m-mcond-move-float[0m
       [1m-mno-cond-move-float[0m
           Conditional moves for floating-point registers are enabled (disabled).  The default is [1m-mcond-move-float[22m.

       [1m-mmemcpy[0m
       [1m-mno-memcpy[0m
           Force (do not force) the use of "memcpy" for non-trivial block moves.  The default is  [1m-mno-memcpy[22m,  which
           allows GCC to inline most constant-sized copies.  Setting optimization level to [1m-Os [22malso forces the use of
           "memcpy",  but  [1m-mno-memcpy  [22mmay  override  this behavior if explicitly specified, regardless of the order
           these options on the command line.

       [1m-mstrict-align[0m
       [1m-mno-strict-align[0m
           Avoid or allow generating memory accesses that may  not  be  aligned  on  a  natural  object  boundary  as
           described in the architecture specification. The default is [1m-mno-strict-align[22m.

       [1m-msmall-data-limit=[4m[22mnumber[0m
           Put  global  and  static  data  smaller  than  [4mnumber[24m bytes into a special section (on some targets).  The
           default value is 0.

       [1m-mmax-inline-memcpy-size=[4m[22mn[0m
           Inline all block moves (such as calls to "memcpy" or structure copies) less than or equal to [4mn[24m bytes.  The
           default value of [4mn[24m is 1024.

       [1m-mcmodel=[4m[22mcode-model[0m
           Set the code model to one of:

           [1mtiny-static (Not implemented yet)[0m
           [1mtiny (Not implemented yet)[0m
           [1mnormal[0m
               The text segment must be within  128MB  addressing  space.   The  data  segment  must  be  within  2GB
               addressing space.

           [1mmedium[0m
               The text segment and data segment must be within 2GB addressing space.

           [1mlarge (Not implemented yet)[0m
           [1mextreme[0m
               This  mode  does not limit the size of the code segment and data segment.  The [1m-mcmodel=extreme [22moption
               is incompatible with [1m-fplt [22mand [1m-mno-explicit-relocs[22m.

           The default code model is "normal".

       [1m-mexplicit-relocs[0m
       [1m-mno-explicit-relocs[0m
           Use or do not use assembler relocation operators when dealing with symbolic addresses.  The alternative is
           to use assembler macros instead, which may limit optimization.   The  default  value  for  the  option  is
           determined during GCC build-time by detecting corresponding assembler support: "-mexplicit-relocs" if said
           support  is  present,  "-mno-explicit-relocs"  otherwise.   This option is mostly useful for debugging, or
           interoperation with assemblers different from the build-time one.

       [1m-mdirect-extern-access[0m
       [1m-mno-direct-extern-access[0m
           Do not use or use GOT to access external symbols.  The default is [1m-mno-direct-extern-access[22m: GOT  is  used
           for external symbols with default visibility, but not used for other external symbols.

           With  [1m-mdirect-extern-access[22m, GOT is not used and all external symbols are PC-relatively addressed.  It is
           [1monly [22msuitable for environments where no dynamic link is performed, like firmwares, OS kernels, executables
           linked with [1m-static [22mor [1m-static-pie[22m.  [1m-mdirect-extern-access [22mis not compatible with [1m-fPIC [22mor [1m-fpic[22m.

       [4mM32C[24m [4mOptions[0m

       [1m-mcpu=[4m[22mname[0m
           Select the CPU for which code is generated.  [4mname[24m may be one of [1mr8c [22mfor the R8C/Tiny series, [1mm16c [22mfor  the
           M16C (up to /60) series, [1mm32cm [22mfor the M16C/80 series, or [1mm32c [22mfor the M32C/80 series.

       [1m-msim[0m
           Specifies  that  the program will be run on the simulator.  This causes an alternate runtime library to be
           linked in which supports, for example, file I/O.  You must not use this option  when  generating  programs
           that  will  run on real hardware; you must provide your own runtime library for whatever I/O functions are
           needed.

       [1m-memregs=[4m[22mnumber[0m
           Specifies the number of memory-based pseudo-registers GCC uses  during  code  generation.   These  pseudo-
           registers  are used like real registers, so there is a tradeoff between GCC's ability to fit the code into
           available registers, and the performance penalty of using memory instead  of  registers.   Note  that  all
           modules  in a program must be compiled with the same value for this option.  Because of that, you must not
           use this option with GCC's default runtime libraries.

       [4mM32R/D[24m [4mOptions[0m

       These [1m-m [22moptions are defined for Renesas M32R/D architectures:

       [1m-m32r2[0m
           Generate code for the M32R/2.

       [1m-m32rx[0m
           Generate code for the M32R/X.

       [1m-m32r[0m
           Generate code for the M32R.  This is the default.

       [1m-mmodel=small[0m
           Assume all objects live in the lower 16MB of memory (so that their addresses can be loaded with the "ld24"
           instruction), and assume all subroutines are reachable with the "bl" instruction.  This is the default.

           The addressability of a particular object can be set with the "model" attribute.

       [1m-mmodel=medium[0m
           Assume objects  may  be  anywhere  in  the  32-bit  address  space  (the  compiler  generates  "seth/add3"
           instructions to load their addresses), and assume all subroutines are reachable with the "bl" instruction.

       [1m-mmodel=large[0m
           Assume  objects  may  be  anywhere  in  the  32-bit  address  space  (the  compiler  generates "seth/add3"
           instructions to load their addresses),  and  assume  subroutines  may  not  be  reachable  with  the  "bl"
           instruction (the compiler generates the much slower "seth/add3/jl" instruction sequence).

       [1m-msdata=none[0m
           Disable  use  of the small data area.  Variables are put into one of ".data", ".bss", or ".rodata" (unless
           the "section" attribute has been specified).  This is the default.

           The small data area consists of sections ".sdata" and ".sbss".  Objects may be explicitly put in the small
           data area with the "section" attribute using one of these sections.

       [1m-msdata=sdata[0m
           Put small global and static data in the small data area, but do not generate  special  code  to  reference
           them.

       [1m-msdata=use[0m
           Put  small  global  and static data in the small data area, and generate special instructions to reference
           them.

       [1m-G [4m[22mnum[0m
           Put global and static objects less than or equal to [4mnum[24m bytes into the small data or BSS sections  instead
           of the normal data or BSS sections.  The default value of [4mnum[24m is 8.  The [1m-msdata [22moption must be set to one
           of [1msdata [22mor [1muse [22mfor this option to have any effect.

           All  modules should be compiled with the same [1m-G [4m[22mnum[24m value.  Compiling with different values of [4mnum[24m may or
           may not work; if it doesn't the linker gives an error message---incorrect code is not generated.

       [1m-mdebug[0m
           Makes the M32R-specific code in the  compiler  display  some  statistics  that  might  help  in  debugging
           programs.

       [1m-malign-loops[0m
           Align all loops to a 32-byte boundary.

       [1m-mno-align-loops[0m
           Do not enforce a 32-byte alignment for loops.  This is the default.

       [1m-missue-rate=[4m[22mnumber[0m
           Issue [4mnumber[24m instructions per cycle.  [4mnumber[24m can only be 1 or 2.

       [1m-mbranch-cost=[4m[22mnumber[0m
           [4mnumber[24m can only be 1 or 2.  If it is 1 then branches are preferred over conditional code, if it is 2, then
           the opposite applies.

       [1m-mflush-trap=[4m[22mnumber[0m
           Specifies  the trap number to use to flush the cache.  The default is 12.  Valid numbers are between 0 and
           15 inclusive.

       [1m-mno-flush-trap[0m
           Specifies that the cache cannot be flushed by using a trap.

       [1m-mflush-func=[4m[22mname[0m
           Specifies the name of the operating  system  function  to  call  to  flush  the  cache.   The  default  is
           [1m_flush_cache[22m, but a function call is only used if a trap is not available.

       [1m-mno-flush-func[0m
           Indicates that there is no OS function for flushing the cache.

       [4mM680x0[24m [4mOptions[0m

       These  are  the  [1m-m  [22moptions defined for M680x0 and ColdFire processors.  The default settings depend on which
       architecture was selected when the compiler was configured; the defaults for the most common choices are given
       below.

       [1m-march=[4m[22march[0m
           Generate code for a specific M680x0 or ColdFire instruction set architecture.  Permissible values of  [4march[0m
           for  M680x0 architectures are: [1m68000[22m, [1m68010[22m, [1m68020[22m, [1m68030[22m, [1m68040[22m, [1m68060 [22mand [1mcpu32[22m.  ColdFire architectures
           are selected according to Freescale's ISA classification and the permissible values are:  [1misaa[22m,  [1misaaplus[22m,
           [1misab [22mand [1misac[22m.

           GCC  defines a macro "__mcf[4march[24m__" whenever it is generating code for a ColdFire target.  The [4march[24m in this
           macro is one of the [1m-march [22marguments given above.

           When used together, [1m-march [22mand [1m-mtune [22mselect code that runs on a family of similar processors but that  is
           optimized for a particular microarchitecture.

       [1m-mcpu=[4m[22mcpu[0m
           Generate  code  for  a  specific  M680x0 or ColdFire processor.  The M680x0 [4mcpu[24ms are: [1m68000[22m, [1m68010[22m, [1m68020[22m,
           [1m68030[22m, [1m68040[22m, [1m68060[22m, [1m68302[22m, [1m68332 [22mand [1mcpu32[22m.  The ColdFire [4mcpu[24ms are given by the table below,  which  also
           classifies the CPUs into families:

           [4mFamily[24m : [1m-mcpu [4m[22marguments[0m
           [1m51 [22m: [1m51 51ac 51ag 51cn 51em 51je 51jf 51jg 51jm 51mm 51qe 51qm[0m
           [1m5206 [22m: [1m5202 5204 5206[0m
           [1m5206e [22m: [1m5206e[0m
           [1m5208 [22m: [1m5207 5208[0m
           [1m5211a [22m: [1m5210a 5211a[0m
           [1m5213 [22m: [1m5211 5212 5213[0m
           [1m5216 [22m: [1m5214 5216[0m
           [1m52235 [22m: [1m52230 52231 52232 52233 52234 52235[0m
           [1m5225 [22m: [1m5224 5225[0m
           [1m52259 [22m: [1m52252 52254 52255 52256 52258 52259[0m
           [1m5235 [22m: [1m5232 5233 5234 5235 523x[0m
           [1m5249 [22m: [1m5249[0m
           [1m5250 [22m: [1m5250[0m
           [1m5271 [22m: [1m5270 5271[0m
           [1m5272 [22m: [1m5272[0m
           [1m5275 [22m: [1m5274 5275[0m
           [1m5282 [22m: [1m5280 5281 5282 528x[0m
           [1m53017 [22m: [1m53011 53012 53013 53014 53015 53016 53017[0m
           [1m5307 [22m: [1m5307[0m
           [1m5329 [22m: [1m5327 5328 5329 532x[0m
           [1m5373 [22m: [1m5372 5373 537x[0m
           [1m5407 [22m: [1m5407[0m
           [1m5475 [22m: [1m5470 5471 5472 5473 5474 5475 547x 5480 5481 5482 5483 5484 5485[0m

           [1m-mcpu=[4m[22mcpu[24m  overrides  [1m-march=[4m[22march[24m  if [4march[24m is compatible with [4mcpu[24m.  Other combinations of [1m-mcpu [22mand [1m-march[0m
           are rejected.

           GCC  defines  the  macro  "__mcf_cpu_[4mcpu[24m"  when  ColdFire  target  [4mcpu[24m  is  selected.   It  also   defines
           "__mcf_family_[4mfamily[24m", where the value of [4mfamily[24m is given by the table above.

       [1m-mtune=[4m[22mtune[0m
           Tune  the  code  for  a  particular microarchitecture within the constraints set by [1m-march [22mand [1m-mcpu[22m.  The
           M680x0 microarchitectures are:  [1m68000[22m,  [1m68010[22m,  [1m68020[22m,  [1m68030[22m,  [1m68040[22m,  [1m68060  [22mand  [1mcpu32[22m.   The  ColdFire
           microarchitectures are: [1mcfv1[22m, [1mcfv2[22m, [1mcfv3[22m, [1mcfv4 [22mand [1mcfv4e[22m.

           You  can  also  use  [1m-mtune=68020-40  [22mfor code that needs to run relatively well on 68020, 68030 and 68040
           targets.  [1m-mtune=68020-60 [22mis similar but includes 68060 targets as well.  These  two  options  select  the
           same tuning decisions as [1m-m68020-40 [22mand [1m-m68020-60 [22mrespectively.

           GCC  defines  the  macros  "__mc[4march[24m"  and  "__mc[4march[24m__" when tuning for 680x0 architecture [4march[24m.  It also
           defines "mc[4march[24m" unless either [1m-ansi [22mor a non-GNU [1m-std [22moption is used.  If GCC is tuning for  a  range  of
           architectures,  as  selected  by  [1m-mtune=68020-40  [22mor  [1m-mtune=68020-60[22m,  it  defines  the macros for every
           architecture in the range.

           GCC also defines the macro "__m[4muarch[24m__" when tuning for ColdFire microarchitecture [4muarch[24m, where  [4muarch[24m  is
           one of the arguments given above.

       [1m-m68000[0m
       [1m-mc68000[0m
           Generate output for a 68000.  This is the default when the compiler is configured for 68000-based systems.
           It is equivalent to [1m-march=68000[22m.

           Use this option for microcontrollers with a 68000 or EC000 core, including the 68008, 68302, 68306, 68307,
           68322, 68328 and 68356.

       [1m-m68010[0m
           Generate output for a 68010.  This is the default when the compiler is configured for 68010-based systems.
           It is equivalent to [1m-march=68010[22m.

       [1m-m68020[0m
       [1m-mc68020[0m
           Generate output for a 68020.  This is the default when the compiler is configured for 68020-based systems.
           It is equivalent to [1m-march=68020[22m.

       [1m-m68030[0m
           Generate output for a 68030.  This is the default when the compiler is configured for 68030-based systems.
           It is equivalent to [1m-march=68030[22m.

       [1m-m68040[0m
           Generate output for a 68040.  This is the default when the compiler is configured for 68040-based systems.
           It is equivalent to [1m-march=68040[22m.

           This  option  inhibits  the  use  of  68881/68882 instructions that have to be emulated by software on the
           68040.  Use this option if your 68040 does not have code to emulate those instructions.

       [1m-m68060[0m
           Generate output for a 68060.  This is the default when the compiler is configured for 68060-based systems.
           It is equivalent to [1m-march=68060[22m.

           This option inhibits the use of 68020 and 68881/68882 instructions that have to be emulated by software on
           the 68060.  Use this option if your 68060 does not have code to emulate those instructions.

       [1m-mcpu32[0m
           Generate output for a CPU32.  This is the default when the compiler is configured for CPU32-based systems.
           It is equivalent to [1m-march=cpu32[22m.

           Use this option for microcontrollers with a CPU32 or CPU32+  core,  including  the  68330,  68331,  68332,
           68333, 68334, 68336, 68340, 68341, 68349 and 68360.

       [1m-m5200[0m
           Generate  output  for  a  520X  ColdFire  CPU.   This  is  the default when the compiler is configured for
           520X-based systems.  It is equivalent to [1m-mcpu=5206[22m, and is now deprecated in favor of that option.

           Use this option for microcontroller with a 5200 core, including the MCF5202, MCF5203, MCF5204 and MCF5206.

       [1m-m5206e[0m
           Generate output for a 5206e ColdFire CPU.  The option  is  now  deprecated  in  favor  of  the  equivalent
           [1m-mcpu=5206e[22m.

       [1m-m528x[0m
           Generate  output  for  a member of the ColdFire 528X family.  The option is now deprecated in favor of the
           equivalent [1m-mcpu=528x[22m.

       [1m-m5307[0m
           Generate output for a ColdFire 5307 CPU.  The  option  is  now  deprecated  in  favor  of  the  equivalent
           [1m-mcpu=5307[22m.

       [1m-m5407[0m
           Generate  output  for  a  ColdFire  5407  CPU.   The  option  is now deprecated in favor of the equivalent
           [1m-mcpu=5407[22m.

       [1m-mcfv4e[0m
           Generate output for a ColdFire V4e family CPU (e.g. 547x/548x).  This includes use of  hardware  floating-
           point  instructions.   The  option  is  equivalent  to  [1m-mcpu=547x[22m, and is now deprecated in favor of that
           option.

       [1m-m68020-40[0m
           Generate output for a 68040, without using any of the new instructions.  This results in code that can run
           relatively efficiently on either a 68020/68881 or a 68030 or a 68040.  The generated  code  does  use  the
           68881 instructions that are emulated on the 68040.

           The option is equivalent to [1m-march=68020 -mtune=68020-40[22m.

       [1m-m68020-60[0m
           Generate output for a 68060, without using any of the new instructions.  This results in code that can run
           relatively  efficiently  on  either  a 68020/68881 or a 68030 or a 68040.  The generated code does use the
           68881 instructions that are emulated on the 68060.

           The option is equivalent to [1m-march=68020 -mtune=68020-60[22m.

       [1m-mhard-float[0m
       [1m-m68881[0m
           Generate floating-point instructions.  This is the default for 68020 and above, and for  ColdFire  devices
           that  have  an  FPU.  It defines the macro "__HAVE_68881__" on M680x0 targets and "__mcffpu__" on ColdFire
           targets.

       [1m-msoft-float[0m
           Do not generate floating-point instructions; use library calls instead.  This is the  default  for  68000,
           68010, and 68832 targets.  It is also the default for ColdFire devices that have no FPU.

       [1m-mdiv[0m
       [1m-mno-div[0m
           Generate (do not generate) ColdFire hardware divide and remainder instructions.  If [1m-march [22mis used without
           [1m-mcpu[22m,  the default is "on" for ColdFire architectures and "off" for M680x0 architectures.  Otherwise, the
           default is taken from the target CPU (either the default  CPU,  or  the  one  specified  by  [1m-mcpu[22m).   For
           example, the default is "off" for [1m-mcpu=5206 [22mand "on" for [1m-mcpu=5206e[22m.

           GCC defines the macro "__mcfhwdiv__" when this option is enabled.

       [1m-mshort[0m
           Consider  type  "int"  to be 16 bits wide, like "short int".  Additionally, parameters passed on the stack
           are also aligned to a 16-bit boundary even on targets whose API mandates promotion to 32-bit.

       [1m-mno-short[0m
           Do not consider type "int" to be 16 bits wide.  This is the default.

       [1m-mnobitfield[0m
       [1m-mno-bitfield[0m
           Do not use the bit-field instructions.  The [1m-m68000[22m, [1m-mcpu32 [22mand [1m-m5200 [22moptions imply [1m-mnobitfield[22m.

       [1m-mbitfield[0m
           Do use the bit-field instructions.  The [1m-m68020 [22moption implies [1m-mbitfield[22m.  This is the default if you use
           a configuration designed for a 68020.

       [1m-mrtd[0m
           Use a different function-calling convention, in which functions that take  a  fixed  number  of  arguments
           return with the "rtd" instruction, which pops their arguments while returning.  This saves one instruction
           in the caller since there is no need to pop the arguments there.

           This  calling  convention  is incompatible with the one normally used on Unix, so you cannot use it if you
           need to call libraries compiled with the Unix compiler.

           Also, you must provide function prototypes for all functions  that  take  variable  numbers  of  arguments
           (including "printf"); otherwise incorrect code is generated for calls to those functions.

           In  addition, seriously incorrect code results if you call a function with too many arguments.  (Normally,
           extra arguments are harmlessly ignored.)

           The "rtd" instruction is supported by the 68010, 68020, 68030, 68040, 68060 and CPU32 processors, but  not
           by the 68000 or 5200.

           The default is [1m-mno-rtd[22m.

       [1m-malign-int[0m
       [1m-mno-align-int[0m
           Control whether GCC aligns "int", "long", "long long", "float", "double", and "long double" variables on a
           32-bit  boundary  ([1m-malign-int[22m)  or  a  16-bit  boundary  ([1m-mno-align-int[22m).   Aligning variables on 32-bit
           boundaries produces code that runs somewhat faster on processors with 32-bit busses at the expense of more
           memory.

           [1mWarning: [22mif you use the [1m-malign-int [22mswitch, GCC aligns structures containing the above  types  differently
           than most published application binary interface specifications for the m68k.

           Use  the  pc-relative  addressing  mode of the 68000 directly, instead of using a global offset table.  At
           present, this option implies [1m-fpic[22m, allowing at most a 16-bit offset for pc-relative addressing.  [1m-fPIC [22mis
           not presently supported with [1m-mpcrel[22m, though this could be supported for 68020 and higher processors.

       [1m-mno-strict-align[0m
       [1m-mstrict-align[0m
           Do not (do) assume that unaligned memory references are handled by the system.

       [1m-msep-data[0m
           Generate code that allows the data segment to be located in a different  area  of  memory  from  the  text
           segment.   This  allows  for  execute-in-place  in an environment without virtual memory management.  This
           option implies [1m-fPIC[22m.

       [1m-mno-sep-data[0m
           Generate code that assumes that the data segment follows the text segment.  This is the default.

       [1m-mid-shared-library[0m
           Generate code that supports shared libraries via the library ID method.  This allows for  execute-in-place
           and shared libraries in an environment without virtual memory management.  This option implies [1m-fPIC[22m.

       [1m-mno-id-shared-library[0m
           Generate code that doesn't assume ID-based shared libraries are being used.  This is the default.

       [1m-mshared-library-id=n[0m
           Specifies  the identification number of the ID-based shared library being compiled.  Specifying a value of
           0 generates more compact code; specifying other values forces the allocation of that number to the current
           library, but is no more space- or time-efficient than omitting this option.

       [1m-mxgot[0m
       [1m-mno-xgot[0m
           When generating position-independent code for ColdFire, generate code that works if the GOT has more  than
           8192  entries.   This  code  is  larger  and  slower  than  code generated without this option.  On M680x0
           processors, this option is not needed; [1m-fPIC [22msuffices.

           GCC normally uses a single instruction to load values from the GOT.  While this is  relatively  efficient,
           it  only works if the GOT is smaller than about 64k.  Anything larger causes the linker to report an error
           such as:

                   relocation truncated to fit: R_68K_GOT16O foobar

           If this happens, you should recompile your code with [1m-mxgot[22m.  It should then work with  very  large  GOTs.
           However, code generated with [1m-mxgot [22mis less efficient, since it takes 4 instructions to fetch the value of
           a global symbol.

           Note  that some linkers, including newer versions of the GNU linker, can create multiple GOTs and sort GOT
           entries.  If you have such a linker, you should only need to use [1m-mxgot [22mwhen  compiling  a  single  object
           file that accesses more than 8192 GOT entries.  Very few do.

           These options have no effect unless GCC is generating position-independent code.

       [1m-mlong-jump-table-offsets[0m
           Use 32-bit offsets in "switch" tables.  The default is to use 16-bit offsets.

       [4mMCore[24m [4mOptions[0m

       These are the [1m-m [22moptions defined for the Motorola M*Core processors.

       [1m-mhardlit[0m
       [1m-mno-hardlit[0m
           Inline constants into the code stream if it can be done in two instructions or less.

       [1m-mdiv[0m
       [1m-mno-div[0m
           Use the divide instruction.  (Enabled by default).

       [1m-mrelax-immediate[0m
       [1m-mno-relax-immediate[0m
           Allow arbitrary-sized immediates in bit operations.

       [1m-mwide-bitfields[0m
       [1m-mno-wide-bitfields[0m
           Always treat bit-fields as "int"-sized.

       [1m-m4byte-functions[0m
       [1m-mno-4byte-functions[0m
           Force all functions to be aligned to a 4-byte boundary.

       [1m-mcallgraph-data[0m
       [1m-mno-callgraph-data[0m
           Emit callgraph information.

       [1m-mslow-bytes[0m
       [1m-mno-slow-bytes[0m
           Prefer word access when reading byte quantities.

       [1m-mlittle-endian[0m
       [1m-mbig-endian[0m
           Generate code for a little-endian target.

       [1m-m210[0m
       [1m-m340[0m
           Generate code for the 210 processor.

       [1m-mno-lsim[0m
           Assume that runtime support has been provided and so omit the simulator library ([4mlibsim.a)[24m from the linker
           command line.

       [1m-mstack-increment=[4m[22msize[0m
           Set  the  maximum  amount  for a single stack increment operation.  Large values can increase the speed of
           programs that contain functions that need a large amount of stack space,  but  they  can  also  trigger  a
           segmentation fault if the stack is extended too much.  The default value is 0x1000.

       [4mMicroBlaze[24m [4mOptions[0m

       [1m-msoft-float[0m
           Use software emulation for floating point (default).

       [1m-mhard-float[0m
           Use hardware floating-point instructions.

       [1m-mmemcpy[0m
           Do not optimize block moves, use "memcpy".

       [1m-mno-clearbss[0m
           This option is deprecated.  Use [1m-fno-zero-initialized-in-bss [22minstead.

       [1m-mcpu=[4m[22mcpu-type[0m
           Use  features of, and schedule code for, the given CPU.  Supported values are in the format [1mv[4m[22mX[24m[1m.[4m[22mYY[24m[1m.[4m[22mZ[24m, where
           [4mX[24m is a major version, [4mYY[24m is the minor version, and [4mZ[24m is compatibility code.  Example values  are  [1mv3.00.a[22m,
           [1mv4.00.b[22m, [1mv5.00.a[22m, [1mv5.00.b[22m, [1mv6.00.a[22m.

       [1m-mxl-soft-mul[0m
           Use software multiply emulation (default).

       [1m-mxl-soft-div[0m
           Use software emulation for divides (default).

       [1m-mxl-barrel-shift[0m
           Use the hardware barrel shifter.

       [1m-mxl-pattern-compare[0m
           Use pattern compare instructions.

       [1m-msmall-divides[0m
           Use table lookup optimization for small signed integer divisions.

       [1m-mxl-stack-check[0m
           This option is deprecated.  Use [1m-fstack-check [22minstead.

       [1m-mxl-gp-opt[0m
           Use GP-relative ".sdata"/".sbss" sections.

       [1m-mxl-multiply-high[0m
           Use multiply high instructions for high part of 32x32 multiply.

       [1m-mxl-float-convert[0m
           Use hardware floating-point conversion instructions.

       [1m-mxl-float-sqrt[0m
           Use hardware floating-point square root instruction.

       [1m-mbig-endian[0m
           Generate code for a big-endian target.

       [1m-mlittle-endian[0m
           Generate code for a little-endian target.

       [1m-mxl-reorder[0m
           Use reorder instructions (swap and byte reversed load/store).

       [1m-mxl-mode-[4m[22mapp-model[0m
           Select application model [4mapp-model[24m.  Valid models are

           [1mexecutable[0m
               normal executable (default), uses startup code [4mcrt0.o[24m.

           [1mxmdstub[0m
               for use with Xilinx Microprocessor Debugger (XMD) based software intrusive debug agent called xmdstub.
               This uses startup file [4mcrt1.o[24m and sets the start address of the program to 0x800.

           [1mbootstrap[0m
               for  applications  that are loaded using a bootloader.  This model uses startup file [4mcrt2.o[24m which does
               not contain a processor reset vector handler. This is suitable for transferring control on a processor
               reset to the bootloader rather than the application.

           [1mnovectors[0m
               for applications that do not require any of the MicroBlaze vectors. This  option  may  be  useful  for
               applications running within a monitoring application. This model uses [4mcrt3.o[24m as a startup file.

           Option [1m-xl-mode-[4m[22mapp-model[24m is a deprecated alias for [1m-mxl-mode-[4m[22mapp-model[24m.

       [1m-mpic-data-is-text-relative[0m
           Assume that the displacement between the text and data segments is fixed at static link time.  This allows
           data  to be referenced by offset from start of text address instead of GOT since PC-relative addressing is
           not supported.

       [4mMIPS[24m [4mOptions[0m

       [1m-EB [22mGenerate big-endian code.

       [1m-EL [22mGenerate little-endian code.  This is the default for [1mmips*el-*-* [22mconfigurations.

       [1m-march=[4m[22march[0m
           Generate code that runs on [4march[24m, which can be the name of a generic MIPS ISA, or the name of a  particular
           processor.  The ISA names are: [1mmips1[22m, [1mmips2[22m, [1mmips3[22m, [1mmips4[22m, [1mmips32[22m, [1mmips32r2[22m, [1mmips32r3[22m, [1mmips32r5[22m, [1mmips32r6[22m,
           [1mmips64[22m,  [1mmips64r2[22m,  [1mmips64r3[22m,  [1mmips64r5 [22mand [1mmips64r6[22m.  The processor names are: [1m4kc[22m, [1m4km[22m, [1m4kp[22m, [1m4ksc[22m, [1m4kec[22m,
           [1m4kem[22m, [1m4kep[22m, [1m4ksd[22m, [1m5kc[22m, [1m5kf[22m, [1m20kc[22m, [1m24kc[22m,  [1m24kf2_1[22m,  [1m24kf1_1[22m,  [1m24kec[22m,  [1m24kef2_1[22m,  [1m24kef1_1[22m,  [1m34kc[22m,  [1m34kf2_1[22m,
           [1m34kf1_1[22m,  [1m34kn[22m,  [1m74kc[22m,  [1m74kf2_1[22m, [1m74kf1_1[22m, [1m74kf3_2[22m, [1m1004kc[22m, [1m1004kf2_1[22m, [1m1004kf1_1[22m, [1mi6400[22m, [1mi6500[22m, [1minteraptiv[22m,
           [1mloongson2e[22m, [1mloongson2f[22m, [1mloongson3a[22m, [1mgs464[22m, [1mgs464e[22m, [1mgs264e[22m, [1mm4k[22m, [1mm14k[22m, [1mm14kc[22m, [1mm14ke[22m, [1mm14kec[22m, [1mm5100[22m,  [1mm5101[22m,
           [1mocteon[22m,  [1mocteon+[22m,  [1mocteon2[22m, [1mocteon3[22m, [1morion[22m, [1mp5600[22m, [1mp6600[22m, [1mr2000[22m, [1mr3000[22m, [1mr3900[22m, [1mr4000[22m, [1mr4400[22m, [1mr4600[22m, [1mr4650[22m,
           [1mr4700[22m, [1mr5900[22m, [1mr6000[22m, [1mr8000[22m, [1mrm7000[22m, [1mrm9000[22m, [1mr10000[22m, [1mr12000[22m, [1mr14000[22m, [1mr16000[22m, [1msb1[22m, [1msr71000[22m, [1mvr4100[22m,  [1mvr4111[22m,
           [1mvr4120[22m,  [1mvr4130[22m, [1mvr4300[22m, [1mvr5000[22m, [1mvr5400[22m, [1mvr5500[22m, [1mxlr [22mand [1mxlp[22m.  The special value [1mfrom-abi [22mselects the most
           compatible architecture for the selected ABI (that is, [1mmips1 [22mfor 32-bit ABIs and [1mmips3 [22mfor 64-bit ABIs).

           The native Linux/GNU toolchain also supports the value [1mnative[22m, which selects the best architecture  option
           for the host processor.  [1m-march=native [22mhas no effect if GCC does not recognize the processor.

           In processor names, a final [1m000 [22mcan be abbreviated as [1mk [22m(for example, [1m-march=r2k[22m).  Prefixes are optional,
           and [1mvr [22mmay be written [1mr[22m.

           Names  of  the form [4mn[24m[1mf2_1 [22mrefer to processors with FPUs clocked at half the rate of the core, names of the
           form [4mn[24m[1mf1_1 [22mrefer to processors with FPUs clocked at the same rate as the core, and names of the form [4mn[24m[1mf3_2[0m
           refer to processors with FPUs clocked a ratio of 3:2 with respect to the core.  For compatibility reasons,
           [4mn[24m[1mf [22mis accepted as a synonym for [4mn[24m[1mf2_1 [22mwhile [4mn[24m[1mx [22mand [4mb[24m[1mfx [22mare accepted as synonyms for [4mn[24m[1mf1_1[22m.

           GCC defines two macros based on the value of this option.  The first is "_MIPS_ARCH", which gives the name
           of target architecture, as a string.   The  second  has  the  form  "_MIPS_ARCH_[4mfoo[24m",  where  [4mfoo[24m  is  the
           capitalized value of "_MIPS_ARCH".  For example, [1m-march=r2000 [22msets "_MIPS_ARCH" to "r2000" and defines the
           macro "_MIPS_ARCH_R2000".

           Note  that  the  "_MIPS_ARCH" macro uses the processor names given above.  In other words, it has the full
           prefix and does not abbreviate [1m000 [22mas  [1mk[22m.   In  the  case  of  [1mfrom-abi[22m,  the  macro  names  the  resolved
           architecture  (either  "mips1"  or  "mips3").   It names the default architecture when no [1m-march [22moption is
           given.

       [1m-mtune=[4m[22march[0m
           Optimize for [4march[24m.  Among other things, this option controls the way instructions are scheduled,  and  the
           perceived cost of arithmetic operations.  The list of [4march[24m values is the same as for [1m-march[22m.

           When  this  option  is not used, GCC optimizes for the processor specified by [1m-march[22m.  By using [1m-march [22mand
           [1m-mtune [22mtogether, it is possible to generate code that runs on a family of  processors,  but  optimize  the
           code for one particular member of that family.

           [1m-mtune [22mdefines the macros "_MIPS_TUNE" and "_MIPS_TUNE_[4mfoo[24m", which work in the same way as the [1m-march [22mones
           described above.

       [1m-mips1[0m
           Equivalent to [1m-march=mips1[22m.

       [1m-mips2[0m
           Equivalent to [1m-march=mips2[22m.

       [1m-mips3[0m
           Equivalent to [1m-march=mips3[22m.

       [1m-mips4[0m
           Equivalent to [1m-march=mips4[22m.

       [1m-mips32[0m
           Equivalent to [1m-march=mips32[22m.

       [1m-mips32r3[0m
           Equivalent to [1m-march=mips32r3[22m.

       [1m-mips32r5[0m
           Equivalent to [1m-march=mips32r5[22m.

       [1m-mips32r6[0m
           Equivalent to [1m-march=mips32r6[22m.

       [1m-mips64[0m
           Equivalent to [1m-march=mips64[22m.

       [1m-mips64r2[0m
           Equivalent to [1m-march=mips64r2[22m.

       [1m-mips64r3[0m
           Equivalent to [1m-march=mips64r3[22m.

       [1m-mips64r5[0m
           Equivalent to [1m-march=mips64r5[22m.

       [1m-mips64r6[0m
           Equivalent to [1m-march=mips64r6[22m.

       [1m-mips16[0m
       [1m-mno-mips16[0m
           Generate (do not generate) MIPS16 code.  If GCC is targeting a MIPS32 or MIPS64 architecture, it makes use
           of the MIPS16e ASE.

           MIPS16  code generation can also be controlled on a per-function basis by means of "mips16" and "nomips16"
           attributes.

       [1m-mflip-mips16[0m
           Generate MIPS16 code on alternating functions.  This option is provided for regression  testing  of  mixed
           MIPS16/non-MIPS16 code generation, and is not intended for ordinary use in compiling user code.

       [1m-minterlink-compressed[0m
       [1m-mno-interlink-compressed[0m
           Require  (do  not  require)  that  code using the standard (uncompressed) MIPS ISA be link-compatible with
           MIPS16 and microMIPS code, and vice versa.

           For example, code using the standard ISA encoding cannot jump directly to MIPS16  or  microMIPS  code;  it
           must either use a call or an indirect jump.  [1m-minterlink-compressed [22mtherefore disables direct jumps unless
           GCC knows that the target of the jump is not compressed.

       [1m-minterlink-mips16[0m
       [1m-mno-interlink-mips16[0m
           Aliases  of [1m-minterlink-compressed [22mand [1m-mno-interlink-compressed[22m.  These options predate the microMIPS ASE
           and are retained for backwards compatibility.

       [1m-mabi=32[0m
       [1m-mabi=o64[0m
       [1m-mabi=n32[0m
       [1m-mabi=64[0m
       [1m-mabi=eabi[0m
           Generate code for the given ABI.

           Note that the EABI has a 32-bit and a 64-bit variant.  GCC normally generates 64-bit code when you  select
           a 64-bit architecture, but you can use [1m-mgp32 [22mto get 32-bit code instead.

           For information about the O64 ABI, see <[1mhttps://gcc.gnu.org/projects/mipso64-abi.html[22m>.

           GCC  supports  a variant of the o32 ABI in which floating-point registers are 64 rather than 32 bits wide.
           You can select this combination with [1m-mabi=32  -mfp64[22m.   This  ABI  relies  on  the  "mthc1"  and  "mfhc1"
           instructions and is therefore only supported for MIPS32R2, MIPS32R3 and MIPS32R5 processors.

           The  register assignments for arguments and return values remain the same, but each scalar value is passed
           in a single 64-bit register rather than a pair of 32-bit registers.  For  example,  scalar  floating-point
           values  are  returned  in  [1m$f0 [22monly, not a [1m$f0[22m/[1m$f1 [22mpair.  The set of call-saved registers also remains the
           same in that the even-numbered double-precision registers are saved.

           Two additional variants of the o32 ABI are  supported  to  enable  a  transition  from  32-bit  to  64-bit
           registers.   These  are FPXX ([1m-mfpxx[22m) and FP64A ([1m-mfp64 -mno-odd-spreg[22m).  The FPXX extension mandates that
           all code must execute correctly when run using 32-bit or 64-bit registers.  The code  can  be  interlinked
           with  either FP32 or FP64, but not both.  The FP64A extension is similar to the FP64 extension but forbids
           the use of odd-numbered single-precision registers.  This can be used in conjunction with the  "FRE"  mode
           of  FPUs  in  MIPS32R5  processors  and  allows  both FP32 and FP64A code to interlink and run in the same
           process without changing FPU modes.

       [1m-mabicalls[0m
       [1m-mno-abicalls[0m
           Generate (do not generate) code that is suitable  for  SVR4-style  dynamic  objects.   [1m-mabicalls  [22mis  the
           default for SVR4-based systems.

       [1m-mshared[0m
       [1m-mno-shared[0m
           Generate  (do not generate) code that is fully position-independent, and that can therefore be linked into
           shared libraries.  This option only affects [1m-mabicalls[22m.

           All [1m-mabicalls [22mcode has traditionally been position-independent, regardless  of  options  like  [1m-fPIC  [22mand
           [1m-fpic[22m.   However,  as  an  extension,  the  GNU  toolchain allows executables to use absolute accesses for
           locally-binding symbols.  It can also use shorter GP initialization sequences and generate direct calls to
           locally-defined functions.  This mode is selected by [1m-mno-shared[22m.

           [1m-mno-shared [22mdepends on binutils 2.16 or higher and generates objects that can only be linked  by  the  GNU
           linker.   However,  the option does not affect the ABI of the final executable; it only affects the ABI of
           relocatable objects.  Using [1m-mno-shared [22mgenerally makes executables both smaller and quicker.

           [1m-mshared [22mis the default.

       [1m-mplt[0m
       [1m-mno-plt[0m
           Assume (do not assume) that the static and dynamic linkers support PLTs and copy relocations.  This option
           only affects [1m-mno-shared -mabicalls[22m.  For the n64 ABI, this option has no effect without [1m-msym32[22m.

           You can make [1m-mplt [22mthe  default  by  configuring  GCC  with  [1m--with-mips-plt[22m.   The  default  is  [1m-mno-plt[0m
           otherwise.

       [1m-mxgot[0m
       [1m-mno-xgot[0m
           Lift (do not lift) the usual restrictions on the size of the global offset table.

           GCC  normally  uses a single instruction to load values from the GOT.  While this is relatively efficient,
           it only works if the GOT is smaller than about 64k.  Anything larger causes the linker to report an  error
           such as:

                   relocation truncated to fit: R_MIPS_GOT16 foobar

           If  this  happens,  you should recompile your code with [1m-mxgot[22m.  This works with very large GOTs, although
           the code is also less efficient, since it takes three instructions to fetch the value of a global symbol.

           Note that some linkers can create multiple GOTs.  If you have such a linker, you should only need  to  use
           [1m-mxgot [22mwhen a single object file accesses more than 64k's worth of GOT entries.  Very few do.

           These options have no effect unless GCC is generating position independent code.

       [1m-mgp32[0m
           Assume that general-purpose registers are 32 bits wide.

       [1m-mgp64[0m
           Assume that general-purpose registers are 64 bits wide.

       [1m-mfp32[0m
           Assume that floating-point registers are 32 bits wide.

       [1m-mfp64[0m
           Assume that floating-point registers are 64 bits wide.

       [1m-mfpxx[0m
           Do not assume the width of floating-point registers.

       [1m-mhard-float[0m
           Use floating-point coprocessor instructions.

       [1m-msoft-float[0m
           Do  not  use floating-point coprocessor instructions.  Implement floating-point calculations using library
           calls instead.

       [1m-mno-float[0m
           Equivalent to [1m-msoft-float[22m, but additionally asserts that the program being compiled does not perform  any
           floating-point   operations.    This   option   is  presently  supported  only  by  some  bare-metal  MIPS
           configurations, where it may select a special set  of  libraries  that  lack  all  floating-point  support
           (including,  for  example,  the  floating-point  "printf"  formats).   If  code  compiled  with [1m-mno-float[0m
           accidentally contains floating-point operations, it is likely to suffer a link-time or run-time failure.

       [1m-msingle-float[0m
           Assume that the floating-point coprocessor only supports single-precision operations.

       [1m-mdouble-float[0m
           Assume that the floating-point coprocessor supports double-precision operations.  This is the default.

       [1m-modd-spreg[0m
       [1m-mno-odd-spreg[0m
           Enable the use of odd-numbered single-precision floating-point registers for the o32  ABI.   This  is  the
           default  for  processors  that  are  known  to  support  these  registers.   When  using the o32 FPXX ABI,
           [1m-mno-odd-spreg [22mis set by default.

       [1m-mabs=2008[0m
       [1m-mabs=legacy[0m
           These options control the treatment of the special not-a-number (NaN) IEEE 754  floating-point  data  with
           the "abs.[4mfmt[24m" and "neg.[4mfmt[24m" machine instructions.

           By default or when [1m-mabs=legacy [22mis used the legacy treatment is selected.  In this case these instructions
           are considered arithmetic and avoided where correct operation is required and the input operand might be a
           NaN.   A  longer sequence of instructions that manipulate the sign bit of floating-point datum manually is
           used instead unless the [1m-ffinite-math-only [22moption has also been specified.

           The [1m-mabs=2008 [22moption selects the IEEE 754-2008 treatment.  In this case these instructions are considered
           non-arithmetic and therefore operating correctly in all cases, including in  particular  where  the  input
           operand is a NaN.  These instructions are therefore always used for the respective operations.

       [1m-mnan=2008[0m
       [1m-mnan=legacy[0m
           These options control the encoding of the special not-a-number (NaN) IEEE 754 floating-point data.

           The  [1m-mnan=legacy  [22moption selects the legacy encoding.  In this case quiet NaNs (qNaNs) are denoted by the
           first bit of their trailing significand field being 0, whereas signaling NaNs (sNaNs) are denoted  by  the
           first bit of their trailing significand field being 1.

           The [1m-mnan=2008 [22moption selects the IEEE 754-2008 encoding.  In this case qNaNs are denoted by the first bit
           of  their trailing significand field being 1, whereas sNaNs are denoted by the first bit of their trailing
           significand field being 0.

           The default is [1m-mnan=legacy [22munless GCC has been configured with [1m--with-nan=2008[22m.

       [1m-mllsc[0m
       [1m-mno-llsc[0m
           Use (do not use) [1mll[22m, [1msc[22m, and [1msync [22minstructions  to  implement  atomic  memory  built-in  functions.   When
           neither option is specified, GCC uses the instructions if the target architecture supports them.

           [1m-mllsc  [22mis useful if the runtime environment can emulate the instructions and [1m-mno-llsc [22mcan be useful when
           compiling for nonstandard ISAs.   You  can  make  either  option  the  default  by  configuring  GCC  with
           [1m--with-llsc  [22mand [1m--without-llsc [22mrespectively.  [1m--with-llsc [22mis the default for some configurations; see the
           installation documentation for details.

       [1m-mdsp[0m
       [1m-mno-dsp[0m
           Use (do not use) revision 1 of the MIPS DSP ASE.
             This option defines the preprocessor macro "__mips_dsp".  It also defines "__mips_dsp_rev" to 1.

       [1m-mdspr2[0m
       [1m-mno-dspr2[0m
           Use (do not use) revision 2 of the MIPS DSP ASE.
             This  option  defines  the  preprocessor  macros  "__mips_dsp"  and  "__mips_dspr2".   It  also  defines
           "__mips_dsp_rev" to 2.

       [1m-msmartmips[0m
       [1m-mno-smartmips[0m
           Use (do not use) the MIPS SmartMIPS ASE.

       [1m-mpaired-single[0m
       [1m-mno-paired-single[0m
           Use (do not use) paired-single floating-point instructions.
             This option requires hardware floating-point support to be enabled.

       [1m-mdmx[0m
       [1m-mno-mdmx[0m
           Use  (do not use) MIPS Digital Media Extension instructions.  This option can only be used when generating
           64-bit code and requires hardware floating-point support to be enabled.

       [1m-mips3d[0m
       [1m-mno-mips3d[0m
           Use (do not use) the MIPS-3D ASE.  The option [1m-mips3d [22mimplies [1m-mpaired-single[22m.

       [1m-mmicromips[0m
       [1m-mno-micromips[0m
           Generate (do not generate) microMIPS code.

           MicroMIPS code generation can also be controlled on a per-function  basis  by  means  of  "micromips"  and
           "nomicromips" attributes.

       [1m-mmt[0m
       [1m-mno-mt[0m
           Use (do not use) MT Multithreading instructions.

       [1m-mmcu[0m
       [1m-mno-mcu[0m
           Use (do not use) the MIPS MCU ASE instructions.

       [1m-meva[0m
       [1m-mno-eva[0m
           Use (do not use) the MIPS Enhanced Virtual Addressing instructions.

       [1m-mvirt[0m
       [1m-mno-virt[0m
           Use (do not use) the MIPS Virtualization (VZ) instructions.

       [1m-mxpa[0m
       [1m-mno-xpa[0m
           Use (do not use) the MIPS eXtended Physical Address (XPA) instructions.

       [1m-mcrc[0m
       [1m-mno-crc[0m
           Use (do not use) the MIPS Cyclic Redundancy Check (CRC) instructions.

       [1m-mginv[0m
       [1m-mno-ginv[0m
           Use (do not use) the MIPS Global INValidate (GINV) instructions.

       [1m-mloongson-mmi[0m
       [1m-mno-loongson-mmi[0m
           Use (do not use) the MIPS Loongson MultiMedia extensions Instructions (MMI).

       [1m-mloongson-ext[0m
       [1m-mno-loongson-ext[0m
           Use (do not use) the MIPS Loongson EXTensions (EXT) instructions.

       [1m-mloongson-ext2[0m
       [1m-mno-loongson-ext2[0m
           Use (do not use) the MIPS Loongson EXTensions r2 (EXT2) instructions.

       [1m-mlong64[0m
           Force  "long"  types  to be 64 bits wide.  See [1m-mlong32 [22mfor an explanation of the default and the way that
           the pointer size is determined.

       [1m-mlong32[0m
           Force "long", "int", and pointer types to be 32 bits wide.

           The default size of "int"s, "long"s and pointers depends on the ABI.  All the supported  ABIs  use  32-bit
           "int"s.   The  n64  ABI  uses  64-bit  "long"s,  as  does  the 64-bit EABI; the others use 32-bit "long"s.
           Pointers are the same size as "long"s, or the same size as integer registers, whichever is smaller.

       [1m-msym32[0m
       [1m-mno-sym32[0m
           Assume (do not assume) that all symbols have 32-bit values, regardless of the selected ABI.   This  option
           is  useful  in  combination  with [1m-mabi=64 [22mand [1m-mno-abicalls [22mbecause it allows GCC to generate shorter and
           faster references to symbolic addresses.

       [1m-G [4m[22mnum[0m
           Put definitions of externally-visible data in a small data section if that data  is  no  bigger  than  [4mnum[0m
           bytes.  GCC can then generate more efficient accesses to the data; see [1m-mgpopt [22mfor details.

           The default [1m-G [22moption depends on the configuration.

       [1m-mlocal-sdata[0m
       [1m-mno-local-sdata[0m
           Extend (do not extend) the [1m-G [22mbehavior to local data too, such as to static variables in C.  [1m-mlocal-sdata[0m
           is the default for all configurations.

           If the linker complains that an application is using too much small data, you might want to try rebuilding
           the  less  performance-critical parts with [1m-mno-local-sdata[22m.  You might also want to build large libraries
           with [1m-mno-local-sdata[22m, so that the libraries leave more room for the main program.

       [1m-mextern-sdata[0m
       [1m-mno-extern-sdata[0m
           Assume (do not assume) that externally-defined data is in a small data section if the size of that data is
           within the [1m-G [22mlimit.  [1m-mextern-sdata [22mis the default for all configurations.

           If you compile a module [4mMod[24m with [1m-mextern-sdata -G [4m[22mnum[24m [1m-mgpopt[22m, and [4mMod[24m references a variable [4mVar[24m that  is
           no  bigger  than  [4mnum[24m  bytes,  you  must  make sure that [4mVar[24m is placed in a small data section.  If [4mVar[24m is
           defined by another module, you must either compile that module with a high-enough [1m-G [22msetting or  attach  a
           "section"  attribute  to  [4mVar[24m's  definition.  If [4mVar[24m is common, you must link the application with a high-
           enough [1m-G [22msetting.

           The easiest way of satisfying these restrictions is to compile and link every  module  with  the  same  [1m-G[0m
           option.   However, you may wish to build a library that supports several different small data limits.  You
           can do this by compiling the library  with  the  highest  supported  [1m-G  [22msetting  and  additionally  using
           [1m-mno-extern-sdata [22mto stop the library from making assumptions about externally-defined data.

       [1m-mgpopt[0m
       [1m-mno-gpopt[0m
           Use  (do  not  use) GP-relative accesses for symbols that are known to be in a small data section; see [1m-G[22m,
           [1m-mlocal-sdata [22mand [1m-mextern-sdata[22m.  [1m-mgpopt [22mis the default for all configurations.

           [1m-mno-gpopt [22mis useful for cases where the $gp register might not hold the value of "_gp".  For example,  if
           the  code  is  part  of  a  library  that might be used in a boot monitor, programs that call boot monitor
           routines pass an unknown value in $gp.  (In such situations, the boot monitor itself is  usually  compiled
           with [1m-G0[22m.)

           [1m-mno-gpopt [22mimplies [1m-mno-local-sdata [22mand [1m-mno-extern-sdata[22m.

       [1m-membedded-data[0m
       [1m-mno-embedded-data[0m
           Allocate variables to the read-only data section first if possible, then next in the small data section if
           possible,  otherwise in data.  This gives slightly slower code than the default, but reduces the amount of
           RAM required when executing, and thus may be preferred for some embedded systems.

       [1m-muninit-const-in-rodata[0m
       [1m-mno-uninit-const-in-rodata[0m
           Put uninitialized "const" variables in the read-only data section.  This  option  is  only  meaningful  in
           conjunction with [1m-membedded-data[22m.

       [1m-mcode-readable=[4m[22msetting[0m
           Specify  whether  GCC  may  generate  code  that reads from executable sections.  There are three possible
           settings:

           [1m-mcode-readable=yes[0m
               Instructions may freely access executable sections.  This is the default setting.

           [1m-mcode-readable=pcrel[0m
               MIPS16 PC-relative load instructions can access executable sections, but other instructions  must  not
               do so.  This option is useful on 4KSc and 4KSd processors when the code TLBs have the Read Inhibit bit
               set.   It  is  also  useful  on processors that can be configured to have a dual instruction/data SRAM
               interface and that, like the M4K, automatically redirect PC-relative loads to the instruction RAM.

           [1m-mcode-readable=no[0m
               Instructions must not access executable sections.  This option can  be  useful  on  targets  that  are
               configured  to  have  a  dual  instruction/data  SRAM  interface  but  that  (unlike  the  M4K) do not
               automatically redirect PC-relative loads to the instruction RAM.

       [1m-msplit-addresses[0m
       [1m-mno-split-addresses[0m
           Enable (disable) use of the %hi()  and  %lo()  assembler  relocation  operators.   This  option  has  been
           superseded by [1m-mexplicit-relocs [22mbut is retained for backwards compatibility.

       [1m-mexplicit-relocs[0m
       [1m-mno-explicit-relocs[0m
           Use  (do  not  use) assembler relocation operators when dealing with symbolic addresses.  The alternative,
           selected by [1m-mno-explicit-relocs[22m, is to use assembler macros instead.

           [1m-mexplicit-relocs [22mis the default if GCC was configured  to  use  an  assembler  that  supports  relocation
           operators.

       [1m-mcheck-zero-division[0m
       [1m-mno-check-zero-division[0m
           Trap (do not trap) on integer division by zero.

           The default is [1m-mcheck-zero-division[22m.

       [1m-mdivide-traps[0m
       [1m-mdivide-breaks[0m
           MIPS  systems  check  for division by zero by generating either a conditional trap or a break instruction.
           Using traps results in smaller code, but is only supported on MIPS II and later.  Also, some  versions  of
           the  Linux  kernel  have  a  bug  that  prevents  trap  from generating the proper signal ("SIGFPE").  Use
           [1m-mdivide-traps [22mto allow conditional traps on architectures that support them and [1m-mdivide-breaks [22mto  force
           the use of breaks.

           The   default   is   usually   [1m-mdivide-traps[22m,  but  this  can  be  overridden  at  configure  time  using
           [1m--with-divide=breaks[22m.  Divide-by-zero checks can be completely disabled using [1m-mno-check-zero-division[22m.

       [1m-mload-store-pairs[0m
       [1m-mno-load-store-pairs[0m
           Enable (disable) an optimization that pairs consecutive load or store instructions  to  enable  load/store
           bonding.   This option is enabled by default but only takes effect when the selected architecture is known
           to support bonding.

       [1m-munaligned-access[0m
       [1m-mno-unaligned-access[0m
           Enable (disable) direct unaligned access for MIPS Release 6.  MIPSr6 requires load/store  unaligned-access
           support, by hardware or trap&emulate.  So [1m-mno-unaligned-access [22mmay be needed by kernel.

       [1m-mmemcpy[0m
       [1m-mno-memcpy[0m
           Force  (do  not force) the use of "memcpy" for non-trivial block moves.  The default is [1m-mno-memcpy[22m, which
           allows GCC to inline most constant-sized copies.

       [1m-mlong-calls[0m
       [1m-mno-long-calls[0m
           Disable (do not disable) use of the "jal" instruction.  Calling functions using "jal"  is  more  efficient
           but requires the caller and callee to be in the same 256 megabyte segment.

           This option has no effect on abicalls code.  The default is [1m-mno-long-calls[22m.

       [1m-mmad[0m
       [1m-mno-mad[0m
           Enable (disable) use of the "mad", "madu" and "mul" instructions, as provided by the R4650 ISA.

       [1m-mimadd[0m
       [1m-mno-imadd[0m
           Enable  (disable)  use  of  the  "madd"  and  "msub"  integer  instructions.   The  default  is [1m-mimadd [22mon
           architectures that support "madd" and "msub" except for  the  74k  architecture  where  it  was  found  to
           generate slower code.

       [1m-mfused-madd[0m
       [1m-mno-fused-madd[0m
           Enable (disable) use of the floating-point multiply-accumulate instructions, when they are available.  The
           default is [1m-mfused-madd[22m.

           On the R8000 CPU when multiply-accumulate instructions are used, the intermediate product is calculated to
           infinite  precision  and  is  not  subject to the FCSR Flush to Zero bit.  This may be undesirable in some
           circumstances.  On other processors the result is numerically  identical  to  the  equivalent  computation
           using separate multiply, add, subtract and negate instructions.

       [1m-nocpp[0m
           Tell  the  MIPS  assembler  to  not run its preprocessor over user assembler files (with a [1m.s [22msuffix) when
           assembling them.

       [1m-mfix-24k[0m
       [1m-mno-fix-24k[0m
           Work around the 24K E48 (lost data on stores during refill) errata.  The workarounds  are  implemented  by
           the assembler rather than by GCC.

       [1m-mfix-r4000[0m
       [1m-mno-fix-r4000[0m
           Work around certain R4000 CPU errata:

           -   A  double-word or a variable shift may give an incorrect result if executed immediately after starting
               an integer division.

           -   A double-word or a variable  shift  may  give  an  incorrect  result  if  executed  while  an  integer
               multiplication is in progress.

           -   An  integer  division  may  give an incorrect result if started in a delay slot of a taken branch or a
               jump.

       [1m-mfix-r4400[0m
       [1m-mno-fix-r4400[0m
           Work around certain R4400 CPU errata:

           -   A double-word or a variable shift may give an incorrect result if executed immediately after  starting
               an integer division.

       [1m-mfix-r10000[0m
       [1m-mno-fix-r10000[0m
           Work around certain R10000 errata:

           -   "ll"/"sc"  sequences  may  not  behave  atomically  on  revisions  prior to 3.0.  They may deadlock on
               revisions 2.6 and earlier.

           This option can only be used if the target architecture supports branch-likely instructions.  [1m-mfix-r10000[0m
           is the default when [1m-march=r10000 [22mis used; [1m-mno-fix-r10000 [22mis the default otherwise.

       [1m-mfix-r5900[0m
       [1m-mno-fix-r5900[0m
           Do not attempt to schedule the preceding instruction into the delay slot of a branch instruction placed at
           the end of a short loop of six instructions or  fewer  and  always  schedule  a  "nop"  instruction  there
           instead.  The short loop bug under certain conditions causes loops to execute only once or twice, due to a
           hardware bug in the R5900 chip.  The workaround is implemented by the assembler rather than by GCC.

       [1m-mfix-rm7000[0m
       [1m-mno-fix-rm7000[0m
           Work  around  the RM7000 "dmult"/"dmultu" errata.  The workarounds are implemented by the assembler rather
           than by GCC.

       [1m-mfix-vr4120[0m
       [1m-mno-fix-vr4120[0m
           Work around certain VR4120 errata:

           -   "dmultu" does not always produce the correct result.

           -   "div" and "ddiv" do not always produce the correct result if one of the operands is negative.

           The workarounds for the division errata  rely  on  special  functions  in  [4mlibgcc.a[24m.   At  present,  these
           functions are only provided by the "mips64vr*-elf" configurations.

           Other  VR4120 errata require a NOP to be inserted between certain pairs of instructions.  These errata are
           handled by the assembler, not by GCC itself.

       [1m-mfix-vr4130[0m
           Work around the VR4130 "mflo"/"mfhi" errata.  The workarounds are implemented by the assembler rather than
           by GCC, although GCC avoids using "mflo" and "mfhi" if the VR4130 "macc", "macchi", "dmacc" and  "dmacchi"
           instructions are available instead.

       [1m-mfix-sb1[0m
       [1m-mno-fix-sb1[0m
           Work  around certain SB-1 CPU core errata.  (This flag currently works around the SB-1 revision 2 "F1" and
           "F2" floating-point errata.)

       [1m-mr10k-cache-barrier=[4m[22msetting[0m
           Specify whether GCC should insert cache barriers  to  avoid  the  side  effects  of  speculation  on  R10K
           processors.

           In  common  with  many  processors,  the  R10K  tries  to  predict the outcome of a conditional branch and
           speculatively executes instructions from the "taken" branch.  It later aborts these  instructions  if  the
           predicted outcome is wrong.  However, on the R10K, even aborted instructions can have side effects.

           This  problem  only  affects  kernel  stores and, depending on the system, kernel loads.  As an example, a
           speculatively-executed store may load the target memory into cache and mark the cache line as dirty,  even
           if  the  store  itself  is later aborted.  If a DMA operation writes to the same area of memory before the
           "dirty" line is flushed, the cached data overwrites the DMA-ed data.  See the R10K processor manual for  a
           full description, including other potential problems.

           One  workaround  is  to  insert  cache  barrier  instructions  before  every  memory  access that might be
           speculatively executed and that might have side effects  even  if  aborted.   [1m-mr10k-cache-barrier=[4m[22msetting[0m
           controls  GCC's  implementation  of  this workaround.  It assumes that aborted accesses to any byte in the
           following regions does not have side effects:

           1.  the memory occupied by the current function's stack frame;

           2.  the memory occupied by an incoming stack argument;

           3.  the memory occupied by an object with a link-time-constant address.

           It is the kernel's responsibility to ensure that speculative accesses to these regions are indeed safe.

           If the input program contains a function declaration such as:

                   void foo (void);

           then the implementation of "foo" must allow "j foo" and "jal  foo"  to  be  executed  speculatively.   GCC
           honors  this  restriction  for  functions it compiles itself.  It expects non-GCC functions (such as hand-
           written assembly code) to do the same.

           The option has three forms:

           [1m-mr10k-cache-barrier=load-store[0m
               Insert a cache barrier before a load or store that might be speculatively executed and that might have
               side effects even if aborted.

           [1m-mr10k-cache-barrier=store[0m
               Insert a cache barrier before a store that might be speculatively executed and that  might  have  side
               effects even if aborted.

           [1m-mr10k-cache-barrier=none[0m
               Disable the insertion of cache barriers.  This is the default setting.

       [1m-mflush-func=[4m[22mfunc[0m
       [1m-mno-flush-func[0m
           Specifies  the function to call to flush the I and D caches, or to not call any such function.  If called,
           the function must take the same arguments as the common "_flush_func", that is, the address of the  memory
           range  for which the cache is being flushed, the size of the memory range, and the number 3 (to flush both
           caches).  The default depends on the target GCC was configured for, but commonly is  either  "_flush_func"
           or "__cpu_flush".

       [1mmbranch-cost=[4m[22mnum[0m
           Set  the  cost of branches to roughly [4mnum[24m "simple" instructions.  This cost is only a heuristic and is not
           guaranteed to produce consistent results across releases.  A zero cost redundantly  selects  the  default,
           which is based on the [1m-mtune [22msetting.

       [1m-mbranch-likely[0m
       [1m-mno-branch-likely[0m
           Enable  or  disable  use  of  Branch  Likely  instructions,  regardless  of  the  default for the selected
           architecture.  By default, Branch Likely instructions may be  generated  if  they  are  supported  by  the
           selected  architecture.   An  exception  is  for  the  MIPS32 and MIPS64 architectures and processors that
           implement those architectures; for those, Branch Likely instructions  are  not  be  generated  by  default
           because the MIPS32 and MIPS64 architectures specifically deprecate their use.

       [1m-mcompact-branches=never[0m
       [1m-mcompact-branches=optimal[0m
       [1m-mcompact-branches=always[0m
           These    options    control    which   form   of   branches   will   be   generated.    The   default   is
           [1m-mcompact-branches=optimal[22m.

           The [1m-mcompact-branches=never [22moption ensures that compact branch instructions will never be generated.

           The [1m-mcompact-branches=always [22moption ensures that a  compact  branch  instruction  will  be  generated  if
           available  for  MIPS  Release  6 onwards.  If a compact branch instruction is not available (or pre-R6), a
           delay slot form of the branch will be used instead.

           If  it  is  used  for  MIPS16/microMIPS  targets,  it  will  be  just  ignored  now.   The  behaviour  for
           MIPS16/microMIPS may change in future, since they do have some compact branch instructions.

           The [1m-mcompact-branches=optimal [22moption will cause a delay slot branch to be used if one is available in the
           current  ISA and the delay slot is successfully filled.  If the delay slot is not filled, a compact branch
           will be chosen if one is available.

       [1m-mfp-exceptions[0m
       [1m-mno-fp-exceptions[0m
           Specifies whether FP exceptions are enabled.  This affects how FP  instructions  are  scheduled  for  some
           processors.  The default is that FP exceptions are enabled.

           For instance, on the SB-1, if FP exceptions are disabled, and we are emitting 64-bit code, then we can use
           both FP pipes.  Otherwise, we can only use one FP pipe.

       [1m-mvr4130-align[0m
       [1m-mno-vr4130-align[0m
           The  VR4130 pipeline is two-way superscalar, but can only issue two instructions together if the first one
           is 8-byte aligned.  When this option is enabled, GCC aligns pairs of instructions that  it  thinks  should
           execute in parallel.

           This  option only has an effect when optimizing for the VR4130.  It normally makes code faster, but at the
           expense of making it bigger.  It is enabled by default at optimization level [1m-O3[22m.

       [1m-msynci[0m
       [1m-mno-synci[0m
           Enable (disable) generation of "synci"  instructions  on  architectures  that  support  it.   The  "synci"
           instructions (if enabled) are generated when "__builtin___clear_cache" is compiled.

           This  option  defaults  to  [1m-mno-synci[22m,  but  the  default  can  be  overridden  by  configuring  GCC with
           [1m--with-synci[22m.

           When compiling code for single processor systems, it is generally safe to use "synci".  However,  on  many
           multi-core  (SMP)  systems,  it  does  not  invalidate the instruction caches on all cores and may lead to
           undefined behavior.

       [1m-mrelax-pic-calls[0m
       [1m-mno-relax-pic-calls[0m
           Try to turn PIC calls that are normally dispatched via register $25  into  direct  calls.   This  is  only
           possible if the linker can resolve the destination at link time and if the destination is within range for
           a direct call.

           [1m-mrelax-pic-calls  [22mis  the default if GCC was configured to use an assembler and a linker that support the
           ".reloc"  assembly  directive  and  [1m-mexplicit-relocs  [22mis  in  effect.   With  [1m-mno-explicit-relocs[22m,  this
           optimization can be performed by the assembler and the linker alone without help from the compiler.

       [1m-mmcount-ra-address[0m
       [1m-mno-mcount-ra-address[0m
           Emit  (do  not  emit)  code  that  allows "_mcount" to modify the calling function's return address.  When
           enabled, this option extends the usual "_mcount" interface with a new [4mra-address[24m parameter, which has type
           "intptr_t *" and is passed in register $12.  "_mcount" can then modify the return address by doing both of
           the following:

           *   Returning the new address in register $31.

           *   Storing the new address in "*[4mra-address[24m", if [4mra-address[24m is nonnull.

           The default is [1m-mno-mcount-ra-address[22m.

       [1m-mframe-header-opt[0m
       [1m-mno-frame-header-opt[0m
           Enable (disable) frame header optimization in the o32 ABI.  When using the o32 ABI, calling functions will
           allocate 16 bytes on the stack for the called function to write out  register  arguments.   When  enabled,
           this  optimization  will  suppress  the  allocation of the frame header if it can be determined that it is
           unused.

           This optimization is off by default at all optimization levels.

       [1m-mlxc1-sxc1[0m
       [1m-mno-lxc1-sxc1[0m
           When applicable, enable (disable) the generation  of  "lwxc1",  "swxc1",  "ldxc1",  "sdxc1"  instructions.
           Enabled by default.

       [1m-mmadd4[0m
       [1m-mno-madd4[0m
           When applicable, enable (disable) the generation of 4-operand "madd.s", "madd.d" and related instructions.
           Enabled by default.

       [4mMMIX[24m [4mOptions[0m

       These options are defined for the MMIX:

       [1m-mlibfuncs[0m
       [1m-mno-libfuncs[0m
           Specify  that  intrinsic  library functions are being compiled, passing all values in registers, no matter
           the size.

       [1m-mepsilon[0m
       [1m-mno-epsilon[0m
           Generate floating-point comparison instructions that compare with respect to the "rE" epsilon register.

       [1m-mabi=mmixware[0m
       [1m-mabi=gnu[0m
           Generate code that passes function parameters and return values that (in the called function) are seen  as
           registers $0 and up, as opposed to the GNU ABI which uses global registers $231 and up.

       [1m-mzero-extend[0m
       [1m-mno-zero-extend[0m
           When  reading  data  from  memory  in  sizes  shorter  than  64 bits, use (do not use) zero-extending load
           instructions by default, rather than sign-extending ones.

       [1m-mknuthdiv[0m
       [1m-mno-knuthdiv[0m
           Make the result of a division yielding a remainder have the same sign as the divisor.  With  the  default,
           [1m-mno-knuthdiv[22m,  the  sign  of  the  remainder  follows  the  sign  of  the  dividend.   Both  methods  are
           arithmetically valid, the latter being almost exclusively used.

       [1m-mtoplevel-symbols[0m
       [1m-mno-toplevel-symbols[0m
           Prepend (do not prepend) a [1m: [22mto all global symbols, so the assembly code can be  used  with  the  "PREFIX"
           assembly directive.

       [1m-melf[0m
           Generate an executable in the ELF format, rather than the default [1mmmo [22mformat used by the [1mmmix [22msimulator.

       [1m-mbranch-predict[0m
       [1m-mno-branch-predict[0m
           Use  (do  not  use)  the  probable-branch instructions, when static branch prediction indicates a probable
           branch.

       [1m-mbase-addresses[0m
       [1m-mno-base-addresses[0m
           Generate (do not generate) code that uses [4mbase[24m [4maddresses[24m.  Using a base address automatically generates  a
           request  (handled  by the assembler and the linker) for a constant to be set up in a global register.  The
           register is used for one or more base address requests within the range 0 to 255 from the  value  held  in
           the register.  The generally leads to short and fast code, but the number of different data items that can
           be  addressed  is  limited.   This  means  that  a  program  that  uses  lots  of  static data may require
           [1m-mno-base-addresses[22m.

       [1m-msingle-exit[0m
       [1m-mno-single-exit[0m
           Force (do not force) generated code to have a single exit point in each function.

       [4mMN10300[24m [4mOptions[0m

       These [1m-m [22moptions are defined for Matsushita MN10300 architectures:

       [1m-mmult-bug[0m
           Generate code to avoid bugs in the multiply instructions for the MN10300 processors.  This is the default.

       [1m-mno-mult-bug[0m
           Do not generate code to avoid bugs in the multiply instructions for the MN10300 processors.

       [1m-mam33[0m
           Generate code using features specific to the AM33 processor.

       [1m-mno-am33[0m
           Do not generate code using features specific to the AM33 processor.  This is the default.

       [1m-mam33-2[0m
           Generate code using features specific to the AM33/2.0 processor.

       [1m-mam34[0m
           Generate code using features specific to the AM34 processor.

       [1m-mtune=[4m[22mcpu-type[0m
           Use the timing characteristics of the indicated CPU type when  scheduling  instructions.   This  does  not
           change the targeted processor type.  The CPU type must be one of [1mmn10300[22m, [1mam33[22m, [1mam33-2 [22mor [1mam34[22m.

       [1m-mreturn-pointer-on-d0[0m
           When  generating  a function that returns a pointer, return the pointer in both "a0" and "d0".  Otherwise,
           the pointer is returned only in "a0", and attempts to call such functions without a  prototype  result  in
           errors.  Note that this option is on by default; use [1m-mno-return-pointer-on-d0 [22mto disable it.

       [1m-mno-crt0[0m
           Do not link in the C run-time initialization object file.

       [1m-mrelax[0m
           Indicate  to  the  linker that it should perform a relaxation optimization pass to shorten branches, calls
           and absolute memory addresses.  This option only has an effect when used on the command line for the final
           link step.

           This option makes symbolic debugging impossible.

       [1m-mliw[0m
           Allow the compiler to generate [4mLong[24m [4mInstruction[24m [4mWord[24m instructions if the target  is  the  [1mAM33  [22mor  later.
           This is the default.  This option defines the preprocessor macro "__LIW__".

       [1m-mno-liw[0m
           Do  not  allow  the  compiler  to  generate  [4mLong[24m  [4mInstruction[24m [4mWord[24m instructions.  This option defines the
           preprocessor macro "__NO_LIW__".

       [1m-msetlb[0m
           Allow the compiler to generate the [4mSETLB[24m and [4mLcc[24m instructions if the target is the [1mAM33 [22mor later.  This is
           the default.  This option defines the preprocessor macro "__SETLB__".

       [1m-mno-setlb[0m
           Do not allow the compiler to generate [4mSETLB[24m or [4mLcc[24m instructions.  This  option  defines  the  preprocessor
           macro "__NO_SETLB__".

       [4mMoxie[24m [4mOptions[0m

       [1m-meb[0m
           Generate big-endian code.  This is the default for [1mmoxie-*-* [22mconfigurations.

       [1m-mel[0m
           Generate little-endian code.

       [1m-mmul.x[0m
           Generate mul.x and umul.x instructions.  This is the default for [1mmoxiebox-*-* [22mconfigurations.

       [1m-mno-crt0[0m
           Do not link in the C run-time initialization object file.

       [4mMSP430[24m [4mOptions[0m

       These options are defined for the MSP430:

       [1m-masm-hex[0m
           Force  assembly output to always use hex constants.  Normally such constants are signed decimals, but this
           option is available for testsuite and/or aesthetic purposes.

       [1m-mmcu=[0m
           Select the MCU to target.  This is used to create a  C  preprocessor  symbol  based  upon  the  MCU  name,
           converted to upper case and pre- and post-fixed with [1m__[22m.  This in turn is used by the [4mmsp430.h[24m header file
           to select an MCU-specific supplementary header file.

           The  option  also  sets  the ISA to use.  If the MCU name is one that is known to only support the 430 ISA
           then that is selected, otherwise the 430X ISA is selected.  A generic MCU name of [1mmsp430 [22mcan also be  used
           to select the 430 ISA.  Similarly the generic [1mmsp430x [22mMCU name selects the 430X ISA.

           In  addition  an MCU-specific linker script is added to the linker command line.  The script's name is the
           name of the MCU with [4m.ld[24m appended.  Thus specifying [1m-mmcu=xxx [22mon  the  [1mgcc  [22mcommand  line  defines  the  C
           preprocessor symbol "__XXX__" and cause the linker to search for a script called [4mxxx.ld[24m.

           The  ISA  and  hardware  multiply  supported  for  the different MCUs is hard-coded into GCC.  However, an
           external [1mdevices.csv [22mfile can be used to extend device support beyond those that have been hard-coded.

           GCC searches for the [1mdevices.csv [22mfile using the following methods in the given precedence order, where the
           first method takes precendence over the second which takes precedence over the third.

           Include path specified with "-I" and "-L"
               [1mdevices.csv [22mwill be searched for in each of the directories specified  by  include  paths  and  linker
               library search paths.

           Path specified by the environment variable [1mMSP430_GCC_INCLUDE_DIR[0m
               Define  the  value  of  the global environment variable [1mMSP430_GCC_INCLUDE_DIR [22mto the full path to the
               directory containing devices.csv, and GCC will search this directory for devices.csv.  If  devices.csv
               is  found, this directory will also be registered as an include path, and linker library path.  Header
               files and linker scripts in this directory can therefore be used without manually specifying "-I"  and
               "-L" on the command line.

           The [1mmsp430-elf{,bare}/include/devices [22mdirectory
               Finally,  GCC  will examine [1mmsp430-elf{,bare}/include/devices [22mfrom the toolchain root directory.  This
               directory does not exist in a default installation,  but  if  the  user  has  created  it  and  copied
               [1mdevices.csv  [22mthere,  then the MCU data will be read.  As above, this directory will also be registered
               as an include path, and linker library path.

           If none of the above search methods find [1mdevices.csv[22m, then the hard-coded MCU data is used.

       [1m-mwarn-mcu[0m
       [1m-mno-warn-mcu[0m
           This option enables or disables warnings about conflicts between the  MCU  name  specified  by  the  [1m-mmcu[0m
           option  and  the  ISA  set  by  the  [1m-mcpu [22moption and/or the hardware multiply support set by the [1m-mhwmult[0m
           option.  It also toggles warnings about unrecognized MCU names.  This option is on by default.

       [1m-mcpu=[0m
           Specifies the ISA to use.  Accepted values are [1mmsp430[22m, [1mmsp430x [22mand [1mmsp430xv2[22m.  This option is  deprecated.
           The [1m-mmcu= [22moption should be used to select the ISA.

       [1m-msim[0m
           Link  to  the simulator runtime libraries and linker script.  Overrides any scripts that would be selected
           by the [1m-mmcu= [22moption.

       [1m-mlarge[0m
           Use large-model addressing (20-bit pointers, 20-bit "size_t").

       [1m-msmall[0m
           Use small-model addressing (16-bit pointers, 16-bit "size_t").

       [1m-mrelax[0m
           This option is passed to the assembler and linker, and allows the linker to perform certain  optimizations
           that cannot be done until the final link.

       [1mmhwmult=[0m
           Describes the type of hardware multiply supported by the target.  Accepted values are [1mnone [22mfor no hardware
           multiply,  [1m16bit  [22mfor  the original 16-bit-only multiply supported by early MCUs.  [1m32bit [22mfor the 16/32-bit
           multiply supported by later MCUs and [1mf5series [22mfor the 16/32-bit multiply supported by F5-series  MCUs.   A
           value  of  [1mauto  [22mcan also be given.  This tells GCC to deduce the hardware multiply support based upon the
           MCU name provided by the [1m-mmcu [22moption.  If no [1m-mmcu [22moption  is  specified  or  if  the  MCU  name  is  not
           recognized then no hardware multiply support is assumed.  "auto" is the default setting.

           Hardware  multiplies  are  normally  performed  by  calling  a  library  routine.  This saves space in the
           generated code.  When compiling at [1m-O3 [22mor higher however the hardware multiplier is invoked inline.   This
           makes for bigger, but faster code.

           The  hardware multiply routines disable interrupts whilst running and restore the previous interrupt state
           when they finish.  This makes them safe to use inside interrupt handlers as well as in normal code.

       [1m-minrt[0m
           Enable the use of a minimum runtime environment  -  no  static  initializers  or  constructors.   This  is
           intended  for memory-constrained devices.  The compiler includes special symbols in some objects that tell
           the linker and runtime which code fragments are required.

       [1m-mtiny-printf[0m
           Enable reduced code size "printf" and  "puts"  library  functions.   The  [1mtiny  [22mimplementations  of  these
           functions are not reentrant, so must be used with caution in multi-threaded applications.

           Support  for  streams  has been removed and the string to be printed will always be sent to stdout via the
           "write" syscall.  The string is not buffered before it is sent to write.

           This option requires Newlib Nano IO, so GCC must be configured with [1m--enable-newlib-nano-formatted-io[22m.

       [1m-mmax-inline-shift=[0m
           This option takes an integer between 0 and 64 inclusive, and sets  the  maximum  number  of  inline  shift
           instructions  which  should be emitted to perform a shift operation by a constant amount.  When this value
           needs to be exceeded, an mspabi helper function is used instead.  The default value is 4.

           This only affects cases where a shift by multiple positions cannot be completed with a single  instruction
           (e.g. all shifts >1 on the 430 ISA).

           Shifts of a 32-bit value are at least twice as costly, so the value passed for this option is divided by 2
           and the resulting value used instead.

       [1m-mcode-region=[0m
       [1m-mdata-region=[0m
           These  options  tell  the  compiler where to place functions and data that do not have one of the "lower",
           "upper", "either" or "section" attributes.  Possible values are "lower", "upper", "either" or "any".   The
           first  three behave like the corresponding attribute.  The fourth possible value - "any" - is the default.
           It leaves placement entirely up to the linker script and how it assigns the  standard  sections  (".text",
           ".data", etc) to the memory regions.

       [1m-msilicon-errata=[0m
           This option passes on a request to assembler to enable the fixes for the named silicon errata.

       [1m-msilicon-errata-warn=[0m
           This  option  passes  on a request to the assembler to enable warning messages when a silicon errata might
           need to be applied.

       [1m-mwarn-devices-csv[0m
       [1m-mno-warn-devices-csv[0m
           Warn if [1mdevices.csv [22mis not found or there are problem parsing it (default: on).

       [4mNDS32[24m [4mOptions[0m

       These options are defined for NDS32 implementations:

       [1m-mbig-endian[0m
           Generate code in big-endian mode.

       [1m-mlittle-endian[0m
           Generate code in little-endian mode.

       [1m-mreduced-regs[0m
           Use reduced-set registers for register allocation.

       [1m-mfull-regs[0m
           Use full-set registers for register allocation.

       [1m-mcmov[0m
           Generate conditional move instructions.

       [1m-mno-cmov[0m
           Do not generate conditional move instructions.

       [1m-mext-perf[0m
           Generate performance extension instructions.

       [1m-mno-ext-perf[0m
           Do not generate performance extension instructions.

       [1m-mext-perf2[0m
           Generate performance extension 2 instructions.

       [1m-mno-ext-perf2[0m
           Do not generate performance extension 2 instructions.

       [1m-mext-string[0m
           Generate string extension instructions.

       [1m-mno-ext-string[0m
           Do not generate string extension instructions.

       [1m-mv3push[0m
           Generate v3 push25/pop25 instructions.

       [1m-mno-v3push[0m
           Do not generate v3 push25/pop25 instructions.

       [1m-m16-bit[0m
           Generate 16-bit instructions.

       [1m-mno-16-bit[0m
           Do not generate 16-bit instructions.

       [1m-misr-vector-size=[4m[22mnum[0m
           Specify the size of each interrupt vector, which must be 4 or 16.

       [1m-mcache-block-size=[4m[22mnum[0m
           Specify the size of each cache block, which must be a power of 2 between 4 and 512.

       [1m-march=[4m[22march[0m
           Specify the name of the target architecture.

       [1m-mcmodel=[4m[22mcode-model[0m
           Set the code model to one of

           [1msmall[0m
               All the data and read-only data segments must be within 512KB addressing space.  The text segment must
               be within 16MB addressing space.

           [1mmedium[0m
               The data segment must be within 512KB while the read-only data segment can be  within  4GB  addressing
               space.  The text segment should be still within 16MB addressing space.

           [1mlarge[0m
               All the text and data segments can be within 4GB addressing space.

       [1m-mctor-dtor[0m
           Enable constructor/destructor feature.

       [1m-mrelax[0m
           Guide linker to relax instructions.

       [4mNios[24m [4mII[24m [4mOptions[0m

       These are the options defined for the Altera Nios II processor.

       [1m-G [4m[22mnum[0m
           Put  global and static objects less than or equal to [4mnum[24m bytes into the small data or BSS sections instead
           of the normal data or BSS sections.  The default value of [4mnum[24m is 8.

       [1m-mgpopt=[4m[22moption[0m
       [1m-mgpopt[0m
       [1m-mno-gpopt[0m
           Generate (do not generate) GP-relative accesses.  The following [4moption[24m names are recognized:

           [1mnone[0m
               Do not generate GP-relative accesses.

           [1mlocal[0m
               Generate GP-relative accesses for small data objects that are not  external,  weak,  or  uninitialized
               common  symbols.   Also  use  GP-relative addressing for objects that have been explicitly placed in a
               small data section via a "section" attribute.

           [1mglobal[0m
               As for [1mlocal[22m, but also generate GP-relative accesses for small data objects that are  external,  weak,
               or  common.   If  you  use  this  option,  you  must  ensure that all parts of your program (including
               libraries) are compiled with the same [1m-G [22msetting.

           [1mdata[0m
               Generate GP-relative accesses for all data objects in the program.  If you use this option, the entire
               data and BSS segments of your program must fit in 64K of memory and you must use an appropriate linker
               script to allocate them within the addressable range of the global pointer.

           [1mall [22mGenerate GP-relative addresses for function pointers as well  as  data  pointers.   If  you  use  this
               option, the entire text, data, and BSS segments of your program must fit in 64K of memory and you must
               use an appropriate linker script to allocate them within the addressable range of the global pointer.

           [1m-mgpopt [22mis equivalent to [1m-mgpopt=local[22m, and [1m-mno-gpopt [22mis equivalent to [1m-mgpopt=none[22m.

           The  default  is  [1m-mgpopt  [22mexcept  when [1m-fpic [22mor [1m-fPIC [22mis specified to generate position-independent code.
           Note that the Nios II ABI does not permit GP-relative accesses from shared libraries.

           You may need to specify [1m-mno-gpopt [22mexplicitly when building programs that include large amounts  of  small
           data,  including  large GOT data sections.  In this case, the 16-bit offset for GP-relative addressing may
           not be large enough to allow access to the entire small data section.

       [1m-mgprel-sec=[4m[22mregexp[0m
           This option specifies additional section names that can be accessed via  GP-relative  addressing.   It  is
           most  useful in conjunction with "section" attributes on variable declarations and a custom linker script.
           The [4mregexp[24m is a POSIX Extended Regular Expression.

           This option does not affect the behavior of the [1m-G [22moption, and the specified sections are in  addition  to
           the standard ".sdata" and ".sbss" small-data sections that are recognized by [1m-mgpopt[22m.

       [1m-mr0rel-sec=[4m[22mregexp[0m
           This  option  specifies  names of sections that can be accessed via a 16-bit offset from "r0"; that is, in
           the low 32K or high 32K of the 32-bit address space.  It is most  useful  in  conjunction  with  "section"
           attributes  on  variable  declarations and a custom linker script.  The [4mregexp[24m is a POSIX Extended Regular
           Expression.

           In contrast to the use of GP-relative addressing for small data, zero-based addressing is never  generated
           by default and there are no conventional section names used in standard linker scripts for sections in the
           low or high areas of memory.

       [1m-mel[0m
       [1m-meb[0m
           Generate little-endian (default) or big-endian (experimental) code, respectively.

       [1m-march=[4m[22march[0m
           This  specifies the name of the target Nios II architecture.  GCC uses this name to determine what kind of
           instructions it can emit when generating assembly code.  Permissible names are: [1mr1[22m, [1mr2[22m.

           The preprocessor macro "__nios2_arch__" is available to programs,  with  value  1  or  2,  indicating  the
           targeted ISA level.

       [1m-mbypass-cache[0m
       [1m-mno-bypass-cache[0m
           Force  all  load  and store instructions to always bypass cache by using I/O variants of the instructions.
           The default is not to bypass the cache.

       [1m-mno-cache-volatile[0m
       [1m-mcache-volatile[0m
           Volatile memory access bypass the cache using the I/O variants of the load  and  store  instructions.  The
           default is not to bypass the cache.

       [1m-mno-fast-sw-div[0m
       [1m-mfast-sw-div[0m
           Do  not  use  table-based  fast divide for small numbers. The default is to use the fast divide at [1m-O3 [22mand
           above.

       [1m-mno-hw-mul[0m
       [1m-mhw-mul[0m
       [1m-mno-hw-mulx[0m
       [1m-mhw-mulx[0m
       [1m-mno-hw-div[0m
       [1m-mhw-div[0m
           Enable or disable emitting "mul", "mulx" and "div" family of instructions by the compiler. The default  is
           to emit "mul" and not emit "div" and "mulx".

       [1m-mbmx[0m
       [1m-mno-bmx[0m
       [1m-mcdx[0m
       [1m-mno-cdx[0m
           Enable  or  disable  generation  of Nios II R2 BMX (bit manipulation) and CDX (code density) instructions.
           Enabling these instructions also requires [1m-march=r2[22m.  Since these instructions are optional extensions  to
           the R2 architecture, the default is not to emit them.

       [1m-mcustom-[4m[22minsn[24m[1m=[4m[22mN[0m
       [1m-mno-custom-[4m[22minsn[0m
           Each  [1m-mcustom-[4m[22minsn[24m[1m=[4m[22mN[24m option enables use of a custom instruction with encoding [4mN[24m when generating code that
           uses [4minsn[24m.   For  example,  [1m-mcustom-fadds=253  [22mgenerates  custom  instruction  253  for  single-precision
           floating-point add operations instead of the default behavior of using a library call.

           The  following  values  of  [4minsn[24m  are supported.  Except as otherwise noted, floating-point operations are
           expected to be implemented with normal IEEE 754 semantics and correspond directly to the  C  operators  or
           the equivalent GCC built-in functions.

           Single-precision floating point:

           [1mfadds[22m, [1mfsubs[22m, [1mfdivs[22m, [1mfmuls[0m
               Binary arithmetic operations.

           [1mfnegs[0m
               Unary negation.

           [1mfabss[0m
               Unary absolute value.

           [1mfcmpeqs[22m, [1mfcmpges[22m, [1mfcmpgts[22m, [1mfcmples[22m, [1mfcmplts[22m, [1mfcmpnes[0m
               Comparison operations.

           [1mfmins[22m, [1mfmaxs[0m
               Floating-point  minimum  and  maximum.  These instructions are only generated if [1m-ffinite-math-only [22mis
               specified.

           [1mfsqrts[0m
               Unary square root operation.

           [1mfcoss[22m, [1mfsins[22m, [1mftans[22m, [1mfatans[22m, [1mfexps[22m, [1mflogs[0m
               Floating-point trigonometric and exponential functions.  These  instructions  are  only  generated  if
               [1m-funsafe-math-optimizations [22mis also specified.

           Double-precision floating point:

           [1mfaddd[22m, [1mfsubd[22m, [1mfdivd[22m, [1mfmuld[0m
               Binary arithmetic operations.

           [1mfnegd[0m
               Unary negation.

           [1mfabsd[0m
               Unary absolute value.

           [1mfcmpeqd[22m, [1mfcmpged[22m, [1mfcmpgtd[22m, [1mfcmpled[22m, [1mfcmpltd[22m, [1mfcmpned[0m
               Comparison operations.

           [1mfmind[22m, [1mfmaxd[0m
               Double-precision  minimum and maximum.  These instructions are only generated if [1m-ffinite-math-only [22mis
               specified.

           [1mfsqrtd[0m
               Unary square root operation.

           [1mfcosd[22m, [1mfsind[22m, [1mftand[22m, [1mfatand[22m, [1mfexpd[22m, [1mflogd[0m
               Double-precision trigonometric and exponential functions.  These instructions are  only  generated  if
               [1m-funsafe-math-optimizations [22mis also specified.

           Conversions:

           [1mfextsd[0m
               Conversion from single precision to double precision.

           [1mftruncds[0m
               Conversion from double precision to single precision.

           [1mfixsi[22m, [1mfixsu[22m, [1mfixdi[22m, [1mfixdu[0m
               Conversion from floating point to signed or unsigned integer types, with truncation towards zero.

           [1mround[0m
               Conversion from single-precision floating point to signed integer, rounding to the nearest integer and
               ties  away  from  zero.   This corresponds to the "__builtin_lroundf" function when [1m-fno-math-errno [22mis
               used.

           [1mfloatis[22m, [1mfloatus[22m, [1mfloatid[22m, [1mfloatud[0m
               Conversion from signed or unsigned integer types to floating-point types.

           In addition, all of the following transfer instructions for internal registers X and Y must be provided to
           use any of the double-precision floating-point  instructions.   Custom  instructions  taking  two  double-
           precision  source  operands expect the first operand in the 64-bit register X.  The other operand (or only
           operand of a unary operation) is given to the custom arithmetic instruction  with  the  least  significant
           half  in  source register [4msrc1[24m and the most significant half in [4msrc2[24m.  A custom instruction that returns a
           double-precision result returns the most significant 32 bits in the destination  register  and  the  other
           half  in  32-bit register Y.  GCC automatically generates the necessary code sequences to write register X
           and/or read register Y when double-precision floating-point instructions are used.

           [1mfwrx[0m
               Write [4msrc1[24m into the least significant half of X and [4msrc2[24m into the most significant half of X.

           [1mfwry[0m
               Write [4msrc1[24m into Y.

           [1mfrdxhi[22m, [1mfrdxlo[0m
               Read the most or least (respectively) significant half of X and store it in [4mdest[24m.

           [1mfrdy[0m
               Read the value of Y and store it into [4mdest[24m.

           Note that you can gain more local control over generation of Nios II  custom  instructions  by  using  the
           target("custom-[4minsn[24m=[4mN[24m") and target("no-custom-[4minsn[24m") function attributes or pragmas.

       [1m-mcustom-fpu-cfg=[4m[22mname[0m
           This  option  enables  a  predefined, named set of custom instruction encodings (see [1m-mcustom-[4m[22minsn[24m above).
           Currently, the following sets are defined:

           [1m-mcustom-fpu-cfg=60-1  [22mis  equivalent   to:   [1m-mcustom-fmuls=252   -mcustom-fadds=253   -mcustom-fsubs=254[0m
           [1m-fsingle-precision-constant[0m

           [1m-mcustom-fpu-cfg=60-2   [22mis   equivalent   to:   [1m-mcustom-fmuls=252  -mcustom-fadds=253  -mcustom-fsubs=254[0m
           [1m-mcustom-fdivs=255 -fsingle-precision-constant[0m

           [1m-mcustom-fpu-cfg=72-3  [22mis  equivalent  to:  [1m-mcustom-floatus=243  -mcustom-fixsi=244  -mcustom-floatis=245[0m
           [1m-mcustom-fcmpgts=246  -mcustom-fcmples=249  -mcustom-fcmpeqs=250  -mcustom-fcmpnes=251  -mcustom-fmuls=252[0m
           [1m-mcustom-fadds=253 -mcustom-fsubs=254 -mcustom-fdivs=255 -fsingle-precision-constant[0m

           [1m-mcustom-fpu-cfg=fph2  [22mis  equivalent  to:  [1m-mcustom-fabss=224   -mcustom-fnegs=225   -mcustom-fcmpnes=226[0m
           [1m-mcustom-fcmpeqs=227  -mcustom-fcmpges=228  -mcustom-fcmpgts=229 -mcustom-fcmples=230 -mcustom-fcmplts=231[0m
           [1m-mcustom-fmaxs=232   -mcustom-fmins=233   -mcustom-round=248    -mcustom-fixsi=249    -mcustom-floatis=250[0m
           [1m-mcustom-fsqrts=251 -mcustom-fmuls=252 -mcustom-fadds=253 -mcustom-fsubs=254 -mcustom-fdivs=255[0m

           Custom  instruction  assignments  given  by  individual  [1m-mcustom-[4m[22minsn[24m[1m=  [22moptions  override  those given by
           [1m-mcustom-fpu-cfg=[22m, regardless of the order of the options on the command line.

           Note that you  can  gain  more  local  control  over  selection  of  a  FPU  configuration  by  using  the
           target("custom-fpu-cfg=[4mname[24m") function attribute or pragma.

           The  name  [4mfph2[24m  is an abbreviation for [4mNios[24m [4mII[24m [4mFloating[24m [4mPoint[24m [4mHardware[24m [4m2[24m [4mComponent[24m.  Please note that the
           custom  instructions  enabled  by  [1m-mcustom-fmins=233  [22mand  [1m-mcustom-fmaxs=234  [22mare  only   generated   if
           [1m-ffinite-math-only  [22mis  specified.  The custom instruction enabled by [1m-mcustom-round=248 [22mis only generated
           if [1m-fno-math-errno [22mis specified.  In contrast to the other configurations, [1m-fsingle-precision-constant  [22mis
           not set.

       These additional [1m-m [22moptions are available for the Altera Nios II ELF (bare-metal) target:

       [1m-mhal[0m
           Link  with HAL BSP.  This suppresses linking with the GCC-provided C runtime startup and termination code,
           and is typically used in conjunction with [1m-msys-crt0= [22mto specify the location  of  the  alternate  startup
           code provided by the HAL BSP.

       [1m-msmallc[0m
           Link with a limited version of the C library, [1m-lsmallc[22m, rather than Newlib.

       [1m-msys-crt0=[4m[22mstartfile[0m
           [4mstartfile[24m  is  the  file  name of the startfile (crt0) to use when linking.  This option is only useful in
           conjunction with [1m-mhal[22m.

       [1m-msys-lib=[4m[22msystemlib[0m
           [4msystemlib[24m is the library name of the library that provides  low-level  system  calls  required  by  the  C
           library,  e.g. "read" and "write".  This option is typically used to link with a library provided by a HAL
           BSP.

       [4mNvidia[24m [4mPTX[24m [4mOptions[0m

       These options are defined for Nvidia PTX:

       [1m-m64[0m
           Ignored, but preserved for backward compatibility.  Only 64-bit ABI is supported.

       [1m-march=[4m[22marchitecture-string[0m
           Generate code for the specified PTX ISA target architecture (e.g. [1msm_35[22m).  Valid architecture strings  are
           [1msm_30[22m, [1msm_35[22m, [1msm_53[22m, [1msm_70[22m, [1msm_75 [22mand [1msm_80[22m.  The default depends on how the compiler has been configured,
           see [1m--with-arch[22m.

           This  option  sets  the  value of the preprocessor macro "__PTX_SM__"; for instance, for [1msm_35[22m, it has the
           value [1m350[22m.

       [1m-misa=[4m[22marchitecture-string[0m
           Alias of [1m-march=[22m.

       [1m-march-map=[4m[22marchitecture-string[0m
           Select the closest available [1m-march= [22mvalue that is not more capable.  For instance,  for  [1m-march-map=sm_50[0m
           select [1m-march=sm_35[22m, and for [1m-march-map=sm_53 [22mselect [1m-march=sm_53[22m.

       [1m-mptx=[4m[22mversion-string[0m
           Generate  code for the specified PTX ISA version (e.g. [1m7.0[22m).  Valid version strings include [1m3.1[22m, [1m6.0[22m, [1m6.3[22m,
           and [1m7.0[22m.  The default PTX ISA version is 6.0, unless a higher version is required for  specified  PTX  ISA
           target architecture via option [1m-march=[22m.

           This   option   sets   the   values   of   the   preprocessor   macros   "__PTX_ISA_VERSION_MAJOR__"   and
           "__PTX_ISA_VERSION_MINOR__"; for instance, for [1m3.1 [22mthe macros have the values [1m3 [22mand [1m1[22m, respectively.

       [1m-mmainkernel[0m
           Link in code for a __main kernel.  This is for stand-alone instead of offloading execution.

       [1m-moptimize[0m
           Apply partitioned execution optimizations.  This  is  the  default  when  any  level  of  optimization  is
           selected.

       [1m-msoft-stack[0m
           Generate  code  that  does  not  use ".local" memory directly for stack storage. Instead, a per-warp stack
           pointer is maintained explicitly. This enables  variable-length  stack  allocation  (with  variable-length
           arrays  or  "alloca"),  and when global memory is used for underlying storage, makes it possible to access
           automatic variables from other threads, or with atomic instructions. This code generation variant is  used
           for  OpenMP  offloading,  but the option is exposed on its own for the purpose of testing the compiler; to
           generate code suitable for linking into programs using OpenMP offloading, use option [1m-mgomp[22m.

       [1m-muniform-simt[0m
           Switch to code generation variant that allows to execute all  threads  in  each  warp,  while  maintaining
           memory  state  and  side  effects  as  if  only  one thread in each warp was active outside of OpenMP SIMD
           regions.  All atomic operations and calls to runtime (malloc, free, vprintf)  are  conditionally  executed
           (iff  current  lane  index  equals the master lane index), and the register being assigned is copied via a
           shuffle instruction from the master lane.  Outside of SIMD regions lane 0  is  the  master;  inside,  each
           thread  sees  itself  as the master.  Shared memory array "int __nvptx_uni[]" stores all-zeros or all-ones
           bitmasks for each warp, indicating current mode (0 outside of SIMD regions).  Each thread can  bitwise-and
           the bitmask at position "tid.y" with current lane index to compute the master lane index.

       [1m-mgomp[0m
           Generate  code  for use in OpenMP offloading: enables [1m-msoft-stack [22mand [1m-muniform-simt [22moptions, and selects
           corresponding multilib variant.

       [4mOpenRISC[24m [4mOptions[0m

       These options are defined for OpenRISC:

       [1m-mboard=[4m[22mname[0m
           Configure a board specific runtime.  This will be passed to the linker for newlib board  library  linking.
           The default is "or1ksim".

       [1m-mnewlib[0m
           This  option  is  ignored;  it  is  for  compatibility  purposes  only.   This  used  to select linker and
           preprocessor options for use with newlib.

       [1m-msoft-div[0m
       [1m-mhard-div[0m
           Select software or hardware divide ("l.div", "l.divu") instructions.  This default is hardware divide.

       [1m-msoft-mul[0m
       [1m-mhard-mul[0m
           Select software or hardware multiply ("l.mul", "l.muli") instructions.  This default is hardware multiply.

       [1m-msoft-float[0m
       [1m-mhard-float[0m
           Select software or hardware for floating point operations.  The default is software.

       [1m-mdouble-float[0m
           When [1m-mhard-float [22mis selected, enables generation of double-precision  floating  point  instructions.   By
           default functions from [4mlibgcc[24m are used to perform double-precision floating point operations.

       [1m-munordered-float[0m
           When  [1m-mhard-float  [22mis  selected,  enables  generation  of  unordered  floating point compare and set flag
           ("lf.sfun*") instructions.  By default functions from [4mlibgcc[24m are used to perform unordered floating  point
           compare and set flag operations.

       [1m-mcmov[0m
           Enable  generation  of  conditional  move  ("l.cmov")  instructions.   By  default  the equivalent will be
           generated using set and branch.

       [1m-mror[0m
           Enable generation of rotate right ("l.ror") instructions.  By default functions from [4mlibgcc[24m  are  used  to
           perform rotate right operations.

       [1m-mrori[0m
           Enable  generation  of  rotate  right  with  immediate ("l.rori") instructions.  By default functions from
           [4mlibgcc[24m are used to perform rotate right with immediate operations.

       [1m-msext[0m
           Enable generation of sign extension ("l.ext*") instructions.  By default memory loads are used to  perform
           sign extension.

       [1m-msfimm[0m
           Enable  generation  of  compare  and  set  flag  with immediate ("l.sf*i") instructions.  By default extra
           instructions will be generated to store the immediate to a register first.

       [1m-mshftimm[0m
           Enable generation of shift with immediate ("l.srai", "l.srli", "l.slli") instructions.  By  default  extra
           instructions will be generated to store the immediate to a register first.

       [1m-mcmodel=small[0m
           Generate OpenRISC code for the small model: The GOT is limited to 64k. This is the default model.

       [1m-mcmodel=large[0m
           Generate OpenRISC code for the large model: The GOT may grow up to 4G in size.

       [4mPDP-11[24m [4mOptions[0m

       These options are defined for the PDP-11:

       [1m-mfpu[0m
           Use  hardware  FPP  floating  point.   This  is  the default.  (FIS floating point on the PDP-11/40 is not
           supported.)  Implies -m45.

       [1m-msoft-float[0m
           Do not use hardware floating point.

       [1m-mac0[0m
           Return floating-point results in ac0 (fr0 in Unix assembler syntax).

       [1m-mno-ac0[0m
           Return floating-point results in memory.  This is the default.

       [1m-m40[0m
           Generate code for a PDP-11/40.  Implies -msoft-float -mno-split.

       [1m-m45[0m
           Generate code for a PDP-11/45.  This is the default.

       [1m-m10[0m
           Generate code for a PDP-11/10.  Implies -msoft-float -mno-split.

       [1m-mint16[0m
       [1m-mno-int32[0m
           Use 16-bit "int".  This is the default.

       [1m-mint32[0m
       [1m-mno-int16[0m
           Use 32-bit "int".

       [1m-msplit[0m
           Target has split instruction and data space.  Implies -m45.

       [1m-munix-asm[0m
           Use Unix assembler syntax.

       [1m-mdec-asm[0m
           Use DEC assembler syntax.

       [1m-mgnu-asm[0m
           Use GNU assembler syntax.  This is the default.

       [1m-mlra[0m
           Use the new LRA register allocator.  By default, the old "reload" allocator is used.

       [4mPowerPC[24m [4mOptions[0m

       These are listed under

       [4mPRU[24m [4mOptions[0m

       These command-line options are defined for PRU target:

       [1m-minrt[0m
           Link with a minimum runtime environment, with no support for static initializers and constructors.   Using
           this  option  can  significantly  reduce the size of the final ELF binary.  Beware that the compiler could
           still generate code with static initializers and constructors.  It is up to the programmer to ensure  that
           the source program will not use those features.

       [1m-mmcu=[4m[22mmcu[0m
           Specify the PRU MCU variant to use.  Check Newlib for the exact list of supported MCUs.

       [1m-mno-relax[0m
           Make GCC pass the [1m--no-relax [22mcommand-line option to the linker instead of the [1m--relax [22moption.

       [1m-mloop[0m
           Allow (or do not allow) GCC to use the LOOP instruction.

       [1m-mabi=[4m[22mvariant[0m
           Specify  the  ABI  variant  to  output  code  for.  [1m-mabi=ti [22mselects the unmodified TI ABI while [1m-mabi=gnu[0m
           selects a GNU variant that copes more naturally with certain GCC assumptions.  These are the differences:

           [1mFunction Pointer Size[0m
               TI ABI specifies that function (code) pointers are 16-bit, whereas GNU supports only 32-bit  data  and
               code pointers.

           [1mOptional Return Value Pointer[0m
               Function  return values larger than 64 bits are passed by using a hidden pointer as the first argument
               of the function.  TI ABI, though, mandates that the pointer can be NULL in  case  the  caller  is  not
               using the returned value.  GNU always passes and expects a valid return value pointer.

           The current [1m-mabi=ti [22mimplementation simply raises a compile error when any of the above code constructs is
           detected.   As  a  consequence  the standard C library cannot be built and it is omitted when linking with
           [1m-mabi=ti[22m.

           Relaxation is a GNU feature and for safety reasons is disabled when using [1m-mabi=ti[22m.  The TI toolchain does
           not emit relocations for QBBx instructions, so the GNU linker cannot adjust them when shortening  adjacent
           LDI32 pseudo instructions.

       [4mRISC-V[24m [4mOptions[0m

       These command-line options are defined for RISC-V targets:

       [1m-mbranch-cost=[4m[22mn[0m
           Set the cost of branches to roughly [4mn[24m instructions.

       [1m-mplt[0m
       [1m-mno-plt[0m
           When generating PIC code, do or don't allow the use of PLTs. Ignored for non-PIC.  The default is [1m-mplt[22m.

       [1m-mabi=[4m[22mABI-string[0m
           Specify integer and floating-point calling convention.  [4mABI-string[24m contains two parts: the size of integer
           types  and the registers used for floating-point types.  For example [1m-march=rv64ifd -mabi=lp64d [22mmeans that
           [1mlong [22mand pointers are 64-bit (implicitly defining [1mint [22mto be 32-bit), and that floating-point values up  to
           64 bits wide are passed in F registers.  Contrast this with [1m-march=rv64ifd -mabi=lp64f[22m, which still allows
           the compiler to generate code that uses the F and D extensions but only allows floating-point values up to
           32 bits long to be passed in registers; or [1m-march=rv64ifd -mabi=lp64[22m, in which no floating-point arguments
           will be passed in registers.

           The  default  for  this  argument is system dependent, users who want a specific calling convention should
           specify one explicitly.  The valid calling conventions are: [1milp32[22m, [1milp32f[22m, [1milp32d[22m, [1mlp64[22m, [1mlp64f[22m, and [1mlp64d[22m.
           Some calling conventions are impossible to implement on some ISAs: for example, [1m-march=rv32if -mabi=ilp32d[0m
           is invalid because the ABI requires 64-bit values be passed in F registers, but F registers  are  only  32
           bits  wide.   There is also the [1milp32e [22mABI that can only be used with the [1mrv32e [22marchitecture.  This ABI is
           not well specified at present, and is subject to change.

       [1m-mfdiv[0m
       [1m-mno-fdiv[0m
           Do or don't use hardware floating-point divide and square root instructions.  This requires  the  F  or  D
           extensions  for  floating-point  registers.   The default is to use them if the specified architecture has
           these instructions.

       [1m-mdiv[0m
       [1m-mno-div[0m
           Do or don't use hardware instructions for integer division.  This requires the M extension.   The  default
           is to use them if the specified architecture has these instructions.

       [1m-misa-spec=[4m[22mISA-spec-string[0m
           Specify  the  version  of  the RISC-V Unprivileged (formerly User-Level) ISA specification to produce code
           conforming to.  The possibilities for [4mISA-spec-string[24m are:

           2.2 Produce code conforming to version 2.2.

           20190608
               Produce code conforming to version 20190608.

           20191213
               Produce code conforming to version 20191213.

           The default is [1m-misa-spec=20191213 [22munless GCC has  been  configured  with  [1m--with-isa-spec=  [22mspecifying  a
           different default version.

       [1m-march=[4m[22mISA-string[0m
           Generate  code  for  given  RISC-V  ISA  (e.g. [1mrv64im[22m).  ISA strings must be lower-case.  Examples include
           [1mrv64i[22m, [1mrv32g[22m, [1mrv32e[22m, and [1mrv32imaf[22m.

           When [1m-march= [22mis not specified, use the setting from [1m-mcpu[22m.

           If both [1m-march [22mand [1m-mcpu= [22mare not specified, the default for this argument is system dependent, users  who
           want a specific architecture extensions should specify one explicitly.

       [1m-mcpu=[4m[22mprocessor-string[0m
           Use  architecture  of  and  optimize the output for the given processor, specified by particular CPU name.
           Permissible values for this  option  are:  [1msifive-e20[22m,  [1msifive-e21[22m,  [1msifive-e24[22m,  [1msifive-e31[22m,  [1msifive-e34[22m,
           [1msifive-e76[22m, [1msifive-s21[22m, [1msifive-s51[22m, [1msifive-s54[22m, [1msifive-s76[22m, [1msifive-u54[22m, and [1msifive-u74[22m.

       [1m-mtune=[4m[22mprocessor-string[0m
           Optimize  the  output  for  the  given  processor,  specified by microarchitecture or particular CPU name.
           Permissible values  for  this  option  are:  [1mrocket[22m,  [1msifive-3-series[22m,  [1msifive-5-series[22m,  [1msifive-7-series[22m,
           [1mthead-c906[22m, [1msize[22m, and all valid options for [1m-mcpu=[22m.

           When  [1m-mtune=  [22mis  not  specified,  use  the  setting  from  [1m-mcpu[22m,  the default is [1mrocket [22mif both are not
           specified.

           The [1msize [22mchoice is not intended for use by end-users.  This is used when [1m-Os [22mis specified.   It  overrides
           the instruction cost info provided by [1m-mtune=[22m, but does not override the pipeline info.  This helps reduce
           code size while still giving good performance.

       [1m-mpreferred-stack-boundary=[4m[22mnum[0m
           Attempt   to   keep   the   stack   boundary   aligned   to   a   2  raised  to  [4mnum[24m  byte  boundary.   If
           [1m-mpreferred-stack-boundary [22mis not specified, the default is 4 (16 bytes or 128-bits).

           [1mWarning: [22mIf you use this switch, then you must build all  modules  with  the  same  value,  including  any
           libraries.  This includes the system libraries and startup modules.

       [1m-msmall-data-limit=[4m[22mn[0m
           Put global and static data smaller than [4mn[24m bytes into a special section (on some targets).

       [1m-msave-restore[0m
       [1m-mno-save-restore[0m
           Do  or  don't  use  smaller  but  slower prologue and epilogue code that uses library function calls.  The
           default is to use fast inline prologues and epilogues.

       [1m-minline-atomics[0m
       [1m-mno-inline-atomics[0m
           Do or don't use smaller but slower subword atomic emulation code that uses libatomic function calls.   The
           default is to use fast inline subword atomics that do not require libatomic.

       [1m-mshorten-memrefs[0m
       [1m-mno-shorten-memrefs[0m
           Do  or  do not attempt to make more use of compressed load/store instructions by replacing a load/store of
           'base register + large offset' with a new load/store of 'new base + small offset'.  If the new  base  gets
           stored  in  a  compressed  register,  then the new load/store can be compressed.  Currently targets 32-bit
           integer load/stores only.

       [1m-mstrict-align[0m
       [1m-mno-strict-align[0m
           Do not or do generate unaligned memory accesses.  The default is set depending on whether the processor we
           are optimizing for supports fast unaligned access or not.

       [1m-mcmodel=medlow[0m
           Generate code for the medium-low code model. The program and  its  statically  defined  symbols  must  lie
           within  a  single  2 GiB address range and must lie between absolute addresses -2 GiB and +2 GiB. Programs
           can be statically or dynamically linked. This is the default code model.

       [1m-mcmodel=medany[0m
           Generate code for the medium-any code model. The program and its statically defined symbols must be within
           any single 2 GiB address range. Programs can be statically or dynamically linked.

           The code generated by the medium-any code model is position-independent, but is not guaranteed to function
           correctly when linked into position-independent executables or libraries.

       [1m-mexplicit-relocs[0m
       [1m-mno-exlicit-relocs[0m
           Use or do not use assembler relocation operators when dealing with symbolic addresses.  The alternative is
           to use assembler macros instead, which may limit optimization.

       [1m-mrelax[0m
       [1m-mno-relax[0m
           Take advantage of linker relaxations to reduce the number of instructions required to  materialize  symbol
           addresses. The default is to take advantage of linker relaxations.

       [1m-mriscv-attribute[0m
       [1m-mno-riscv-attribute[0m
           Emit  (do  not emit) RISC-V attribute to record extra information into ELF objects.  This feature requires
           at least binutils 2.32.

       [1m-mcsr-check[0m
       [1m-mno-csr-check[0m
           Enables or disables the CSR checking.

       [1m-malign-data=[4m[22mtype[0m
           Control how GCC aligns variables and constants of array, structure, or union types.  Supported values  for
           [4mtype[24m  are  [1mxlen  [22mwhich  uses  x  register  width  as  the  alignment value, and [1mnatural [22mwhich uses natural
           alignment.  [1mxlen [22mis the default.

       [1m-mbig-endian[0m
           Generate big-endian code.  This is the default when GCC is configured for a [1mriscv64be-*-* [22mor [1mriscv32be-*-*[0m
           target.

       [1m-mlittle-endian[0m
           Generate little-endian code.  This is the default when GCC is configured for a [1mriscv64-*-* [22mor  [1mriscv32-*-*[0m
           but not a [1mriscv64be-*-* [22mor [1mriscv32be-*-* [22mtarget.

       [1m-mstack-protector-guard=[4m[22mguard[0m
       [1m-mstack-protector-guard-reg=[4m[22mreg[0m
       [1m-mstack-protector-guard-offset=[4m[22moffset[0m
           Generate  stack protection code using canary at [4mguard[24m.  Supported locations are [1mglobal [22mfor a global canary
           or [1mtls [22mfor per-thread canary in the TLS block.

           With      the      latter      choice      the      options      [1m-mstack-protector-guard-reg=[4m[22mreg[24m       and
           [1m-mstack-protector-guard-offset=[4m[22moffset[24m  furthermore  specify  which  register  to  use as base register for
           reading the canary, and from what offset from that base register. There is no default register  or  offset
           as this is entirely for use within the Linux kernel.

       [4mRL78[24m [4mOptions[0m

       [1m-msim[0m
           Links in additional target libraries to support operation within a simulator.

       [1m-mmul=none[0m
       [1m-mmul=g10[0m
       [1m-mmul=g13[0m
       [1m-mmul=g14[0m
       [1m-mmul=rl78[0m
           Specifies  the  type  of hardware multiplication and division support to be used.  The simplest is "none",
           which uses software for both multiplication and division.  This is the default.  The "g13"  value  is  for
           the  hardware multiply/divide peripheral found on the RL78/G13 (S2 core) targets.  The "g14" value selects
           the use of the multiplication and division instructions supported by the RL78/G14 (S3  core)  parts.   The
           value "rl78" is an alias for "g14" and the value "mg10" is an alias for "none".

           In  addition  a  C  preprocessor macro is defined, based upon the setting of this option.  Possible values
           are: "__RL78_MUL_NONE__", "__RL78_MUL_G13__" or "__RL78_MUL_G14__".

       [1m-mcpu=g10[0m
       [1m-mcpu=g13[0m
       [1m-mcpu=g14[0m
       [1m-mcpu=rl78[0m
           Specifies the RL78 core to target.  The default is the G14 core, also known as an S3 core  or  just  RL78.
           The  G13  or  S2 core does not have multiply or divide instructions, instead it uses a hardware peripheral
           for these operations.  The G10 or S1 core does not have register banks, so it  uses  a  different  calling
           convention.

           If  this  option  is  set  it  also  selects  the type of hardware multiply support to use, unless this is
           overridden by an explicit [1m-mmul=none [22moption on the command line.  Thus specifying  [1m-mcpu=g13  [22menables  the
           use  of  the  G13  hardware  multiply  peripheral  and  specifying  [1m-mcpu=g10 [22mdisables the use of hardware
           multiplications altogether.

           Note, although the RL78/G14 core is the default target, specifying [1m-mcpu=g14 [22mor [1m-mcpu=rl78 [22mon the  command
           line  does  change  the behavior of the toolchain since it also enables G14 hardware multiply support.  If
           these options are not specified on the command line then software multiplication  routines  will  be  used
           even  though  the  code  targets the RL78 core.  This is for backwards compatibility with older toolchains
           which did not have hardware multiply and divide support.

           In addition a C preprocessor macro is defined, based upon the setting of  this  option.   Possible  values
           are: "__RL78_G10__", "__RL78_G13__" or "__RL78_G14__".

       [1m-mg10[0m
       [1m-mg13[0m
       [1m-mg14[0m
       [1m-mrl78[0m
           These are aliases for the corresponding [1m-mcpu= [22moption.  They are provided for backwards compatibility.

       [1m-mallregs[0m
           Allow  the  compiler  to use all of the available registers.  By default registers "r24..r31" are reserved
           for use in interrupt handlers.  With this option enabled these registers can be used in ordinary functions
           as well.

       [1m-m64bit-doubles[0m
       [1m-m32bit-doubles[0m
           Make the "double" data type be 64 bits ([1m-m64bit-doubles[22m)  or  32  bits  ([1m-m32bit-doubles[22m)  in  size.   The
           default is [1m-m32bit-doubles[22m.

       [1m-msave-mduc-in-interrupts[0m
       [1m-mno-save-mduc-in-interrupts[0m
           Specifies  that interrupt handler functions should preserve the MDUC registers.  This is only necessary if
           normal code might use the MDUC registers, for example because  it  performs  multiplication  and  division
           operations.  The default is to ignore the MDUC registers as this makes the interrupt handlers faster.  The
           target  option  -mg13  needs  to  be  passed for this to work as this feature is only available on the G13
           target (S2  core).   The  MDUC  registers  will  only  be  saved  if  the  interrupt  handler  performs  a
           multiplication or division operation or it calls another function.

       [4mIBM[24m [4mRS/6000[24m [4mand[24m [4mPowerPC[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the IBM RS/6000 and PowerPC:

       [1m-mpowerpc-gpopt[0m
       [1m-mno-powerpc-gpopt[0m
       [1m-mpowerpc-gfxopt[0m
       [1m-mno-powerpc-gfxopt[0m
       [1m-mpowerpc64[0m
       [1m-mno-powerpc64[0m
       [1m-mmfcrf[0m
       [1m-mno-mfcrf[0m
       [1m-mpopcntb[0m
       [1m-mno-popcntb[0m
       [1m-mpopcntd[0m
       [1m-mno-popcntd[0m
       [1m-mfprnd[0m
       [1m-mno-fprnd[0m
       [1m-mcmpb[0m
       [1m-mno-cmpb[0m
       [1m-mhard-dfp[0m
       [1m-mno-hard-dfp[0m
           You  use  these  options  to specify which instructions are available on the processor you are using.  The
           default value of these  options  is  determined  when  configuring  GCC.   Specifying  the  [1m-mcpu=[4m[22mcpu_type[0m
           overrides  the specification of these options.  We recommend you use the [1m-mcpu=[4m[22mcpu_type[24m option rather than
           the options listed above.

           Specifying [1m-mpowerpc-gpopt [22mallows GCC to use the optional PowerPC architecture instructions in the General
           Purpose group, including floating-point square root.  Specifying [1m-mpowerpc-gfxopt [22mallows GCC  to  use  the
           optional PowerPC architecture instructions in the Graphics group, including floating-point select.

           The  [1m-mmfcrf  [22moption allows GCC to generate the move from condition register field instruction implemented
           on the POWER4 processor and other processors that support the PowerPC V2.01 architecture.   The  [1m-mpopcntb[0m
           option  allows  GCC  to  generate  the  popcount  and  double-precision FP reciprocal estimate instruction
           implemented on the POWER5 processor and other processors that support the PowerPC V2.02 architecture.  The
           [1m-mpopcntd [22moption allows GCC to generate the popcount instruction implemented on the POWER7  processor  and
           other  processors  that support the PowerPC V2.06 architecture.  The [1m-mfprnd [22moption allows GCC to generate
           the FP round to integer instructions implemented on  the  POWER5+  processor  and  other  processors  that
           support  the  PowerPC  V2.03  architecture.   The  [1m-mcmpb  [22moption allows GCC to generate the compare bytes
           instruction implemented on the POWER6 processor and  other  processors  that  support  the  PowerPC  V2.05
           architecture.   The  [1m-mhard-dfp  [22moption  allows  GCC  to  generate the decimal floating-point instructions
           implemented on some POWER processors.

           The [1m-mpowerpc64 [22moption allows GCC to generate the additional 64-bit instructions that  are  found  in  the
           full  PowerPC64  architecture  and  to  treat  GPRs  as  64-bit,  doubleword  quantities.  GCC defaults to
           [1m-mno-powerpc64[22m.

       [1m-mcpu=[4m[22mcpu_type[0m
           Set architecture type, register usage, and instruction scheduling parameters for  machine  type  [4mcpu_type[24m.
           Supported values for [4mcpu_type[24m are [1m401[22m, [1m403[22m, [1m405[22m, [1m405fp[22m, [1m440[22m, [1m440fp[22m, [1m464[22m, [1m464fp[22m, [1m476[22m, [1m476fp[22m, [1m505[22m, [1m601[22m, [1m602[22m,
           [1m603[22m,  [1m603e[22m,  [1m604[22m, [1m604e[22m, [1m620[22m, [1m630[22m, [1m740[22m, [1m7400[22m, [1m7450[22m, [1m750[22m, [1m801[22m, [1m821[22m, [1m823[22m, [1m860[22m, [1m970[22m, [1m8540[22m, [1ma2[22m, [1me300c2[22m, [1me300c3[22m,
           [1me500mc[22m, [1me500mc64[22m, [1me5500[22m, [1me6500[22m, [1mec603e[22m, [1mG3[22m, [1mG4[22m,  [1mG5[22m,  [1mtitan[22m,  [1mpower3[22m,  [1mpower4[22m,  [1mpower5[22m,  [1mpower5+[22m,  [1mpower6[22m,
           [1mpower6x[22m, [1mpower7[22m, [1mpower8[22m, [1mpower9[22m, [1mpower10[22m, [1mpowerpc[22m, [1mpowerpc64[22m, [1mpowerpc64le[22m, [1mrs64[22m, and [1mnative[22m.

           [1m-mcpu=powerpc[22m,  [1m-mcpu=powerpc64[22m, and [1m-mcpu=powerpc64le [22mspecify pure 32-bit PowerPC (either endian), 64-bit
           big endian PowerPC and 64-bit little endian PowerPC  architecture  machine  types,  with  an  appropriate,
           generic processor model assumed for scheduling purposes.

           Specifying  [1mnative  [22mas  cpu  type detects and selects the architecture option that corresponds to the host
           processor of the system performing the compilation.  [1m-mcpu=native [22mhas no effect if GCC does not  recognize
           the processor.

           The  other  options  specify  a  specific processor.  Code generated under those options runs best on that
           processor, and may not run at all on others.

           The [1m-mcpu [22moptions automatically enable or disable the following options:

           [1m-maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple -mpopcntb   -mpopcntd   -mpowerpc64  -mpowerpc-gpopt[0m
           [1m-mpowerpc-gfxopt  -mmulhw   -mdlmzb   -mmfpgpr   -mvsx  -mcrypto   -mhtm  -mpower8-fusion  -mpower8-vector[0m
           [1m-mquad-memory  -mquad-memory-atomic  -mfloat128 -mfloat128-hardware -mprefixed -mpcrel -mmma -mrop-protect[0m

           The particular options set for any particular CPU varies between  compiler  versions,  depending  on  what
           setting  seems  to produce optimal code for that CPU; it doesn't necessarily reflect the actual hardware's
           capabilities.  If you wish to set an individual option to a particular value, you may specify it after the
           [1m-mcpu [22moption, like [1m-mcpu=970 -mno-altivec[22m.

           On AIX, the [1m-maltivec [22mand [1m-mpowerpc64 [22moptions are not enabled or disabled by the [1m-mcpu [22moption  at  present
           because  AIX  does  not  have  full  support  for  these  options.   You  may still enable or disable them
           individually if you're sure it'll work in your environment.

       [1m-mtune=[4m[22mcpu_type[0m
           Set the instruction scheduling parameters for machine type [4mcpu_type[24m, but do not set the architecture  type
           or register usage, as [1m-mcpu=[4m[22mcpu_type[24m does.  The same values for [4mcpu_type[24m are used for [1m-mtune [22mas for [1m-mcpu[22m.
           If  both  are  specified,  the  code  generated  uses the architecture and registers set by [1m-mcpu[22m, but the
           scheduling parameters set by [1m-mtune[22m.

       [1m-mcmodel=small[0m
           Generate PowerPC64 code for the small model: The TOC is limited to 64k.

       [1m-mcmodel=medium[0m
           Generate PowerPC64 code for the medium model: The TOC and other static data may be up to a total of 4G  in
           size.  This is the default for 64-bit Linux.

       [1m-mcmodel=large[0m
           Generate PowerPC64 code for the large model: The TOC may be up to 4G in size.  Other data and code is only
           limited by the 64-bit address space.

       [1m-maltivec[0m
       [1m-mno-altivec[0m
           Generate code that uses (does not use) AltiVec instructions, and also enable the use of built-in functions
           that  allow  more direct access to the AltiVec instruction set.  You may also need to set [1m-mabi=altivec [22mto
           adjust the current ABI with AltiVec ABI enhancements.

           When [1m-maltivec [22mis used, the element order for AltiVec intrinsics such as "vec_splat",  "vec_extract",  and
           "vec_insert"  match  array  element order corresponding to the endianness of the target.  That is, element
           zero identifies the leftmost element in a vector  register  when  targeting  a  big-endian  platform,  and
           identifies the rightmost element in a vector register when targeting a little-endian platform.

       [1m-mvrsave[0m
       [1m-mno-vrsave[0m
           Generate VRSAVE instructions when generating AltiVec code.

       [1m-msecure-plt[0m
           Generate  code  that  allows  [1mld  [22mand  [1mld.so [22mto build executables and shared libraries with non-executable
           ".plt" and ".got" sections.  This is a PowerPC 32-bit SYSV ABI option.

       [1m-mbss-plt[0m
           Generate code that uses a BSS ".plt" section that [1mld.so [22mfills in, and requires ".plt" and ".got"  sections
           that are both writable and executable.  This is a PowerPC 32-bit SYSV ABI option.

       [1m-misel[0m
       [1m-mno-isel[0m
           This switch enables or disables the generation of ISEL instructions.

       [1m-mvsx[0m
       [1m-mno-vsx[0m
           Generate code that uses (does not use) vector/scalar (VSX) instructions, and also enable the use of built-
           in functions that allow more direct access to the VSX instruction set.

       [1m-mcrypto[0m
       [1m-mno-crypto[0m
           Enable  the  use  (disable)  of  the  built-in  functions  that  allow  direct access to the cryptographic
           instructions that were added in version 2.07 of the PowerPC ISA.

       [1m-mhtm[0m
       [1m-mno-htm[0m
           Enable (disable) the use of the built-in functions that allow direct access to the Hardware  Transactional
           Memory (HTM) instructions that were added in version 2.07 of the PowerPC ISA.

       [1m-mpower8-fusion[0m
       [1m-mno-power8-fusion[0m
           Generate code that keeps (does not keeps) some integer operations adjacent so that the instructions can be
           fused together on power8 and later processors.

       [1m-mpower8-vector[0m
       [1m-mno-power8-vector[0m
           Generate  code that uses (does not use) the vector and scalar instructions that were added in version 2.07
           of the PowerPC ISA.  Also enable the use of built-in functions that allow more direct access to the vector
           instructions.

       [1m-mquad-memory[0m
       [1m-mno-quad-memory[0m
           Generate code that uses (does not use) the non-atomic quad word memory  instructions.   The  [1m-mquad-memory[0m
           option requires use of 64-bit mode.

       [1m-mquad-memory-atomic[0m
       [1m-mno-quad-memory-atomic[0m
           Generate code that uses (does not use) the atomic quad word memory instructions.  The [1m-mquad-memory-atomic[0m
           option requires use of 64-bit mode.

       [1m-mfloat128[0m
       [1m-mno-float128[0m
           Enable/disable  the  [4m__float128[24m  keyword for IEEE 128-bit floating point and use either software emulation
           for IEEE 128-bit floating point or hardware instructions.

           The VSX instruction set ([1m-mvsx[22m) must be enabled to use the IEEE 128-bit floating point support.  The  IEEE
           128-bit floating point is only supported on Linux.

           The default for [1m-mfloat128 [22mis enabled on PowerPC Linux systems using the VSX instruction set, and disabled
           on other systems.

           If  you  use  the  ISA  3.0 instruction set ([1m-mpower9-vector [22mor [1m-mcpu=power9[22m) on a 64-bit system, the IEEE
           128-bit floating point support will also enable the generation of ISA  3.0  IEEE  128-bit  floating  point
           instructions.   Otherwise,  if  you do not specify to generate ISA 3.0 instructions or you are targeting a
           32-bit big endian system, IEEE 128-bit floating point will be done with software emulation.

       [1m-mfloat128-hardware[0m
       [1m-mno-float128-hardware[0m
           Enable/disable using ISA 3.0 hardware instructions to support the [4m__float128[24m data type.

           The default for [1m-mfloat128-hardware [22mis enabled on PowerPC Linux systems using the ISA 3.0 instruction set,
           and disabled on other systems.

       [1m-m32[0m
       [1m-m64[0m
           Generate code for 32-bit or 64-bit environments of Darwin and SVR4  targets  (including  GNU/Linux).   The
           32-bit  environment  sets  int,  long  and  pointer to 32 bits and generates code that runs on any PowerPC
           variant.  The 64-bit environment sets int to 32 bits and long and pointer to 64 bits, and  generates  code
           for PowerPC64, as for [1m-mpowerpc64[22m.

       [1m-mfull-toc[0m
       [1m-mno-fp-in-toc[0m
       [1m-mno-sum-in-toc[0m
       [1m-mminimal-toc[0m
           Modify  generation  of  the  TOC  (Table  Of  Contents),  which is created for every executable file.  The
           [1m-mfull-toc [22moption is selected by default.  In that case, GCC allocates at least one  TOC  entry  for  each
           unique  non-automatic variable reference in your program.  GCC also places floating-point constants in the
           TOC.  However, only 16,384 entries are available in the TOC.

           If you receive a linker error message that saying you have overflowed the available  TOC  space,  you  can
           reduce  the  amount of TOC space used with the [1m-mno-fp-in-toc [22mand [1m-mno-sum-in-toc [22moptions.  [1m-mno-fp-in-toc[0m
           prevents GCC from putting floating-point constants in the TOC and [1m-mno-sum-in-toc [22mforces GCC  to  generate
           code  to  calculate  the sum of an address and a constant at run time instead of putting that sum into the
           TOC.  You may specify one or both of these options.  Each causes GCC to produce very slightly  slower  and
           larger code at the expense of conserving TOC space.

           If  you  still  run  out  of  space  in  the  TOC  even  when  you  specify both of these options, specify
           [1m-mminimal-toc [22minstead.  This option causes GCC to make only one  TOC  entry  for  every  file.   When  you
           specify  this  option,  GCC  produces  code  that is slower and larger but which uses extremely little TOC
           space.  You may wish to use this option only on files that contain less frequently-executed code.

       [1m-maix64[0m
       [1m-maix32[0m
           Enable 64-bit AIX ABI and calling convention: 64-bit pointers, 64-bit "long" type, and the  infrastructure
           needed to support them.  Specifying [1m-maix64 [22mimplies [1m-mpowerpc64[22m, while [1m-maix32 [22mdisables the 64-bit ABI and
           implies [1m-mno-powerpc64[22m.  GCC defaults to [1m-maix32[22m.

       [1m-mxl-compat[0m
       [1m-mno-xl-compat[0m
           Produce  code that conforms more closely to IBM XL compiler semantics when using AIX-compatible ABI.  Pass
           floating-point arguments to prototyped functions beyond the register save  area  (RSA)  on  the  stack  in
           addition  to  argument  FPRs.   Do not assume that most significant double in 128-bit long double value is
           properly rounded when comparing values and converting to double.  Use XL  symbol  names  for  long  double
           support routines.

           The  AIX  calling  convention was extended but not initially documented to handle an obscure K&R C case of
           calling a function that takes the address of its arguments with fewer arguments  than  declared.   IBM  XL
           compilers  access  floating-point arguments that do not fit in the RSA from the stack when a subroutine is
           compiled  without  optimization.   Because  always  storing  floating-point  arguments  on  the  stack  is
           inefficient  and  rarely  needed, this option is not enabled by default and only is necessary when calling
           subroutines compiled by IBM XL compilers without optimization.

       [1m-mpe[0m
           Support [4mIBM[24m [4mRS/6000[24m [4mSP[24m [4mParallel[24m [4mEnvironment[24m (PE).  Link an application written to use message passing with
           special startup code to enable the application to run.  The system must have PE installed in the  standard
           location  ([4m/usr/lpp/ppe.poe/[24m), or the [4mspecs[24m file must be overridden with the [1m-specs= [22moption to specify the
           appropriate directory location.  The Parallel Environment does not support threads, so the [1m-mpe [22moption and
           the [1m-pthread [22moption are incompatible.

       [1m-malign-natural[0m
       [1m-malign-power[0m
           On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option [1m-malign-natural [22moverrides the  ABI-defined
           alignment  of  larger  types,  such  as floating-point doubles, on their natural size-based boundary.  The
           option [1m-malign-power [22minstructs GCC to follow the ABI-specified  alignment  rules.   GCC  defaults  to  the
           standard alignment defined in the ABI.

           On 64-bit Darwin, natural alignment is the default, and [1m-malign-power [22mis not supported.

       [1m-msoft-float[0m
       [1m-mhard-float[0m
           Generate code that does not use (uses) the floating-point register set.  Software floating-point emulation
           is provided if you use the [1m-msoft-float [22moption, and pass the option to GCC when linking.

       [1m-mmultiple[0m
       [1m-mno-multiple[0m
           Generate  code  that  uses  (does not use) the load multiple word instructions and the store multiple word
           instructions.  These instructions are generated by default on POWER systems, and not generated on  PowerPC
           systems.   Do  not  use  [1m-mmultiple [22mon little-endian PowerPC systems, since those instructions do not work
           when the processor is in little-endian mode.  The exceptions are PPC740  and  PPC750  which  permit  these
           instructions in little-endian mode.

       [1m-mupdate[0m
       [1m-mno-update[0m
           Generate code that uses (does not use) the load or store instructions that update the base register to the
           address  of  the  calculated  memory  location.   These instructions are generated by default.  If you use
           [1m-mno-update[22m, there is a small window between the time that the stack pointer is updated and the address of
           the previous frame is stored, which means code that walks the stack frame across interrupts or signals may
           get corrupted data.

       [1m-mavoid-indexed-addresses[0m
       [1m-mno-avoid-indexed-addresses[0m
           Generate code that tries to avoid (not avoid) the  use  of  indexed  load  or  store  instructions.  These
           instructions  can  incur  a  performance  penalty on Power6 processors in certain situations, such as when
           stepping through large arrays that cross a 16M boundary.  This option is enabled by default when targeting
           Power6 and disabled otherwise.

       [1m-mfused-madd[0m
       [1m-mno-fused-madd[0m
           Generate code that uses (does not use) the floating-point multiply  and  accumulate  instructions.   These
           instructions  are  generated  by  default  if  hardware  floating  point  is  used.  The machine-dependent
           [1m-mfused-madd  [22moption  is  now  mapped  to   the   machine-independent   [1m-ffp-contract=fast   [22moption,   and
           [1m-mno-fused-madd [22mis mapped to [1m-ffp-contract=off[22m.

       [1m-mmulhw[0m
       [1m-mno-mulhw[0m
           Generate  code that uses (does not use) the half-word multiply and multiply-accumulate instructions on the
           IBM 405, 440, 464 and 476 processors.  These instructions are generated by default  when  targeting  those
           processors.

       [1m-mdlmzb[0m
       [1m-mno-dlmzb[0m
           Generate  code  that  uses (does not use) the string-search [1mdlmzb [22minstruction on the IBM 405, 440, 464 and
           476 processors.  This instruction is generated by default when targeting those processors.

       [1m-mno-bit-align[0m
       [1m-mbit-align[0m
           On System V.4 and embedded PowerPC systems do not (do) force structures and unions that contain bit-fields
           to be aligned to the base type of the bit-field.

           For example, by default a structure containing nothing but 8 "unsigned" bit-fields of length 1 is  aligned
           to  a  4-byte  boundary and has a size of 4 bytes.  By using [1m-mno-bit-align[22m, the structure is aligned to a
           1-byte boundary and is 1 byte in size.

       [1m-mno-strict-align[0m
       [1m-mstrict-align[0m
           On System V.4 and embedded PowerPC systems do not (do) assume that unaligned memory references are handled
           by the system.

       [1m-mrelocatable[0m
       [1m-mno-relocatable[0m
           Generate code that allows (does not allow) a static executable to be relocated to a different  address  at
           run  time.   A  simple  embedded  PowerPC system loader should relocate the entire contents of ".got2" and
           4-byte locations listed in the ".fixup" section, a table of 32-bit addresses  generated  by  this  option.
           For  this  to  work, all objects linked together must be compiled with [1m-mrelocatable [22mor [1m-mrelocatable-lib[22m.
           [1m-mrelocatable [22mcode aligns the stack to an 8-byte boundary.

       [1m-mrelocatable-lib[0m
       [1m-mno-relocatable-lib[0m
           Like [1m-mrelocatable[22m, [1m-mrelocatable-lib [22mgenerates a ".fixup" section  to  allow  static  executables  to  be
           relocated  at  run  time, but [1m-mrelocatable-lib [22mdoes not use the smaller stack alignment of [1m-mrelocatable[22m.
           Objects compiled with [1m-mrelocatable-lib [22mmay be linked with objects compiled with any  combination  of  the
           [1m-mrelocatable [22moptions.

       [1m-mno-toc[0m
       [1m-mtoc[0m
           On  System  V.4  and  embedded  PowerPC systems do not (do) assume that register 2 contains a pointer to a
           global area pointing to the addresses used in the program.

       [1m-mlittle[0m
       [1m-mlittle-endian[0m
           On System V.4 and embedded PowerPC systems compile code for the  processor  in  little-endian  mode.   The
           [1m-mlittle-endian [22moption is the same as [1m-mlittle[22m.

       [1m-mbig[0m
       [1m-mbig-endian[0m
           On  System  V.4  and  embedded  PowerPC  systems  compile  code for the processor in big-endian mode.  The
           [1m-mbig-endian [22moption is the same as [1m-mbig[22m.

       [1m-mdynamic-no-pic[0m
           On Darwin and Mac OS X systems, compile code so  that  it  is  not  relocatable,  but  that  its  external
           references are relocatable.  The resulting code is suitable for applications, but not shared libraries.

       [1m-msingle-pic-base[0m
           Treat  the  register used for PIC addressing as read-only, rather than loading it in the prologue for each
           function.  The runtime system is responsible for initializing this  register  with  an  appropriate  value
           before execution begins.

       [1m-mprioritize-restricted-insns=[4m[22mpriority[0m
           This  option  controls  the  priority that is assigned to dispatch-slot restricted instructions during the
           second scheduling pass.  The argument [4mpriority[24m takes the value [1m0[22m, [1m1[22m,  or  [1m2  [22mto  assign  no,  highest,  or
           second-highest (respectively) priority to dispatch-slot restricted instructions.

       [1m-msched-costly-dep=[4m[22mdependence_type[0m
           This  option controls which dependences are considered costly by the target during instruction scheduling.
           The argument [4mdependence_type[24m takes one of the following values:

           [1mno  [22mNo dependence is costly.

           [1mall [22mAll dependences are costly.

           [1mtrue_store_to_load[0m
               A true dependence from store to load is costly.

           [1mstore_to_load[0m
               Any dependence from store to load is costly.

           [4mnumber[0m
               Any dependence for which the latency is greater than or equal to [4mnumber[24m is costly.

       [1m-minsert-sched-nops=[4m[22mscheme[0m
           This option controls which NOP insertion scheme is used during the second scheduling pass.   The  argument
           [4mscheme[24m takes one of the following values:

           [1mno  [22mDon't insert NOPs.

           [1mpad [22mPad with NOPs any dispatch group that has vacant issue slots, according to the scheduler's grouping.

           [1mregroup_exact[0m
               Insert  NOPs  to  force  costly  dependent insns into separate groups.  Insert exactly as many NOPs as
               needed to force an insn to a new group, according to the estimated processor grouping.

           [4mnumber[0m
               Insert NOPs to force costly dependent insns into separate groups.  Insert [4mnumber[24m NOPs to force an insn
               to a new group.

       [1m-mcall-sysv[0m
           On System V.4 and embedded PowerPC systems compile code using calling conventions that adhere to the March
           1995 draft of the System V Application Binary  Interface,  PowerPC  processor  supplement.   This  is  the
           default unless you configured GCC using [1mpowerpc-*-eabiaix[22m.

       [1m-mcall-sysv-eabi[0m
       [1m-mcall-eabi[0m
           Specify both [1m-mcall-sysv [22mand [1m-meabi [22moptions.

       [1m-mcall-sysv-noeabi[0m
           Specify both [1m-mcall-sysv [22mand [1m-mno-eabi [22moptions.

       [1m-mcall-aixdesc[0m
           On System V.4 and embedded PowerPC systems compile code for the AIX operating system.

       [1m-mcall-linux[0m
           On System V.4 and embedded PowerPC systems compile code for the Linux-based GNU system.

       [1m-mcall-freebsd[0m
           On System V.4 and embedded PowerPC systems compile code for the FreeBSD operating system.

       [1m-mcall-netbsd[0m
           On System V.4 and embedded PowerPC systems compile code for the NetBSD operating system.

       [1m-mcall-openbsd[0m
           On System V.4 and embedded PowerPC systems compile code for the OpenBSD operating system.

       [1m-mtraceback=[4m[22mtraceback_type[0m
           Select the type of traceback table. Valid values for [4mtraceback_type[24m are [1mfull[22m, [1mpart[22m, and [1mno[22m.

       [1m-maix-struct-return[0m
           Return all structures in memory (as specified by the AIX ABI).

       [1m-msvr4-struct-return[0m
           Return structures smaller than 8 bytes in registers (as specified by the SVR4 ABI).

       [1m-mabi=[4m[22mabi-type[0m
           Extend  the current ABI with a particular extension, or remove such extension.  Valid values are: [1maltivec[22m,
           [1mno-altivec[22m, [1mibmlongdouble[22m, [1mieeelongdouble[22m, [1melfv1[22m, [1melfv2[22m, and for AIX: [1mvec-extabi[22m, [1mvec-default[22m.

       [1m-mabi=ibmlongdouble[0m
           Change the current ABI to use IBM extended-precision long double.  This is not  likely  to  work  if  your
           system  defaults  to  using  IEEE extended-precision long double.  If you change the long double type from
           IEEE extended-precision, the compiler will issue a warning unless you use the [1m-Wno-psabi [22moption.  Requires
           [1m-mlong-double-128 [22mto be enabled.

       [1m-mabi=ieeelongdouble[0m
           Change the current ABI to use IEEE extended-precision long double.  This is not likely  to  work  if  your
           system  defaults to using IBM extended-precision long double.  If you change the long double type from IBM
           extended-precision, the compiler will issue a warning unless you  use  the  [1m-Wno-psabi  [22moption.   Requires
           [1m-mlong-double-128 [22mto be enabled.

       [1m-mabi=elfv1[0m
           Change the current ABI to use the ELFv1 ABI.  This is the default ABI for big-endian PowerPC 64-bit Linux.
           Overriding the default ABI requires special system support and is likely to fail in spectacular ways.

       [1m-mabi=elfv2[0m
           Change  the  current  ABI  to use the ELFv2 ABI.  This is the default ABI for little-endian PowerPC 64-bit
           Linux.  Overriding the default ABI requires special system support and is likely to  fail  in  spectacular
           ways.

       [1m-mgnu-attribute[0m
       [1m-mno-gnu-attribute[0m
           Emit  .gnu_attribute  assembly directives to set tag/value pairs in a .gnu.attributes section that specify
           ABI variations in function parameters or return values.

       [1m-mprototype[0m
       [1m-mno-prototype[0m
           On System V.4 and embedded PowerPC systems assume that  all  calls  to  variable  argument  functions  are
           properly  prototyped.  Otherwise, the compiler must insert an instruction before every non-prototyped call
           to set or clear bit 6 of the condition code register ("CR") to indicate whether floating-point values  are
           passed  in  the floating-point registers in case the function takes variable arguments.  With [1m-mprototype[22m,
           only calls to prototyped variable argument functions set or clear the bit.

       [1m-msim[0m
           On embedded PowerPC systems, assume that the startup module is called [4msim-crt0.o[24m and that the  standard  C
           libraries are [4mlibsim.a[24m and [4mlibc.a[24m.  This is the default for [1mpowerpc-*-eabisim [22mconfigurations.

       [1m-mmvme[0m
           On  embedded PowerPC systems, assume that the startup module is called [4mcrt0.o[24m and the standard C libraries
           are [4mlibmvme.a[24m and [4mlibc.a[24m.

       [1m-mads[0m
           On embedded PowerPC systems, assume that the startup module is called [4mcrt0.o[24m and the standard C  libraries
           are [4mlibads.a[24m and [4mlibc.a[24m.

       [1m-myellowknife[0m
           On  embedded PowerPC systems, assume that the startup module is called [4mcrt0.o[24m and the standard C libraries
           are [4mlibyk.a[24m and [4mlibc.a[24m.

       [1m-mvxworks[0m
           On System V.4 and embedded PowerPC systems, specify that you are compiling for a VxWorks system.

       [1m-memb[0m
           On embedded PowerPC systems, set the "PPC_EMB" bit in the ELF flags header to indicate that [1meabi  [22mextended
           relocations are used.

       [1m-meabi[0m
       [1m-mno-eabi[0m
           On  System  V.4  and  embedded  PowerPC  systems  do  (do  not) adhere to the Embedded Applications Binary
           Interface (EABI), which is a set of modifications to the  System  V.4  specifications.   Selecting  [1m-meabi[0m
           means that the stack is aligned to an 8-byte boundary, a function "__eabi" is called from "main" to set up
           the  EABI  environment,  and the [1m-msdata [22moption can use both "r2" and "r13" to point to two separate small
           data areas.  Selecting [1m-mno-eabi [22mmeans  that  the  stack  is  aligned  to  a  16-byte  boundary,  no  EABI
           initialization function is called from "main", and the [1m-msdata [22moption only uses "r13" to point to a single
           small  data  area.   The  [1m-meabi  [22moption  is  on  by  default  if  you  configured  GCC  using  one of the
           [1mpowerpc*-*-eabi* [22moptions.

       [1m-msdata=eabi[0m
           On System V.4 and embedded PowerPC systems, put small initialized "const" global and static  data  in  the
           ".sdata2"  section,  which  is  pointed to by register "r2".  Put small initialized non-"const" global and
           static data in the ".sdata" section, which is pointed to  by  register  "r13".   Put  small  uninitialized
           global  and  static  data  in  the  ".sbss"  section,  which  is  adjacent  to  the ".sdata" section.  The
           [1m-msdata=eabi [22moption is incompatible with the [1m-mrelocatable [22moption.  The [1m-msdata=eabi [22moption also sets  the
           [1m-memb [22moption.

       [1m-msdata=sysv[0m
           On  System  V.4  and  embedded  PowerPC systems, put small global and static data in the ".sdata" section,
           which is pointed to by register "r13".  Put small uninitialized global and  static  data  in  the  ".sbss"
           section,  which  is  adjacent  to  the ".sdata" section.  The [1m-msdata=sysv [22moption is incompatible with the
           [1m-mrelocatable [22moption.

       [1m-msdata=default[0m
       [1m-msdata[0m
           On System V.4 and embedded PowerPC systems, if [1m-meabi [22mis used, compile  code  the  same  as  [1m-msdata=eabi[22m,
           otherwise compile code the same as [1m-msdata=sysv[22m.

       [1m-msdata=data[0m
           On  System  V.4  and  embedded  PowerPC systems, put small global data in the ".sdata" section.  Put small
           uninitialized global data in the ".sbss" section.  Do  not  use  register  "r13"  to  address  small  data
           however.  This is the default behavior unless other [1m-msdata [22moptions are used.

       [1m-msdata=none[0m
       [1m-mno-sdata[0m
           On  embedded  PowerPC  systems, put all initialized global and static data in the ".data" section, and all
           uninitialized data in the ".bss" section.

       [1m-mreadonly-in-sdata[0m
           Put read-only objects in the ".sdata" section as well.  This is the default.

       [1m-mblock-move-inline-limit=[4m[22mnum[0m
           Inline all block moves (such as calls to "memcpy" or structure copies) less than or equal  to  [4mnum[24m  bytes.
           The minimum value for [4mnum[24m is 32 bytes on 32-bit targets and 64 bytes on 64-bit targets.  The default value
           is target-specific.

       [1m-mblock-compare-inline-limit=[4m[22mnum[0m
           Generate  non-looping inline code for all block compares (such as calls to "memcmp" or structure compares)
           less than or equal to [4mnum[24m bytes. If [4mnum[24m is 0, all inline expansion (non-loop and loop) of block compare is
           disabled. The default value is target-specific.

       [1m-mblock-compare-inline-loop-limit=[4m[22mnum[0m
           Generate an inline expansion using loop code for all block compares that are less than  or  equal  to  [4mnum[0m
           bytes,  but greater than the limit for non-loop inline block compare expansion. If the block length is not
           constant, at most [4mnum[24m bytes will be compared before "memcmp" is called to compare  the  remainder  of  the
           block. The default value is target-specific.

       [1m-mstring-compare-inline-limit=[4m[22mnum[0m
           Compare at most [4mnum[24m string bytes with inline code.  If the difference or end of string is not found at the
           end  of  the  inline compare a call to "strcmp" or "strncmp" will take care of the rest of the comparison.
           The default is 64 bytes.

       [1m-G [4m[22mnum[0m
           On embedded PowerPC systems, put global and static items less than or equal to [4mnum[24m bytes  into  the  small
           data  or BSS sections instead of the normal data or BSS section.  By default, [4mnum[24m is 8.  The [1m-G [4m[22mnum[24m switch
           is also passed to the linker.  All modules should be compiled with the same [1m-G [4m[22mnum[24m value.

       [1m-mregnames[0m
       [1m-mno-regnames[0m
           On System V.4 and embedded PowerPC systems do (do not) emit register names in the assembly language output
           using symbolic forms.

       [1m-mlongcall[0m
       [1m-mno-longcall[0m
           By default assume that all calls are far away so that a longer and  more  expensive  calling  sequence  is
           required.   This  is  required  for  calls  farther  than 32 megabytes (33,554,432 bytes) from the current
           location.  A short call is generated if the compiler knows the call cannot be that far away.  This setting
           can be overridden by the "shortcall" function attribute, or by #pragma longcall(0).

           Some linkers are capable of detecting out-of-range calls and generating glue code on the  fly.   On  these
           systems,  long  calls are unnecessary and generate slower code.  As of this writing, the AIX linker can do
           this, as can the GNU linker for PowerPC/64.  It is planned to add this  feature  to  the  GNU  linker  for
           32-bit PowerPC systems as well.

           On PowerPC64 ELFv2 and 32-bit PowerPC systems with newer GNU linkers, GCC can generate long calls using an
           inline  PLT  call sequence (see [1m-mpltseq[22m).  PowerPC with [1m-mbss-plt [22mand PowerPC64 ELFv1 (big-endian) do not
           support inline PLT calls.

           On Darwin/PPC systems, "#pragma longcall" generates "jbsr callee, L42", plus a [4mbranch[24m [4misland[24m (glue  code).
           The  two  target  addresses represent the callee and the branch island.  The Darwin/PPC linker prefers the
           first address and generates a "bl callee" if  the  PPC  "bl"  instruction  reaches  the  callee  directly;
           otherwise,  the linker generates "bl L42" to call the branch island.  The branch island is appended to the
           body of the calling function; it computes the full 32-bit address of the callee and jumps to it.

           On Mach-O (Darwin) systems, this option directs the compiler emit to the glue for every direct  call,  and
           the Darwin linker decides whether to use or discard it.

           In the future, GCC may ignore all longcall specifications when the linker is known to generate glue.

       [1m-mpltseq[0m
       [1m-mno-pltseq[0m
           Implement  (do not implement) -fno-plt and long calls using an inline PLT call sequence that supports lazy
           linking and long calls to functions in dlopen'd shared libraries.  Inline PLT calls are only supported  on
           PowerPC64  ELFv2  and  32-bit  PowerPC  systems  with newer GNU linkers, and are enabled by default if the
           support is detected when configuring GCC, and, in the case of 32-bit PowerPC, if GCC  is  configured  with
           [1m--enable-secureplt[22m.   [1m-mpltseq  [22mcode  and  [1m-mbss-plt  [22m32-bit PowerPC relocatable objects may not be linked
           together.

       [1m-mtls-markers[0m
       [1m-mno-tls-markers[0m
           Mark (do not mark) calls to "__tls_get_addr" with a relocation  specifying  the  function  argument.   The
           relocation  allows the linker to reliably associate function call with argument setup instructions for TLS
           optimization, which in turn allows GCC to better schedule the sequence.

       [1m-mrecip[0m
       [1m-mno-recip[0m
           This option enables use of the reciprocal estimate and reciprocal square root estimate  instructions  with
           additional  Newton-Raphson steps to increase precision instead of doing a divide or square root and divide
           for floating-point arguments.  You should use the [1m-ffast-math [22moption  when  using  [1m-mrecip  [22m(or  at  least
           [1m-funsafe-math-optimizations[22m,  [1m-ffinite-math-only[22m,  [1m-freciprocal-math  [22mand  [1m-fno-trapping-math[22m).  Note that
           while the throughput of the sequence is  generally  higher  than  the  throughput  of  the  non-reciprocal
           instruction, the precision of the sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals
           0.99999994) for reciprocal square roots.

       [1m-mrecip=[4m[22mopt[0m
           This option controls which reciprocal estimate instructions may be used.  [4mopt[24m is a comma-separated list of
           options, which may be preceded by a "!" to invert the option:

           [1mall [22mEnable all estimate instructions.

           [1mdefault[0m
               Enable the default instructions, equivalent to [1m-mrecip[22m.

           [1mnone[0m
               Disable all estimate instructions, equivalent to [1m-mno-recip[22m.

           [1mdiv [22mEnable the reciprocal approximation instructions for both single and double precision.

           [1mdivf[0m
               Enable the single-precision reciprocal approximation instructions.

           [1mdivd[0m
               Enable the double-precision reciprocal approximation instructions.

           [1mrsqrt[0m
               Enable the reciprocal square root approximation instructions for both single and double precision.

           [1mrsqrtf[0m
               Enable the single-precision reciprocal square root approximation instructions.

           [1mrsqrtd[0m
               Enable the double-precision reciprocal square root approximation instructions.

           So,  for  example, [1m-mrecip=all,!rsqrtd [22menables all of the reciprocal estimate instructions, except for the
           "FRSQRTE", "XSRSQRTEDP", and "XVRSQRTEDP" instructions which handle the double-precision reciprocal square
           root calculations.

       [1m-mrecip-precision[0m
       [1m-mno-recip-precision[0m
           Assume (do not assume) that the reciprocal estimate instructions provide higher-precision  estimates  than
           is  mandated  by  the  PowerPC  ABI.   Selecting  [1m-mcpu=power6[22m, [1m-mcpu=power7 [22mor [1m-mcpu=power8 [22mautomatically
           selects [1m-mrecip-precision[22m.  The double-precision square root estimate instructions are  not  generated  by
           default on low-precision machines, since they do not provide an estimate that converges after three steps.

       [1m-mveclibabi=[4m[22mtype[0m
           Specifies  the  ABI  type  to  use  for  vectorizing  intrinsics using an external library.  The only type
           supported at present is [1mmass[22m, which specifies to use  IBM's  Mathematical  Acceleration  Subsystem  (MASS)
           libraries  for  vectorizing  intrinsics  using external libraries.  GCC currently emits calls to "acosd2",
           "acosf4", "acoshd2", "acoshf4", "asind2", "asinf4", "asinhd2", "asinhf4", "atan2d2", "atan2f4",  "atand2",
           "atanf4",  "atanhd2",  "atanhf4",  "cbrtd2",  "cbrtf4",  "cosd2",  "cosf4",  "coshd2", "coshf4", "erfcd2",
           "erfcf4", "erfd2",  "erff4",  "exp2d2",  "exp2f4",  "expd2",  "expf4",  "expm1d2",  "expm1f4",  "hypotd2",
           "hypotf4",  "lgammad2",  "lgammaf4",  "log10d2",  "log10f4",  "log1pd2",  "log1pf4",  "log2d2",  "log2f4",
           "logd2", "logf4", "powd2", "powf4", "sind2", "sinf4", "sinhd2",  "sinhf4",  "sqrtd2",  "sqrtf4",  "tand2",
           "tanf4",   "tanhd2",   and   "tanhf4"   when  generating  code  for  power7.   Both  [1m-ftree-vectorize  [22mand
           [1m-funsafe-math-optimizations [22mmust also be enabled.  The MASS libraries must be specified at link time.

       [1m-mfriz[0m
       [1m-mno-friz[0m
           Generate (do not generate) the "friz" instruction when the [1m-funsafe-math-optimizations [22moption is  used  to
           optimize  rounding  of  floating-point  values  to  64-bit integer and back to floating point.  The "friz"
           instruction does not return the same value if the floating-point number is too large to fit in an integer.

       [1m-mpointers-to-nested-functions[0m
       [1m-mno-pointers-to-nested-functions[0m
           Generate (do not generate) code to load up the static  chain  register  ("r11")  when  calling  through  a
           pointer  on AIX and 64-bit Linux systems where a function pointer points to a 3-word descriptor giving the
           function address, TOC value to be loaded in register "r2", and static chain value to be loaded in register
           "r11".  The [1m-mpointers-to-nested-functions [22mis on by default.  You cannot call through pointers  to  nested
           functions  or  pointers  to  functions  compiled  in  other languages that use the static chain if you use
           [1m-mno-pointers-to-nested-functions[22m.

       [1m-msave-toc-indirect[0m
       [1m-mno-save-toc-indirect[0m
           Generate (do not generate) code to save the TOC value in the  reserved  stack  location  in  the  function
           prologue if the function calls through a pointer on AIX and 64-bit Linux systems.  If the TOC value is not
           saved  in  the prologue, it is saved just before the call through the pointer.  The [1m-mno-save-toc-indirect[0m
           option is the default.

       [1m-mcompat-align-parm[0m
       [1m-mno-compat-align-parm[0m
           Generate (do not generate) code to pass structure parameters with a maximum  alignment  of  64  bits,  for
           compatibility with older versions of GCC.

           Older  versions  of  GCC  (prior  to  4.9.0)  incorrectly did not align a structure parameter on a 128-bit
           boundary when that structure contained a member requiring 128-bit alignment.  This is  corrected  in  more
           recent  versions  of  GCC.   This  option  may  be used to generate code that is compatible with functions
           compiled with older versions of GCC.

           The [1m-mno-compat-align-parm [22moption is the default.

       [1m-mstack-protector-guard=[4m[22mguard[0m
       [1m-mstack-protector-guard-reg=[4m[22mreg[0m
       [1m-mstack-protector-guard-offset=[4m[22moffset[0m
       [1m-mstack-protector-guard-symbol=[4m[22msymbol[0m
           Generate stack protection code using canary at [4mguard[24m.  Supported locations are [1mglobal [22mfor global canary or
           [1mtls [22mfor per-thread canary in the TLS block (the default with GNU libc version 2.4 or later).

           With      the      latter      choice      the      options      [1m-mstack-protector-guard-reg=[4m[22mreg[24m       and
           [1m-mstack-protector-guard-offset=[4m[22moffset[24m  furthermore  specify  which  register  to  use as base register for
           reading the canary, and from what offset from that base register. The default for those is as specified in
           the relevant ABI.  [1m-mstack-protector-guard-symbol=[4m[22msymbol[24m overrides the offset with a symbol reference to a
           canary in the TLS block.

       [1m-mpcrel[0m
       [1m-mno-pcrel[0m
           Generate (do not generate) pc-relative addressing.  The [1m-mpcrel [22moption requires that the medium code model
           ([1m-mcmodel=medium[22m) and prefixed addressing ([1m-mprefixed[22m) options are enabled.

       [1m-mprefixed[0m
       [1m-mno-prefixed[0m
           Generate (do not generate) addressing modes using prefixed load and store  instructions.   The  [1m-mprefixed[0m
           option requires that the option [1m-mcpu=power10 [22m(or later) is enabled.

       [1m-mmma[0m
       [1m-mno-mma[0m
           Generate  (do  not generate) the MMA instructions.  The [1m-mma [22moption requires that the option [1m-mcpu=power10[0m
           (or later) is enabled.

       [1m-mrop-protect[0m
       [1m-mno-rop-protect[0m
           Generate (do not generate) ROP protection instructions when the target processor supports them.  Currently
           this option disables the shrink-wrap optimization ([1m-fshrink-wrap[22m).

       [1m-mprivileged[0m
       [1m-mno-privileged[0m
           Generate (do not generate) code that will run in privileged state.

       [1m-mblock-ops-unaligned-vsx[0m
       [1m-mno-block-ops-unaligned-vsx[0m
           Generate (do not generate) unaligned vsx loads and stores for inline expansion of "memcpy" and "memmove".

       [1m--param rs6000-vect-unroll-limit=[0m
           The vectorizer will check with target information to determine whether it would be  beneficial  to  unroll
           the  main vectorized loop and by how much.  This parameter sets the upper bound of how much the vectorizer
           will unroll the main loop.  The default value is four.

       [4mRX[24m [4mOptions[0m

       These command-line options are defined for RX targets:

       [1m-m64bit-doubles[0m
       [1m-m32bit-doubles[0m
           Make the "double" data type be 64 bits ([1m-m64bit-doubles[22m)  or  32  bits  ([1m-m32bit-doubles[22m)  in  size.   The
           default is [1m-m32bit-doubles[22m.  [4mNote[24m RX floating-point hardware only works on 32-bit values, which is why the
           default is [1m-m32bit-doubles[22m.

       [1m-fpu[0m
       [1m-nofpu[0m
           Enables ([1m-fpu[22m) or disables ([1m-nofpu[22m) the use of RX floating-point hardware.  The default is enabled for the
           RX600 series and disabled for the RX200 series.

           Floating-point  instructions  are  only  generated  for  32-bit floating-point values, however, so the FPU
           hardware is not used for doubles if the [1m-m64bit-doubles [22moption is used.

           [4mNote[24m If the [1m-fpu [22moption is enabled then [1m-funsafe-math-optimizations [22mis also enabled  automatically.   This
           is because the RX FPU instructions are themselves unsafe.

       [1m-mcpu=[4m[22mname[0m
           Selects  the  type  of  RX CPU to be targeted.  Currently three types are supported, the generic [1mRX600 [22mand
           [1mRX200 [22mseries hardware and the specific [1mRX610 [22mCPU.  The default is [1mRX600[22m.

           The only difference between [1mRX600 [22mand [1mRX610 [22mis that the [1mRX610 [22mdoes not support the "MVTIPL" instruction.

           The [1mRX200 [22mseries does not have a hardware floating-point unit and so [1m-nofpu [22mis  enabled  by  default  when
           this type is selected.

       [1m-mbig-endian-data[0m
       [1m-mlittle-endian-data[0m
           Store  data  (but  not code) in the big-endian format.  The default is [1m-mlittle-endian-data[22m, i.e. to store
           data in the little-endian format.

       [1m-msmall-data-limit=[4m[22mN[0m
           Specifies the maximum size in bytes of global and static variables which can be placed into the small data
           area.  Using the small data area can lead to smaller and faster code, but the size of area is limited  and
           it  is  up  to the programmer to ensure that the area does not overflow.  Also when the small data area is
           used one of the RX's registers (usually "r13") is reserved for use pointing to this  area,  so  it  is  no
           longer available for use by the compiler.  This could result in slower and/or larger code if variables are
           pushed onto the stack instead of being held in this register.

           Note,  common  variables  (variables that have not been initialized) and constants are not placed into the
           small data area as they are assigned to other sections in the output executable.

           The default value is zero, which disables this feature.  Note, this feature is not enabled by default with
           higher optimization levels ([1m-O2 [22metc) because  of  the  potentially  detrimental  effects  of  reserving  a
           register.   It  is  up  to the programmer to experiment and discover whether this feature is of benefit to
           their program.  See the description of the [1m-mpid [22moption for a description of how the  actual  register  to
           hold the small data area pointer is chosen.

       [1m-msim[0m
       [1m-mno-sim[0m
           Use the simulator runtime.  The default is to use the libgloss board-specific runtime.

       [1m-mas100-syntax[0m
       [1m-mno-as100-syntax[0m
           When  generating  assembler  output  use a syntax that is compatible with Renesas's AS100 assembler.  This
           syntax can also be handled by the GAS assembler, but it has some restrictions so it is  not  generated  by
           default.

       [1m-mmax-constant-size=[4m[22mN[0m
           Specifies  the  maximum  size, in bytes, of a constant that can be used as an operand in a RX instruction.
           Although the RX instruction set does  allow  constants  of  up  to  4  bytes  in  length  to  be  used  in
           instructions,  a  longer  value  equates  to  a  longer instruction.  Thus in some circumstances it can be
           beneficial to restrict the size of constants that are used in instructions.  Constants that  are  too  big
           are instead placed into a constant pool and referenced via register indirection.

           The  value [4mN[24m can be between 0 and 4.  A value of 0 (the default) or 4 means that constants of any size are
           allowed.

       [1m-mrelax[0m
           Enable linker relaxation.  Linker relaxation is a process whereby the linker attempts to reduce  the  size
           of a program by finding shorter versions of various instructions.  Disabled by default.

       [1m-mint-register=[4m[22mN[0m
           Specify  the  number  of  registers  to  reserve for fast interrupt handler functions.  The value [4mN[24m can be
           between 0 and 4.  A value of 1 means that register "r13"  is  reserved  for  the  exclusive  use  of  fast
           interrupt handlers.  A value of 2 reserves "r13" and "r12".  A value of 3 reserves "r13", "r12" and "r11",
           and a value of 4 reserves "r13" through "r10".  A value of 0, the default, does not reserve any registers.

       [1m-msave-acc-in-interrupts[0m
           Specifies  that  interrupt  handler  functions  should  preserve  the  accumulator register.  This is only
           necessary if normal code might use the accumulator  register,  for  example  because  it  performs  64-bit
           multiplications.  The default is to ignore the accumulator as this makes the interrupt handlers faster.

       [1m-mpid[0m
       [1m-mno-pid[0m
           Enables the generation of position independent data.  When enabled any access to constant data is done via
           an  offset  from  a  base  address  held  in  a register.  This allows the location of constant data to be
           determined at run time without requiring the executable to be relocated, which is a  benefit  to  embedded
           applications with tight memory constraints.  Data that can be modified is not affected by this option.

           Note, using this feature reserves a register, usually "r13", for the constant data base address.  This can
           result in slower and/or larger code, especially in complicated functions.

           The   actual   register  chosen  to  hold  the  constant  data  base  address  depends  upon  whether  the
           [1m-msmall-data-limit [22mand/or the [1m-mint-register [22mcommand-line options are  enabled.   Starting  with  register
           "r13"   and   proceeding  downwards,  registers  are  allocated  first  to  satisfy  the  requirements  of
           [1m-mint-register[22m, then [1m-mpid [22mand finally [1m-msmall-data-limit[22m.  Thus it is possible for the  small  data  area
           register to be "r8" if both [1m-mint-register=4 [22mand [1m-mpid [22mare specified on the command line.

           By default this feature is not enabled.  The default can be restored via the [1m-mno-pid [22mcommand-line option.

       [1m-mno-warn-multiple-fast-interrupts[0m
       [1m-mwarn-multiple-fast-interrupts[0m
           Prevents  GCC  from  issuing a warning message if it finds more than one fast interrupt handler when it is
           compiling a file.  The default is to issue a warning for each extra fast interrupt handler found,  as  the
           RX only supports one such interrupt.

       [1m-mallow-string-insns[0m
       [1m-mno-allow-string-insns[0m
           Enables  or  disables  the use of the string manipulation instructions "SMOVF", "SCMPU", "SMOVB", "SMOVU",
           "SUNTIL" "SWHILE" and also the "RMPA" instruction.  These instructions may prefetch  data,  which  is  not
           safe  to  do  if accessing an I/O register.  (See section 12.2.7 of the RX62N Group User's Manual for more
           information).

           The default is to allow these instructions, but it  is  not  possible  for  GCC  to  reliably  detect  all
           circumstances  where  a string instruction might be used to access an I/O register, so their use cannot be
           disabled automatically.  Instead it is reliant upon the  programmer  to  use  the  [1m-mno-allow-string-insns[0m
           option if their program accesses I/O space.

           When  the  instructions  are  enabled  GCC  defines the C preprocessor symbol "__RX_ALLOW_STRING_INSNS__",
           otherwise it defines the symbol "__RX_DISALLOW_STRING_INSNS__".

       [1m-mjsr[0m
       [1m-mno-jsr[0m
           Use only (or not only) "JSR" instructions to access functions.  This option can be  used  when  code  size
           exceeds  the  range  of "BSR" instructions.  Note that [1m-mno-jsr [22mdoes not mean to not use "JSR" but instead
           means that any type of branch may be used.

       [4mNote:[24m The generic GCC command-line option [1m-ffixed-[4m[22mreg[24m has special significance to the RX port when  used  with
       the  "interrupt" function attribute.  This attribute indicates a function intended to process fast interrupts.
       GCC ensures that it only uses the registers "r10", "r11", "r12" and/or "r13" and only provided that the normal
       use of the corresponding registers have been restricted via the  [1m-ffixed-[4m[22mreg[24m  or  [1m-mint-register  [22mcommand-line
       options.

       [4mS/390[24m [4mand[24m [4mzSeries[24m [4mOptions[0m

       These are the [1m-m [22moptions defined for the S/390 and zSeries architecture.

       [1m-mhard-float[0m
       [1m-msoft-float[0m
           Use  (do  not  use)  the hardware floating-point instructions and registers for floating-point operations.
           When [1m-msoft-float [22mis specified, functions in [4mlibgcc.a[24m are used to perform floating-point operations.  When
           [1m-mhard-float [22mis specified, the compiler generates IEEE floating-point instructions.  This is the default.

       [1m-mhard-dfp[0m
       [1m-mno-hard-dfp[0m
           Use (do not use) the hardware decimal-floating-point instructions for  decimal-floating-point  operations.
           When  [1m-mno-hard-dfp  [22mis  specified,  functions  in  [4mlibgcc.a[24m  are  used  to perform decimal-floating-point
           operations.   When  [1m-mhard-dfp  [22mis  specified,  the  compiler  generates  decimal-floating-point  hardware
           instructions.  This is the default for [1m-march=z9-ec [22mor higher.

       [1m-mlong-double-64[0m
       [1m-mlong-double-128[0m
           These  switches  control  the  size  of "long double" type. A size of 64 bits makes the "long double" type
           equivalent to the "double" type. This is the default.

       [1m-mbackchain[0m
       [1m-mno-backchain[0m
           Store (do not store) the address of the caller's frame as backchain pointer into the callee's stack frame.
           A backchain may be needed to allow  debugging  using  tools  that  do  not  understand  DWARF  call  frame
           information.   When  [1m-mno-packed-stack  [22mis in effect, the backchain pointer is stored at the bottom of the
           stack frame; when [1m-mpacked-stack [22mis in effect, the backchain is placed into the topmost word of the 96/160
           byte register save area.

           In general, code compiled with [1m-mbackchain [22mis call-compatible  with  code  compiled  with  [1m-mno-backchain[22m;
           however,  use of the backchain for debugging purposes usually requires that the whole binary is built with
           [1m-mbackchain[22m.  Note that the combination of [1m-mbackchain[22m, [1m-mpacked-stack [22mand [1m-mhard-float [22mis not  supported.
           In order to build a linux kernel use [1m-msoft-float[22m.

           The default is to not maintain the backchain.

       [1m-mpacked-stack[0m
       [1m-mno-packed-stack[0m
           Use  (do not use) the packed stack layout.  When [1m-mno-packed-stack [22mis specified, the compiler uses the all
           fields of the 96/160 byte register save area only for their default purpose; unused fields still  take  up
           stack  space.   When [1m-mpacked-stack [22mis specified, register save slots are densely packed at the top of the
           register save area; unused space is reused for other purposes, allowing for  more  efficient  use  of  the
           available  stack space.  However, when [1m-mbackchain [22mis also in effect, the topmost word of the save area is
           always used to store the backchain, and the return address register is always saved two  words  below  the
           backchain.

           As  long  as  the stack frame backchain is not used, code generated with [1m-mpacked-stack [22mis call-compatible
           with code generated with [1m-mno-packed-stack[22m.  Note that some non-FSF releases of  GCC  2.95  for  S/390  or
           zSeries  generated  code that uses the stack frame backchain at run time, not just for debugging purposes.
           Such code is not call-compatible with code compiled with [1m-mpacked-stack[22m.  Also, note that the  combination
           of  [1m-mbackchain[22m,  [1m-mpacked-stack  [22mand [1m-mhard-float [22mis not supported.  In order to build a linux kernel use
           [1m-msoft-float[22m.

           The default is to not use the packed stack layout.

       [1m-msmall-exec[0m
       [1m-mno-small-exec[0m
           Generate (or do not generate) code using the "bras" instruction to do subroutine calls.  This  only  works
           reliably  if  the total executable size does not exceed 64k.  The default is to use the "basr" instruction
           instead, which does not have this limitation.

       [1m-m64[0m
       [1m-m31[0m
           When [1m-m31 [22mis specified, generate code compliant to the GNU/Linux for S/390 ABI.  When [1m-m64  [22mis  specified,
           generate  code  compliant  to  the  GNU/Linux  for zSeries ABI.  This allows GCC in particular to generate
           64-bit instructions.  For the [1ms390 [22mtargets, the default is [1m-m31[22m, while the [1ms390x [22mtargets default to [1m-m64[22m.

       [1m-mzarch[0m
       [1m-mesa[0m
           When [1m-mzarch [22mis specified, generate code using the instructions available on z/Architecture.   When  [1m-mesa[0m
           is  specified, generate code using the instructions available on ESA/390.  Note that [1m-mesa [22mis not possible
           with [1m-m64[22m.  When generating code compliant to the GNU/Linux for S/390 ABI, the  default  is  [1m-mesa[22m.   When
           generating code compliant to the GNU/Linux for zSeries ABI, the default is [1m-mzarch[22m.

       [1m-mhtm[0m
       [1m-mno-htm[0m
           The  [1m-mhtm  [22moption  enables  a set of builtins making use of instructions available with the transactional
           execution facility introduced with the IBM zEnterprise EC12 machine generation  [1mS/390  System  z  Built-in[0m
           [1mFunctions[22m.  [1m-mhtm [22mis enabled by default when using [1m-march=zEC12[22m.

       [1m-mvx[0m
       [1m-mno-vx[0m
           When  [1m-mvx [22mis specified, generate code using the instructions available with the vector extension facility
           introduced with the IBM z13 machine generation.  This option changes the ABI for some vector  type  values
           with  regard  to  alignment and calling conventions.  In case vector type values are being used in an ABI-
           relevant context a GAS [1m.gnu_attribute [22mcommand will be added to mark the  resulting  binary  with  the  ABI
           used.  [1m-mvx [22mis enabled by default when using [1m-march=z13[22m.

       [1m-mzvector[0m
       [1m-mno-zvector[0m
           The [1m-mzvector [22moption enables vector language extensions and builtins using instructions available with the
           vector  extension  facility  introduced with the IBM z13 machine generation.  This option adds support for
           [1mvector [22mto be used as a keyword to define vector type variables and arguments.  [1mvector  [22mis  only  available
           when  GNU extensions are enabled.  It will not be expanded when requesting strict standard compliance e.g.
           with [1m-std=c99[22m.  In addition to the GCC low-level builtins [1m-mzvector [22menables a set of  builtins  added  for
           compatibility  with  AltiVec-style  implementations  like  Power  and Cell.  In order to make use of these
           builtins the header file [4mvecintrin.h[24m needs to be included.  [1m-mzvector [22mis disabled by default.

       [1m-mmvcle[0m
       [1m-mno-mvcle[0m
           Generate (or do not generate) code using the "mvcle" instruction to perform block moves.  When  [1m-mno-mvcle[0m
           is specified, use a "mvc" loop instead.  This is the default unless optimizing for size.

       [1m-mdebug[0m
       [1m-mno-debug[0m
           Print  (or  do  not print) additional debug information when compiling.  The default is to not print debug
           information.

       [1m-march=[4m[22mcpu-type[0m
           Generate code that runs on [4mcpu-type[24m, which is the name of a system representing a certain processor  type.
           Possible  values  for  [4mcpu-type[24m  are  [1mz900[22m/[1march5[22m,  [1mz990[22m/[1march6[22m, [1mz9-109[22m, [1mz9-ec[22m/[1march7[22m, [1mz10[22m/[1march8[22m, [1mz196[22m/[1march9[22m,
           [1mzEC12[22m, [1mz13[22m/[1march11[22m, [1mz14[22m/[1march12[22m, [1mz15[22m/[1march13[22m, [1mz16[22m/[1march14[22m, and [1mnative[22m.

           The default is [1m-march=z900[22m.

           Specifying [1mnative [22mas cpu type can be used to select the best architecture option for the  host  processor.
           [1m-march=native [22mhas no effect if GCC does not recognize the processor.

       [1m-mtune=[4m[22mcpu-type[0m
           Tune  to  [4mcpu-type[24m  everything  applicable  about  the  generated  code, except for the ABI and the set of
           available instructions.  The list of [4mcpu-type[24m values is the same as for [1m-march[22m.  The default is the  value
           used for [1m-march[22m.

       [1m-mtpf-trace[0m
       [1m-mno-tpf-trace[0m
           Generate  code  that  adds  (does  not add) in TPF OS specific branches to trace routines in the operating
           system.  This option is off by default, even when compiling for the TPF OS.

       [1m-mtpf-trace-skip[0m
       [1m-mno-tpf-trace-skip[0m
           Generate code that changes (does not change) the default branch targets enabled by [1m-mtpf-trace [22mto point to
           specialized trace routines providing the ability of selectively skipping function trace  entries  for  the
           TPF OS.  This option is off by default, even when compiling for the TPF OS and specifying [1m-mtpf-trace[22m.

       [1m-mfused-madd[0m
       [1m-mno-fused-madd[0m
           Generate  code  that  uses  (does not use) the floating-point multiply and accumulate instructions.  These
           instructions are generated by default if hardware floating point is used.

       [1m-mwarn-framesize=[4m[22mframesize[0m
           Emit a warning if the current function exceeds the given frame size.  Because this is a compile-time check
           it doesn't need to be a real problem when the program runs.  It is intended  to  identify  functions  that
           most  probably  cause a stack overflow.  It is useful to be used in an environment with limited stack size
           e.g. the linux kernel.

       [1m-mwarn-dynamicstack[0m
           Emit a warning if the function calls "alloca" or uses dynamically-sized arrays.  This is generally  a  bad
           idea with a limited stack size.

       [1m-mstack-guard=[4m[22mstack-guard[0m
       [1m-mstack-size=[4m[22mstack-size[0m
           If  these  options  are provided the S/390 back end emits additional instructions in the function prologue
           that trigger a trap if the stack size is [4mstack-guard[24m bytes above the [4mstack-size[24m (remember that  the  stack
           on  S/390  grows  downward).  If the [4mstack-guard[24m option is omitted the smallest power of 2 larger than the
           frame size of the compiled function is chosen.  These options are intended to be used  to  help  debugging
           stack  overflow problems.  The additionally emitted code causes only little overhead and hence can also be
           used in production-like systems without greater performance degradation.  The  given  values  have  to  be
           exact powers of 2 and [4mstack-size[24m has to be greater than [4mstack-guard[24m without exceeding 64k.  In order to be
           efficient  the  extra  code  makes the assumption that the stack starts at an address aligned to the value
           given by [4mstack-size[24m.  The [4mstack-guard[24m option can only be used in conjunction with [4mstack-size[24m.

       [1m-mhotpatch=[4m[22mpre-halfwords[24m[1m,[4m[22mpost-halfwords[0m
           If the hotpatch option is enabled, a "hot-patching" function prologue is generated for  all  functions  in
           the  compilation  unit.  The funtion label is prepended with the given number of two-byte NOP instructions
           ([4mpre-halfwords[24m, maximum 1000000).  After the label, 2 *  [4mpost-halfwords[24m  bytes  are  appended,  using  the
           largest NOP like instructions the architecture allows (maximum 1000000).

           If both arguments are zero, hotpatching is disabled.

           This option can be overridden for individual functions with the "hotpatch" attribute.

       [4mSH[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the SH implementations:

       [1m-m1 [22mGenerate code for the SH1.

       [1m-m2 [22mGenerate code for the SH2.

       [1m-m2e[0m
           Generate code for the SH2e.

       [1m-m2a-nofpu[0m
           Generate  code  for  the SH2a without FPU, or for a SH2a-FPU in such a way that the floating-point unit is
           not used.

       [1m-m2a-single-only[0m
           Generate code for the SH2a-FPU, in such a way that no double-precision floating-point operations are used.

       [1m-m2a-single[0m
           Generate code for the SH2a-FPU assuming the floating-point unit is in single-precision mode by default.

       [1m-m2a[0m
           Generate code for the SH2a-FPU assuming the floating-point unit is in double-precision mode by default.

       [1m-m3 [22mGenerate code for the SH3.

       [1m-m3e[0m
           Generate code for the SH3e.

       [1m-m4-nofpu[0m
           Generate code for the SH4 without a floating-point unit.

       [1m-m4-single-only[0m
           Generate code for the SH4 with a floating-point unit that only supports single-precision arithmetic.

       [1m-m4-single[0m
           Generate code for the SH4 assuming the floating-point unit is in single-precision mode by default.

       [1m-m4 [22mGenerate code for the SH4.

       [1m-m4-100[0m
           Generate code for SH4-100.

       [1m-m4-100-nofpu[0m
           Generate code for SH4-100 in such a way that the floating-point unit is not used.

       [1m-m4-100-single[0m
           Generate code for SH4-100 assuming the floating-point unit is in single-precision mode by default.

       [1m-m4-100-single-only[0m
           Generate code for SH4-100 in such a way that no double-precision floating-point operations are used.

       [1m-m4-200[0m
           Generate code for SH4-200.

       [1m-m4-200-nofpu[0m
           Generate code for SH4-200 without in such a way that the floating-point unit is not used.

       [1m-m4-200-single[0m
           Generate code for SH4-200 assuming the floating-point unit is in single-precision mode by default.

       [1m-m4-200-single-only[0m
           Generate code for SH4-200 in such a way that no double-precision floating-point operations are used.

       [1m-m4-300[0m
           Generate code for SH4-300.

       [1m-m4-300-nofpu[0m
           Generate code for SH4-300 without in such a way that the floating-point unit is not used.

       [1m-m4-300-single[0m
           Generate code for SH4-300 in such a way that no double-precision floating-point operations are used.

       [1m-m4-300-single-only[0m
           Generate code for SH4-300 in such a way that no double-precision floating-point operations are used.

       [1m-m4-340[0m
           Generate code for SH4-340 (no MMU, no FPU).

       [1m-m4-500[0m
           Generate code for SH4-500 (no FPU).  Passes [1m-isa=sh4-nofpu [22mto the assembler.

       [1m-m4a-nofpu[0m
           Generate code for the SH4al-dsp, or for a SH4a in such a way that the floating-point unit is not used.

       [1m-m4a-single-only[0m
           Generate code for the SH4a, in such a way that no double-precision floating-point operations are used.

       [1m-m4a-single[0m
           Generate code for the SH4a assuming the floating-point unit is in single-precision mode by default.

       [1m-m4a[0m
           Generate code for the SH4a.

       [1m-m4al[0m
           Same as [1m-m4a-nofpu[22m, except that it implicitly passes [1m-dsp [22mto the assembler.  GCC doesn't generate any  DSP
           instructions at the moment.

       [1m-mb [22mCompile code for the processor in big-endian mode.

       [1m-ml [22mCompile code for the processor in little-endian mode.

       [1m-mdalign[0m
           Align  doubles  at  64-bit  boundaries.   Note  that  this  changes the calling conventions, and thus some
           functions from the standard C library do not work unless you recompile it first with [1m-mdalign[22m.

       [1m-mrelax[0m
           Shorten some address references at link time, when possible; uses the linker option [1m-relax[22m.

       [1m-mbigtable[0m
           Use 32-bit offsets in "switch" tables.  The default is to use 16-bit offsets.

       [1m-mbitops[0m
           Enable the use of bit manipulation instructions on SH2A.

       [1m-mfmovd[0m
           Enable the use of the instruction "fmovd".  Check [1m-mdalign [22mfor alignment constraints.

       [1m-mrenesas[0m
           Comply with the calling conventions defined by Renesas.

       [1m-mno-renesas[0m
           Comply with the calling conventions defined for GCC before the Renesas conventions were  available.   This
           option is the default for all targets of the SH toolchain.

       [1m-mnomacsave[0m
           Mark the "MAC" register as call-clobbered, even if [1m-mrenesas [22mis given.

       [1m-mieee[0m
       [1m-mno-ieee[0m
           Control  the  IEEE compliance of floating-point comparisons, which affects the handling of cases where the
           result of a comparison is unordered.  By default [1m-mieee [22mis implicitly enabled.  If  [1m-ffinite-math-only  [22mis
           enabled  [1m-mno-ieee  [22mis implicitly set, which results in faster floating-point greater-equal and less-equal
           comparisons.  The implicit settings can be overridden by specifying either [1m-mieee [22mor [1m-mno-ieee[22m.

       [1m-minline-ic_invalidate[0m
           Inline code to invalidate instruction cache entries after setting up nested  function  trampolines.   This
           option  has  no  effect if [1m-musermode [22mis in effect and the selected code generation option (e.g. [1m-m4[22m) does
           not allow the use of the "icbi" instruction.  If the selected code generation option does  not  allow  the
           use  of  the  "icbi"  instruction,  and  [1m-musermode  [22mis  not  in  effect, the inlined code manipulates the
           instruction cache address array directly with an associative write.  This  not  only  requires  privileged
           mode at run time, but it also fails if the cache line had been mapped via the TLB and has become unmapped.

       [1m-misize[0m
           Dump instruction size and location in the assembly code.

       [1m-mpadstruct[0m
           This  option  is deprecated.  It pads structures to multiple of 4 bytes, which is incompatible with the SH
           ABI.

       [1m-matomic-model=[4m[22mmodel[0m
           Sets the model of atomic operations and additional parameters as a comma separated list.  For  details  on
           the atomic built-in functions see [1m__atomic Builtins[22m.  The following models and parameters are supported:

           [1mnone[0m
               Disable compiler generated atomic sequences and emit library calls for atomic operations.  This is the
               default if the target is not "sh*-*-linux*".

           [1msoft-gusa[0m
               Generate  GNU/Linux  compatible gUSA software atomic sequences for the atomic built-in functions.  The
               generated atomic sequences require additional support from the interrupt/exception  handling  code  of
               the  system  and  are  only suitable for SH3* and SH4* single-core systems.  This option is enabled by
               default when the target is "sh*-*-linux*" and SH3* or SH4*.  When the target is SH4A, this option also
               partially utilizes the hardware atomic instructions "movli.l" and "movco.l" to create  more  efficient
               code, unless [1mstrict [22mis specified.

           [1msoft-tcb[0m
               Generate  software  atomic  sequences  that  use  a  variable  in the thread control block.  This is a
               variation of the gUSA sequences which can also be used on SH1* and SH2* targets.  The generated atomic
               sequences require additional support from the interrupt/exception handling code of the system and  are
               only  suitable  for  single-core  systems.  When using this model, the [1mgbr-offset= [22mparameter has to be
               specified as well.

           [1msoft-imask[0m
               Generate software atomic sequences that temporarily disable interrupts by setting "SR.IMASK  =  1111".
               This  model  works  only when the program runs in privileged mode and is only suitable for single-core
               systems.  Additional support from the interrupt/exception handling code of the system is not required.
               This model is enabled by default when the target is "sh*-*-linux*" and SH1* or SH2*.

           [1mhard-llcs[0m
               Generate hardware atomic sequences using the "movli.l" and "movco.l" instructions only.  This is  only
               available  on  SH4A  and  is suitable for multi-core systems.  Since the hardware instructions support
               only 32 bit atomic variables access to 8 or 16 bit variables is emulated with 32 bit  accesses.   Code
               compiled  with  this  option  is  also compatible with other software atomic model interrupt/exception
               handling systems if executed on an SH4A  system.   Additional  support  from  the  interrupt/exception
               handling code of the system is not required for this model.

           [1mgbr-offset=[0m
               This  parameter  specifies  the  offset in bytes of the variable in the thread control block structure
               that should be used by the generated atomic sequences when the [1msoft-tcb [22mmodel has been selected.   For
               other  models  this parameter is ignored.  The specified value must be an integer multiple of four and
               in the range 0-1020.

           [1mstrict[0m
               This parameter prevents mixed usage of multiple atomic models, even if they are compatible, and  makes
               the compiler generate atomic sequences of the specified model only.

       [1m-mtas[0m
           Generate the "tas.b" opcode for "__atomic_test_and_set".  Notice that depending on the particular hardware
           and software configuration this can degrade overall performance due to the operand cache line flushes that
           are  implied  by  the  "tas.b" instruction.  On multi-core SH4A processors the "tas.b" instruction must be
           used with caution since it can result in data corruption for certain cache configurations.

       [1m-mprefergot[0m
           When generating position-independent code, emit function calls using the Global Offset  Table  instead  of
           the Procedure Linkage Table.

       [1m-musermode[0m
       [1m-mno-usermode[0m
           Don't  allow  (allow)  the  compiler  generating privileged mode code.  Specifying [1m-musermode [22malso implies
           [1m-mno-inline-ic_invalidate [22mif the inlined code would not work in user mode.  [1m-musermode [22mis the default when
           the target is "sh*-*-linux*".  If the target is SH1* or SH2* [1m-musermode [22mhas no effect, since there  is  no
           user mode.

       [1m-multcost=[4m[22mnumber[0m
           Set the cost to assume for a multiply insn.

       [1m-mdiv=[4m[22mstrategy[0m
           Set the division strategy to be used for integer division operations.  [4mstrategy[24m can be one of:

           [1mcall-div1[0m
               Calls  a  library  function  that  uses  the  single-step  division  instruction "div1" to perform the
               operation.  Division by zero calculates an unspecified result and does not trap.  This is the  default
               except for SH4, SH2A and SHcompact.

           [1mcall-fp[0m
               Calls  a library function that performs the operation in double precision floating point.  Division by
               zero causes a floating-point exception.  This is the default for SHcompact with FPU.  Specifying  this
               for targets that do not have a double precision FPU defaults to "call-div1".

           [1mcall-table[0m
               Calls  a  library function that uses a lookup table for small divisors and the "div1" instruction with
               case distinction for larger divisors.  Division by zero calculates an unspecified result and does  not
               trap.   This  is  the  default  for  SH4.   Specifying this for targets that do not have dynamic shift
               instructions defaults to "call-div1".

           When a division strategy has not been specified the default strategy is  selected  based  on  the  current
           target.   For  SH2A  the  default strategy is to use the "divs" and "divu" instructions instead of library
           function calls.

       [1m-maccumulate-outgoing-args[0m
           Reserve space once for outgoing  arguments  in  the  function  prologue  rather  than  around  each  call.
           Generally  beneficial  for  performance  and  size.  Also needed for unwinding to avoid changing the stack
           frame around conditional code.

       [1m-mdivsi3_libfunc=[4m[22mname[0m
           Set the name of the library function used for 32-bit signed division to [4mname[24m.  This only affects the  name
           used   in   the   [1mcall   [22mdivision   strategies,   and   the  compiler  still  expects  the  same  sets  of
           input/output/clobbered registers as if this option were not present.

       [1m-mfixed-range=[4m[22mregister-range[0m
           Generate code treating the given register range as fixed registers.  A fixed  register  is  one  that  the
           register  allocator cannot use.  This is useful when compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple register ranges can be specified separated by a comma.

       [1m-mbranch-cost=[4m[22mnum[0m
           Assume [4mnum[24m to be the cost for a branch instruction.  Higher numbers make the compiler try to generate more
           branch-free code if possible.  If not specified the value is selected depending on the processor type that
           is being compiled for.

       [1m-mzdcbranch[0m
       [1m-mno-zdcbranch[0m
           Assume (do not assume) that zero displacement conditional branch instructions "bt" and "bf" are fast.   If
           [1m-mzdcbranch  [22mis  specified, the compiler prefers zero displacement branch code sequences.  This is enabled
           by default when generating  code  for  SH4  and  SH4A.   It  can  be  explicitly  disabled  by  specifying
           [1m-mno-zdcbranch[22m.

       [1m-mcbranch-force-delay-slot[0m
           Force  the  usage  of  delay slots for conditional branches, which stuffs the delay slot with a "nop" if a
           suitable instruction cannot be found.  By default this option is disabled.  It  can  be  enabled  to  work
           around hardware bugs as found in the original SH7055.

       [1m-mfused-madd[0m
       [1m-mno-fused-madd[0m
           Generate  code  that  uses  (does not use) the floating-point multiply and accumulate instructions.  These
           instructions are generated  by  default  if  hardware  floating  point  is  used.   The  machine-dependent
           [1m-mfused-madd   [22moption   is   now   mapped   to  the  machine-independent  [1m-ffp-contract=fast  [22moption,  and
           [1m-mno-fused-madd [22mis mapped to [1m-ffp-contract=off[22m.

       [1m-mfsca[0m
       [1m-mno-fsca[0m
           Allow or disallow the compiler to emit the "fsca" instruction for sine  and  cosine  approximations.   The
           option [1m-mfsca [22mmust be used in combination with [1m-funsafe-math-optimizations[22m.  It is enabled by default when
           generating   code   for   SH4A.    Using  [1m-mno-fsca  [22mdisables  sine  and  cosine  approximations  even  if
           [1m-funsafe-math-optimizations [22mis in effect.

       [1m-mfsrra[0m
       [1m-mno-fsrra[0m
           Allow or disallow the compiler to emit the "fsrra" instruction for reciprocal square root  approximations.
           The  option  [1m-mfsrra  [22mmust be used in combination with [1m-funsafe-math-optimizations [22mand [1m-ffinite-math-only[22m.
           It is enabled by default when generating code for SH4A.  Using [1m-mno-fsrra [22mdisables reciprocal square  root
           approximations even if [1m-funsafe-math-optimizations [22mand [1m-ffinite-math-only [22mare in effect.

       [1m-mpretend-cmove[0m
           Prefer  zero-displacement conditional branches for conditional move instruction patterns.  This can result
           in faster code on the SH4 processor.

       [1m-mfdpic[0m
           Generate code using the FDPIC ABI.

       [4mSolaris[24m [4m2[24m [4mOptions[0m

       These [1m-m [22moptions are supported on Solaris 2:

       [1m-mclear-hwcap[0m
           [1m-mclear-hwcap [22mtells the compiler to remove the hardware capabilities generated by the  Solaris  assembler.
           This  is  only  necessary  when  object files use ISA extensions not supported by the current machine, but
           check at runtime whether or not to use them.

       [1m-mimpure-text[0m
           [1m-mimpure-text[22m, used in addition to [1m-shared[22m, tells the compiler to not pass [1m-z  text  [22mto  the  linker  when
           linking a shared object.  Using this option, you can link position-dependent code into a shared object.

           [1m-mimpure-text  [22msuppresses  the  "relocations  remain against allocatable but non-writable sections" linker
           error message.  However, the necessary relocations trigger copy-on-write, and the  shared  object  is  not
           actually shared across processes.  Instead of using [1m-mimpure-text[22m, you should compile all source code with
           [1m-fpic [22mor [1m-fPIC[22m.

       These switches are supported in addition to the above on Solaris 2:

       [1m-pthreads[0m
           This is a synonym for [1m-pthread[22m.

       [4mSPARC[24m [4mOptions[0m

       These [1m-m [22moptions are supported on the SPARC:

       [1m-mno-app-regs[0m
       [1m-mapp-regs[0m
           Specify  [1m-mapp-regs  [22mto  generate  output using the global registers 2 through 4, which the SPARC SVR4 ABI
           reserves for applications.  Like the global register 1, each global register 2 through 4 is  then  treated
           as an allocable register that is clobbered by function calls.  This is the default.

           To  be  fully  SVR4 ABI-compliant at the cost of some performance loss, specify [1m-mno-app-regs[22m.  You should
           compile libraries and system software with this option.

       [1m-mflat[0m
       [1m-mno-flat[0m
           With [1m-mflat[22m, the compiler does not generate save/restore instructions and uses a "flat" or single register
           window model.  This model is compatible with the regular register window model.  The local  registers  and
           the  input  registers  (0--5)  are  still  treated as "call-saved" registers and are saved on the stack as
           needed.

           With  [1m-mno-flat  [22m(the  default),  the  compiler  generates  save/restore  instructions  (except  for  leaf
           functions).  This is the normal operating mode.

       [1m-mfpu[0m
       [1m-mhard-float[0m
           Generate output containing floating-point instructions.  This is the default.

       [1m-mno-fpu[0m
       [1m-msoft-float[0m
           Generate  output  containing  library  calls for floating point.  [1mWarning: [22mthe requisite libraries are not
           available for all SPARC targets.  Normally the facilities of the machine's usual C compiler are used,  but
           this  cannot  be  done  directly  in  cross-compilation.   You  must make your own arrangements to provide
           suitable library functions for cross-compilation.  The embedded targets [1msparc-*-aout [22mand [1msparclite-*-*  [22mdo
           provide software floating-point support.

           [1m-msoft-float  [22mchanges  the  calling  convention  in  the  output file; therefore, it is only useful if you
           compile [4mall[24m of a program with this option.  In particular, you need to compile [4mlibgcc.a[24m, the library  that
           comes with GCC, with [1m-msoft-float [22min order for this to work.

       [1m-mhard-quad-float[0m
           Generate output containing quad-word (long double) floating-point instructions.

       [1m-msoft-quad-float[0m
           Generate  output  containing  library  calls for quad-word (long double) floating-point instructions.  The
           functions called are those specified in the SPARC ABI.  This is the default.

           As of this writing, there are no SPARC implementations  that  have  hardware  support  for  the  quad-word
           floating-point  instructions.   They all invoke a trap handler for one of these instructions, and then the
           trap handler emulates the effect of the instruction.  Because of the trap handler overhead, this  is  much
           slower than calling the ABI library routines.  Thus the [1m-msoft-quad-float [22moption is the default.

       [1m-mno-unaligned-doubles[0m
       [1m-munaligned-doubles[0m
           Assume that doubles have 8-byte alignment.  This is the default.

           With  [1m-munaligned-doubles[22m,  GCC  assumes  that doubles have 8-byte alignment only if they are contained in
           another type, or if they have an absolute address.  Otherwise, it  assumes  they  have  4-byte  alignment.
           Specifying this option avoids some rare compatibility problems with code generated by other compilers.  It
           is not the default because it results in a performance loss, especially for floating-point code.

       [1m-muser-mode[0m
       [1m-mno-user-mode[0m
           Do  not  generate  code  that  can  only  run  in  supervisor  mode.  This is relevant only for the "casa"
           instruction emitted for the LEON3 processor.  This is the default.

       [1m-mfaster-structs[0m
       [1m-mno-faster-structs[0m
           With [1m-mfaster-structs[22m, the compiler assumes that structures should have 8-byte  alignment.   This  enables
           the  use of pairs of "ldd" and "std" instructions for copies in structure assignment, in place of twice as
           many "ld" and "st" pairs.  However, the use of this changed alignment directly  violates  the  SPARC  ABI.
           Thus,  it's intended only for use on targets where the developer acknowledges that their resulting code is
           not directly in line with the rules of the ABI.

       [1m-mstd-struct-return[0m
       [1m-mno-std-struct-return[0m
           With [1m-mstd-struct-return[22m, the compiler generates checking code in functions returning structures or unions
           to detect size mismatches between the two sides of function calls, as per the 32-bit ABI.

           The default is [1m-mno-std-struct-return[22m.  This option has no effect in 64-bit mode.

       [1m-mlra[0m
       [1m-mno-lra[0m
           Enable Local Register Allocation.  This is the default for SPARC since GCC  7  so  [1m-mno-lra  [22mneeds  to  be
           passed to get old Reload.

       [1m-mcpu=[4m[22mcpu_type[0m
           Set  the  instruction  set, register set, and instruction scheduling parameters for machine type [4mcpu_type[24m.
           Supported values for [4mcpu_type[24m are [1mv7[22m, [1mcypress[22m, [1mv8[22m, [1msupersparc[22m, [1mhypersparc[22m, [1mleon[22m,  [1mleon3[22m,  [1mleon3v7[22m,  [1mleon5[22m,
           [1msparclite[22m,  [1mf930[22m,  [1mf934[22m,  [1msparclite86x[22m,  [1msparclet[22m, [1mtsc701[22m, [1mv9[22m, [1multrasparc[22m, [1multrasparc3[22m, [1mniagara[22m, [1mniagara2[22m,
           [1mniagara3[22m, [1mniagara4[22m, [1mniagara7 [22mand [1mm8[22m.

           Native Solaris and GNU/Linux toolchains also support the value [1mnative[22m, which selects the best architecture
           option for the host processor.  [1m-mcpu=native [22mhas no effect if GCC does not recognize the processor.

           Default instruction scheduling parameters are used for values that  select  an  architecture  and  not  an
           implementation.  These are [1mv7[22m, [1mv8[22m, [1msparclite[22m, [1msparclet[22m, [1mv9[22m.

           Here is a list of each supported architecture and their supported implementations.

           v7  cypress, leon3v7

           v8  supersparc, hypersparc, leon, leon3, leon5

           sparclite
               f930, f934, sparclite86x

           sparclet
               tsc701

           v9  ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4, niagara7, m8

           By default (unless configured otherwise), GCC generates code for the V7 variant of the SPARC architecture.
           With  [1m-mcpu=cypress[22m,  the  compiler additionally optimizes it for the Cypress CY7C602 chip, as used in the
           SPARCStation/SPARCServer 3xx series.  This is also appropriate for the older SPARCStation 1, 2, IPX etc.

           With [1m-mcpu=v8[22m, GCC generates code for the V8 variant of the SPARC architecture.  The only difference  from
           V7  code  is  that  the compiler emits the integer multiply and integer divide instructions which exist in
           SPARC-V8 but not in SPARC-V7.  With [1m-mcpu=supersparc[22m, the  compiler  additionally  optimizes  it  for  the
           SuperSPARC chip, as used in the SPARCStation 10, 1000 and 2000 series.

           With  [1m-mcpu=sparclite[22m,  GCC generates code for the SPARClite variant of the SPARC architecture.  This adds
           the integer multiply, integer divide step and scan ("ffs") instructions which exist in SPARClite  but  not
           in  SPARC-V7.  With [1m-mcpu=f930[22m, the compiler additionally optimizes it for the Fujitsu MB86930 chip, which
           is the original SPARClite, with no FPU.  With [1m-mcpu=f934[22m, the compiler additionally optimizes it  for  the
           Fujitsu MB86934 chip, which is the more recent SPARClite with FPU.

           With [1m-mcpu=sparclet[22m, GCC generates code for the SPARClet variant of the SPARC architecture.  This adds the
           integer  multiply,  multiply/accumulate,  integer divide step and scan ("ffs") instructions which exist in
           SPARClet but not in SPARC-V7.  With [1m-mcpu=tsc701[22m, the compiler additionally optimizes  it  for  the  TEMIC
           SPARClet chip.

           With  [1m-mcpu=v9[22m, GCC generates code for the V9 variant of the SPARC architecture.  This adds 64-bit integer
           and floating-point move instructions, 3 additional floating-point condition code registers and conditional
           move instructions.  With [1m-mcpu=ultrasparc[22m, the compiler additionally optimizes it for the  Sun  UltraSPARC
           I/II/IIi  chips.   With  [1m-mcpu=ultrasparc3[22m,  the compiler additionally optimizes it for the Sun UltraSPARC
           III/III+/IIIi/IIIi+/IV/IV+ chips.  With [1m-mcpu=niagara[22m, the compiler  additionally  optimizes  it  for  Sun
           UltraSPARC  T1  chips.   With [1m-mcpu=niagara2[22m, the compiler additionally optimizes it for Sun UltraSPARC T2
           chips. With [1m-mcpu=niagara3[22m, the compiler additionally optimizes it for  Sun  UltraSPARC  T3  chips.   With
           [1m-mcpu=niagara4[22m,  the compiler additionally optimizes it for Sun UltraSPARC T4 chips.  With [1m-mcpu=niagara7[22m,
           the compiler  additionally  optimizes  it  for  Oracle  SPARC  M7  chips.   With  [1m-mcpu=m8[22m,  the  compiler
           additionally optimizes it for Oracle M8 chips.

       [1m-mtune=[4m[22mcpu_type[0m
           Set the instruction scheduling parameters for machine type [4mcpu_type[24m, but do not set the instruction set or
           register set that the option [1m-mcpu=[4m[22mcpu_type[24m does.

           The  same  values for [1m-mcpu=[4m[22mcpu_type[24m can be used for [1m-mtune=[4m[22mcpu_type[24m, but the only useful values are those
           that select a particular CPU implementation.  Those are  [1mcypress[22m,  [1msupersparc[22m,  [1mhypersparc[22m,  [1mleon[22m,  [1mleon3[22m,
           [1mleon3v7[22m,  [1mleon5[22m,  [1mf930[22m,  [1mf934[22m, [1msparclite86x[22m, [1mtsc701[22m, [1multrasparc[22m, [1multrasparc3[22m, [1mniagara[22m, [1mniagara2[22m, [1mniagara3[22m,
           [1mniagara4[22m, [1mniagara7 [22mand [1mm8[22m.  With native Solaris and GNU/Linux toolchains, [1mnative [22mcan also be used.

       [1m-mv8plus[0m
       [1m-mno-v8plus[0m
           With [1m-mv8plus[22m, GCC generates code for the SPARC-V8+ ABI.  The difference from  the  V8  ABI  is  that  the
           global  and  out  registers  are considered 64 bits wide.  This is enabled by default on Solaris in 32-bit
           mode for all SPARC-V9 processors.

       [1m-mvis[0m
       [1m-mno-vis[0m
           With [1m-mvis[22m, GCC generates code that takes advantage of the UltraSPARC Visual Instruction  Set  extensions.
           The default is [1m-mno-vis[22m.

       [1m-mvis2[0m
       [1m-mno-vis2[0m
           With  [1m-mvis2[22m,  GCC generates code that takes advantage of version 2.0 of the UltraSPARC Visual Instruction
           Set extensions.  The default is [1m-mvis2 [22mwhen targeting a cpu  that  supports  such  instructions,  such  as
           UltraSPARC-III and later.  Setting [1m-mvis2 [22malso sets [1m-mvis[22m.

       [1m-mvis3[0m
       [1m-mno-vis3[0m
           With  [1m-mvis3[22m,  GCC generates code that takes advantage of version 3.0 of the UltraSPARC Visual Instruction
           Set extensions.  The default is [1m-mvis3 [22mwhen targeting a cpu  that  supports  such  instructions,  such  as
           niagara-3 and later.  Setting [1m-mvis3 [22malso sets [1m-mvis2 [22mand [1m-mvis[22m.

       [1m-mvis4[0m
       [1m-mno-vis4[0m
           With  [1m-mvis4[22m,  GCC generates code that takes advantage of version 4.0 of the UltraSPARC Visual Instruction
           Set extensions.  The default is [1m-mvis4 [22mwhen targeting a cpu  that  supports  such  instructions,  such  as
           niagara-7 and later.  Setting [1m-mvis4 [22malso sets [1m-mvis3[22m, [1m-mvis2 [22mand [1m-mvis[22m.

       [1m-mvis4b[0m
       [1m-mno-vis4b[0m
           With  [1m-mvis4b[22m, GCC generates code that takes advantage of version 4.0 of the UltraSPARC Visual Instruction
           Set extensions, plus the additional VIS instructions introduced in the  Oracle  SPARC  Architecture  2017.
           The  default  is  [1m-mvis4b  [22mwhen  targeting  a  cpu  that supports such instructions, such as m8 and later.
           Setting [1m-mvis4b [22malso sets [1m-mvis4[22m, [1m-mvis3[22m, [1m-mvis2 [22mand [1m-mvis[22m.

       [1m-mcbcond[0m
       [1m-mno-cbcond[0m
           With [1m-mcbcond[22m, GCC generates code that takes advantage of the  UltraSPARC  Compare-and-Branch-on-Condition
           instructions.   The  default  is  [1m-mcbcond  [22mwhen  targeting a CPU that supports such instructions, such as
           Niagara-4 and later.

       [1m-mfmaf[0m
       [1m-mno-fmaf[0m
           With [1m-mfmaf[22m, GCC generates code that takes advantage of the UltraSPARC Fused  Multiply-Add  Floating-point
           instructions.   The  default  is  [1m-mfmaf  [22mwhen  targeting  a  CPU that supports such instructions, such as
           Niagara-3 and later.

       [1m-mfsmuld[0m
       [1m-mno-fsmuld[0m
           With [1m-mfsmuld[22m, GCC generates code that takes advantage of the Floating-point  Multiply  Single  to  Double
           (FsMULd)  instruction.   The default is [1m-mfsmuld [22mwhen targeting a CPU supporting the architecture versions
           V8 or V9 with FPU except [1m-mcpu=leon[22m.

       [1m-mpopc[0m
       [1m-mno-popc[0m
           With [1m-mpopc[22m, GCC generates code that takes advantage of the UltraSPARC Population Count instruction.   The
           default is [1m-mpopc [22mwhen targeting a CPU that supports such an instruction, such as Niagara-2 and later.

       [1m-msubxc[0m
       [1m-mno-subxc[0m
           With  [1m-msubxc[22m,  GCC  generates  code  that  takes advantage of the UltraSPARC Subtract-Extended-with-Carry
           instruction.  The default is [1m-msubxc [22mwhen targeting a CPU that  supports  such  an  instruction,  such  as
           Niagara-7 and later.

       [1m-mfix-at697f[0m
           Enable  the  documented workaround for the single erratum of the Atmel AT697F processor (which corresponds
           to erratum #13 of the AT697E processor).

       [1m-mfix-ut699[0m
           Enable the documented workarounds for the floating-point errata and the data cache nullify errata  of  the
           UT699 processor.

       [1m-mfix-ut700[0m
           Enable the documented workaround for the back-to-back store errata of the UT699E/UT700 processor.

       [1m-mfix-gr712rc[0m
           Enable the documented workaround for the back-to-back store errata of the GR712RC processor.

       These [1m-m [22moptions are supported in addition to the above on SPARC-V9 processors in 64-bit environments:

       [1m-m32[0m
       [1m-m64[0m
           Generate code for a 32-bit or 64-bit environment.  The 32-bit environment sets int, long and pointer to 32
           bits.  The 64-bit environment sets int to 32 bits and long and pointer to 64 bits.

       [1m-mcmodel=[4m[22mwhich[0m
           Set the code model to one of

           [1mmedlow[0m
               The  Medium/Low  code  model:  64-bit addresses, programs must be linked in the low 32 bits of memory.
               Programs can be statically or dynamically linked.

           [1mmedmid[0m
               The Medium/Middle code model: 64-bit addresses, programs must be linked in the low 44 bits of  memory,
               the  text  and data segments must be less than 2GB in size and the data segment must be located within
               2GB of the text segment.

           [1mmedany[0m
               The Medium/Anywhere code model: 64-bit addresses, programs may be linked anywhere in memory, the  text
               and data segments must be less than 2GB in size and the data segment must be located within 2GB of the
               text segment.

           [1membmedany[0m
               The Medium/Anywhere code model for embedded systems: 64-bit addresses, the text and data segments must
               be  less  than  2GB  in  size, both starting anywhere in memory (determined at link time).  The global
               register %g4 points to the base of the data segment.  Programs are statically linked and  PIC  is  not
               supported.

       [1m-mmemory-model=[4m[22mmem-model[0m
           Set the memory model in force on the processor to one of

           [1mdefault[0m
               The default memory model for the processor and operating system.

           [1mrmo [22mRelaxed Memory Order

           [1mpso [22mPartial Store Order

           [1mtso [22mTotal Store Order

           [1msc  [22mSequential Consistency

           These  memory models are formally defined in Appendix D of the SPARC-V9 architecture manual, as set in the
           processor's "PSTATE.MM" field.

       [1m-mstack-bias[0m
       [1m-mno-stack-bias[0m
           With [1m-mstack-bias[22m, GCC assumes that the stack pointer, and frame pointer if present, are offset  by  -2047
           which  must  be  added  back  when  making  stack  frame  references.  This is the default in 64-bit mode.
           Otherwise, assume no such offset is present.

       [4mOptions[24m [4mfor[24m [4mSystem[24m [4mV[0m

       These additional options are available on System V Release 4 for compatibility with other compilers  on  those
       systems:

       [1m-G  [22mCreate a shared object.  It is recommended that [1m-symbolic [22mor [1m-shared [22mbe used instead.

       [1m-Qy [22mIdentify the versions of each tool used by the compiler, in a ".ident" assembler directive in the output.

       [1m-Qn [22mRefrain from adding ".ident" directives to the output file (this is the default).

       [1m-YP,[4m[22mdirs[0m
           Search the directories [4mdirs[24m, and no others, for libraries specified with [1m-l[22m.

       [1m-Ym,[4m[22mdir[0m
           Look in the directory [4mdir[24m to find the M4 preprocessor.  The assembler uses this option.

       [4mV850[24m [4mOptions[0m

       These [1m-m [22moptions are defined for V850 implementations:

       [1m-mlong-calls[0m
       [1m-mno-long-calls[0m
           Treat  all calls as being far away (near).  If calls are assumed to be far away, the compiler always loads
           the function's address into a register, and calls indirect through the pointer.

       [1m-mno-ep[0m
       [1m-mep[0m
           Do not optimize (do optimize) basic blocks that use the same index pointer 4 or more times to copy pointer
           into the "ep" register, and use the shorter "sld" and "sst"  instructions.   The  [1m-mep  [22moption  is  on  by
           default if you optimize.

       [1m-mno-prolog-function[0m
       [1m-mprolog-function[0m
           Do  not  use  (do  use) external functions to save and restore registers at the prologue and epilogue of a
           function.  The external functions are slower, but use less code space if more than one function saves  the
           same number of registers.  The [1m-mprolog-function [22moption is on by default if you optimize.

       [1m-mspace[0m
           Try  to make the code as small as possible.  At present, this just turns on the [1m-mep [22mand [1m-mprolog-function[0m
           options.

       [1m-mtda=[4m[22mn[0m
           Put static or global variables whose size is [4mn[24m bytes or less into the tiny data area  that  register  "ep"
           points to.  The tiny data area can hold up to 256 bytes in total (128 bytes for byte references).

       [1m-msda=[4m[22mn[0m
           Put  static  or global variables whose size is [4mn[24m bytes or less into the small data area that register "gp"
           points to.  The small data area can hold up to 64 kilobytes.

       [1m-mzda=[4m[22mn[0m
           Put static or global variables whose size is [4mn[24m bytes or less into the first 32 kilobytes of memory.

       [1m-mv850[0m
           Specify that the target processor is the V850.

       [1m-mv850e3v5[0m
           Specify that the target processor is the V850E3V5.  The preprocessor constant "__v850e3v5__" is defined if
           this option is used.

       [1m-mv850e2v4[0m
           Specify that the target processor is the V850E3V5.  This is an alias for the [1m-mv850e3v5 [22moption.

       [1m-mv850e2v3[0m
           Specify that the target processor is the V850E2V3.  The preprocessor constant "__v850e2v3__" is defined if
           this option is used.

       [1m-mv850e2[0m
           Specify that the target processor is the V850E2.  The preprocessor constant  "__v850e2__"  is  defined  if
           this option is used.

       [1m-mv850e1[0m
           Specify  that the target processor is the V850E1.  The preprocessor constants "__v850e1__" and "__v850e__"
           are defined if this option is used.

       [1m-mv850es[0m
           Specify that the target processor is the V850ES.  This is an alias for the [1m-mv850e1 [22moption.

       [1m-mv850e[0m
           Specify that the target processor is the V850E.  The preprocessor constant "__v850e__" is defined if  this
           option is used.

           If  neither  [1m-mv850 [22mnor [1m-mv850e [22mnor [1m-mv850e1 [22mnor [1m-mv850e2 [22mnor [1m-mv850e2v3 [22mnor [1m-mv850e3v5 [22mare defined then a
           default target processor is chosen and the relevant [1m__v850*__ [22mpreprocessor constant is defined.

           The preprocessor constants "__v850" and "__v851__" are  always  defined,  regardless  of  which  processor
           variant is the target.

       [1m-mdisable-callt[0m
       [1m-mno-disable-callt[0m
           This  option  suppresses generation of the "CALLT" instruction for the v850e, v850e1, v850e2, v850e2v3 and
           v850e3v5 flavors of the v850 architecture.

           This option is enabled by default when the RH850 ABI is in use (see [1m-mrh850-abi[22m), and disabled by  default
           when  the  GCC  ABI is in use.  If "CALLT" instructions are being generated then the C preprocessor symbol
           "__V850_CALLT__" is defined.

       [1m-mrelax[0m
       [1m-mno-relax[0m
           Pass on (or do not pass on) the [1m-mrelax [22mcommand-line option to the assembler.

       [1m-mlong-jumps[0m
       [1m-mno-long-jumps[0m
           Disable (or re-enable) the generation of PC-relative jump instructions.

       [1m-msoft-float[0m
       [1m-mhard-float[0m
           Disable (or re-enable) the generation of hardware  floating  point  instructions.   This  option  is  only
           significant  when  the target architecture is [1mV850E2V3 [22mor higher.  If hardware floating point instructions
           are being generated then  the  C  preprocessor  symbol  "__FPU_OK__"  is  defined,  otherwise  the  symbol
           "__NO_FPU__" is defined.

       [1m-mloop[0m
           Enables  the use of the e3v5 LOOP instruction.  The use of this instruction is not enabled by default when
           the e3v5 architecture is selected because its use is still experimental.

       [1m-mrh850-abi[0m
       [1m-mghs[0m
           Enables support for the RH850 version of the V850 ABI.  This is the default.  With this version of the ABI
           the following rules apply:

           *   Integer sized structures and unions are returned via a memory pointer rather than a register.

           *   Large structures and unions (more than 8 bytes in size) are passed by value.

           *   Functions are aligned to 16-bit boundaries.

           *   The [1m-m8byte-align [22mcommand-line option is supported.

           *   The [1m-mdisable-callt [22mcommand-line option is enabled by default.   The  [1m-mno-disable-callt  [22mcommand-line
               option is not supported.

           When this version of the ABI is enabled the C preprocessor symbol "__V850_RH850_ABI__" is defined.

       [1m-mgcc-abi[0m
           Enables support for the old GCC version of the V850 ABI.  With this version of the ABI the following rules
           apply:

           *   Integer sized structures and unions are returned in register "r10".

           *   Large structures and unions (more than 8 bytes in size) are passed by reference.

           *   Functions are aligned to 32-bit boundaries, unless optimizing for size.

           *   The [1m-m8byte-align [22mcommand-line option is not supported.

           *   The [1m-mdisable-callt [22mcommand-line option is supported but not enabled by default.

           When this version of the ABI is enabled the C preprocessor symbol "__V850_GCC_ABI__" is defined.

       [1m-m8byte-align[0m
       [1m-mno-8byte-align[0m
           Enables  support for "double" and "long long" types to be aligned on 8-byte boundaries.  The default is to
           restrict the alignment of all objects to  at  most  4-bytes.   When  [1m-m8byte-align  [22mis  in  effect  the  C
           preprocessor symbol "__V850_8BYTE_ALIGN__" is defined.

       [1m-mbig-switch[0m
           Generate code suitable for big switch tables.  Use this option only if the assembler/linker complain about
           out of range branches within a switch table.

       [1m-mapp-regs[0m
           This  option  causes  r2  and  r5  to  be used in the code generated by the compiler.  This setting is the
           default.

       [1m-mno-app-regs[0m
           This option causes r2 and r5 to be treated as fixed registers.

       [4mVAX[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the VAX:

       [1m-munix[0m
           Do not output certain jump instructions ("aobleq" and so on) that the Unix assembler for  the  VAX  cannot
           handle across long ranges.

       [1m-mgnu[0m
           Do output those jump instructions, on the assumption that the GNU assembler is being used.

       [1m-mg [22mOutput code for G-format floating-point numbers instead of D-format.

       [1m-mlra[0m
       [1m-mno-lra[0m
           Enable Local Register Allocation.  This is still experimental for the VAX, so by default the compiler uses
           standard reload.

       [4mVisium[24m [4mOptions[0m

       [1m-mdebug[0m
           A  program  which  performs  file  I/O  and is destined to run on an MCM target should be linked with this
           option.  It causes the libraries libc.a and libdebug.a to be linked.  The program should  be  run  on  the
           target under the control of the GDB remote debugging stub.

       [1m-msim[0m
           A  program  which  performs file I/O and is destined to run on the simulator should be linked with option.
           This causes libraries libc.a and libsim.a to be linked.

       [1m-mfpu[0m
       [1m-mhard-float[0m
           Generate code containing floating-point instructions.  This is the default.

       [1m-mno-fpu[0m
       [1m-msoft-float[0m
           Generate code containing library calls for floating-point.

           [1m-msoft-float [22mchanges the calling convention in the output file;  therefore,  it  is  only  useful  if  you
           compile  [4mall[24m of a program with this option.  In particular, you need to compile [4mlibgcc.a[24m, the library that
           comes with GCC, with [1m-msoft-float [22min order for this to work.

       [1m-mcpu=[4m[22mcpu_type[0m
           Set the instruction set, register set, and instruction scheduling parameters for  machine  type  [4mcpu_type[24m.
           Supported values for [4mcpu_type[24m are [1mmcm[22m, [1mgr5 [22mand [1mgr6[22m.

           [1mmcm [22mis a synonym of [1mgr5 [22mpresent for backward compatibility.

           By  default  (unless  configured  otherwise),  GCC  generates  code  for  the  GR5  variant  of the Visium
           architecture.

           With [1m-mcpu=gr6[22m, GCC generates code for the GR6 variant of the Visium architecture.   The  only  difference
           from GR5 code is that the compiler will generate block move instructions.

       [1m-mtune=[4m[22mcpu_type[0m
           Set the instruction scheduling parameters for machine type [4mcpu_type[24m, but do not set the instruction set or
           register set that the option [1m-mcpu=[4m[22mcpu_type[24m would.

       [1m-msv-mode[0m
           Generate code for the supervisor mode, where there are no restrictions on the access to general registers.
           This is the default.

       [1m-muser-mode[0m
           Generate  code  for  the  user  mode, where the access to some general registers is forbidden: on the GR5,
           registers r24 to r31 cannot be accessed in this mode; on the GR6, only registers r29 to r31 are affected.

       [4mVMS[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the VMS implementations:

       [1m-mvms-return-codes[0m
           Return VMS condition codes from "main". The default is to return POSIX-style condition (e.g. error) codes.

       [1m-mdebug-main=[4m[22mprefix[0m
           Flag the first routine whose name starts with [4mprefix[24m as the main routine for the debugger.

       [1m-mmalloc64[0m
           Default to 64-bit memory allocation routines.

       [1m-mpointer-size=[4m[22msize[0m
           Set the default size of pointers. Possible options for [4msize[24m are [1m32 [22mor [1mshort [22mfor 32  bit  pointers,  [1m64  [22mor
           [1mlong  [22mfor  64 bit pointers, and [1mno [22mfor supporting only 32 bit pointers.  The later option disables "pragma
           pointer_size".

       [4mVxWorks[24m [4mOptions[0m

       The options in this section are defined for all VxWorks targets.  Options specific to the target hardware  are
       listed with the other options for that target.

       [1m-mrtp[0m
           GCC  can generate code for both VxWorks kernels and real time processes (RTPs).  This option switches from
           the former to the latter.  It also defines the preprocessor macro "__RTP__".

       [1m-non-static[0m
           Link an RTP executable against shared libraries rather than static libraries.   The  options  [1m-static  [22mand
           [1m-shared [22mcan also be used for RTPs; [1m-static [22mis the default.

       [1m-Bstatic[0m
       [1m-Bdynamic[0m
           These options are passed down to the linker.  They are defined for compatibility with Diab.

       [1m-Xbind-lazy[0m
           Enable  lazy  binding  of  function  calls.   This  option  is equivalent to [1m-Wl,-z,now [22mand is defined for
           compatibility with Diab.

       [1m-Xbind-now[0m
           Disable lazy binding of function calls.  This option is the default and is defined for compatibility  with
           Diab.

       [4mx86[24m [4mOptions[0m

       These [1m-m [22moptions are defined for the x86 family of computers.

       [1m-march=[4m[22mcpu-type[0m
           Generate  instructions  for the machine type [4mcpu-type[24m.  In contrast to [1m-mtune=[4m[22mcpu-type[24m, which merely tunes
           the generated code for the specified [4mcpu-type[24m, [1m-march=[4m[22mcpu-type[24m allows GCC to generate code  that  may  not
           run  at  all  on  processors other than the one indicated.  Specifying [1m-march=[4m[22mcpu-type[24m implies [1m-mtune=[4m[22mcpu-[0m
           [4mtype[24m, except where noted otherwise.

           The choices for [4mcpu-type[24m are:

           [1mnative[0m
               This selects the CPU to generate code for at compilation time by determining the processor type of the
               compiling machine.  Using [1m-march=native [22menables all instruction subsets supported by the local machine
               (hence the result might not run on different machines).  Using [1m-mtune=native [22mproduces  code  optimized
               for the local machine under the constraints of the selected instruction set.

           [1mx86-64[0m
               A generic CPU with 64-bit extensions.

           [1mx86-64-v2[0m
           [1mx86-64-v3[0m
           [1mx86-64-v4[0m
               These  choices  for  [4mcpu-type[24m select the corresponding micro-architecture level from the x86-64 psABI.
               On ABIs other than the x86-64 psABI they select the same CPU features as the  x86-64  psABI  documents
               for the particular micro-architecture level.

               Since these [4mcpu-type[24m values do not have a corresponding [1m-mtune [22msetting, using [1m-march [22mwith these values
               enables generic tuning.  Specific tuning can be enabled using the [1m-mtune=[4m[22mother-cpu-type[24m option with an
               appropriate [4mother-cpu-type[24m value.

           [1mi386[0m
               Original Intel i386 CPU.

           [1mi486[0m
               Intel i486 CPU.  (No scheduling is implemented for this chip.)

           [1mi586[0m
           [1mpentium[0m
               Intel Pentium CPU with no MMX support.

           [1mlakemont[0m
               Intel Lakemont MCU, based on Intel Pentium CPU.

           [1mpentium-mmx[0m
               Intel Pentium MMX CPU, based on Pentium core with MMX instruction set support.

           [1mpentiumpro[0m
               Intel Pentium Pro CPU.

           [1mi686[0m
               When  used  with  [1m-march[22m, the Pentium Pro instruction set is used, so the code runs on all i686 family
               chips.  When used with [1m-mtune[22m, it has the same meaning as [1mgeneric[22m.

           [1mpentium2[0m
               Intel Pentium II CPU, based on Pentium Pro core with MMX and FXSR instruction set support.

           [1mpentium3[0m
           [1mpentium3m[0m
               Intel Pentium III CPU, based on Pentium Pro core with MMX, FXSR and SSE instruction set support.

           [1mpentium-m[0m
               Intel Pentium M; low-power version of Intel Pentium III CPU with MMX, SSE, SSE2 and  FXSR  instruction
               set support.  Used by Centrino notebooks.

           [1mpentium4[0m
           [1mpentium4m[0m
               Intel Pentium 4 CPU with MMX, SSE, SSE2 and FXSR instruction set support.

           [1mprescott[0m
               Improved version of Intel Pentium 4 CPU with MMX, SSE, SSE2, SSE3 and FXSR instruction set support.

           [1mnocona[0m
               Improved  version  of  Intel  Pentium  4  CPU  with  64-bit  extensions, MMX, SSE, SSE2, SSE3 and FXSR
               instruction set support.

           [1mcore2[0m
               Intel Core 2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, CX16, SAHF and FXSR  instruction
               set support.

           [1mnehalem[0m
               Intel  Nehalem  CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, CX16,
               SAHF and FXSR instruction set support.

           [1mwestmere[0m
               Intel Westmere CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,  CX16,
               SAHF, FXSR and PCLMUL instruction set support.

           [1msandybridge[0m
               Intel  Sandy  Bridge  CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,
               CX16, SAHF, FXSR, AVX, XSAVE and PCLMUL instruction set support.

           [1mivybridge[0m
               Intel Ivy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2,  SSE3,  SSSE3,  SSE4.1,  SSE4.2,  POPCNT,
               CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND and F16C instruction set support.

           [1mhaswell[0m
               Intel  Haswell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,
               CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT,  FMA,  MOVBE  and
               HLE instruction set support.

           [1mbroadwell[0m
               Intel  Broadwell  CPU  with  64-bit  extensions,  MOVBE,  MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2,
               POPCNT, CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C,  AVX2,  BMI,  BMI2,  LZCNT,  FMA,
               MOVBE, HLE, RDSEED, ADCX and PREFETCHW instruction set support.

           [1mskylake[0m
               Intel  Skylake CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,
               CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT, FMA, MOVBE,  HLE,
               RDSEED, ADCX, PREFETCHW, AES, CLFLUSHOPT, XSAVEC, XSAVES and SGX instruction set support.

           [1mbonnell[0m
               Intel  Bonnell  CPU  with  64-bit  extensions,  MOVBE,  MMX, SSE, SSE2, SSE3 and SSSE3 instruction set
               support.

           [1msilvermont[0m
               Intel Silvermont CPU with 64-bit extensions, MOVBE, MMX,  SSE,  SSE2,  SSE3,  SSSE3,  SSE4.1,  SSE4.2,
               POPCNT, CX16, SAHF, FXSR, PCLMUL, PREFETCHW and RDRND instruction set support.

           [1mgoldmont[0m
               Intel Goldmont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,
               CX16,  SAHF,  FXSR,  PCLMUL,  PREFETCHW,  RDRND,  AES,  SHA,  RDSEED, XSAVE, XSAVEC, XSAVES, XSAVEOPT,
               CLFLUSHOPT and FSGSBASE instruction set support.

           [1mgoldmont-plus[0m
               Intel Goldmont Plus CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,  SSSE3,  SSE4.1,  SSE4.2,
               POPCNT, CX16, SAHF, FXSR, PCLMUL, PREFETCHW, RDRND, AES, SHA, RDSEED, XSAVE, XSAVEC, XSAVES, XSAVEOPT,
               CLFLUSHOPT, FSGSBASE, PTWRITE, RDPID and SGX instruction set support.

           [1mtremont[0m
               Intel  Tremont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,
               CX16, SAHF, FXSR, PCLMUL, PREFETCHW,  RDRND,  AES,  SHA,  RDSEED,  XSAVE,  XSAVEC,  XSAVES,  XSAVEOPT,
               CLFLUSHOPT,  FSGSBASE,  PTWRITE,  RDPID, SGX, CLWB, GFNI-SSE, MOVDIRI, MOVDIR64B, CLDEMOTE and WAITPKG
               instruction set support.

           [1msierraforest[0m
               Intel Sierra Forest CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,  SSSE3,  SSE4.1,  SSE4.2,
               POPCNT, AES, PREFETCHW, PCLMUL, RDRND, XSAVE, XSAVEC, XSAVES, XSAVEOPT, FSGSBASE, PTWRITE, RDPID, SGX,
               GFNI-SSE,  CLWB,  MOVDIRI, MOVDIR64B, CLDEMOTE, WAITPKG, ADCX, AVX, AVX2, BMI, BMI2, F16C, FMA, LZCNT,
               PCONFIG, PKU, VAES,  VPCLMULQDQ,  SERIALIZE,  HRESET,  KL,  WIDEKL,  AVX-VNNI,  AVXIFMA,  AVXVNNIINT8,
               AVXNECONVERT, CMPCCXADD, ENQCMD and UINTR instruction set support.

           [1mgrandridge[0m
               Intel  Grand  Ridge  CPU  with  64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2,
               POPCNT, AES, PREFETCHW, PCLMUL, RDRND, XSAVE, XSAVEC, XSAVES, XSAVEOPT, FSGSBASE, PTWRITE, RDPID, SGX,
               GFNI-SSE, CLWB, MOVDIRI, MOVDIR64B, CLDEMOTE, WAITPKG, ADCX, AVX, AVX2, BMI, BMI2, F16C,  FMA,  LZCNT,
               PCONFIG,  PKU,  VAES,  VPCLMULQDQ,  SERIALIZE,  HRESET,  KL,  WIDEKL,  AVX-VNNI, AVXIFMA, AVXVNNIINT8,
               AVXNECONVERT, CMPCCXADD, ENQCMD, UINTR and RAOINT instruction set support.

           [1mknl [22mIntel Knight's Landing CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2,
               POPCNT, CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C,  AVX2,  BMI,  BMI2,  LZCNT,  FMA,
               MOVBE, HLE, RDSEED, ADCX, PREFETCHW, AVX512PF, AVX512ER, AVX512F, AVX512CD and PREFETCHWT1 instruction
               set support.

           [1mknm [22mIntel  Knights  Mill  CPU  with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2,
               POPCNT, CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C,  AVX2,  BMI,  BMI2,  LZCNT,  FMA,
               MOVBE,   HLE,  RDSEED,  ADCX,  PREFETCHW,  AVX512PF,  AVX512ER,  AVX512F,  AVX512CD  and  PREFETCHWT1,
               AVX5124VNNIW, AVX5124FMAPS and AVX512VPOPCNTDQ instruction set support.

           [1mskylake-avx512[0m
               Intel Skylake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,  SSE4.1,  SSE4.2,
               POPCNT,  CX16,  SAHF,  FXSR,  AVX,  XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT, FMA,
               MOVBE, HLE, RDSEED, ADCX, PREFETCHW, AES, CLFLUSHOPT, XSAVEC, XSAVES, SGX,  AVX512F,  CLWB,  AVX512VL,
               AVX512BW, AVX512DQ and AVX512CD instruction set support.

           [1mcannonlake[0m
               Intel  Cannonlake  Server  CPU  with  64-bit  extensions,  MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
               SSE4.2, POPCNT, CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI,  BMI2,  LZCNT,
               FMA,  MOVBE,  HLE,  RDSEED,  ADCX, PREFETCHW, AES, CLFLUSHOPT, XSAVEC, XSAVES, SGX, AVX512F, AVX512VL,
               AVX512BW, AVX512DQ, AVX512CD, PKU, AVX512VBMI, AVX512IFMA and SHA instruction set support.

           [1micelake-client[0m
               Intel Icelake Client CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,  SSE4.1,  SSE4.2,
               POPCNT,  CX16,  SAHF,  FXSR,  AVX,  XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT, FMA,
               MOVBE, HLE, RDSEED,  ADCX,  PREFETCHW,  AES,  CLFLUSHOPT,  XSAVEC,  XSAVES,  SGX,  AVX512F,  AVX512VL,
               AVX512BW,  AVX512DQ, AVX512CD, PKU, AVX512VBMI, AVX512IFMA, SHA, AVX512VNNI, GFNI, VAES, AVX512VBMI2 ,
               VPCLMULQDQ, AVX512BITALG, RDPID and AVX512VPOPCNTDQ instruction set support.

           [1micelake-server[0m
               Intel Icelake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,  SSE4.1,  SSE4.2,
               POPCNT,  CX16,  SAHF,  FXSR,  AVX,  XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT, FMA,
               MOVBE, HLE, RDSEED,  ADCX,  PREFETCHW,  AES,  CLFLUSHOPT,  XSAVEC,  XSAVES,  SGX,  AVX512F,  AVX512VL,
               AVX512BW,  AVX512DQ, AVX512CD, PKU, AVX512VBMI, AVX512IFMA, SHA, AVX512VNNI, GFNI, VAES, AVX512VBMI2 ,
               VPCLMULQDQ, AVX512BITALG, RDPID, AVX512VPOPCNTDQ, PCONFIG, WBNOINVD and CLWB instruction set support.

           [1mcascadelake[0m
               Intel Cascadelake CPU with 64-bit extensions, MOVBE, MMX, SSE,  SSE2,  SSE3,  SSSE3,  SSE4.1,  SSE4.2,
               POPCNT,  CX16,  SAHF,  FXSR,  AVX,  XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT, FMA,
               MOVBE, HLE, RDSEED, ADCX, PREFETCHW, AES, CLFLUSHOPT, XSAVEC, XSAVES, SGX,  AVX512F,  CLWB,  AVX512VL,
               AVX512BW, AVX512DQ, AVX512CD and AVX512VNNI instruction set support.

           [1mcooperlake[0m
               Intel  cooperlake  CPU  with  64-bit  extensions,  MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2,
               POPCNT, CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C,  AVX2,  BMI,  BMI2,  LZCNT,  FMA,
               MOVBE,  HLE,  RDSEED,  ADCX, PREFETCHW, AES, CLFLUSHOPT, XSAVEC, XSAVES, SGX, AVX512F, CLWB, AVX512VL,
               AVX512BW, AVX512DQ, AVX512CD, AVX512VNNI and AVX512BF16 instruction set support.

           [1mtigerlake[0m
               Intel Tigerlake CPU with 64-bit extensions, MOVBE,  MMX,  SSE,  SSE2,  SSE3,  SSSE3,  SSE4.1,  SSE4.2,
               POPCNT,  CX16,  SAHF,  FXSR,  AVX,  XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT, FMA,
               MOVBE, HLE, RDSEED,  ADCX,  PREFETCHW,  AES,  CLFLUSHOPT,  XSAVEC,  XSAVES,  SGX,  AVX512F,  AVX512VL,
               AVX512BW,  AVX512DQ,  AVX512CD  PKU, AVX512VBMI, AVX512IFMA, SHA, AVX512VNNI, GFNI, VAES, AVX512VBMI2,
               VPCLMULQDQ, AVX512BITALG, RDPID, AVX512VPOPCNTDQ, MOVDIRI,  MOVDIR64B,  CLWB,  AVX512VP2INTERSECT  and
               KEYLOCKER instruction set support.

           [1msapphirerapids[0m
               Intel  sapphirerapids  CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2,
               POPCNT, CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C,  AVX2,  BMI,  BMI2,  LZCNT,  FMA,
               MOVBE,  HLE,  RDSEED,  ADCX,  PREFETCHW,  AES,  CLFLUSHOPT,  XSAVEC,  XSAVES,  SGX, AVX512F, AVX512VL,
               AVX512BW, AVX512DQ, AVX512CD, PKU, AVX512VBMI, AVX512IFMA, SHA, AVX512VNNI, GFNI,  VAES,  AVX512VBMI2,
               VPCLMULQDQ, AVX512BITALG, RDPID, AVX512VPOPCNTDQ, PCONFIG, WBNOINVD, CLWB, MOVDIRI, MOVDIR64B, ENQCMD,
               CLDEMOTE,  PTWRITE,  WAITPKG,  SERIALIZE,  TSXLDTRK,  UINTR,  AMX-BF16,  AMX-TILE, AMX-INT8, AVX-VNNI,
               AVX512-FP16 and AVX512BF16 instruction set support.

           [1malderlake[0m
               Intel Alderlake CPU with 64-bit extensions, MOVBE,  MMX,  SSE,  SSE2,  SSE3,  SSSE3,  SSE4.1,  SSE4.2,
               POPCNT, AES, PREFETCHW, PCLMUL, RDRND, XSAVE, XSAVEC, XSAVES, XSAVEOPT, FSGSBASE, PTWRITE, RDPID, SGX,
               GFNI-SSE,  CLWB,  MOVDIRI, MOVDIR64B, CLDEMOTE, WAITPKG, ADCX, AVX, AVX2, BMI, BMI2, F16C, FMA, LZCNT,
               PCONFIG, PKU, VAES, VPCLMULQDQ, SERIALIZE, HRESET, KL, WIDEKL and AVX-VNNI instruction set support.

           [1mrocketlake[0m
               Intel Rocketlake CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2,  SSE3,  SSSE3  ,  SSE4.1,  SSE4.2,
               POPCNT,  CX16,  SAHF,  FXSR,  AVX,  XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT, FMA,
               MOVBE, HLE, RDSEED, ADCX, PREFETCHW, AES, CLFLUSHOPT, XSAVEC,  XSAVES,  AVX512F,  AVX512VL,  AVX512BW,
               AVX512DQ,  AVX512CD PKU, AVX512VBMI, AVX512IFMA, SHA, AVX512VNNI, GFNI, VAES, AVX512VBMI2, VPCLMULQDQ,
               AVX512BITALG, RDPID and AVX512VPOPCNTDQ instruction set support.

           [1mgraniterapids[0m
               Intel graniterapids CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,  SSSE3,  SSE4.1,  SSE4.2,
               POPCNT,  CX16,  SAHF,  FXSR,  AVX,  XSAVE, PCLMUL, FSGSBASE, RDRND, F16C, AVX2, BMI, BMI2, LZCNT, FMA,
               MOVBE, HLE, RDSEED,  ADCX,  PREFETCHW,  AES,  CLFLUSHOPT,  XSAVEC,  XSAVES,  SGX,  AVX512F,  AVX512VL,
               AVX512BW,  AVX512DQ,  AVX512CD, PKU, AVX512VBMI, AVX512IFMA, SHA, AVX512VNNI, GFNI, VAES, AVX512VBMI2,
               VPCLMULQDQ, AVX512BITALG, RDPID, AVX512VPOPCNTDQ, PCONFIG, WBNOINVD, CLWB, MOVDIRI, MOVDIR64B, ENQCMD,
               CLDEMOTE, PTWRITE, WAITPKG,  SERIALIZE,  TSXLDTRK,  UINTR,  AMX-BF16,  AMX-TILE,  AMX-INT8,  AVX-VNNI,
               AVX512-FP16, AVX512BF16, AMX-FP16 and PREFETCHI instruction set support.

           [1mgraniterapids-d[0m
               Intel  graniterapids D CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2,
               POPCNT, CX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C,  AVX2,  BMI,  BMI2,  LZCNT,  FMA,
               MOVBE,  HLE,  RDSEED,  ADCX,  PREFETCHW,  AES,  CLFLUSHOPT,  XSAVEC,  XSAVES,  SGX, AVX512F, AVX512VL,
               AVX512BW, AVX512DQ, AVX512CD, PKU, AVX512VBMI, AVX512IFMA, SHA, AVX512VNNI, GFNI,  VAES,  AVX512VBMI2,
               VPCLMULQDQ, AVX512BITALG, RDPID, AVX512VPOPCNTDQ, PCONFIG, WBNOINVD, CLWB, MOVDIRI, MOVDIR64B, ENQCMD,
               CLDEMOTE,  PTWRITE,  WAITPKG,  SERIALIZE,  TSXLDTRK,  UINTR,  AMX-BF16,  AMX-TILE, AMX-INT8, AVX-VNNI,
               AVX512FP16, AVX512BF16, AMX-FP16, PREFETCHI and AMX-COMPLEX instruction set support.

           [1mk6  [22mAMD K6 CPU with MMX instruction set support.

           [1mk6-2[0m
           [1mk6-3[0m
               Improved versions of AMD K6 CPU with MMX and 3DNow! instruction set support.

           [1mathlon[0m
           [1mathlon-tbird[0m
               AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow! and SSE prefetch instructions support.

           [1mathlon-4[0m
           [1mathlon-xp[0m
           [1mathlon-mp[0m
               Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow! and full SSE instruction set support.

           [1mk8[0m
           [1mopteron[0m
           [1mathlon64[0m
           [1mathlon-fx[0m
               Processors based on the AMD K8 core with x86-64 instruction set support, including  the  AMD  Opteron,
               Athlon  64,  and Athlon 64 FX processors.  (This supersets MMX, SSE, SSE2, 3DNow!, enhanced 3DNow! and
               64-bit instruction set extensions.)

           [1mk8-sse3[0m
           [1mopteron-sse3[0m
           [1mathlon64-sse3[0m
               Improved versions of AMD K8 cores with SSE3 instruction set support.

           [1mamdfam10[0m
           [1mbarcelona[0m
               CPUs based on AMD Family 10h cores with x86-64 instruction set support.   (This  supersets  MMX,  SSE,
               SSE2, SSE3, SSE4A, 3DNow!, enhanced 3DNow!, ABM and 64-bit instruction set extensions.)

           [1mbdver1[0m
               CPUs  based  on  AMD Family 15h cores with x86-64 instruction set support.  (This supersets FMA4, AVX,
               XOP, LWP, AES, PCLMUL, CX16, MMX, SSE, SSE2, SSE3,  SSE4A,  SSSE3,  SSE4.1,  SSE4.2,  ABM  and  64-bit
               instruction set extensions.)

           [1mbdver2[0m
               AMD  Family  15h core based CPUs with x86-64 instruction set support.  (This supersets BMI, TBM, F16C,
               FMA, FMA4, AVX, XOP, LWP, AES, PCLMUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1,  SSE4.2,  ABM
               and 64-bit instruction set extensions.)

           [1mbdver3[0m
               AMD  Family  15h core based CPUs with x86-64 instruction set support.  (This supersets BMI, TBM, F16C,
               FMA, FMA4, FSGSBASE, AVX, XOP, LWP, AES, PCLMUL, CX16, MMX, SSE, SSE2,  SSE3,  SSE4A,  SSSE3,  SSE4.1,
               SSE4.2, ABM and 64-bit instruction set extensions.)

           [1mbdver4[0m
               AMD  Family  15h core based CPUs with x86-64 instruction set support.  (This supersets BMI, BMI2, TBM,
               F16C, FMA, FMA4, FSGSBASE, AVX, AVX2, XOP, LWP, AES, PCLMUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A,
               SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.)

           [1mznver1[0m
               AMD Family 17h core based CPUs with x86-64 instruction set support.  (This supersets BMI, BMI2,  F16C,
               FMA, FSGSBASE, AVX, AVX2, ADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCLMUL, CX16, MOVBE, MMX, SSE, SSE2,
               SSE3,  SSE4A,  SSSE3,  SSE4.1, SSE4.2, ABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, and 64-bit instruction
               set extensions.)

           [1mznver2[0m
               AMD Family 17h core based CPUs with x86-64 instruction set support. (This supersets BMI,  BMI2,  CLWB,
               F16C, FMA, FSGSBASE, AVX, AVX2, ADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCLMUL, CX16, MOVBE, MMX, SSE,
               SSE2,  SSE3,  SSE4A,  SSSE3, SSE4.1, SSE4.2, ABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, RDPID, WBNOINVD,
               and 64-bit instruction set extensions.)

           [1mznver3[0m
               AMD Family 19h core based CPUs with x86-64 instruction set support. (This supersets BMI,  BMI2,  CLWB,
               F16C, FMA, FSGSBASE, AVX, AVX2, ADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCLMUL, CX16, MOVBE, MMX, SSE,
               SSE2,  SSE3,  SSE4A,  SSSE3, SSE4.1, SSE4.2, ABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, RDPID, WBNOINVD,
               PKU, VPCLMULQDQ, VAES, and 64-bit instruction set extensions.)

           [1mznver4[0m
               AMD Family 19h core based CPUs with x86-64 instruction set support. (This supersets BMI,  BMI2,  CLWB,
               F16C, FMA, FSGSBASE, AVX, AVX2, ADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCLMUL, CX16, MOVBE, MMX, SSE,
               SSE2,  SSE3,  SSE4A,  SSSE3, SSE4.1, SSE4.2, ABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, RDPID, WBNOINVD,
               PKU, VPCLMULQDQ, VAES,  AVX512F,  AVX512DQ,  AVX512IFMA,  AVX512CD,  AVX512BW,  AVX512VL,  AVX512BF16,
               AVX512VBMI,  AVX512VBMI2,  AVX512VNNI,  AVX512BITALG, AVX512VPOPCNTDQ, GFNI and 64-bit instruction set
               extensions.)

           [1mbtver1[0m
               CPUs based on AMD Family 14h cores with x86-64 instruction set support.   (This  supersets  MMX,  SSE,
               SSE2, SSE3, SSSE3, SSE4A, CX16, ABM and 64-bit instruction set extensions.)

           [1mbtver2[0m
               CPUs  based  on  AMD  Family 16h cores with x86-64 instruction set support. This includes MOVBE, F16C,
               BMI, AVX, PCLMUL, AES, SSE4.2, SSE4.1, CX16, ABM, SSE4A,  SSSE3,  SSE3,  SSE2,  SSE,  MMX  and  64-bit
               instruction set extensions.

           [1mwinchip-c6[0m
               IDT WinChip C6 CPU, dealt in same way as i486 with additional MMX instruction set support.

           [1mwinchip2[0m
               IDT WinChip 2 CPU, dealt in same way as i486 with additional MMX and 3DNow!  instruction set support.

           [1mc3  [22mVIA C3 CPU with MMX and 3DNow! instruction set support.  (No scheduling is implemented for this chip.)

           [1mc3-2[0m
               VIA  C3-2 (Nehemiah/C5XL) CPU with MMX and SSE instruction set support.  (No scheduling is implemented
               for this chip.)

           [1mc7  [22mVIA C7 (Esther) CPU with MMX,  SSE,  SSE2  and  SSE3  instruction  set  support.   (No  scheduling  is
               implemented for this chip.)

           [1msamuel-2[0m
               VIA  Eden Samuel 2 CPU with MMX and 3DNow! instruction set support.  (No scheduling is implemented for
               this chip.)

           [1mnehemiah[0m
               VIA Eden Nehemiah CPU with MMX and SSE instruction set support.  (No  scheduling  is  implemented  for
               this chip.)

           [1mesther[0m
               VIA  Eden  Esther  CPU  with  MMX,  SSE,  SSE2  and  SSE3  instruction set support.  (No scheduling is
               implemented for this chip.)

           [1meden-x2[0m
               VIA Eden X2 CPU with x86-64, MMX, SSE, SSE2 and SSE3  instruction  set  support.   (No  scheduling  is
               implemented for this chip.)

           [1meden-x4[0m
               VIA Eden X4 CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and AVX2 instruction set
               support.  (No scheduling is implemented for this chip.)

           [1mnano[0m
               Generic  VIA  Nano  CPU  with  x86-64,  MMX,  SSE,  SSE2, SSE3 and SSSE3 instruction set support.  (No
               scheduling is implemented for this chip.)

           [1mnano-1000[0m
               VIA Nano 1xxx CPU with x86-64, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support.  (No scheduling
               is implemented for this chip.)

           [1mnano-2000[0m
               VIA Nano 2xxx CPU with x86-64, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support.  (No scheduling
               is implemented for this chip.)

           [1mnano-3000[0m
               VIA Nano 3xxx CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 instruction  set  support.   (No
               scheduling is implemented for this chip.)

           [1mnano-x2[0m
               VIA  Nano  Dual  Core CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 instruction set support.
               (No scheduling is implemented for this chip.)

           [1mnano-x4[0m
               VIA Nano Quad Core CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1  instruction  set  support.
               (No scheduling is implemented for this chip.)

           [1mlujiazui[0m
               ZHAOXIN  lujiazui  CPU  with  x86-64, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, POPCNT,
               AES, PCLMUL, RDRND, XSAVE, XSAVEOPT, FSGSBASE, CX16, ABM, BMI, BMI2, F16C,  FXSR,  RDSEED  instruction
               set support.

           [1mgeode[0m
               AMD Geode embedded processor with MMX and 3DNow! instruction set support.

       [1m-mtune=[4m[22mcpu-type[0m
           Tune  to  [4mcpu-type[24m  everything  applicable  about  the  generated  code, except for the ABI and the set of
           available instructions.  While picking  a  specific  [4mcpu-type[24m  schedules  things  appropriately  for  that
           particular  chip,  the  compiler  does  not  generate any code that cannot run on the default machine type
           unless you use a [1m-march=[4m[22mcpu-type[24m option.  For example, if GCC is  configured  for  i686-pc-linux-gnu  then
           [1m-mtune=pentium4 [22mgenerates code that is tuned for Pentium 4 but still runs on i686 machines.

           The  choices  for  [4mcpu-type[24m  are the same as for [1m-march[22m.  In addition, [1m-mtune [22msupports 2 extra choices for
           [4mcpu-type[24m:

           [1mgeneric[0m
               Produce code optimized for the most common IA32/AMD64/EM64T processors.  If you know the CPU on  which
               your  code  will  run,  then  you  should  use  the  corresponding  [1m-mtune [22mor [1m-march [22moption instead of
               [1m-mtune=generic[22m.  But, if you do not know exactly what CPU users of your application  will  have,  then
               you should use this option.

               As  new  processors  are  deployed  in  the  marketplace,  the  behavior  of  this option will change.
               Therefore, if you upgrade to a newer version of GCC, code generation controlled by  this  option  will
               change to reflect the processors that are most common at the time that version of GCC is released.

               There  is  no [1m-march=generic [22moption because [1m-march [22mindicates the instruction set the compiler can use,
               and there is no generic instruction set applicable to all processors.  In contrast,  [1m-mtune  [22mindicates
               the processor (or, in this case, collection of processors) for which the code is optimized.

           [1mintel[0m
               Produce  code  optimized  for  the most current Intel processors, which are Haswell and Silvermont for
               this version of GCC.  If you know the CPU on which your  code  will  run,  then  you  should  use  the
               corresponding  [1m-mtune  [22mor  [1m-march  [22moption  instead of [1m-mtune=intel[22m.  But, if you want your application
               performs better on both Haswell and Silvermont, then you should use this option.

               As new Intel processors are deployed in the marketplace, the behavior  of  this  option  will  change.
               Therefore,  if  you  upgrade to a newer version of GCC, code generation controlled by this option will
               change to reflect the most current Intel processors at the time that version of GCC is released.

               There is no [1m-march=intel [22moption because [1m-march [22mindicates the instruction set the compiler can use, and
               there is no common instruction set applicable to all processors.  In contrast,  [1m-mtune  [22mindicates  the
               processor (or, in this case, collection of processors) for which the code is optimized.

       [1m-mcpu=[4m[22mcpu-type[0m
           A deprecated synonym for [1m-mtune[22m.

       [1m-mfpmath=[4m[22munit[0m
           Generate floating-point arithmetic for selected unit [4munit[24m.  The choices for [4munit[24m are:

           [1m387 [22mUse  the  standard  387  floating-point  coprocessor  present  on  the  majority of chips and emulated
               otherwise.  Code compiled with this option runs almost everywhere.  The temporary results are computed
               in 80-bit precision instead of the precision specified by the type, resulting  in  slightly  different
               results compared to most of other chips.  See [1m-ffloat-store [22mfor more detailed description.

               This is the default choice for non-Darwin x86-32 targets.

           [1msse [22mUse  scalar  floating-point  instructions present in the SSE instruction set.  This instruction set is
               supported by Pentium III and newer chips, and in the AMD line by Athlon-4, Athlon  XP  and  Athlon  MP
               chips.  The earlier version of the SSE instruction set supports only single-precision arithmetic, thus
               the  double and extended-precision arithmetic are still done using 387.  A later version, present only
               in Pentium 4 and AMD x86-64 chips, supports double-precision arithmetic too.

               For the x86-32 compiler, you must  use  [1m-march=[4m[22mcpu-type[24m,  [1m-msse  [22mor  [1m-msse2  [22mswitches  to  enable  SSE
               extensions  and  make this option effective.  For the x86-64 compiler, these extensions are enabled by
               default.

               The resulting code should be considerably faster in the majority of  cases  and  avoid  the  numerical
               instability  problems  of 387 code, but may break some existing code that expects temporaries to be 80
               bits.

               This is the default choice for the x86-64 compiler, Darwin x86-32 targets, and the default choice  for
               x86-32 targets with the SSE2 instruction set when [1m-ffast-math [22mis enabled.

           [1msse,387[0m
           [1msse+387[0m
           [1mboth[0m
               Attempt  to  utilize  both instruction sets at once.  This effectively doubles the amount of available
               registers, and on chips with separate execution units for 387 and SSE  the  execution  resources  too.
               Use  this  option  with care, as it is still experimental, because the GCC register allocator does not
               model separate functional units well, resulting in unstable performance.

       [1m-masm=[4m[22mdialect[0m
           Output assembly instructions using selected [4mdialect[24m.  Also affects which dialect is used for  basic  "asm"
           and extended "asm". Supported choices (in dialect order) are [1matt [22mor [1mintel[22m. The default is [1matt[22m. Darwin does
           not support [1mintel[22m.

       [1m-mieee-fp[0m
       [1m-mno-ieee-fp[0m
           Control whether or not the compiler uses IEEE floating-point comparisons.  These correctly handle the case
           where the result of a comparison is unordered.

       [1m-m80387[0m
       [1m-mhard-float[0m
           Generate output containing 80387 instructions for floating point.

       [1m-mno-80387[0m
       [1m-msoft-float[0m
           Generate output containing library calls for floating point.

           [1mWarning:  [22mthe  requisite  libraries are not part of GCC.  Normally the facilities of the machine's usual C
           compiler are used, but this cannot be  done  directly  in  cross-compilation.   You  must  make  your  own
           arrangements to provide suitable library functions for cross-compilation.

           On  machines  where  a function returns floating-point results in the 80387 register stack, some floating-
           point opcodes may be emitted even if [1m-msoft-float [22mis used.

       [1m-mno-fp-ret-in-387[0m
           Do not use the FPU registers for return values of functions.

           The usual calling convention has functions return values of types "float" and "double" in an FPU register,
           even if there is no FPU.  The idea is that the operating system should emulate an FPU.

           The option [1m-mno-fp-ret-in-387 [22mcauses such values to be returned in ordinary CPU registers instead.

       [1m-mno-fancy-math-387[0m
           Some 387 emulators do not support the "sin", "cos" and "sqrt" instructions  for  the  387.   Specify  this
           option  to  avoid generating those instructions.  This option is overridden when [1m-march [22mindicates that the
           target CPU always has an FPU and so the instruction does not need emulation.  These instructions  are  not
           generated unless you also use the [1m-funsafe-math-optimizations [22mswitch.

       [1m-malign-double[0m
       [1m-mno-align-double[0m
           Control  whether GCC aligns "double", "long double", and "long long" variables on a two-word boundary or a
           one-word boundary.  Aligning "double" variables on a two-word boundary produces code  that  runs  somewhat
           faster on a Pentium at the expense of more memory.

           On x86-64, [1m-malign-double [22mis enabled by default.

           [1mWarning:  [22mif  you  use  the  [1m-malign-double  [22mswitch,  structures  containing  the  above types are aligned
           differently than the published application binary interface specifications for  the  x86-32  and  are  not
           binary compatible with structures in code compiled without that switch.

       [1m-m96bit-long-double[0m
       [1m-m128bit-long-double[0m
           These  switches control the size of "long double" type.  The x86-32 application binary interface specifies
           the size to be 96 bits, so [1m-m96bit-long-double [22mis the default in 32-bit mode.

           Modern architectures (Pentium and newer) prefer "long double" to be aligned to an 8- or 16-byte  boundary.
           In  arrays  or structures conforming to the ABI, this is not possible.  So specifying [1m-m128bit-long-double[0m
           aligns "long double" to a 16-byte boundary by padding the "long double" with an additional 32-bit zero.

           In the x86-64 compiler, [1m-m128bit-long-double [22mis the default choice as its ABI specifies that "long double"
           is aligned on 16-byte boundary.

           Notice that neither of these options enable any extra precision over the x87 standard of  80  bits  for  a
           "long double".

           [1mWarning:  [22mif  you  override the default value for your target ABI, this changes the size of structures and
           arrays containing "long double" variables, as well  as  modifying  the  function  calling  convention  for
           functions  taking  "long  double".   Hence  they are not binary-compatible with code compiled without that
           switch.

       [1m-mlong-double-64[0m
       [1m-mlong-double-80[0m
       [1m-mlong-double-128[0m
           These switches control the size of "long double" type. A size of 64 bits  makes  the  "long  double"  type
           equivalent  to  the  "double"  type.  This is the default for 32-bit Bionic C library.  A size of 128 bits
           makes the "long double" type equivalent to the "__float128" type. This is the default for 64-bit Bionic  C
           library.

           [1mWarning:  [22mif  you  override the default value for your target ABI, this changes the size of structures and
           arrays containing "long double" variables, as well  as  modifying  the  function  calling  convention  for
           functions  taking  "long  double".   Hence  they are not binary-compatible with code compiled without that
           switch.

       [1m-malign-data=[4m[22mtype[0m
           Control how GCC aligns variables.  Supported values for [4mtype[24m are [1mcompat  [22muses  increased  alignment  value
           compatible  uses  GCC  4.8  and earlier, [1mabi [22muses alignment value as specified by the psABI, and [1mcacheline[0m
           uses increased alignment value to match the cache line size.  [1mcompat [22mis the default.

       [1m-mlarge-data-threshold=[4m[22mthreshold[0m
           When [1m-mcmodel=medium [22mis specified, data objects larger  than  [4mthreshold[24m  are  placed  in  the  large  data
           section.  This value must be the same across all objects linked into the binary, and defaults to 65535.

       [1m-mrtd[0m
           Use  a  different  function-calling  convention,  in which functions that take a fixed number of arguments
           return with the "ret [4mnum[24m" instruction, which  pops  their  arguments  while  returning.   This  saves  one
           instruction in the caller since there is no need to pop the arguments there.

           You  can  specify  that  an  individual  function  is  called with this calling sequence with the function
           attribute "stdcall".  You can also override the [1m-mrtd [22moption by using the function attribute "cdecl".

           [1mWarning: [22mthis calling convention is incompatible with the one normally used on Unix, so you cannot use  it
           if you need to call libraries compiled with the Unix compiler.

           Also,  you  must  provide  function  prototypes  for all functions that take variable numbers of arguments
           (including "printf"); otherwise incorrect code is generated for calls to those functions.

           In addition, seriously incorrect code results if you call a function with too many arguments.   (Normally,
           extra arguments are harmlessly ignored.)

       [1m-mregparm=[4m[22mnum[0m
           Control  how many registers are used to pass integer arguments.  By default, no registers are used to pass
           arguments, and at most 3 registers can be used.  You can control this behavior for a specific function  by
           using the function attribute "regparm".

           [1mWarning:  [22mif you use this switch, and [4mnum[24m is nonzero, then you must build all modules with the same value,
           including any libraries.  This includes the system libraries and startup modules.

       [1m-msseregparm[0m
           Use SSE register passing conventions for float and double arguments and return values.   You  can  control
           this behavior for a specific function by using the function attribute "sseregparm".

           [1mWarning:  [22mif  you  use  this  switch  then  you  must build all modules with the same value, including any
           libraries.  This includes the system libraries and startup modules.

       [1m-mvect8-ret-in-mem[0m
           Return 8-byte vectors in memory instead of MMX registers.  This is the default on VxWorks to match the ABI
           of the Sun Studio compilers until version 12.  [4mOnly[24m use this option if you need to remain compatible  with
           existing code produced by those previous compiler versions or older versions of GCC.

       [1m-mpc32[0m
       [1m-mpc64[0m
       [1m-mpc80[0m
           Set  80387  floating-point  precision to 32, 64 or 80 bits.  When [1m-mpc32 [22mis specified, the significands of
           results of floating-point operations are  rounded  to  24  bits  (single  precision);  [1m-mpc64  [22mrounds  the
           significands  of  results of floating-point operations to 53 bits (double precision) and [1m-mpc80 [22mrounds the
           significands of results of floating-point operations to 64 bits (extended double precision), which is  the
           default.   When  this  option is used, floating-point operations in higher precisions are not available to
           the programmer without setting the FPU control word explicitly.

           Setting the rounding of floating-point operations to less than the default 80 bits can speed some programs
           by 2% or more.  Note that some mathematical libraries assume that  extended-precision  (80-bit)  floating-
           point  operations  are  enabled  by  default;  routines in such libraries could suffer significant loss of
           accuracy, typically through so-called "catastrophic cancellation", when this option is  used  to  set  the
           precision to less than extended precision.

       [1m-mdaz-ftz[0m
           The  flush-to-zero  (FTZ)  and  denormals-are-zero  (DAZ)  flags in the MXCSR register are used to control
           floating-point calculations.SSE and AVX  instructions  including  scalar  and  vector  instructions  could
           benefit  from  enabling  the  FTZ  and DAZ flags when [1m-mdaz-ftz [22mis specified. Don't set FTZ/DAZ flags when
           [1m-mno-daz-ftz [22mor [1m-shared [22mis specified, [1m-mdaz-ftz [22mwill set FTZ/DAZ flags even with [1m-shared[22m.

       [1m-mstackrealign[0m
           Realign the stack at entry.  On the x86, the [1m-mstackrealign [22moption generates  an  alternate  prologue  and
           epilogue  that  realigns  the  run-time  stack  if necessary.  This supports mixing legacy codes that keep
           4-byte stack alignment with modern codes that keep 16-byte stack alignment  for  SSE  compatibility.   See
           also the attribute "force_align_arg_pointer", applicable to individual functions.

       [1m-mpreferred-stack-boundary=[4m[22mnum[0m
           Attempt   to   keep   the   stack   boundary   aligned   to   a   2  raised  to  [4mnum[24m  byte  boundary.   If
           [1m-mpreferred-stack-boundary [22mis not specified, the default is 4 (16 bytes or 128 bits).

           [1mWarning:  [22mWhen  generating  code   for   the   x86-64   architecture   with   SSE   extensions   disabled,
           [1m-mpreferred-stack-boundary=3  [22mcan  be  used  to keep the stack boundary aligned to 8 byte boundary.  Since
           x86-64 ABI require 16 byte stack alignment, this is ABI incompatible and intended to be used in controlled
           environment where stack space is important limitation.  This option leads to  wrong  code  when  functions
           compiled  with  16  byte  stack  alignment  (such  as  functions  from a standard library) are called with
           misaligned stack.  In this case, SSE  instructions  may  lead  to  misaligned  memory  access  traps.   In
           addition,  variable  arguments  are  handled  incorrectly  for 16 byte aligned objects (including x87 long
           double   and   __int128),   leading   to   wrong   results.    You   must   build   all    modules    with
           [1m-mpreferred-stack-boundary=3[22m,  including  any  libraries.   This includes the system libraries and startup
           modules.

       [1m-mincoming-stack-boundary=[4m[22mnum[0m
           Assume the incoming stack is aligned to a 2 raised to [4mnum[24m byte boundary.  If [1m-mincoming-stack-boundary  [22mis
           not specified, the one specified by [1m-mpreferred-stack-boundary [22mis used.

           On Pentium and Pentium Pro, "double" and "long double" values should be aligned to an 8-byte boundary (see
           [1m-malign-double[22m)  or suffer significant run time performance penalties.  On Pentium III, the Streaming SIMD
           Extension (SSE) data type "__m128" may not work properly if it is not 16-byte aligned.

           To ensure proper alignment of this values on the stack, the stack boundary must  be  as  aligned  as  that
           required  by  any value stored on the stack.  Further, every function must be generated such that it keeps
           the stack aligned.  Thus calling a function compiled  with  a  higher  preferred  stack  boundary  from  a
           function  compiled  with  a  lower  preferred  stack  boundary  most  likely  misaligns  the stack.  It is
           recommended that libraries that use callbacks always use the default setting.

           This extra alignment does consume extra stack space, and generally increases  code  size.   Code  that  is
           sensitive  to stack space usage, such as embedded systems and operating system kernels, may want to reduce
           the preferred alignment to [1m-mpreferred-stack-boundary=2[22m.

       [1m-mmmx[0m
       [1m-msse[0m
       [1m-msse2[0m
       [1m-msse3[0m
       [1m-mssse3[0m
       [1m-msse4[0m
       [1m-msse4a[0m
       [1m-msse4.1[0m
       [1m-msse4.2[0m
       [1m-mavx[0m
       [1m-mavx2[0m
       [1m-mavx512f[0m
       [1m-mavx512pf[0m
       [1m-mavx512er[0m
       [1m-mavx512cd[0m
       [1m-mavx512vl[0m
       [1m-mavx512bw[0m
       [1m-mavx512dq[0m
       [1m-mavx512ifma[0m
       [1m-mavx512vbmi[0m
       [1m-msha[0m
       [1m-maes[0m
       [1m-mpclmul[0m
       [1m-mclflushopt[0m
       [1m-mclwb[0m
       [1m-mfsgsbase[0m
       [1m-mptwrite[0m
       [1m-mrdrnd[0m
       [1m-mf16c[0m
       [1m-mfma[0m
       [1m-mpconfig[0m
       [1m-mwbnoinvd[0m
       [1m-mfma4[0m
       [1m-mprfchw[0m
       [1m-mrdpid[0m
       [1m-mprefetchwt1[0m
       [1m-mrdseed[0m
       [1m-msgx[0m
       [1m-mxop[0m
       [1m-mlwp[0m
       [1m-m3dnow[0m
       [1m-m3dnowa[0m
       [1m-mpopcnt[0m
       [1m-mabm[0m
       [1m-madx[0m
       [1m-mbmi[0m
       [1m-mbmi2[0m
       [1m-mlzcnt[0m
       [1m-mfxsr[0m
       [1m-mxsave[0m
       [1m-mxsaveopt[0m
       [1m-mxsavec[0m
       [1m-mxsaves[0m
       [1m-mrtm[0m
       [1m-mhle[0m
       [1m-mtbm[0m
       [1m-mmwaitx[0m
       [1m-mclzero[0m
       [1m-mpku[0m
       [1m-mavx512vbmi2[0m
       [1m-mavx512bf16[0m
       [1m-mavx512fp16[0m
       [1m-mgfni[0m
       [1m-mvaes[0m
       [1m-mwaitpkg[0m
       [1m-mvpclmulqdq[0m
       [1m-mavx512bitalg[0m
       [1m-mmovdiri[0m
       [1m-mmovdir64b[0m
       [1m-menqcmd[0m
       [1m-muintr[0m
       [1m-mtsxldtrk[0m
       [1m-mavx512vpopcntdq[0m
       [1m-mavx512vp2intersect[0m
       [1m-mavx5124fmaps[0m
       [1m-mavx512vnni[0m
       [1m-mavxvnni[0m
       [1m-mavx5124vnniw[0m
       [1m-mcldemote[0m
       [1m-mserialize[0m
       [1m-mamx-tile[0m
       [1m-mamx-int8[0m
       [1m-mamx-bf16[0m
       [1m-mhreset[0m
       [1m-mkl[0m
       [1m-mwidekl[0m
       [1m-mavxifma[0m
       [1m-mavxvnniint8[0m
       [1m-mavxneconvert[0m
       [1m-mcmpccxadd[0m
       [1m-mamx-fp16[0m
       [1m-mprefetchi[0m
       [1m-mraoint[0m
       [1m-mamx-complex[0m
           These switches enable the use of instructions in the MMX, SSE, SSE2, SSE3,  SSSE3,  SSE4,  SSE4A,  SSE4.1,
           SSE4.2,  AVX,  AVX2,  AVX512F,  AVX512PF,  AVX512ER,  AVX512CD,  AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA,
           AVX512VBMI, SHA, AES, PCLMUL, CLFLUSHOPT, CLWB, FSGSBASE, PTWRITE, RDRND, F16C,  FMA,  PCONFIG,  WBNOINVD,
           FMA4,  PREFETCHW,  RDPID,  PREFETCHWT1,  RDSEED, SGX, XOP, LWP, 3DNow!, enhanced 3DNow!, POPCNT, ABM, ADX,
           BMI, BMI2, LZCNT, FXSR, XSAVE, XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU,  AVX512VBMI2,
           GFNI,  VAES,  WAITPKG,  VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16, ENQCMD, AVX512VPOPCNTDQ,
           AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE, UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16,  KL,  WIDEKL,
           AVXVNNI,  AVX512-FP16,  AVXIFMA,  AVXVNNIINT8,  AVXNECONVERT, CMPCCXADD, AMX-FP16, PREFETCHI, RAOINT, AMX-
           COMPLEX or CLDEMOTE extended instruction sets. Each has a corresponding [1m-mno- [22moption  to  disable  use  of
           these instructions.

           These  extensions are also available as built-in functions: see [1mx86 Built-in Functions[22m, for details of the
           functions enabled and disabled by these switches.

           To generate SSE/SSE2 instructions automatically from floating-point code (as opposed to 387 instructions),
           see [1m-mfpmath=sse[22m.

           GCC depresses SSEx instructions when [1m-mavx [22mis used. Instead, it generates  new  AVX  instructions  or  AVX
           equivalence for all SSEx instructions when needed.

           These  options enable GCC to use these extended instructions in generated code, even without [1m-mfpmath=sse[22m.
           Applications that  perform  run-time  CPU  detection  must  compile  separate  files  for  each  supported
           architecture,  using  the  appropriate  flags.   In particular, the file containing the CPU detection code
           should be compiled without these options.

       [1m-mdump-tune-features[0m
           This option instructs GCC to dump the names of the x86 performance tuning features and  default  settings.
           The names can be used in [1m-mtune-ctrl=[4m[22mfeature-list[24m.

       [1m-mtune-ctrl=[4m[22mfeature-list[0m
           This  option  is  used  to do fine grain control of x86 code generation features.  [4mfeature-list[24m is a comma
           separated list of [4mfeature[24m names. See also [1m-mdump-tune-features[22m. When specified, the [4mfeature[24m is  turned  on
           if  it  is  not  preceded with [1m^[22m, otherwise, it is turned off.  [1m-mtune-ctrl=[4m[22mfeature-list[24m is intended to be
           used by GCC developers. Using it may lead to code paths not covered by testing and can potentially  result
           in compiler ICEs or runtime errors.

       [1m-mno-default[0m
           This  option  instructs  GCC  to  turn  off  all  tunable  features. See also [1m-mtune-ctrl=[4m[22mfeature-list[24m and
           [1m-mdump-tune-features[22m.

       [1m-mcld[0m
           This option instructs GCC to emit a "cld" instruction  in  the  prologue  of  functions  that  use  string
           instructions.   String instructions depend on the DF flag to select between autoincrement or autodecrement
           mode.  While the ABI specifies the DF flag to be cleared on function entry, some operating systems violate
           this specification by not clearing the DF flag in their exception dispatchers.  The exception handler  can
           be  invoked  with  the DF flag set, which leads to wrong direction mode when string instructions are used.
           This option can be enabled by default on 32-bit x86 targets  by  configuring  GCC  with  the  [1m--enable-cld[0m
           configure option.  Generation of "cld" instructions can be suppressed with the [1m-mno-cld [22mcompiler option in
           this case.

       [1m-mvzeroupper[0m
           This  option instructs GCC to emit a "vzeroupper" instruction before a transfer of control flow out of the
           function to minimize the AVX  to  SSE  transition  penalty  as  well  as  remove  unnecessary  "zeroupper"
           intrinsics.

       [1m-mprefer-avx128[0m
           This option instructs GCC to use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-
           vectorizer.

       [1m-mprefer-vector-width=[4m[22mopt[0m
           This  option  instructs GCC to use [4mopt[24m-bit vector width in instructions instead of default on the selected
           platform.

       [1m-mmove-max=[4m[22mbits[0m
           This option instructs GCC to set the maximum number of bits can be moved from memory to memory efficiently
           to [4mbits[24m.  The valid [4mbits[24m are 128, 256 and 512.

       [1m-mstore-max=[4m[22mbits[0m
           This option instructs GCC to set the maximum number of bits can be stored to memory efficiently  to  [4mbits[24m.
           The valid [4mbits[24m are 128, 256 and 512.

           [1mnone[0m
               No extra limitations applied to GCC other than defined by the selected platform.

           [1m128 [22mPrefer 128-bit vector width for instructions.

           [1m256 [22mPrefer 256-bit vector width for instructions.

           [1m512 [22mPrefer 512-bit vector width for instructions.

       [1m-mcx16[0m
           This  option  enables  GCC  to generate "CMPXCHG16B" instructions in 64-bit code to implement compare-and-
           exchange operations on 16-byte aligned 128-bit objects.   This  is  useful  for  atomic  updates  of  data
           structures  exceeding  one  machine  word in size.  The compiler uses this instruction to implement [1m__sync[0m
           [1mBuiltins[22m.  However, for [1m__atomic Builtins [22moperating on 128-bit integers, a library call is always used.

       [1m-msahf[0m
           This option enables generation of "SAHF" instructions in 64-bit code.  Early Intel  Pentium  4  CPUs  with
           Intel  64  support, prior to the introduction of Pentium 4 G1 step in December 2005, lacked the "LAHF" and
           "SAHF" instructions which are supported by AMD64.  These are load and  store  instructions,  respectively,
           for  certain status flags.  In 64-bit mode, the "SAHF" instruction is used to optimize "fmod", "drem", and
           "remainder" built-in functions; see [1mOther Builtins [22mfor details.

       [1m-mmovbe[0m
           This  option  enables  use   of   the   "movbe"   instruction   to   implement   "__builtin_bswap32"   and
           "__builtin_bswap64".

       [1m-mshstk[0m
           The  [1m-mshstk  [22moption  enables shadow stack built-in functions from x86 Control-flow Enforcement Technology
           (CET).

       [1m-mcrc32[0m
           This   option   enables    built-in    functions    "__builtin_ia32_crc32qi",    "__builtin_ia32_crc32hi",
           "__builtin_ia32_crc32si" and "__builtin_ia32_crc32di" to generate the "crc32" machine instruction.

       [1m-mmwait[0m
           This  option  enables  built-in functions "__builtin_ia32_monitor", and "__builtin_ia32_mwait" to generate
           the "monitor" and "mwait" machine instructions.

       [1m-mrecip[0m
           This option enables use of "RCPSS" and "RSQRTSS" instructions (and their vectorized variants  "RCPPS"  and
           "RSQRTPS")  with  an  additional Newton-Raphson step to increase precision instead of "DIVSS" and "SQRTSS"
           (and their vectorized variants) for single-precision floating-point  arguments.   These  instructions  are
           generated   only   when  [1m-funsafe-math-optimizations  [22mis  enabled  together  with  [1m-ffinite-math-only  [22mand
           [1m-fno-trapping-math[22m.  Note that while the throughput of the sequence is higher than the throughput  of  the
           non-reciprocal  instruction,  the  precision  of  the  sequence  can be decreased by up to 2 ulp (i.e. the
           inverse of 1.0 equals 0.99999994).

           Note that GCC implements "1.0f/sqrtf([4mx[24m)" in terms of "RSQRTSS" (or "RSQRTPS") already with [1m-ffast-math [22m(or
           the above option combination), and doesn't need [1m-mrecip[22m.

           Also note that GCC emits the above sequence with additional Newton-Raphson  step  for  vectorized  single-
           float  division  and  vectorized  sqrtf([4mx[24m) already with [1m-ffast-math [22m(or the above option combination), and
           doesn't need [1m-mrecip[22m.

       [1m-mrecip=[4m[22mopt[0m
           This option controls which reciprocal estimate instructions may be used.  [4mopt[24m is a comma-separated list of
           options, which may be preceded by a [1m! [22mto invert the option:

           [1mall [22mEnable all estimate instructions.

           [1mdefault[0m
               Enable the default instructions, equivalent to [1m-mrecip[22m.

           [1mnone[0m
               Disable all estimate instructions, equivalent to [1m-mno-recip[22m.

           [1mdiv [22mEnable the approximation for scalar division.

           [1mvec-div[0m
               Enable the approximation for vectorized division.

           [1msqrt[0m
               Enable the approximation for scalar square root.

           [1mvec-sqrt[0m
               Enable the approximation for vectorized square root.

           So, for example, [1m-mrecip=all,!sqrt [22menables all of the reciprocal approximations, except for square root.

       [1m-mveclibabi=[4m[22mtype[0m
           Specifies the ABI type to use for vectorizing intrinsics using an external library.  Supported values  for
           [4mtype[24m are [1msvml [22mfor the Intel short vector math library and [1macml [22mfor the AMD math core library.  To use this
           option, both [1m-ftree-vectorize [22mand [1m-funsafe-math-optimizations [22mhave to be enabled, and an SVML or ACML ABI-
           compatible library must be specified at link time.

           GCC  currently  emits  calls  to "vmldExp2", "vmldLn2", "vmldLog102", "vmldPow2", "vmldTanh2", "vmldTan2",
           "vmldAtan2", "vmldAtanh2", "vmldCbrt2", "vmldSinh2", "vmldSin2", "vmldAsinh2",  "vmldAsin2",  "vmldCosh2",
           "vmldCos2",  "vmldAcosh2",  "vmldAcos2",  "vmlsExp4",  "vmlsLn4",  "vmlsLog104",  "vmlsPow4", "vmlsTanh4",
           "vmlsTan4", "vmlsAtan4", "vmlsAtanh4", "vmlsCbrt4", "vmlsSinh4",  "vmlsSin4",  "vmlsAsinh4",  "vmlsAsin4",
           "vmlsCosh4",   "vmlsCos4",   "vmlsAcosh4"   and   "vmlsAcos4"   for   corresponding   function  type  when
           [1m-mveclibabi=svml [22mis used,  and  "__vrd2_sin",  "__vrd2_cos",  "__vrd2_exp",  "__vrd2_log",  "__vrd2_log2",
           "__vrd2_log10",    "__vrs4_sinf",    "__vrs4_cosf",    "__vrs4_expf",    "__vrs4_logf",    "__vrs4_log2f",
           "__vrs4_log10f" and "__vrs4_powf" for the corresponding function type when [1m-mveclibabi=acml [22mis used.

       [1m-mabi=[4m[22mname[0m
           Generate code for the specified calling convention.  Permissible values are  [1msysv  [22mfor  the  ABI  used  on
           GNU/Linux  and  other systems, and [1mms [22mfor the Microsoft ABI.  The default is to use the Microsoft ABI when
           targeting Microsoft Windows and the SysV ABI on all other systems.  You  can  control  this  behavior  for
           specific functions by using the function attributes "ms_abi" and "sysv_abi".

       [1m-mforce-indirect-call[0m
           Force  all  calls  to  functions  to be indirect. This is useful when using Intel Processor Trace where it
           generates more precise timing information for function calls.

       [1m-mmanual-endbr[0m
           Insert ENDBR instruction at function entry only via the "cf_check" function attribute. This is useful when
           used with the option [1m-fcf-protection=branch [22mto control ENDBR insertion at the function entry.

       [1m-mcet-switch[0m
           By default, CET instrumentation is turned off on switch statements that use  a  jump  table  and  indirect
           branch  track  is  disabled.   Since jump tables are stored in read-only memory, this does not result in a
           direct loss of hardening.  But if the jump table index is attacker-controlled, the indirect jump  may  not
           be  constrained  by  CET.   This  option  turns on CET instrumentation to enable indirect branch track for
           switch statements with jump tables which leads to the jump targets reachable via any indirect jumps.

       [1m-mcall-ms2sysv-xlogues[0m
           Due to differences in 64-bit ABIs, any Microsoft ABI function that calls a  System  V  ABI  function  must
           consider RSI, RDI and XMM6-15 as clobbered.  By default, the code for saving and restoring these registers
           is  emitted  inline,  resulting  in  fairly lengthy prologues and epilogues.  Using [1m-mcall-ms2sysv-xlogues[0m
           emits prologues and epilogues that use stubs in the static portion of libgcc to perform  these  saves  and
           restores, thus reducing function size at the cost of a few extra instructions.

       [1m-mtls-dialect=[4m[22mtype[0m
           Generate  code  to access thread-local storage using the [1mgnu [22mor [1mgnu2 [22mconventions.  [1mgnu [22mis the conservative
           default; [1mgnu2 [22mis more efficient, but it  may  add  compile-  and  run-time  requirements  that  cannot  be
           satisfied on all systems.

       [1m-mpush-args[0m
       [1m-mno-push-args[0m
           Use  PUSH  operations  to  store  outgoing parameters.  This method is shorter and usually equally fast as
           method using SUB/MOV operations and is enabled by  default.   In  some  cases  disabling  it  may  improve
           performance because of improved scheduling and reduced dependencies.

       [1m-maccumulate-outgoing-args[0m
           If  enabled,  the  maximum  amount  of  space  required for outgoing arguments is computed in the function
           prologue.  This is faster on most modern CPUs because of reduced  dependencies,  improved  scheduling  and
           reduced  stack  usage  when  the  preferred  stack  boundary is not equal to 2.  The drawback is a notable
           increase in code size.  This switch implies [1m-mno-push-args[22m.

       [1m-mthreads[0m
           Support thread-safe exception handling on MinGW.  Programs that rely  on  thread-safe  exception  handling
           must  compile  and link all code with the [1m-mthreads [22moption.  When compiling, [1m-mthreads [22mdefines [1m-D_MT[22m; when
           linking, it links in a special thread helper library [1m-lmingwthrd [22mwhich  cleans  up  per-thread  exception-
           handling data.

       [1m-mms-bitfields[0m
       [1m-mno-ms-bitfields[0m
           Enable/disable bit-field layout compatible with the native Microsoft Windows compiler.

           If  "packed"  is used on a structure, or if bit-fields are used, it may be that the Microsoft ABI lays out
           the structure differently than the way GCC normally does.  Particularly when moving  packed  data  between
           functions  compiled  with  GCC and the native Microsoft compiler (either via function call or as data in a
           file), it may be necessary to access either format.

           This option is enabled by default for Microsoft Windows targets.  This behavior  can  also  be  controlled
           locally  by use of variable or type attributes.  For more information, see [1mx86 Variable Attributes [22mand [1mx86[0m
           [1mType Attributes[22m.

           The Microsoft structure layout algorithm is fairly simple with the exception  of  the  bit-field  packing.
           The  padding  and  alignment  of members of structures and whether a bit-field can straddle a storage-unit
           boundary are determine by these rules:

           1. Structure members are stored sequentially in the order in which they are
               declared: the first member has the lowest memory address and the last member the highest.

           2. Every data object has an alignment requirement.  The alignment requirement
               for all data except structures, unions, and arrays is either the size of the  object  or  the  current
               packing  size (specified with either the "aligned" attribute or the "pack" pragma), whichever is less.
               For structures, unions, and arrays, the alignment requirement is the largest alignment requirement  of
               its members.  Every object is allocated an offset so that:

                       offset % alignment_requirement == 0

           3. Adjacent bit-fields are packed into the same 1-, 2-, or 4-byte allocation
               unit  if  the  integral  types  are  the  same  size  and  if the next bit-field fits into the current
               allocation unit without crossing the boundary imposed by the common alignment requirements of the bit-
               fields.

           MSVC interprets zero-length bit-fields in the following ways:

           1. If a zero-length bit-field is inserted between two bit-fields that
               are normally coalesced, the bit-fields are not coalesced.

               For example:

                       struct
                        {
                          unsigned long bf_1 : 12;
                          unsigned long : 0;
                          unsigned long bf_2 : 12;
                        } t1;

               The size of "t1" is 8 bytes with  the  zero-length  bit-field.   If  the  zero-length  bit-field  were
               removed, "t1"'s size would be 4 bytes.

           2. If a zero-length bit-field is inserted after a bit-field, "foo", and the
               alignment  of  the  zero-length  bit-field is greater than the member that follows it, "bar", "bar" is
               aligned as the type of the zero-length bit-field.

               For example:

                       struct
                        {
                          char foo : 4;
                          short : 0;
                          char bar;
                        } t2;

                       struct
                        {
                          char foo : 4;
                          short : 0;
                          double bar;
                        } t3;

               For "t2", "bar" is placed at offset 2, rather than offset 1.  Accordingly, the size of "t2" is 4.  For
               "t3", the zero-length bit-field does not affect the alignment of "bar" or, as a result,  the  size  of
               the structure.

               Taking this into account, it is important to note the following:

               1. If a zero-length bit-field follows a normal bit-field, the type of the
                   zero-length  bit-field may affect the alignment of the structure as whole. For example, "t2" has a
                   size of 4 bytes, since the zero-length bit-field follows a normal bit-field, and is of type short.

               2. Even if a zero-length bit-field is not followed by a normal bit-field, it may
                   still affect the alignment of the structure:

                           struct
                            {
                              char foo : 6;
                              long : 0;
                            } t4;

                   Here, "t4" takes up 4 bytes.

           3. Zero-length bit-fields following non-bit-field members are ignored:
                       struct
                        {
                          char foo;
                          long : 0;
                          char bar;
                        } t5;

               Here, "t5" takes up 2 bytes.

       [1m-mno-align-stringops[0m
           Do not align the destination of inlined string operations.  This switch reduces  code  size  and  improves
           performance in case the destination is already aligned, but GCC doesn't know about it.

       [1m-minline-all-stringops[0m
           By  default  GCC  inlines  string  operations  only when the destination is known to be aligned to least a
           4-byte boundary.  This enables more inlining and increases code size, but may improve performance of  code
           that  depends  on  fast  "memcpy"  and "memset" for short lengths.  The option enables inline expansion of
           "strlen" for all pointer alignments.

       [1m-minline-stringops-dynamically[0m
           For string operations of unknown size, use run-time checks with inline code for small blocks and a library
           call for large blocks.

       [1m-mstringop-strategy=[4m[22malg[0m
           Override the internal decision  heuristic  for  the  particular  algorithm  to  use  for  inlining  string
           operations.  The allowed values for [4malg[24m are:

           [1mrep_byte[0m
           [1mrep_4byte[0m
           [1mrep_8byte[0m
               Expand using i386 "rep" prefix of the specified size.

           [1mbyte_loop[0m
           [1mloop[0m
           [1munrolled_loop[0m
               Expand into an inline loop.

           [1mlibcall[0m
               Always use a library call.

       [1m-mmemcpy-strategy=[4m[22mstrategy[0m
           Override the internal decision heuristic to decide if "__builtin_memcpy" should be inlined and what inline
           algorithm to use when the expected size of the copy operation is known. [4mstrategy[24m is a comma-separated list
           of  [4malg[24m:[4mmax_size[24m:[4mdest_align[24m triplets.  [4malg[24m is specified in [1m-mstringop-strategy[22m, [4mmax_size[24m specifies the max
           byte size with which inline algorithm [4malg[24m is allowed.  For the last triplet, the [4mmax_size[24m must be -1.  The
           [4mmax_size[24m of the triplets in the list must be specified in increasing order.  The minimal byte size for [4malg[0m
           is 0 for the first triplet and "[4mmax_size[24m + 1" of the preceding range.

       [1m-mmemset-strategy=[4m[22mstrategy[0m
           The option is similar to [1m-mmemcpy-strategy= [22mexcept that it is to control "__builtin_memset" expansion.

       [1m-momit-leaf-frame-pointer[0m
           Don't  keep the frame pointer in a register for leaf functions.  This avoids the instructions to save, set
           up, and restore frame pointers and makes an extra  register  available  in  leaf  functions.   The  option
           [1m-fomit-leaf-frame-pointer [22mremoves the frame pointer for leaf functions, which might make debugging harder.

       [1m-mtls-direct-seg-refs[0m
       [1m-mno-tls-direct-seg-refs[0m
           Controls whether TLS variables may be accessed with offsets from the TLS segment register (%gs for 32-bit,
           %fs  for  64-bit), or whether the thread base pointer must be added.  Whether or not this is valid depends
           on the operating system, and whether it maps the segment to cover the entire TLS area.

           For systems that use the GNU C Library, the default is on.

       [1m-msse2avx[0m
       [1m-mno-sse2avx[0m
           Specify that the assembler should encode SSE instructions with VEX prefix.  The option [1m-mavx [22mturns this on
           by default.

       [1m-mfentry[0m
       [1m-mno-fentry[0m
           If profiling is active ([1m-pg[22m),  put  the  profiling  counter  call  before  the  prologue.   Note:  On  x86
           architectures the attribute "ms_hook_prologue" isn't possible at the moment for [1m-mfentry [22mand [1m-pg[22m.

       [1m-mrecord-mcount[0m
       [1m-mno-record-mcount[0m
           If  profiling  is  active  ([1m-pg[22m), generate a __mcount_loc section that contains pointers to each profiling
           call. This is useful for automatically patching and out calls.

       [1m-mnop-mcount[0m
       [1m-mno-nop-mcount[0m
           If profiling is active ([1m-pg[22m), generate the calls to the profiling functions as NOPs. This is  useful  when
           they should be patched in later dynamically. This is likely only useful together with [1m-mrecord-mcount[22m.

       [1m-minstrument-return=[4m[22mtype[0m
           Instrument function exit in -pg -mfentry instrumented functions with call to specified function. This only
           instruments  true returns ending with ret, but not sibling calls ending with jump. Valid types are [4mnone[24m to
           not instrument, [4mcall[24m to generate a call to __return__, or [4mnop5[24m to generate a 5 byte nop.

       [1m-mrecord-return[0m
       [1m-mno-record-return[0m
           Generate a __return_loc section pointing to all return instrumentation code.

       [1m-mfentry-name=[4m[22mname[0m
           Set name of __fentry__ symbol called at function entry for -pg -mfentry functions.

       [1m-mfentry-section=[4m[22mname[0m
           Set name of section to record -mrecord-mcount calls (default __mcount_loc).

       [1m-mskip-rax-setup[0m
       [1m-mno-skip-rax-setup[0m
           When generating code for the x86-64 architecture with SSE extensions  disabled,  [1m-mskip-rax-setup  [22mcan  be
           used to skip setting up RAX register when there are no variable arguments passed in vector registers.

           [1mWarning:  [22mSince  RAX register is used to avoid unnecessarily saving vector registers on stack when passing
           variable arguments, the impacts of this option are callees may waste some stack space, misbehave  or  jump
           to a random location.  GCC 4.4 or newer don't have those issues, regardless the RAX register value.

       [1m-m8bit-idiv[0m
       [1m-mno-8bit-idiv[0m
           On  some  processors,  like  Intel  Atom,  8-bit unsigned integer divide is much faster than 32-bit/64-bit
           integer divide.  This option generates a run-time check.  If both dividend and divisor are within range of
           0 to 255, 8-bit unsigned integer divide is used instead of 32-bit/64-bit integer divide.

       [1m-mavx256-split-unaligned-load[0m
       [1m-mavx256-split-unaligned-store[0m
           Split 32-byte AVX unaligned load and store.

       [1m-mstack-protector-guard=[4m[22mguard[0m
       [1m-mstack-protector-guard-reg=[4m[22mreg[0m
       [1m-mstack-protector-guard-offset=[4m[22moffset[0m
           Generate stack protection code using canary at [4mguard[24m.  Supported locations are [1mglobal [22mfor global canary or
           [1mtls  [22mfor  per-thread  canary  in  the  TLS  block  (the  default).   This  option  has  effect  only  when
           [1m-fstack-protector [22mor [1m-fstack-protector-all [22mis specified.

           With       the      latter      choice      the      options      [1m-mstack-protector-guard-reg=[4m[22mreg[24m      and
           [1m-mstack-protector-guard-offset=[4m[22moffset[24m furthermore specify which segment register (%fs or %gs)  to  use  as
           base register for reading the canary, and from what offset from that base register.  The default for those
           is as specified in the relevant ABI.

       [1m-mgeneral-regs-only[0m
           Generate  code  that  uses  only  the  general-purpose  registers.   This prevents the compiler from using
           floating-point, vector, mask and bound registers.

       [1m-mrelax-cmpxchg-loop[0m
           When emitting a compare-and-swap  loop  for  [1m__sync  Builtins  [22mand  [1m__atomic  Builtins  [22mlacking  a  native
           instruction,  optimize  for  the  highly  contended  case  by  issuing an atomic load before the "CMPXCHG"
           instruction, and using the "PAUSE" instruction to save CPU power when restarting the loop.

       [1m-mindirect-branch=[4m[22mchoice[0m
           Convert indirect call and jump with [4mchoice[24m.  The default is [1mkeep[22m,  which  keeps  indirect  call  and  jump
           unmodified.   [1mthunk  [22mconverts  indirect  call  and  jump  to call and return thunk.  [1mthunk-inline [22mconverts
           indirect call and jump to inlined call and return thunk.  [1mthunk-extern [22mconverts indirect call and jump  to
           external  call  and  return thunk provided in a separate object file.  You can control this behavior for a
           specific function by using the function attribute "indirect_branch".

           Note that [1m-mcmodel=large [22mis incompatible with [1m-mindirect-branch=thunk  [22mand  [1m-mindirect-branch=thunk-extern[0m
           since the thunk function may not be reachable in the large code model.

           Note  that  [1m-mindirect-branch=thunk-extern  [22mis  compatible  with [1m-fcf-protection=branch [22msince the external
           thunk can be made to enable control-flow check.

       [1m-mfunction-return=[4m[22mchoice[0m
           Convert function return with [4mchoice[24m.  The default is [1mkeep[22m, which keeps function return unmodified.   [1mthunk[0m
           converts  function return to call and return thunk.  [1mthunk-inline [22mconverts function return to inlined call
           and return thunk.  [1mthunk-extern [22mconverts function return to external call and return thunk provided  in  a
           separate  object  file.   You  can  control  this  behavior  for a specific function by using the function
           attribute "function_return".

           Note that [1m-mindirect-return=thunk-extern [22mis compatible  with  [1m-fcf-protection=branch  [22msince  the  external
           thunk can be made to enable control-flow check.

           Note  that  [1m-mcmodel=large [22mis incompatible with [1m-mfunction-return=thunk [22mand [1m-mfunction-return=thunk-extern[0m
           since the thunk function may not be reachable in the large code model.

       [1m-mindirect-branch-register[0m
           Force indirect call and jump via register.

       [1m-mharden-sls=[4m[22mchoice[0m
           Generate code to mitigate against straight line speculation (SLS) with [4mchoice[24m.  The default is [1mnone  [22mwhich
           disables  all SLS hardening.  [1mreturn [22menables SLS hardening for function returns.  [1mindirect-jmp [22menables SLS
           hardening for indirect jumps.  [1mall [22menables all SLS hardening.

       [1m-mindirect-branch-cs-prefix[0m
           Add CS prefix to call and jmp to indirect thunk with branch target in r8-r15 registers so  that  the  call
           and  jmp  instruction length is 6 bytes to allow them to be replaced with [1mlfence; call *%r8-r15 [22mor [1mlfence;[0m
           [1mjmp *%r8-r15 [22mat run-time.

       These [1m-m [22mswitches are supported in addition to the above on x86-64 processors in 64-bit environments.

       [1m-m32[0m
       [1m-m64[0m
       [1m-mx32[0m
       [1m-m16[0m
       [1m-miamcu[0m
           Generate code for a 16-bit, 32-bit or 64-bit environment.  The [1m-m32 [22moption sets "int", "long", and pointer
           types to 32 bits, and generates code that runs in 32-bit mode.

           The [1m-m64 [22moption sets "int" to 32 bits and "long" and pointer types to 64 bits, and generates code for  the
           x86-64  architecture.   For  Darwin  only the [1m-m64 [22moption also turns off the [1m-fno-pic [22mand [1m-mdynamic-no-pic[0m
           options.

           The [1m-mx32 [22moption sets "int", "long", and pointer types to 32 bits,  and  generates  code  for  the  x86-64
           architecture.

           The [1m-m16 [22moption is the same as [1m-m32[22m, except for that it outputs the ".code16gcc" assembly directive at the
           beginning of the assembly output so that the binary can run in 16-bit mode.

           The  [1m-miamcu  [22moption  generates code which conforms to Intel MCU psABI.  It requires the [1m-m32 [22moption to be
           turned on.

       [1m-mno-red-zone[0m
           Do not use a so-called "red zone" for x86-64 code.  The red zone is mandated by the x86-64 ABI;  it  is  a
           128-byte  area  beyond  the  location  of  the  stack  pointer that is not modified by signal or interrupt
           handlers and therefore can be used for temporary data without  adjusting  the  stack  pointer.   The  flag
           [1m-mno-red-zone [22mdisables this red zone.

       [1m-mcmodel=small[0m
           Generate  code  for  the small code model: the program and its symbols must be linked in the lower 2 GB of
           the address space.  Pointers are 64 bits.  Programs can be statically or dynamically linked.  This is  the
           default code model.

       [1m-mcmodel=kernel[0m
           Generate code for the kernel code model.  The kernel runs in the negative 2 GB of the address space.  This
           model has to be used for Linux kernel code.

       [1m-mcmodel=medium[0m
           Generate  code  for the medium model: the program is linked in the lower 2 GB of the address space.  Small
           symbols are also placed there.  Symbols with sizes larger than [1m-mlarge-data-threshold [22mare put  into  large
           data or BSS sections and can be located above 2GB.  Programs can be statically or dynamically linked.

       [1m-mcmodel=large[0m
           Generate code for the large model.  This model makes no assumptions about addresses and sizes of sections.

       [1m-maddress-mode=long[0m
           Generate  code  for long address mode.  This is only supported for 64-bit and x32 environments.  It is the
           default address mode for 64-bit environments.

       [1m-maddress-mode=short[0m
           Generate code for short address mode.  This is only supported for 32-bit and x32 environments.  It is  the
           default address mode for 32-bit and x32 environments.

       [1m-mneeded[0m
       [1m-mno-needed[0m
           Emit  GNU_PROPERTY_X86_ISA_1_NEEDED  GNU  property for Linux target to indicate the micro-architecture ISA
           level required to execute the binary.

       [1m-mno-direct-extern-access[0m
           Without [1m-fpic [22mnor [1m-fPIC[22m, always use the GOT pointer to access external  symbols.   With  [1m-fpic  [22mor  [1m-fPIC[22m,
           treat access to protected symbols as local symbols.  The default is [1m-mdirect-extern-access[22m.

           [1mWarning:   [22mshared   libraries   compiled  with  [1m-mno-direct-extern-access  [22mand  executable  compiled  with
           [1m-mdirect-extern-access [22mmay not be binary compatible if protected symbols are used in shared libraries  and
           executable.

       [1m-munroll-only-small-loops[0m
           Controls conservative small loop unrolling. It is default enabled by O2, and unrolls loop with less than 4
           insns  by  1  time.  Explicit  -f[no-]unroll-[all-]loops  would  disable this flag to avoid any unintended
           unrolling behavior that user does not want.

       [1m-mlam=[4m[22mchoice[0m
           LAM(linear-address masking) allows special bits in the pointer to be used for  metadata.  The  default  is
           [1mnone[22m.  With  [1mu48[22m,  pointer  bits  in  positions  62:48 can be used for metadata; With [1mu57[22m, pointer bits in
           positions 62:57 can be used for metadata.

       [4mx86[24m [4mWindows[24m [4mOptions[0m

       These additional options are available for Microsoft Windows targets:

       [1m-mconsole[0m
           This option specifies that a console application is to be generated, by instructing the linker to set  the
           PE header subsystem type required for console applications.  This option is available for Cygwin and MinGW
           targets and is enabled by default on those targets.

       [1m-mdll[0m
           This  option  is  available  for  Cygwin  and  MinGW  targets.   It  specifies that a DLL---a dynamic link
           library---is to be generated, enabling the selection of the required  runtime  startup  object  and  entry
           point.

       [1m-mnop-fun-dllimport[0m
           This option is available for Cygwin and MinGW targets.  It specifies that the "dllimport" attribute should
           be ignored.

       [1m-mthreads[0m
           This option is available for MinGW targets. It specifies that MinGW-specific thread support is to be used.

       [1m-municode[0m
           This  option  is  available  for  MinGW-w64  targets.   It  causes  the "UNICODE" preprocessor macro to be
           predefined, and chooses Unicode-capable runtime startup code.

       [1m-mwin32[0m
           This option is available for Cygwin and MinGW targets.  It specifies that the  typical  Microsoft  Windows
           predefined  macros  are  to  be  set  in  the  pre-processor, but does not influence the choice of runtime
           library/startup code.

       [1m-mwindows[0m
           This option is available for Cygwin and MinGW targets.  It specifies that  a  GUI  application  is  to  be
           generated by instructing the linker to set the PE header subsystem type appropriately.

       [1m-fno-set-stack-executable[0m
           This  option  is  available for MinGW targets. It specifies that the executable flag for the stack used by
           nested functions isn't set. This is necessary for binaries running in kernel mode of Microsoft Windows, as
           there the User32 API, which is used to set executable privileges, isn't available.

       [1m-fwritable-relocated-rdata[0m
           This option is available for MinGW and Cygwin targets.  It  specifies  that  relocated-data  in  read-only
           section  is  put  into  the  ".data"  section.   This  is  a  necessary  for older runtimes not supporting
           modification of ".rdata" sections for pseudo-relocation.

       [1m-mpe-aligned-commons[0m
           This option is available for Cygwin and MinGW targets.  It specifies that the GNU extension to the PE file
           format that permits the correct alignment of COMMON variables should be used when generating code.  It  is
           enabled  by  default  if  GCC  detects  that  the target assembler found during configuration supports the
           feature.

       See also under [1mx86 Options [22mfor standard options.

       [4mXstormy16[24m [4mOptions[0m

       These options are defined for Xstormy16:

       [1m-msim[0m
           Choose startup files and linker script suitable for the simulator.

       [4mXtensa[24m [4mOptions[0m

       These options are supported for Xtensa targets:

       [1m-mconst16[0m
       [1m-mno-const16[0m
           Enable or disable use of "CONST16" instructions for loading constant values.  The "CONST16" instruction is
           currently not a standard option from Tensilica.  When enabled, "CONST16" instructions are always  used  in
           place  of the standard "L32R" instructions.  The use of "CONST16" is enabled by default only if the "L32R"
           instruction is not available.

       [1m-mfused-madd[0m
       [1m-mno-fused-madd[0m
           Enable or disable use of fused multiply/add  and  multiply/subtract  instructions  in  the  floating-point
           option.   This  has  no  effect  if  the  floating-point  option  is  not  also  enabled.  Disabling fused
           multiply/add and multiply/subtract instructions forces the compiler to use separate instructions  for  the
           multiply and add/subtract operations.  This may be desirable in some cases where strict IEEE 754-compliant
           results  are  required: the fused multiply add/subtract instructions do not round the intermediate result,
           thereby producing results with [4mmore[24m bits of precision than specified  by  the  IEEE  standard.   Disabling
           fused  multiply  add/subtract  instructions  also  ensures that the program output is not sensitive to the
           compiler's ability to combine multiply and add/subtract operations.

       [1m-mserialize-volatile[0m
       [1m-mno-serialize-volatile[0m
           When this option is enabled, GCC inserts  "MEMW"  instructions  before  "volatile"  memory  references  to
           guarantee  sequential  consistency.   The default is [1m-mserialize-volatile[22m.  Use [1m-mno-serialize-volatile [22mto
           omit the "MEMW" instructions.

       [1m-mforce-no-pic[0m
           For targets, like GNU/Linux, where all user-mode Xtensa code must be position-independent code (PIC), this
           option disables PIC for compiling kernel code.

       [1m-mtext-section-literals[0m
       [1m-mno-text-section-literals[0m
           These options control the treatment of literal pools.  The default  is  [1m-mno-text-section-literals[22m,  which
           places  literals in a separate section in the output file.  This allows the literal pool to be placed in a
           data RAM/ROM, and it also allows the linker to combine literal pools from separate object files to  remove
           redundant  literals and improve code size.  With [1m-mtext-section-literals[22m, the literals are interspersed in
           the text section in order to keep them as close as possible to their references.  This  may  be  necessary
           for large assembly files.  Literals for each function are placed right before that function.

       [1m-mauto-litpools[0m
       [1m-mno-auto-litpools[0m
           These  options  control  the  treatment of literal pools.  The default is [1m-mno-auto-litpools[22m, which places
           literals in a  separate  section  in  the  output  file  unless  [1m-mtext-section-literals  [22mis  used.   With
           [1m-mauto-litpools  [22mthe  literals  are  interspersed in the text section by the assembler.  Compiler does not
           produce explicit ".literal" directives and loads literals into registers with "MOVI" instructions  instead
           of  "L32R"  to  let  the  assembler  do  relaxation  and  place literals as necessary.  This option allows
           assembler to create several literal pools per function and assemble very big functions, which may  not  be
           possible with [1m-mtext-section-literals[22m.

       [1m-mtarget-align[0m
       [1m-mno-target-align[0m
           When  this  option  is  enabled, GCC instructs the assembler to automatically align instructions to reduce
           branch penalties at  the  expense  of  some  code  density.   The  assembler  attempts  to  widen  density
           instructions  to  align branch targets and the instructions following call instructions.  If there are not
           enough preceding safe density instructions to align a target, no widening is performed.   The  default  is
           [1m-mtarget-align[22m.  These options do not affect the treatment of auto-aligned instructions like "LOOP", which
           the assembler always aligns, either by widening density instructions or by inserting NOP instructions.

       [1m-mlongcalls[0m
       [1m-mno-longcalls[0m
           When  this  option  is  enabled,  GCC  instructs the assembler to translate direct calls to indirect calls
           unless it can determine that the target of a direct call is in the range allowed by the call  instruction.
           This  translation  typically  occurs  for  calls  to  functions  in other source files.  Specifically, the
           assembler translates a direct "CALL" instruction into an "L32R" followed by a  "CALLX"  instruction.   The
           default  is  [1m-mno-longcalls[22m.  This option should be used in programs where the call target can potentially
           be out of range.  This option is implemented in the assembler, not the  compiler,  so  the  assembly  code
           generated  by  GCC  still shows direct call instructions---look at the disassembled object code to see the
           actual instructions.  Note that the assembler uses an indirect call for every cross-file  call,  not  just
           those that really are out of range.

       [1m-mabi=[4m[22mname[0m
           Generate  code  for the specified ABI.  Permissible values are: [1mcall0[22m, [1mwindowed[22m.  Default ABI is chosen by
           the Xtensa core configuration.

       [1m-mabi=call0[0m
           When this option is enabled function parameters are passed in registers "a2" through "a7", registers "a12"
           through "a15" are caller-saved, and register "a15" may be used as a frame pointer.  When this  version  of
           the ABI is enabled the C preprocessor symbol "__XTENSA_CALL0_ABI__" is defined.

       [1m-mabi=windowed[0m
           When  this  option  is enabled function parameters are passed in registers "a10" through "a15", and called
           function rotates register window by 8 registers on entry so that its arguments are found in registers "a2"
           through "a7".  Register "a7" may be used as a frame pointer.  Register window is rotated 8 registers  back
           upon  return.  When this version of the ABI is enabled the C preprocessor symbol "__XTENSA_WINDOWED_ABI__"
           is defined.

       [1m-mextra-l32r-costs=[4m[22mn[0m
           Specify an extra cost of instruction RAM/ROM access  for  "L32R"  instructions,  in  clock  cycles.   This
           affects,  when  optimizing  for  speed,  whether  loading  a  constant  from  literal pool using "L32R" or
           synthesizing the constant from a small one with a couple of arithmetic instructions.  The default value is
           0.

       [4mzSeries[24m [4mOptions[0m

       These are listed under

[1mENVIRONMENT[0m
       This section describes several environment variables that affect how GCC  operates.   Some  of  them  work  by
       specifying directories or prefixes to use when searching for various kinds of files.  Some are used to specify
       other aspects of the compilation environment.

       Note  that  you  can also specify places to search using options such as [1m-B[22m, [1m-I [22mand [1m-L[22m.  These take precedence
       over places specified using environment variables, which in turn take precedence over those specified  by  the
       configuration of GCC.

       [1mLANG[0m
       [1mLC_CTYPE[0m
       [1mLC_MESSAGES[0m
       [1mLC_ALL[0m
           These  environment  variables  control  the way that GCC uses localization information which allows GCC to
           work with different national conventions.  GCC inspects the locale categories [1mLC_CTYPE [22mand [1mLC_MESSAGES  [22mif
           it  has  been  configured  to  do  so.   These locale categories can be set to any value supported by your
           installation.  A typical value is [1men_GB.UTF-8 [22mfor English in the United Kingdom encoded in UTF-8.

           The [1mLC_CTYPE [22menvironment variable specifies character  classification.   GCC  uses  it  to  determine  the
           character  boundaries  in  a  string;  this  is needed for some multibyte encodings that contain quote and
           escape characters that are otherwise interpreted as a string end or escape.

           The [1mLC_MESSAGES [22menvironment variable specifies the language to use in diagnostic messages.

           If the [1mLC_ALL [22menvironment variable is set, it overrides the value of [1mLC_CTYPE [22mand [1mLC_MESSAGES[22m;  otherwise,
           [1mLC_CTYPE  [22mand  [1mLC_MESSAGES  [22mdefault  to  the  value  of  the  [1mLANG [22menvironment variable.  If none of these
           variables are set, GCC defaults to traditional C English behavior.

       [1mTMPDIR[0m
           If [1mTMPDIR [22mis set, it specifies the directory to use for temporary files.  GCC uses temporary files to hold
           the output of one stage of compilation which is to be used as input to the next stage:  for  example,  the
           output of the preprocessor, which is the input to the compiler proper.

       [1mGCC_COMPARE_DEBUG[0m
           Setting [1mGCC_COMPARE_DEBUG [22mis nearly equivalent to passing [1m-fcompare-debug [22mto the compiler driver.  See the
           documentation of this option for more details.

       [1mGCC_EXEC_PREFIX[0m
           If  [1mGCC_EXEC_PREFIX  [22mis  set, it specifies a prefix to use in the names of the subprograms executed by the
           compiler.  No slash is added when this prefix is combined with the name  of  a  subprogram,  but  you  can
           specify a prefix that ends with a slash if you wish.

           If  [1mGCC_EXEC_PREFIX  [22mis  not  set,  GCC  attempts  to figure out an appropriate prefix to use based on the
           pathname it is invoked with.

           If GCC cannot find the subprogram using the specified prefix, it tries looking in the usual places for the
           subprogram.

           The default value of [1mGCC_EXEC_PREFIX [22mis [4mprefix/lib/gcc/[24m where  [4mprefix[24m  is  the  prefix  to  the  installed
           compiler. In many cases [4mprefix[24m is the value of "prefix" when you ran the [4mconfigure[24m script.

           Other prefixes specified with [1m-B [22mtake precedence over this prefix.

           This prefix is also used for finding files such as [4mcrt0.o[24m that are used for linking.

           In  addition,  the prefix is used in an unusual way in finding the directories to search for header files.
           For each of the standard directories whose name normally begins with [1m/usr/local/lib/gcc  [22m(more  precisely,
           with  the  value  of  [1mGCC_INCLUDE_DIR[22m),  GCC  tries  replacing that beginning with the specified prefix to
           produce an alternate directory name.  Thus, with [1m-Bfoo/[22m, GCC searches [4mfoo/bar[24m just before it searches  the
           standard directory [4m/usr/local/lib/bar[24m.  If a standard directory begins with the configured [4mprefix[24m then the
           value of [4mprefix[24m is replaced by [1mGCC_EXEC_PREFIX [22mwhen looking for header files.

       [1mCOMPILER_PATH[0m
           The  value  of  [1mCOMPILER_PATH  [22mis  a  colon-separated  list of directories, much like [1mPATH[22m.  GCC tries the
           directories thus specified when searching for  subprograms,  if  it  cannot  find  the  subprograms  using
           [1mGCC_EXEC_PREFIX[22m.

       [1mLIBRARY_PATH[0m
           The  value of [1mLIBRARY_PATH [22mis a colon-separated list of directories, much like [1mPATH[22m.  When configured as a
           native compiler, GCC tries the directories thus specified when searching for special linker files,  if  it
           cannot  find them using [1mGCC_EXEC_PREFIX[22m.  Linking using GCC also uses these directories when searching for
           ordinary libraries for the [1m-l [22moption (but directories specified with [1m-L [22mcome first).

       [1mLANG[0m
           This variable is used to pass locale information to the compiler.  One way in which  this  information  is
           used  is  to  determine the character set to be used when character literals, string literals and comments
           are parsed in C and C++.  When the compiler is configured to allow  multibyte  characters,  the  following
           values for [1mLANG [22mare recognized:

           [1mC-JIS[0m
               Recognize JIS characters.

           [1mC-SJIS[0m
               Recognize SJIS characters.

           [1mC-EUCJP[0m
               Recognize EUCJP characters.

           If  [1mLANG  [22mis  not  defined,  or if it has some other value, then the compiler uses "mblen" and "mbtowc" as
           defined by the default locale to recognize and translate multibyte characters.

       [1mGCC_EXTRA_DIAGNOSTIC_OUTPUT[0m
           If [1mGCC_EXTRA_DIAGNOSTIC_OUTPUT [22mis set to one of the following values, then additional text will be emitted
           to    stderr    when     fix-it     hints     are     emitted.      [1m-fdiagnostics-parseable-fixits     [22mand
           [1m-fno-diagnostics-parseable-fixits [22mtake precedence over this environment variable.

           [1mfixits-v1[0m
               Emit parseable fix-it hints, equivalent to [1m-fdiagnostics-parseable-fixits[22m.  In particular, columns are
               expressed as a count of bytes, starting at byte 1 for the initial column.

           [1mfixits-v2[0m
               As     "fixits-v1",     but     columns     are    expressed    as    display    columns,    as    per
               [1m-fdiagnostics-column-unit=display[22m.

       Some additional environment variables affect the behavior of the preprocessor.

       [1mCPATH[0m
       [1mC_INCLUDE_PATH[0m
       [1mCPLUS_INCLUDE_PATH[0m
       [1mOBJC_INCLUDE_PATH[0m
           Each variable's value is a list of directories separated by a special character, much like [1mPATH[22m, in  which
           to  look for header files.  The special character, "PATH_SEPARATOR", is target-dependent and determined at
           GCC build time.  For Microsoft Windows-based targets it is a semicolon, and for almost all  other  targets
           it is a colon.

           [1mCPATH  [22mspecifies  a  list of directories to be searched as if specified with [1m-I[22m, but after any paths given
           with [1m-I [22moptions on the command line.  This environment variable is used regardless of  which  language  is
           being preprocessed.

           The remaining environment variables apply only when preprocessing the particular language indicated.  Each
           specifies  a  list  of directories to be searched as if specified with [1m-isystem[22m, but after any paths given
           with [1m-isystem [22moptions on the command line.

           In all these variables, an empty element instructs the compiler to search its current  working  directory.
           Empty  elements  can  appear  at  the  beginning or end of a path.  For instance, if the value of [1mCPATH [22mis
           ":/special/include", that has the same effect as [1m-I. -I/special/include[22m.

       [1mDEPENDENCIES_OUTPUT[0m
           If this variable is set, its value specifies how to output dependencies for Make based on  the  non-system
           header files processed by the compiler.  System header files are ignored in the dependency output.

           The value of [1mDEPENDENCIES_OUTPUT [22mcan be just a file name, in which case the Make rules are written to that
           file,  guessing the target name from the source file name.  Or the value can have the form [4mfile[24m [4mtarget[24m, in
           which case the rules are written to file [4mfile[24m using [4mtarget[24m as the target name.

           In other words, this environment variable is equivalent to combining the options  [1m-MM  [22mand  [1m-MF[22m,  with  an
           optional [1m-MT [22mswitch too.

       [1mSUNPRO_DEPENDENCIES[0m
           This  variable  is  the  same  as [1mDEPENDENCIES_OUTPUT [22m(see above), except that system header files are not
           ignored, so it implies [1m-M [22mrather than [1m-MM[22m.  However, the dependence on the main input file is omitted.

       [1mSOURCE_DATE_EPOCH[0m
           If this variable is set, its value specifies a UNIX timestamp to be used in  replacement  of  the  current
           date  and  time  in  the  "__DATE__"  and  "__TIME__"  macros,  so  that  the  embedded  timestamps become
           reproducible.

           The value of [1mSOURCE_DATE_EPOCH [22mmust be a UNIX timestamp, defined as the number of seconds (excluding  leap
           seconds)  since  01  Jan  1970  00:00:00  represented  in  ASCII; identical to the output of "date +%s" on
           GNU/Linux and other systems that support the %s extension in the "date" command.

           The value should be a known timestamp such as the last modification time of the source or package  and  it
           should be set by the build process.

[1mBUGS[0m
       For instructions on reporting bugs, see <[1mhttps://bugs.archlinux.org/[22m>.

[1mFOOTNOTES[0m
       1.  On  some  systems, [1mgcc -shared [22mneeds to build supplementary stub code for constructors to work.  On multi-
           libbed systems, [1mgcc -shared [22mmust select the correct support libraries to link against.  Failing to  supply
           the  correct  flags  may  lead to subtle defects.  Supplying them in cases where they are not necessary is
           innocuous.  [1m-shared [22msuppresses the addition of startup code to alter  the  floating-point  environment  as
           done with [1m-ffast-math[22m, [1m-Ofast [22mor [1m-funsafe-math-optimizations [22mon some targets.

[1mSEE ALSO[0m
       [1mgpl[22m(7),  [1mgfdl[22m(7), [1mfsf-funding[22m(7), [1mcpp[22m(1), [1mgcov[22m(1), [1mas[22m(1), [1mld[22m(1), [1mgdb[22m(1) and the Info entries for [4mgcc[24m, [4mcpp[24m, [4mas[24m,
       [4mld[24m, [4mbinutils[24m and [4mgdb[24m.

[1mAUTHOR[0m
       See the Info entry for [1mgcc[22m, or  <[1mhttps://gcc.gnu.org/onlinedocs/gcc/Contributors.html[22m>,  for  contributors  to
       GCC.

[1mCOPYRIGHT[0m
       Copyright (c) 1988-2023 Free Software Foundation, Inc.

       Permission  is  granted  to  copy,  distribute  and/or  modify  this  document under the terms of the GNU Free
       Documentation License, Version 1.3 or any later version published by the Free Software  Foundation;  with  the
       Invariant Sections being "GNU General Public License" and "Funding Free Software", the Front-Cover texts being
       (a)  (see  below),  and with the Back-Cover Texts being (b) (see below).  A copy of the license is included in
       the [1mgfdl[22m(7) man page.

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.

gcc-13.2.1                                            2023-08-01                                               [4mGCC[24m(1)
