{
	"name": "fly",
	"version": "1.2.8",
	"fileTypes": [
		"fly"
	],
	"scopeName": "source.fly",

	"foldingStartMarker": "\\[\\s*$",
	"foldingStopMarker": "^\\s*\\]",

	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#annotations"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#constants-and-special-vars"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#strings"
		}
	],

	"repository": {
		"flydoc": {
			"patterns": [
				{
					"match": "(\\[.*?\\])",
					"captures": {
						"0": {
							"name": "variable.name.source.fly"
						}
					}
				},
				{
					"match": "^ {4,}(?![ \\*]).*",
					"captures": {
						"0": {
							"name": "variable.name.source.fly"
						}
					}
				},
				{
					"contentName": "variable.other.source.fly",
					"begin": "```.*?$",
					"end": "```"
				},
				{
					"match": "(`[^`]+?`)",
					"captures": {
						"0": {
							"name": "variable.other.source.fly"
						}
					}
				},
				{
					"match": "(\\* ((    ).*))$",
					"captures": {
						"2": {
							"name": "variable.other.source.fly"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.empty.fly",
					"match": "=>",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.fly"
						}
					}
				},
				{
					"include": "#comments-doc-oldschool"
				},
				{
					"include": "#comments-doc"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-doc-oldschool": {
			"patterns": [
				{
					"name": "comment.block.documentation.fly",
					"begin": "==>",
					"end": "<==",
					"patterns": [
						{
							"include": "#comments-doc-oldschool"
						},
						{
							"include": "#comments-block"
						},
						{
							"include": "#flydoc"
						}
					]
				}
			]
		},
		"comments-doc": {
			"patterns": [
				{
					"name": "comment.block.documentation.fly",
					"begin": "==>",
					"while": "^\\<==",
					"patterns": [
						{
							"include": "#flydoc"
						}
					]
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"include": "#comments-block"
				},
				{
					"match": "((=>).*)$",
					"captures": {
						"1": {
							"name": "comment.line.double-slash.fly"
						}
					}
				}
			]
		},
		"comments-block": {
			"patterns": [
				{
					"name": "comment.block.fly",
					"begin": "==>",
					"end": "<==",
					"patterns": [
						{
							"include": "#comments-block"
						}
					]
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"name": "storage.type.annotation.fly",
					"match": "@[a-zA-Z]+"
				}
			]
		},
		"constants-and-special-vars": {
			"patterns": [
				{
					"name": "constant.language.fly",
					"match": "(?<!\\$)\\b(true|false|null)\\b(?!\\$)"
				},
				{
					"name": "variable.language.fly",
					"match": "(?<!\\$)\\b(self|super)\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.fly",
					"match": "(?<!\\$)\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))|(0(b|B)[0-9]+)|(0(o|O)[0-9]+)?)\\b(?!\\$)"
				},
				{
					"include": "#function-identifier"
				}

			]
		},
		"function-identifier": {
			"patterns": [
				{
					"match": "([_$]*[a-z][a-zA-Z0-9_$]*)(<(?:[a-zA-Z0-9_$<>?]|,\\s*|\\s+extends\\s+)+>)?[!?]?\\(",
					"captures": {
						"1": {
							"name": "entity.name.function.fly"
						},
						"2": {
							"patterns": [
								{
									"include": "#type-args"
								}
							]
						}
					}
				}
			]
		},
		"type-args": {
			"begin": "(<)",
			"end": "(>)",
			"beginCaptures": {
				"1": {
					"name": "other.source.fly"
				}
			},
			"endCaptures": {
				"1": {
					"name": "other.source.fly"
				}
			},
			"patterns": [
				{
					"match": ","
				},
				{
					"name": "keyword.declaration.fly",
					"match": "extends"
				},
				{
					"include": "#comments"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.catch-exception.fly",
					"match": "(?<!\\$)\\b(try|catch)\\b(?!\\$)"
				},
				{
					"name": "keyword.control.fly",
					"match": "(?<!\\$)\\b(break|continue|elif|else|for|if|while)\\b(?!\\$)"
				},
				{
					"name": "keyword.control.fly",
					"match": "(?<!\\$)\\raise\\b(?!\\$)"
				},
				{
					"name": "keyword.control.return.fly",
					"match": "(?<!\\$)\\b(return)\\b(?!\\$)"
				},
				{
					"name": "keyword.declaration.fly",
					"match": "(?<!\\$)\\b(fun|class)\\b(?!\\$)"
				},
				{
					"name": "storage.type.primitive.fly",
					"match": "(?<!\\$)\\b(?:var)\\b(?!\\$)"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.bitwise.fly",
					"match": "(<<|>>>?|~|\\^|\\||&)"
				},
				{
					"name": "keyword.operator.comparison.fly",
					"match": "(==|!=|<=?|>=?)"
				},
				{
					"name": "keyword.operator.assignment.fly",
					"match": "(=)"
				},
				{
					"name": "keyword.operator.increment-decrement.fly",
					"match": "(\\-\\-|\\+\\+)"
				},
				{
					"name": "keyword.operator.arithmetic.fly",
					"match": "(\\-|\\+|\\*|\\/|\\~\\/|%)"
				},
				{
					"name": "keyword.operator.logical.fly",
					"match": "(!|&&|\\|\\|)"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"name": "variable.parameter.fly",
					"match": "[a-zA-Z0-9_]+"
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"string-interp": {
			"patterns": [
				{
					"name": "meta.embedded.expression.fly",
					"match": "\\$([a-zA-Z0-9_]+)",
					"captures": {
						"1": {
							"name": "variable.parameter.fly"
						}
					}
				},
				{
					"name": "meta.embedded.expression.fly",
					"begin": "\\$\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "constant.character.escape.fly",
					"match": "\\\\."
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.interpolated.double.fly",
					"begin": "(?<!\\|r)\"",
					"end": "\"",
					"patterns": [
						{
							"name": "invalid.string.newline",
							"match": "\\n"
						},
						{
							"include": "#string-interp"
						}
					]
				},
				{
					"name": "string.quoted.double.fly",
					"begin": "r\"",
					"end": "\"",
					"patterns": [
						{
							"name": "invalid.string.newline",
							"match": "\\n"
						}
					]
				},
				{
					"name": "string.interpolated.single.fly",
					"begin": "(?<!\\|r)'",
					"end": "'",
					"patterns": [
						{
							"name": "invalid.string.newline",
							"match": "\\n"
						},
						{
							"include": "#string-interp"
						}
					]
				},
				{
					"name": "string.quoted.single.fly",
					"begin": "r'",
					"end": "'",
					"patterns": [
						{
							"name": "invalid.string.newline",
							"match": "\\n"
						}
					]
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.comma.fly",
					"match": ","
				},
				{
					"name": "punctuation.terminator.fly",
					"match": ";"
				},
				{
					"name": "punctuation.dot.fly",
					"match": "\\."
				}
			]
		}
	}
}