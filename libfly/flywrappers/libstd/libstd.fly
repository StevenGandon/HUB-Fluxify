var libname_std = "/usr/lib64/libfly.so"
var libstd = dllopen libname_std

var wout_sym = getsym libstd "wout"
var werr_sym = getsym libstd "werr"
var strlen_sym = getsym libstd "ft_len"
var to_str_sym = getsym libstd "to_str"
var exit_sym = getsym libstd "quit"

var dupli_sym = getsym libstd "duplicate_process"
var getpid_sym = getsym libstd "get_pid"
var print_sym = getsym libstd "print"
var read_file_sym = getsym libstd "read_file"
var write_file_sym = getsym libstd "write_file"
var run_cmd_sym = getsym libstd "run_command"
var read_stdin_sym = getsym libstd "read_stdin"
var absolute_path_sym = getsym libstd "get_absolute_path"

fun get_pid() [
    return ccall getpid_sym
]

fun duplicate_process() [
    return ccall dupli_sym
]

fun print(text, stdway, flush) [
    return ccall print_sym text stdway flush
]

fun read_file(file) [
    return ccall read_file_sym file
]

fun write_file(file, text) [
    return ccall write_file_sym file text
]

fun run_command(cmd) [
    return ccall run_cmd_sym cmd
]

fun read_stdin(str, size) [
    return ccall read_stdin_sym str size
]

fun get_absolute_path(path) [
    return ccall absolute_path_sym path
]

fun quit(code) [
    return ccall exit_sym code
]

fun strlen(text) [
    return ccall strlen_sym text
]

fun wout(text, flush) [
    return ccall wout_sym text flush
]

fun werr(text, flush) [
    return ccall werr_sym text flush
]

fun to_str(num) [
    return ccall to_str_sym num
]
