#!/bin/python3

"""
-- EPITECH PROJECT, 2024
-- Hub project
-- File description:
-- fcc
"""

from sys import exit, argv, stderr
from genericpath import isfile
from src.floff import *
from src.fcc.compiler import Compiler, FCCError
from src.fcc.errors import *
from src.fcc.warnings import *
from src.cli.parser import Parser, parse_args
from src.cli.help import show_help

def read_code(file_path: str) -> str:
    data: str = None

    if (not isfile(file_path)):
        return (None)
    with open(file_path, 'r', errors="replace") as fp:
        data: str = fp.read()
    return (data)

def main() -> int:
    code: str = None
    return_status: int = 0

    if len(argv) < 2:
        print("Usage: fcc <filename>.fly")
        return (84)
    parser: Parser = parse_args(argv[1:])
    if parser.stop:
        for err in parser.whyStop:
            stderr.write(err)
        return (84)
    if parser.options['-h'] or parser.options['-help'] or parser.options['-?']:
        return show_help()
    for file in argv[1:]:
        code: str = read_code(file)

        if (not code):
            return_status: int = 84
            continue

        compiler: Compiler = Compiler(code, [], [invalid_token_error, unnamed_variable_error, missing_operand_error], file)
        compiler.parse()
        compiler.tokenize()
        compiler.compile()

        if (any(map(lambda x: isinstance(x, FCCError), compiler.debug))):
            return_status: int = 84

        for item in compiler.debug:
            print(item)

        print(FloffAuto.from_file("compile_test.flo"))
    return (return_status)


if __name__ == "__main__":
    exit(main())
