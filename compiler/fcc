#!/bin/python3

"""
-- EPITECH PROJECT, 2024
-- Hub project
-- File description:
-- fcc
"""

from sys import exit, argv, stderr
from typing import Iterable
from genericpath import isfile
from src.floff import *
from src.fcc.compiler import Compiler, FCCError
from src.fcc.errors import *
from src.fcc.warnings import *
from src.cli.parser import Parser, parse_args
from src.cli.help import show_help

def read_code(file_path: str) -> str:
    data: str = None

    if (not isfile(file_path)):
        return (None)
    with open(file_path, 'r', errors="replace") as fp:
        data: str = fp.read()
    return (data)

ERRORS = {
    "invalid_syntax": invalid_token_error,
    "missing_operand": missing_operand_error,
    "unnamed_variable": unnamed_variable_error,
    "all": (invalid_token_error, missing_operand_error, unnamed_variable_error)
}

WARNINGS = {
    "all": tuple()
}

def main() -> int:
    code: str = None
    return_status: int = 0

    if len(argv) < 2:
        return show_help(error=True)
    parser: Parser = parse_args(argv[1:])
    if parser.options['-h'] or parser.options['-help'] or parser.options['-?']:
        return show_help()
    if parser.stop:
        for err in parser.whyStop:
            stderr.write(err)
        return (84)

    active_error_list: list = []
    active_warning_list: list = []
    invalid_flags = False

    for item in parser.errors:
        if (item in ERRORS and item not in active_error_list):
            if isinstance(ERRORS[item], Iterable):
                active_error_list.extend(ERRORS[item])
            else:
                active_error_list.append(ERRORS[item])
            continue
        if (item.startswith("no") and item[2:] in ERRORS):
            active_error_list = list(filter(lambda x: x != ERRORS[item[2:]], active_error_list))
            continue
        stderr.write(f"[-] Invalid error flag -E{item}\n")
        invalid_flags = True

    for item in parser.warns:
        if (item in WARNINGS and item not in active_warning_list):
            if isinstance(WARNINGS[item], Iterable):
                active_warning_list.extend(WARNINGS[item])
            else:
                active_warning_list.append(WARNINGS[item])
            continue
        if (item.startswith("no") and item[2:] in WARNINGS):
            active_warning_list = list(filter(lambda x: x != WARNINGS[item[2:]], active_warning_list))
            continue
        stderr.write(f"[-] Invalid warning flag -W{item}\n")
        invalid_flags = True

    if (invalid_flags):
        return (84)

    for file in parser.files:
        code: str = read_code(file)

        if (not code):
            return_status: int = 84
            continue

        compiler: Compiler = Compiler(code, active_warning_list, active_error_list, file)
        compiler.parse()
        compiler.tokenize()
        compiler.compile()

        if (any(map(lambda x: isinstance(x, FCCError), compiler.debug))):
            return_status: int = 84

        for item in compiler.debug:
            print(item)

        # print(FloffAuto.from_file("compile_test.flo"))
    return (return_status)


if __name__ == "__main__":
    exit(main())
